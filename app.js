/**
 * 
 * app.js - All code for the ABC Transcription Tools
 *
 * Project repo at: https://github.com/seisiuneer/abctools
 * 
 * 
 * MIT License
 * 
 * Copyright (c) 2025 Michael Eskin
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * 
 **/

// Version number for the settings dialog
var gVersionNumber="2666_081425_1600";

var gMIDIInitStillWaiting = false;

var gShowAdvancedControls = false;
var gStripAnnotations = false;
var gStripTextAnnotations = false;
var gStripChords = false;
var gStripTab = false;
var gStripOrnaments = false;

var STAFFSPACEMIN = 0;
var STAFFSPACEDEFAULT = 10;
var STAFFSPACEMAX = 200;
var STAFFSPACEOFFSET = 40;
var gStaffSpacing = STAFFSPACEOFFSET + STAFFSPACEDEFAULT;

var gIsIOS = false;
var gIsIPad = false;
var giPadTwoColumn = false;
var gIsIPhone = false;
var gIsSafari = false;
var gIsChrome = false;
var gIsAndroid = false;

var gUIHidden = false;
var gUIHiddenPlayerEnabled = false;
var gUIHiddenAllowPlay = true;
var gUIHiddenClickTimeout = null;
var gUIHiddenTuneIndex = 0;
const UIHiddenTimerDelay = 300;
var gUIEmbeddedPressTimer = null;
const gUIEmbeddedPressTimerDelay = 500;

var gPlayerClickTimeout = null;
const PlayerTimerDelay = 300;
var gPlayerPressTimer = null;
const gPlayerPressTimerDelay = 500;
var gPlayerTouchStartX = 0;
var gPlayerTouchStartY = 0;
var gPlayerTouchStartTime = 0;
const gPlayerSwipeThreshold = 50; // px

var gPlayerScaling = 50;

var gRenderingPDF = false;

var gTheQRCode = null;

// Maximum number of characters that can be encoded in a QR Code
var MAXQRCODEURLLENGTH = 2300;

// Maximum length of an all tune titles string before truncation
var ALLTITLESMAXLENGTH = 70;

// Font size for PDF headers and footers
var HEADERFOOTERFONTSIZE = 12.0;

// Font size for PDF QR code caption
var QRCODECAPTIONPDFFONTSIZE = 12.0;

var gShowShareControls = false;

var gAllowSave = false;

var gAllowURLSave = false;
var gAllowQRCodeSave = false

var gShowAllControls = false;

var gAllowControlToggle = false;

var gAllowFilterAnnotations = false;
var gAllowFilterText = false;
var gAllowFilterChords = false;
var gAllowFilterTab = false;
var gAllowFilterOrnaments = false;

var gCapo = 0;

var gIsMaximized = false;

var gABCFromFile = false;

var gAllowCopy = false;

var gAllowPDF = false;

var gAllowWebExport = false;

var gDisplayedName = "";

var gShowTabNames = true;
var gAllowShowTabNames = false;

// Has the tin whistle font been loaded?
var gWhistleFontPrepared = false;

// Has the recorder font been loaded?
var gRecorderFontPrepared = false;

// German recorder fingering?
var gRecorderFingeringGerman = false;

// Debounce time for text area change render requests
var DEBOUNCEMS = 280;

// Debounce time for tune autoscroll
var AUTOSCROLLDEBOUNCEMS = 200;

// For tune autoscroll state
var gLastAutoScrolledTune = -1;

// Last clicked tune
var gLastClickedTune = -1;

// Top bar showing?
var gTopBarShowing = true;

// Current tune being rendered
var gCurrentTune = 0;

// Last tune count
var gTotalTunes = 0;

// Current tab display
var gCurrentTab = "noten";

// Did we just do a paste or other operation to programatically change the text area?
var gForceFullRender = false;

// Is this the first render
var gIsFirstRender = true;

// Are we in single or dual column display mode?
var gIsOneColumn = true;

// For handling clicks in notation when maximized
var	gGotRenderDivClick = false;
var gRenderDivClickOffset = -1;

// For local storage of settings
var gLocalStorageAvailable = false;

// PDF oversampling for PDF rendering
var gPDFQuality = 0.75;
var gQualitaet = 1200; 

// PDF font
var gPDFFont = "Times";
var gPDFFontStyle = "";

// PDF orientation
var gPDFOrientation = "portrait";
var gPDFPaperSize = "letter";
var gPageWidth = 535;
var gRenderPixelRatio = 2.0;

// PDF hidden titles
var gPDFIncludeHiddenTitles = true;

// Automatic page number offsets
var gPDFAutoPageNumbers = false;

var gPDFFileName = "";

// For injected hidden text
var gPDFHiddenTextX;
var HIDDENPDFTEXTSIZE = 18.0;

// Include page links on tunebook index pages
var gIncludePageLinks = true;

// Force PDF file name
var gDoForcePDFFilename = false;
var gForcePDFFilename = "";

// Add link back to PDF index or TOC
var gAddTOCLinkback = false;
var gAddIndexLinkback = false;

// Links to add at finalize time
var gTuneHyperlinks = [];
var gAddTheSessionHyperlinks = false;
var gAddPlaybackHyperlinks = false;
var gAddPlaybackHyperlinksIncludePrograms = false;
var gPlaybackHyperlinkMelodyProgram = "";
var gPlaybackHyperlinkBassProgram = "";
var gPlaybackHyperlinkChordProgram = "";
var gAddPlaybackHyperlinkVolumes = false;
var gPlaybackHyperlinkBassVolume = "";
var gPlaybackHyperlinkChordVolume = "";

var gPlaybackHyperlinkSoundFont = "";
var gAddTunebookPlaybackHyperlinks = false;

var gAddAllFonts = false;

// Lock out editing on injected playback PDF links
var gInjectEditDisabled = false;

// If true, never show the zoom button
var gDisableEditFromPlayLink = false;

// Full screen view scaling (percentage)
var gFullScreenScaling = 50;

// Anglo concertina button names
var gAngloButtonNames = [];

// Fonts used for rendering
var gRenderingFonts = {
	titlefont: "Palatino 18",
	subtitlefont: "Palatino 13",
	infofont: "Palatino 13",
	partsfont: "Palatino 13",
	tempofont: "Palatino 13",
	textfont: "Palatino 13",
	composerfont: "Palatino 13",
	annotationfont: "Palatino 13",
	gchordfont: "Verdana 12",
	vocalfont: "Palatino 13",
	wordsfont: "Palatino 13",
	tablabelfont: "Trebuchet MS 14",
	tabnumberfont: "Arial 12",
	tabgracefont: "Arial 8",
	historyfont: "Times New Roman 14",
	voicefont: "Times New Roman 13"
}

// Mp3 bitrate
var gMP3Bitrate = 224;

// Soundfont to use
var gDefaultSoundFont = "https://paulrosen.github.io/midi-js-soundfonts/FluidR3_GM/";
var gTheActiveSoundFont = gDefaultSoundFont;

// Bodhran pitch
var gDefaultBodhranPitch = "a";
var gTheActiveBodhranPitch = gDefaultBodhranPitch;

// Banjo style
var gDefaultBanjoStyle = "2";
var gTheActiveBanjoStyle = gDefaultBanjoStyle;

// Disable highlighting on all but the first voice
var gOnlyHighlightV1 = false;

// Disable highlighting on playback
var gDisablePlayHighlight = false;

// Tuning array
var gVoiceTuning = null;

// Allow player to autoscroll
var gAutoscrollPlayer = true;
var gAutoscrollSmooth = true;

// Auto-swing hornpipes
var gAutoSwingHornpipes = true;

var gAutoSwingFactor = 0.25;

var gAllSwingHornpipesRequested = false;
var gAllSwingHornpipesSwingFactor = 0.25;
var gAllNoSwingHornpipesRequested = false;

// Use the custom GM sounds for dulcimer, accordion, flute, whistle, banjo, bagpipe, fiddle, and melodic tom
var gUseCustomGMSounds = true;
var gOverrideCustomGMSounds = false;
var gCustomGMSoundsOverride = false;

// Use count for tip jar reminder
var gTipJarCount = 0;

// Save the editor state in a snapshot at exit time
var gSaveLastAutoSnapShot = false;

// Notation incipits columns
var gIncipitsColumns = 1;

// Using Comhaltas naming for notes display
var gUseComhaltasABC = false;

// Used for share link override system for Comhaltas 
var gForceComhaltasABC = false;

// Zoom banner has been hidden
var gZoomBannerHidden = false;
var gZoomBannerAlwaysHidden = false;

// Initial text box width
var gInitialTextBoxWidth;
var gInitialTextBoxContainerWidth;
var gInitialTextBoxContainerLeft;
var gForceInitialTextBoxRecalc = false;
var gGotWindowResizeWhileMaximized = false;
var gNotationLeftMarginBeforeMaximize = "auto";

var gTheNotation = document.getElementById("notation-holder");

var gAllowMIDIInput = false;
var gMIDIChromatic = false;

var gIsFromShare = false;

// Have there been changes since last open?
var gIsDirty = false;

// Is this the first run?
var gIsFirstRun = false;

// Raw mode?
var gAllowRawMode = false;
var gRawMode = false;
var gRawVisual = null;
var gRawIsDragging = false;
var gRawLastIndex = -1;
var gRawFirstTime = true;
var gRawHighlightColor = "#F00000";

// Left-handed player status
var gPlayerStatusOnLeft = false;

// Default roll_2 and roll_2 parameters
// Equivalent to:
//
//%roll_2_params 0.95 0.8 1.0 0.75 0.9 1.0 0.75 1.0
//%roll_3_params 1.45 0.6 1.0 0.75 0.9 1.0 0.75 1.0
//
var gRoll2DefaultParams = "0.95 0.8 1.0 0.75 0.9 1.0 0.75 1.0";
var gRoll3DefaultParams = "1.45 0.6 1.0 0.75 0.9 1.0 0.75 1.0";

var gDisableNotationRendering = false;

var gDisableSelectedPlay = false;

var gMixedNotationAndQRCode = false;

// For showing and hiding features
var	gFeaturesShowSearch = true;
var	gFeaturesShowExamples = true;
var	gFeaturesShowTemplates = true;
var	gFeaturesShowTablatures = true;
var gFeaturesShowExplorers = true;
var gFeaturesShowTabButtons = true;
var gFeaturesShowBagpipeDrones = true;

// Force an update of local storage for the tab
var gForceTabSave = false;

// ABC Editor font size
var gABCEditorFontsize = 13;

// Showing diagnostics?
var gShowDiagnostics = false;

// Showing rendering progress in the Javascript console
var gShowABCJSRenderProgress = false;

// Reverb string to inject
var gReverbString = "chamber 0.95 0.05";

// TinyURL API override
var gDoTinyURLAPIKeyOverride = false;
var gTinyURLAPIKeyOverride = "";
var gTinyURLCount = 0;

// MIDI import warning delivered
var gMIDIImportWarned = false;

// Show DGDAE tab
var gShowDGDAETab = false;

// Show CGDA tab
var gShowCGDATab = false;

// Show Recorder tab
var gShowRecorderTab = false;

// Confirm clear
var gConfirmClear = true;

// Open share links in editor
var gOpenInEditor = false;

// Clean smartquotes on open or paste
var gCleanSmartQuotes = true;

// Autoscroll target percentage
var gAutoscrollTarget = 66;

// Suppress the Quick Player
var gSuppressQuickPlayer = false;

// Is there an update available?
var gUpdateAvailable = false;
var gUpdateVersion = gVersionNumber;

// Spinner timeout
var gSpinnerDelay = 25;

// Force Android
var gForceAndroid = false;

// Disable Android
var gDisableAndroid = false;

// Are the Chinese Noto fonts loaded?
var gNotoSansLoaded = false;
var gNotoSerifLoaded = false;

// Are we in Presentation mode?
var gInPresentationMode = false;

// Is MIDI input muted?
var gMIDIMute = false;

// Last warp value
var gLastWarp = 100;
var gLastPlayerRepeat = false;

// Use wide playback cursor?
var gUseWidePlayCursor = true;

// Prevent import operation while one is in progress
var gImportRunning = false;
var gImportAccumulator = [];
var gImportCancelRequested = false;

// Global reference to the ABC editor
var gTheABC = document.getElementById("abc");

//
// Replacements getters and setters for legacy hidden PDF formatting select code
//

var gPDFFormat = "one";
var gPageNumbers = "none";
var gFirstPage = "yes";

function setPDFFormat(val){
	gPDFFormat = val;
}

function getPDFFormat(){
	return gPDFFormat;
}

function setPageNumbers(val){
	gPageNumbers = val;
}

function getPageNumbers(){
	return gPageNumbers;
}

function setFirstPage(val){
	gFirstPage = val;
}

function getFirstPage(){
	return gFirstPage;
}

//
// Tune utility functions
// 

function loadScript(url, callback) {
  const script = document.createElement('script');
  script.src = url;
  script.type = 'text/javascript';
  script.onload = () => {
    console.log(`${url} loaded successfully`);
    if (callback) callback();
  };
  script.onerror = () => {
    console.error(`Failed to load script: ${url}`);
    if (callback) callback();
  };
  document.head.appendChild(script);
}

function replaceEscapedDiacriticals(str) {
  const diacriticMap = {
    "\\'A": "Á", "\\'E": "É", "\\'I": "Í", "\\'O": "Ó", "\\'U": "Ú",
    "\\'a": "á", "\\'e": "é", "\\'i": "í", "\\'o": "ó", "\\'u": "ú",
    "\\`A": "À", "\\`E": "È", "\\`I": "Ì", "\\`O": "Ò", "\\`U": "Ù",
    "\\`a": "à", "\\`e": "è", "\\`i": "ì", "\\`o": "ò", "\\`u": "ù",
    '\\"A': "Ä", '\\"E': "Ë", '\\"I': "Ï", '\\"O': "Ö", '\\"U': "Ü",
    '\\"a': "ä", '\\"e': "ë", '\\"i': "ï", '\\"o': "ö", '\\"u': "ü",
    "\\~N": "Ñ", "\\~n": "ñ",
    "\\^A": "Â", "\\^E": "Ê", "\\^I": "Î", "\\^O": "Ô", "\\^U": "Û",
    "\\^a": "â", "\\^e": "ê", "\\^i": "î", "\\^o": "ô", "\\^u": "û",
    "\\cC": "Ç", "\\cc": "ç"
  };

  return str.replace(/\\['"`~^c]["A-Za-z]/g, match => diacriticMap[match] || match);
}


// Sort routine for tags that may contain diacriticals
function customSortTagWithDiacriticals(a, b) {

  // Step 1: Compare ignoring accents and case
  const baseCompare = a.tag.localeCompare(b.tag, 'en', { sensitivity: 'base' });
  if (baseCompare !== 0) return baseCompare;

  // Step 2: Break tie using full sensitivity (accents and case)
  const accentCompare = a.tag.localeCompare(b.tag, 'en', {
    sensitivity: 'variant',
    caseFirst: 'lower' 
  });

  return accentCompare;

}

// Sort routine for names that may contain diacriticals
function customSortNameWithDiacriticals(a, b) {

  const extractLeadingNumber = (str) => {
    const match = str.match(/^(\d+)\.\s*/);
    return match ? parseInt(match[1], 10) : null;
  };

  const numA = extractLeadingNumber(a.name);
  const numB = extractLeadingNumber(b.name);

  // Step 1: If both have leading numbers, compare numerically
  if (numA !== null && numB !== null) {
    if (numA !== numB) return numA - numB;
  } else if (numA !== null) {
    return -1; // a comes before b
  } else if (numB !== null) {
    return 1; // b comes before a
  }

  // Step 1: Compare ignoring accents and case
  const baseCompare = a.name.localeCompare(b.name, 'en', { sensitivity: 'base' });
  if (baseCompare !== 0) return baseCompare;

  // Step 2: Break tie using full sensitivity (accents and case)
  const accentCompare = a.name.localeCompare(b.name, 'en', {
    sensitivity: 'variant',
    caseFirst: 'lower' 
  });

  return accentCompare;

}

// Sort routine for titles that may contain diacriticals
function customSortTitleWithDiacriticals(a, b) {

  const extractLeadingNumber = (str) => {
    const match = str.match(/^(\d+)\.\s*/);
    return match ? parseInt(match[1], 10) : null;
  };

  const numA = extractLeadingNumber(a.title);
  const numB = extractLeadingNumber(b.title);

  // Step 1: If both have leading numbers, compare numerically
  if (numA !== null && numB !== null) {
    if (numA !== numB) return numA - numB;
  } else if (numA !== null) {
    return -1; // a comes before b
  } else if (numB !== null) {
    return 1; // b comes before a
  }

  // Step 1: Compare ignoring accents and case
  const baseCompare = a.title.localeCompare(b.title, 'en', { sensitivity: 'base' });
  if (baseCompare !== 0) return baseCompare;

  // Step 2: Break tie using full sensitivity (accents and case)
  const accentCompare = a.title.localeCompare(b.title, 'en', {
    sensitivity: 'variant',
    caseFirst: 'lower' 
  });

  return accentCompare;

}

// Setup event handler for mobile embedded use
function SetupEmbeddedMobileEventHanders(el){
	
	el.addEventListener('touchstart', (e) => {
		
		gUIEmbeddedPressTimer = setTimeout(() => {

			if (gUIHiddenPlayerEnabled){
				
				// Long press detected, rewind play
				const button = document.querySelector('button.abcjs-midi-reset');

				if (button) {

					button.click();

				}
			}

			gUIEmbeddedPressTimer = null;

		}, gUIEmbeddedPressTimerDelay); 
	});

	const touchEventsToCancel = ['touchend', 'touchmove', 'touchcancel'];

	touchEventsToCancel.forEach(touchEvent => {

		el.addEventListener(touchEvent, (e) => {

			clearTimeout(gUIEmbeddedPressTimer);
	
			gUIEmbeddedPressTimer = null;
	
		});
	});

	el.addEventListener('contextmenu', (e) => {

		e.preventDefault();

	});
}


// Set up the click and double click handlers for the players
function SetupPlayerEventHandlers(){

	var elem = document.getElementById("playerholder");

	if (elem){

		if (isPureDesktopBrowser()){

			elem.title = "Double-click to play/pause. Shift-click to rewind playback.";

		}
		else{

			elem.addEventListener('touchstart', (e) => {

				// Capture information for swipe detect
				const touch = e.touches[0];
				gPlayerTouchStartX = touch.clientX;
				gPlayerTouchStartY = touch.clientY;
				gPlayerTouchStartTime = Date.now();

				gPlayerPressTimer = setTimeout(() => {
					
					// Long press detected, rewind play
					const button = document.querySelector('button.abcjs-midi-reset');

					if (button) {

						button.click();

					}

					gPlayerPressTimer = null;

				}, gPlayerPressTimerDelay);

			});

			elem.addEventListener('touchmove', (e) => {

				clearTimeout(gPlayerPressTimer);
		
				gPlayerPressTimer = null;
		
			});

			elem.addEventListener('touchend', (e) => {

				// Check for horizontal swipe
				const touch = e.changedTouches[0];
				const deltaX = touch.clientX - gPlayerTouchStartX;
				const deltaY = touch.clientY - gPlayerTouchStartY;
				const timeElapsed = Date.now() - gPlayerTouchStartTime;

				clearTimeout(gPlayerPressTimer);

				gPlayerPressTimer = null;

				// Check for horizontal swipe
				if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > gPlayerSwipeThreshold && timeElapsed < 1000) {
					if (deltaX > 0) {
						// Swipe right detected, go to next tune
						const button = document.getElementById('abcplayer_previousbutton');

						if (button) {

							button.click();

						}
					} else {
						// Swipe right detected, go to next tune
						const button = document.getElementById('abcplayer_nextbutton');

						if (button) {

							button.click();

						}
					}
				}

			});

			elem.addEventListener('touchcancel', (e) => {

				clearTimeout(gPlayerPressTimer);

				gPlayerPressTimer = null;

			});

			elem.addEventListener('contextmenu', (e) => {

				e.preventDefault();
				
			});

		}

		gPlayerClickTimeout = null;

		elem.onclick = function(e){

			if (gPlayerClickTimeout) {

				clearTimeout(gPlayerClickTimeout);

				gPlayerClickTimeout = null;

				// Click the play/pause button
				const button = document.querySelector('button.abcjs-midi-start');

				if (button) {

					button.click();

				}

			}
			else{

				gPlayerClickTimeout = setTimeout(() => {

					if (isPureDesktopBrowser()){

						// Shift click rewinds
						if (e.shiftKey) {

							const button = document.querySelector('button.abcjs-midi-reset');

							if (button) {

								button.click();

							}

						}
					}

					gPlayerClickTimeout = null;

				},PlayerTimerDelay);

	        }
	    }
	}
}

// Normalize blank linkes for tab generators
function normalizeBlankLines(text) {
  return text
    .replace(/\n{3,}/g, '\n\n')    // Replace 3 or more consecutive newlines with just 2
    .trim();                       // Remove leading/trailing whitespace
}

//
// Set the editor text
//
function setABCEditorText(theText){
	
	clearGetTuneByIndexCache();

	gTheABC.value = theText;

}

//
// Show the spinner
// 
function showTheSpinner(){

	//console.log("showTheSpinner");
	
	var elem = document.getElementById("loading-bar-spinner");

	var currentState = elem.style.display;

	if (currentState != "block"){
		elem.style.display = "block";
	}

}

//
// Hide the spinner
// 
function hideTheSpinner(){
	
	//console.log("hideTheSpinner");

	var elem = document.getElementById("loading-bar-spinner");

	var currentState = elem.style.display;

	if (currentState != "none"){
		elem.style.display = "none";
	}

}

//
// Clean a filename
//
function cleanFileName(fname){

	// Clean filename chars
	var theStr = fname.replace(/[^a-zA-Z'áÁóÓúÚíÍéÉäÄöÖüÜÀàÈèÌìÒòÙù0-9_\-. ]+/ig, '');

	// Reduce multiple spaces to one space
	theStr = theStr.replace(/\s+/g, ' ');

	return theStr;
}

//
// Is a tune a multi-voice tune
//
function isMultiVoiceTune(theTune){

	// Split the text into lines
    const lines = theTune.split('\n');
    
    // Create a set to store unique voice identifiers
    const voices = new Set();
    
    // Regular expression to match voice fields
    const voiceRegex = /^V:\s*(\S+)/;
    
    // Iterate over each line
    for (const line of lines) {
        const match = line.match(voiceRegex);
        if (match) {
            // Add the voice identifier to the set
            voices.add(match[1]);
        }
    }
    
    // Check if there are multiple voices
    return voices.size > 1;
}


// Extract the title from a single tune ABC
function getTuneTitle(thisTune) {
	
	var lines = thisTune.split("\n"); // Split the string by new line

	var title = "";

	for (var j = 0; j < lines.length; ++j) {

		var currentLine = lines[j].trim(); // Trim any whitespace from the line

		// Check if the line starts with "T:"
		if (currentLine.startsWith("T:")) {

			title = currentLine.slice(2).trim(); // Extract the title after "T:"

			return title;
		}
	}

	return "No Title";
}

//
// Get the notes for a tune without the header
//
function stripAllABCTuneHeaders(abcTune) {

  // Use a regular expression to match and remove header lines
  // Removed V: 1 Jan 2024 but not sure why I added it in the first place
  const headerPattern = /^(X:|T:|M:|K:|L:|Q:|W:|Z:|R:|C:|A:|O:|P:|N:|G:|H:|B:|D:|F:|S:|I:|:[A-Za-z]:)[^\r\n]*\r?\n?/gm;
  const tuneWithoutHeaders = abcTune.replace(headerPattern, '');
  
  return tuneWithoutHeaders;
}

//
// Get the notes for a tune without the header
//
function removeABCTuneHeaders(abcTune) {

	// All possible headers
	var theHeaders = "XTMKLQWZRCAOPNGHBDFSI";

	var nHeaders = theHeaders.length;
	var tuneAccum = "";
	var theLines = abcTune.split("\n");

	var insideTextBlock = false;
  var insideCSSBlock = false;
	var keepTesting = true;

	for (var j = 0; j < theLines.length; ++j) {
		var line = theLines[j].trim();
		var theChars = line.split("");
		var doSkip = false;

		if (keepTesting) {

      // Skip blank lines
      if (line == ""){
        continue;
      }

			// Handle %%begintext ... %%endtext
			if (line.startsWith("%%begintext")) {
				insideTextBlock = true;
				continue; // Skip this line
			}

			if (line.startsWith("%%endtext")) {
				insideTextBlock = false;
				continue; // Skip this line
			}
			
			if (insideTextBlock) {
				continue; // Skip all lines within text block
			}

      // Handle %%begincss ... %%endcss
      if (line.startsWith("%%begincss")) {
        insideCSSBlock = true;
        continue; // Skip this line
      }

      if (line.startsWith("%%endcss")) {
        insideCSSBlock = false;
        continue; // Skip this line
      }

      if (insideCSSBlock) {
        continue; // Skip all lines within css block
      }

			// Skip comment lines
			if (theChars[0] === "%") {
				doSkip = true;
			}

			// Skip standard header lines (like M:, K:, etc.)
			for (var i = 0; i < nHeaders; ++i) {
				if (theChars[0] === theHeaders[i] && theChars[1] === ":") {
					doSkip = true;
					break;
				}
			}
		}

		if (!doSkip) {
			keepTesting = false;
			tuneAccum += theLines[j];
			if (j !== theLines.length - 1) {
				tuneAccum += "\n";
			}
		}
	}

	return tuneAccum;
}

//
// Detect a T:* or T: * section header
//
function isSectionHeader(theTune){

	var searchRegExp = /^T:\s*\*.*$/m

	var sectionHeaderDetected = theTune.match(searchRegExp);

	if ((sectionHeaderDetected) && (sectionHeaderDetected.length > 0)){
		return true;
	}

	return false;

}

//
// Get the text area character offset to the start of a specific tune by index
//
function findTuneOffsetByIndex(tuneIndex){	
	
	var theNotes = gTheABC.value;

	if (tuneIndex == 0){

		var searchRegExp = /^X:.*[\r\n]*/m 

		var theIndex = theNotes.search(searchRegExp);

		if (theIndex == -1){
			return 0;
		}
		else{
			return theIndex;
		}
	}


	// Find the tunes
	var theTunes = theNotes.split(/^X:/gm);

	var offset = theTunes[0].length;

	for (var i = 1; i <= tuneIndex; ++i) {

		offset += theTunes[i].length + 2; // For the X:
		
	}

	return offset;
	
}

//
// Get the tune number at a character offset into the ABC
//
function findTuneByOffset(start){

	var theNotes = gTheABC.value;

    // Now find all the X: items
    var theTunes = theNotes.split(/^X:/gm);

    var nTunes = theTunes.length;

    // First chunk is whatever is before the first X:
    var theOffset = 0;

    theOffset = theTunes[0].length;

    for (var i=1;i<nTunes;++i){

    	// Account for the X: stripped in the length
    	theOffset += theTunes[i].length+2;

    	// Is the offset in the last chunk?
    	if (start < theOffset){

    		return i-1;

    	}

    }

    // Off the end 
    return nTunes-2;
 }

//
// Return the tune ABC at a specific index
//
//

// Used to hold cached split tunes
var gGetTuneByIndexCache = null;

function clearGetTuneByIndexCache(){

	//console.log("clearGetTuneByIndexCache")

	gGetTuneByIndexCache = null;

}

function getTuneByIndex(tuneNumber){

	if (gGetTuneByIndexCache == null){

		//console.log("Regerating split tunes cache")

		var theNotes = gTheABC.value;

	    // Now find all the X: items
	    gGetTuneByIndexCache = theNotes.split(/^X:/gm);

	}

	//console.log("getTuneByIndex "+tuneNumber);

 	var theTune = "X:"+gGetTuneByIndexCache[tuneNumber+1];

 	const lines = theTune.split('\n');
    let result = [];

    for (let line of lines) {
        if (line.trim() === "") {
            break;  // Stop at the first blank line
        }
        result.push(line);
    }

    return result.join('\n');

}

//
// Get the currently selected text in a textbox
//
function getSelectedText(id)
{
    // Obtain the object reference for the <textarea>
    var txtarea = document.getElementById(id);

    // Obtain the index of the first selected character
    var start = txtarea.selectionStart;

    // Obtain the index of the last selected character
    var finish = txtarea.selectionEnd;

    // Obtain the selected text
    var sel = txtarea.value.substring(start, finish);

    return sel;

}

//
// Find the tune around the selection point
//
function findSelectedTune(){

	var theNotes = gTheABC.value;

    // Obtain the object reference for the <textarea>
    var txtarea = gTheABC;

    // Obtain the index of the first selected character
    var start = txtarea.selectionStart;

    if (start == 0) {

	    // Common case where a set was just loaded and the cursor is at the start, go find the first position after an X:
		start = theNotes.indexOf("X:")+2;

	}

	// Odd case where there isn't an X:, just return nothing to play
	if (start == 0){

		return "";

	}

	// End of ABC play after paste case fix
	var theABCLength = theNotes.length;
	if (start == theABCLength){
		start = theABCLength-1;
	}

    // Now find all the X: items
    var theTunes = theNotes.split(/^X:/gm);

    var nTunes = theTunes.length;

    // First chunk is whatever is before the first X:
    var theOffset = 0;

    theOffset = theTunes[0].length;

    for (var i=1;i<nTunes;++i){

    	// Account for the X: stripped in the length
    	theOffset += theTunes[i].length+2;

    	// Is the offset in the last chunk?
    	if (start < theOffset){

    		var finalTune = "X:"+theTunes[i];

    		// Strip any trailing whitespace
    		finalTune = finalTune.trimEnd();

    		return (finalTune);

    	}

    }

    return "";

}
			
//
// Get the title of the first tune
//
function GetFirstTuneTitle(bAllowSpaces) {

	var theLines = gTheABC.value.split("\n");

	var title = "";

	for (var i = 0; i < theLines.length; ++i) {
		
		var currentLine = theLines[i].trim(); // Trim any whitespace from the line

		if (currentLine.startsWith("T:")) {

			title = currentLine.slice(2);
			
			title = title.trim();

			if (bAllowSpaces){
				// Strip out any naughty HTML tag characters
				title = cleanFileName(title);

				// Replace any spaces
				title = title.replace(/\s/g, ' ');
			}
			else{

				// Strip out any naughty HTML tag characters
				title = cleanFileName(title);

				// Replace any spaces
				title = title.replace(/\s/g, '_');
			}

			// Replace any quotes
			// MAE FOOFOO 11 Nov 2024
			//title = title.replace(/\'/g, '_');

			break;
		}
	}
	
	return title;
}

//
// Count the tunes in the text area
//
function CountTunes() {

	// Count the tunes in the text area
	var theNotes = gTheABC.value;

	var theTunes = theNotes.split(/^X:.*$/gm);

	var nTunes = theTunes.length - 1;

	// Save the global tune count anytime this is called
	gTotalTunes = nTunes;

	return nTunes;

}

function CountTunesInBuffer(theNotes) {

  var theTunes = theNotes.split(/^X:.*$/gm);

  var nTunes = theTunes.length - 1;

  // Save the global tune count anytime this is called
  gTotalTunes = nTunes;

  return nTunes;

}

//
// Get all the tune titles
//
function GetAllTuneTitles() {

	var theTitles = [];

	var lines = gTheABC.value.split("\n"); // Split the string by new line

	var title = "";

	for (var j = 0; j < lines.length; ++j) {

		var currentLine = lines[j].trim(); // Trim any whitespace from the line

		// Check if the line starts with "T:"
		if (currentLine.startsWith("T:")) {

			title = currentLine.slice(2).trim(); // Extract the title after "T:"

			theTitles.push(title);
		}
	}

	var nTitles = theTitles.length;

	var allTitles = "";

	if (nTitles > 0) {

		for (var i = 0; i < nTitles; ++i) {

			allTitles += theTitles[i];

			// Limit the length of the string to some maximum number of characters
			if (allTitles.length > ALLTITLESMAXLENGTH){

				var nRemaining = (nTitles-i-1);

				if (nRemaining > 0){

					allTitles = allTitles + " + " + nRemaining + " more";

				}
				
				return allTitles;

			}

			if (i != nTitles - 1) {
				allTitles += " / ";
			}
		}
	}


	return allTitles;
}

//
// Setup the Raw mode UI elements
//
function SetupRawModeUI(){

	// Clear raw mode
	gRawMode = false;

	// Clear last highlight tracker
	gRawLastIndex = -1;

	if (gAllowRawMode){
		
		var elem = document.getElementById("rawmodebutton");

		elem.value = "Highlighting";

		gTheABC.style.backgroundColor = "white";
		
		elem.classList.remove("rawmodebutton");
		elem.classList.add("rawmodebuttondisabled");

		elem.classList.add("btn-rawmode-off");
		elem.classList.remove("btn-rawmode-on");

	}
	else{

		var elem = document.getElementById("rawmodebutton");

		elem.value = "Highlighting";

		// Grey it out
		elem.classList.remove("rawmodebutton");
		elem.classList.add("rawmodebuttondisabled");

		elem.classList.add("btn-rawmode-off");
		elem.classList.remove("btn-rawmode-on");

		gTheABC.style.backgroundColor = "white";

	}
}

//
// First time Raw mode dialog
//
function ShowHighlightingExplanation(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","ShowHighlightingExplanation");

   	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica">About Highlighting</p>';
	   	modal_msg  += '<p style="font-size:14pt;line-height:22pt;font-family:helvetica">Since this is your first time using Highlighting, here is some important information:</p>';
    modal_msg  += '<p style="font-size:14pt;line-height:22pt;font-family:helvetica">When Highlighting is turned on:</p>'; 
    modal_msg  += '<p style="font-size:14pt;line-height:22pt;font-family:helvetica">Select ABC text to highlight the corresponding notes in red in the notation.</p>';
    modal_msg  += '<p style="font-size:14pt;line-height:22pt;font-family:helvetica">Click any element in the notation to select the corresponding ABC text in the editor.</p>';
    modal_msg  += '<p style="font-size:14pt;line-height:22pt;font-family:helvetica">Highlighting requires redrawing all tunes on each change to the ABC.</p>';
    modal_msg  += '<p style="font-size:14pt;line-height:22pt;font-family:helvetica">This may be slow on large numbers of tunes.</p>';
    modal_msg  += '<p style="font-size:14pt;line-height:22pt;font-family:helvetica">All pre-processing of the ABC at notation drawing time is turned off. Any hiding of Annotations/Text/Chords selected in the Advanced dialog as well as automatic injection of staff separation space will be disabled. Your settings will be restored when you turn highlighting off.</p>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 50, scrollWithPage: (AllowDialogsToScroll()) });
}


//
// Toggle raw mode
//
function ToggleRawMode(){

	//console.log("ToggleRawMode");

	// Standard PDF export not allowed when rendering is disabled
	if (gDisableNotationRendering){

		var thePrompt = "Highlighting not possible with rendering disabled.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	// Fix for toggling raw mode immediately after opening the Player
	if (gIsQuickEditor && (gCurrentTune == -1)){
		return;
	}


	// Only supported on desktop 
	if (isMobileBrowser()){
		return;
	}

	// Nothing to do if there are no tunes
	if (CountTunes() == 0){
		return;
	}

	gRawMode = !gRawMode;

	var elem = document.getElementById("rawmodebutton");

	// Reset last raw highlight tracker
	gRawLastIndex = -1;

	if (gRawMode){

		// If it is the first time using Highlighting, show the one-time help
		if (gRawFirstTime){
			
			ShowHighlightingExplanation();
			
			gRawFirstTime = false;

			SaveConfigurationSettings();

		}

		elem.value = "Highlighting";

		elem.classList.add("btn-rawmode-on");
		elem.classList.remove("btn-rawmode-off");
	
		gTheABC.style.backgroundColor = "#F8FDF8";


	}
	else{

		elem.value = "Highlighting";

		elem.classList.add("btn-rawmode-off");
		elem.classList.remove("btn-rawmode-on");
		
		gTheABC.style.backgroundColor = "white";

	}

	// Redraw the tunes
	if (gIsQuickEditor){
		Render(true,null);
	}
	else{
		RenderAsync(true,null);

	}

	if (gIsQuickEditor){

		if (gRawMode){

			// Disable the play button
			document.getElementById("playbutton").classList.remove("playbutton");
			document.getElementById("playbutton").classList.add("playbuttondisabled");

		}
		else{

			// Enable the play button
			document.getElementById("playbutton").classList.remove("playbuttondisabled");
			document.getElementById("playbutton").classList.add("playbutton");

		}

	}

}

//
// Transpose the ABC 
//

//
// Transpose a single tune handling alternate chords properly
//
function transposeSingleTune(theTune, transposeAmount, params){

	// Find and replace any mixed alternate chords with "x" separators
	theTune = theTune.replace(/"([^"]*)\(\s*([^"]*)\)"/g, '"$1"x"($2)"');

	var lines = theTune.split('\n'); // Split input into lines

    var quotedSubstrings = lines.map(line => {
        // Extract substrings wrapped in double quotes
        const matches = line.match(/"([^"]*)"/g) || [];
        return matches.map(str => str.slice(1, -1)); // Remove the double quotes from each match
    });

    const hasParentheses = quotedSubstrings.map(substrings => {
        return substrings.map(substring => {
            return substring.startsWith('(') && substring.endsWith(')'); // Flag if the substring had parentheses
        });
    });

    var hasAlternateChords = hasParentheses.some(subArray => subArray.includes(true));

    if (hasAlternateChords){
		
		//console.log("Alternate chords detected");

		//console.log(theTune);
		
	    const modifiedQuotedSubstrings = quotedSubstrings.map(substrings => {
	        return substrings.map(substring => {
	            if (substring.startsWith('(') && substring.endsWith(')')) {
	                return substring.replace(/\(|\)/g, ''); // Remove parentheses
	            }
	            return substring;
	        });
	    });

	    var modifiedStringBeforeFurtherChanges = lines.map((line, lineIndex) => {
	        let resultLine = line;
	        modifiedQuotedSubstrings[lineIndex].forEach((modifiedSubstring, index) => {
	            // Replace each occurrence in the order they appear, preserving quotes
	            resultLine = resultLine.replace(quotedSubstrings[lineIndex][index], modifiedSubstring);
	        });
	        return resultLine;
	    }).join('\n');

		//console.log("Transposing tune before "+i); // MAE FOOFOO 20 Feb 2025

		// MAE 18 May 2025 - Disable custom abcjs rendering params 
		modifiedStringBeforeFurtherChanges = modifiedStringBeforeFurtherChanges.replace(/^%abcjs_render_params/gm, '%foo_abcjs_render_params');

		// MAE 24 May 2025 - Disable visualtranspose
		modifiedStringBeforeFurtherChanges = modifiedStringBeforeFurtherChanges.replace(/^%%visualtranspose/gm, '%%foo_visualtranspose');

		var visualObj = ABCJS.renderAbc("*", modifiedStringBeforeFurtherChanges, params);

		//console.log("Transposing tune after "+i); // MAE FOOFOO 20 Feb 2025

	    var furtherModifiedString = ABCJS.strTranspose(modifiedStringBeforeFurtherChanges, visualObj, transposeAmount);
	    
	    lines = furtherModifiedString.split('\n'); // Split input into lines

	    quotedSubstrings = lines.map(line => {
	        // Extract substrings wrapped in double quotes
	        const matches = line.match(/"([^"]*)"/g) || [];
	        return matches.map(str => str.slice(1, -1)); // Remove the double quotes from each match
	    });

	    const finalLines = furtherModifiedString.split('\n').map((line, lineIndex) => {
	        const parts = line.split(/("[^"]*")/); // Split line by quoted substrings, keeping quotes
	        let quotedIndex = 0;
	        return parts.map(part => {
	            if (part.startsWith('"') && part.endsWith('"')) {
	                const modifiedSubstring = quotedSubstrings[lineIndex][quotedIndex];
	                // If the original substring had parentheses, add them back
	                if (hasParentheses[lineIndex][quotedIndex]) {
	                    quotedIndex++;
	                    return `"(${modifiedSubstring})"`; // Add parentheses around modified substring
	                }
	                quotedIndex++;
	                return `"${modifiedSubstring}"`; // Keep the modified substring as is
	            }
	            return part; // Non-quoted part of the line, return unchanged
	        }).join('');
	    });

		var ret = finalLines.join('\n'); // Return the final modified text

		// Strip any injected mixed alternate chord strings
		ret = ret.replaceAll('"x"',"");

		// MAE 24 May 2025 - Reinstate visualtranspose
		ret = ret.replace(/^%%foo_visualtranspose/gm, '%%visualtranspose')

		// MAE 18 May 2025 - Reinstate custom abcjs rendering params 
		ret = ret.replace(/^%foo_abcjs_render_params/gm, '%abcjs_render_params')

		return ret;

	}
	else{

		//console.log("No alternate chords detected");

		//console.log("Transposing tune before "+i); // MAE FOOFOO 20 Feb 2025
		// MAE 18 May 2025 - Disable custom abcjs rendering params 
		theTune = theTune.replace(/^%abcjs_render_params/gm, '%foo_abcjs_render_params');

		// MAE 24 May 2025 - Disable visualtranspose
		theTune = theTune.replace(/^%%visualtranspose/gm, '%%foo_visualtranspose');


		var visualObj = ABCJS.renderAbc("*", theTune, params);

		//console.log("Transposing tune after "+i); // MAE FOOFOO 20 Feb 2025

	    theTune = ABCJS.strTranspose(theTune, visualObj, transposeAmount);

		// MAE 24 May 2025 - Reinstate visualtranspose
		theTune = theTune.replace(/^%%foo_visualtranspose/gm, '%%visualtranspose')

		// MAE 18 May 2025 - Reinstate custom abcjs rendering params 
	    theTune = theTune.replace(/^%foo_abcjs_render_params/gm, '%abcjs_render_params');

	    return theTune;

	}
}

//
// Find the tune range for the current select
//
function getTuneRangeForTranspose(){

	var theNotes = gTheABC.value;

    // Obtain the object reference for the <textarea>
    var txtarea = gTheABC;

    // Obtain the index of the first selected character
    var theStart = txtarea.selectionStart;

    if (theStart == 0) {

	    // Common case where a set was just loaded and the cursor is at the start, go find the first position after an X:
		theStart = theNotes.indexOf("X:")+2;

	}

	var theEnd = txtarea.selectionEnd

    if (theEnd == 0) {

	    // Common case where a set was just loaded and the cursor is at the start, go find the first position after an X:
		theEnd = theNotes.indexOf("X:")+2;

	}

	var startTune = findTuneByOffset(theStart);

    var endTune = findTuneByOffset(theEnd);

    return {start:startTune,end:endTune};

}

//
// Support function for restoring the selection point after the transpose operation
//
function resetSelectionAfterTranspose(start,end){

	clearGetTuneByIndexCache();
	
	// Get the first tune index
	var theStartIndex = findTuneOffsetByIndex(start);
	
	// Get the tune
	var theTune = getTuneByIndex(end);
	
	// Find the last tune in the tunes
	var theEndIndex = findTuneOffsetByIndex(end)+(theTune.length-1);

	// Set the select point
	gTheABC.selectionStart = theStartIndex;
    gTheABC.selectionEnd = theEndIndex;

    // Focus after operation
    FocusAfterOperation();

}

// 
// Warn if there were any tunes excluded from the transpose
//
function ShowTransposeWarningDialog(errorList){

    // Keep track of dialogs
    sendGoogleAnalytics("dialog","ShowTransposeWarningDialog");

    var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;">Some Tunes Were Not Tranposed</p>';

    modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:36px;">During the operation some tunes were not able to be transposed:</p>';

    var nBadTunes = errorList.length;

    for (var i=0;i<nBadTunes;++i){
		modal_msg += '<p style="font-size:12pt;line-height:12pt;">'
        modal_msg += errorList[i];
		modal_msg += '</p>'
    }

    DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 100, width: 630,  scrollWithPage: (AllowDialogsToScroll()) });
}

//
// General purpose tranposer for the currently selected tunes
//
function Transpose(transposeAmount) {

	// Transpose requires rendering
	if (gDisableNotationRendering){
		
		var thePrompt = "Transpose not possible with rendering disabled.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Keep track of actions
	sendGoogleAnalytics("action","Transpose");

	var nTunes = CountTunes();

	var theTuneRange = getTuneRangeForTranspose();

	//console.log("getTuneRangeForTranspose start = "+theTuneRange.start+" end = "+theTuneRange.end);

	var nToTranspose = (theTuneRange.end-theTuneRange.start)+1;

	// Should never happen
	if (nToTranspose <= 0){
		return;
	}

	// Only show the spinner for a large number of tunes
	if (nToTranspose > 5){
		showTheSpinner();
	}

	// Need a timeout to allow the spinner to show before processing the ABC,
	setTimeout(function(){

		var theNotes = gTheABC.value;

		// Get the rendering params
		var params = GetABCJSParams();

		// Find the tunes
		var theTunes = theNotes.split(/^X:/gm);

		var output = FindPreTuneHeader(theNotes);

		var gotError = false;
		var errorList = [];

		for (var i=1;i<=nTunes;++i){

			theTunes[i] = "X:"+theTunes[i];

			var theTitle = getTuneTitle(theTunes[i]);

			var visualObj = null;

			if (((i-1) >= theTuneRange.start) && ((i-1) <= theTuneRange.end)){

				// Wrap this in a try-catch since sometimes the transposer fails catastrophically
				try {

					var res = transposeSingleTune(theTunes[i],transposeAmount,params);

				    output += res;

				}
				catch (error){
					
					gotError = true;

					output += theTunes[i];

					// Keep track of errors
					errorList.push(theTitle);

					if (gShowABCJSRenderProgress){
						console.log("Transpose failed: "+theTitle);
					}

				}
			}
			else{

				output += theTunes[i];

			}

		}

		// Stuff in the transposed output
		setABCEditorText(output);

		// Set dirty
		gIsDirty = true;

		// Reset the selection point to the current tune
		resetSelectionAfterTranspose(theTuneRange.start,theTuneRange.end);
		
		// Give a bit of time for garbage collection before the render
		setTimeout(function(){

			// When highlighting is on, need to re-render everything
			if (gRawMode){

				RenderAsync(true,null, function(){

					// If any errors, show the list of tunes that had issues
					if (gotError){

						ShowTransposeWarningDialog(errorList);

					}

				});
			}
			else{
				// Render the range
				RenderRangeAsync(theTuneRange.start, theTuneRange.end, function(){

					// If any errors, show the list of tunes that had issues
					if (gotError){

						ShowTransposeWarningDialog(errorList);

					}

				});
			}


		}, 0);


	},gSpinnerDelay);
	
}

//
// Tranpose the ABC up one semitone
//

function TransposeUp(e) {

	var transposeAmount = 1;

	if (e.shiftKey){
		transposeAmount = 2;
	}

	if (e.altKey){
		transposeAmount = 12;
	}

	Transpose(transposeAmount);

}

//
// Tranpose the ABC down one semitone
//

function TransposeDown(e) {

	var transposeAmount = -1;

	if (e.shiftKey){
		transposeAmount = -2;
	}

	if (e.altKey){
		transposeAmount = -12;
	}

	Transpose(transposeAmount);

}

//
// Transpose to Key dialog
//

function getTuneRootKey(theTune){

	var theLines = theTune.split("\n");

	var nLines = theLines.length;

	// Find the key
	var theKey = "";

	var gotKey = false;

	// Find the key
	for (var j=0;j<nLines;++j){

		theKey = theLines[j]; 

		if (theKey.trim().indexOf("K:") != -1){
			gotKey = true;
			break;
		}

	}

	if (!gotKey){
		return "C";
	}

	//debugger;

	theKey = theKey.replace("K:","");
	theKey = theKey.trim();

	var theRootKey = theKey[0].toUpperCase();

	// Check for accidental
	if (theKey.length > 1){
		if ((theKey[1] == "#")||(theKey[1] == "b")){
			theRootKey = theKey.substring(0,2);
		}
	}

	return theRootKey;
}

//
// Transpose All to Key dialog
//
var gLastTransposeToKey = "A";

function TransposeToKeyDialog(){

 	const tranpose_options = [
		{ name: "C", id: "C" },
		{ name: "C#", id: "C#" },
		{ name: "D♭", id: "Db" },
		{ name: "D", id: "D" },
		{ name: "D#", id: "D#" },
		{ name: "E♭", id: "Eb" },
		{ name: "E", id: "E" },
		{ name: "F", id: "F" },
		{ name: "F#", id: "F#" },
		{ name: "G♭", id: "Gb" },
		{ name: "G", id: "G" },
		{ name: "G#", id: "G#" },
		{ name: "A♭", id: "Ab" },
		{ name: "A", id: "A" },
		{ name: "A#", id: "A#" },
		{ name: "B♭", id: "Bb" },
		{ name: "B", id: "B" }
  	];

	// Setup initial values
	const theData = {
	  transposekey: gLastTransposeToKey,
	  transposeall: false
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Transpose to Key&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#advanced_transposetokey" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;margin-bottom:12px;font-size:12pt;line-height:18pt;font-family:helvetica">This will transpose the current tune or all the tunes to the specified root key.</p>'},
	  {html: '<p style="margin-bottom:12px;font-size:12pt;line-height:18pt;font-family:helvetica">Any modes specified in the tune keys will be preserved.</p>'},	  	  
	  {html: '<p style="margin-top:12px;margin-bottom:42px;font-size:12pt;line-height:18pt;font-family:helvetica"><strong>If the Transpose to Key results are too high or too low:</strong><br/>Click in a single tune or select across one or more tunes in the ABC editor then <strong>Alt-click</strong> the lower toolbar <strong>Transpose Up</strong> or <strong>Transpose Down</strong> buttons to transpose the tune(s) down or up an octave.</p>'},
	  {name: "Root key:", id: "transposekey", type:"select", options:tranpose_options, cssClass:"configure_transpose_settings_select"}, 	
	  {name: "          Transpose all tunes", id: "transposeall", type:"checkbox", cssClass:"configure_transposetokey_text"},
	  {html: '<p style="font-size:12pt;font-family:helvetica">&nbsp;</p>'},	  
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat_wide", top: 200, width: 600, scrollWithPage: (AllowDialogsToScroll()), okText: "Transpose",autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){
			
			gLastTransposeToKey = args.result.transposekey;

			DoTransposeToKey(gLastTransposeToKey, args.result.transposeall);
		}
	});
}

//
// General purpose tranposer for one or all tunes
//
function DoTransposeToKey(targetKey,transposeAll) {

 	function getScaleDegree(key){

		const scale_degrees = [
	 		{ name: "C", degree: 0 },
			{ name: "C#", degree: 1 },
			{ name: "Db", degree: 1 },
			{ name: "D", degree: 2 },
			{ name: "D#", degree: 3 },
			{ name: "Eb", degree: 3 },
			{ name: "E", degree: 4 },
			{ name: "F", degree: 5 },
			{ name: "F#", degree: 6 },
			{ name: "Gb", degree: 6 },
			{ name: "G", degree: 7 },
			{ name: "G#", degree: 8 },
			{ name: "Ab", degree: 8 },
			{ name: "A", degree: 9 },
			{ name: "A#", degree: 10 },
			{ name: "Bb", degree: 10 },
			{ name: "B", degree: 11 }
	 	];

 		var nDegrees = scale_degrees.length;

 		for (var i=0;i<nDegrees;++i){
 			if (scale_degrees[i].name == key){
 				return scale_degrees[i].degree;
 			}
 		}

 		// Failed to match, return C
 		return 0;
 	}

 	//console.log("DoTransposeToKey targetKey = "+targetKey);

	var theTargetScaleDegree = getScaleDegree(targetKey);

	//console.log("targetKey scale degree = "+theTargetScaleDegree);

	// Transpose requires rendering
	if (gDisableNotationRendering){
		
		var thePrompt = "Transpose not possible with rendering disabled.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","TransposeToKey");

	showTheSpinner();

	// Need a timeout to allow the spinner to show before processing the ABC,
	setTimeout(function(){

		// Get the rendering params
		var params = GetABCJSParams();

		var nTunes = CountTunes();

		var theSelectedTuneIndex = 0;

		if (!transposeAll){
			theSelectedTuneIndex = findSelectedTuneIndex();
		}

		var theNotes = gTheABC.value;

		var output = FindPreTuneHeader(theNotes);

		//console.log("theTargetScaleDegree: "+theTargetScaleDegree);

		var gotError = false;
		var errorList = [];
		var theTitle;

		clearGetTuneByIndexCache();

		for (var i=0;i<nTunes;++i){

			var visualObj = null;

			var theTune = getTuneByIndex(i);

			// Skip section headers
			if (isSectionHeader(theTune)){

				output += theTune;
				output += "\n\n";
				continue;
			}

			// Wrap this in a try-catch since sometimes the transposer fails catastrophically
			try {

				//debugger;

				//console.log("Transposing tune "+i);
				var theTuneKey = getTuneRootKey(theTune);

				var theTuneScaleDegree = getScaleDegree(theTuneKey);

				//console.log("Tune "+i+" of "+nTunes+" Key: "+theTuneKey+" Scale degree: "+theTuneScaleDegree);

				// Find shortest distance to transpose

				if (theTargetScaleDegree <= theTuneScaleDegree){

					//console.log("target scale degree less than tune scale degree");

					var delta1 = -1*(theTuneScaleDegree - theTargetScaleDegree);

					var delta1save = delta1;

					//console.log("delta1: "+delta1)

					// Interested in absolute value comparisons
					if (delta1 < 0){
						delta1 *= -1;
					}

					var delta2 = ((theTargetScaleDegree+12) - theTuneScaleDegree);

					var delta2save = delta2;

					//console.log("delta2: "+delta2)

					// Interested in absolute value comparisons
					if (delta2 < 0){
						delta2 *= -1;
					}

					if (delta1 <= delta2){
						transposeAmount = delta1save;
					}
					else{
						transposeAmount = delta2save;
					}
				}
				else{

					//debugger;

					//console.log("tune scale degree less than target scale degree");

					var delta1 = theTargetScaleDegree - theTuneScaleDegree;

					var delta1save = delta1;

					//console.log("delta1: "+delta1)

					// Interested in absolute value comparisons
					if (delta1 < 0){
						delta1 *= -1;
					}

					var delta2 = ((theTuneScaleDegree+12)-theTargetScaleDegree);

					if (delta2 > 12){
						delta2 -= 12;
					}
					delta2 = -1 * delta2;

					var delta2save = delta2;

					//console.log("delta2: "+delta2)

					// Interested in absolute value comparisons
					if (delta2 < 0){
						delta2 *= -1;
					}

					if (delta1 <= delta2){
						transposeAmount = delta1save;
					}
					else{
						transposeAmount = delta2save;
					}
				}

				//console.log("Final transpose: "+transposeAmount);

				if (!transposeAll){

					// Is there a transpose to apply?
					if (transposeAmount != 0){

						if (i==theSelectedTuneIndex){

							theTitle = getTuneTitle(theTune);

							var res = transposeSingleTune(theTune,transposeAmount,params);

			    			output += res;

							output += "\n\n";
			    				
						}
						else{

							output += theTune;
							output += "\n\n";

						}
					}
					else{

						//console.log("No transpose required, tune skipped");
						output += theTune;
						output += "\n\n";

					}
				}
				else{

					// Is there a transpose to apply?
					if (transposeAmount != 0){
						
						theTitle = getTuneTitle(theTune);

						var res = transposeSingleTune(theTune,transposeAmount,params);

		    			output += res;
		    			
						output += "\n\n";

					}
					else{

						//console.log("No transpose required, tune skipped");
						output += theTune;
						output += "\n\n";

					}
				}
			}
			catch (error){

				gotError = true;

				// Keep track of errors
				errorList.push(theTitle);

				if (gShowABCJSRenderProgress){
					console.log("Transpose failed: "+theTitle);
				}
				
				output += theTune;
				output += "\n\n";

			}
		}

		// Stuff in the transposed output
		setABCEditorText(output);

		// Set dirty
		gIsDirty = true;

		var redrawAll = transposeAll;

		var redrawIndex = theSelectedTuneIndex;

		// Have to do a complete redraw for raw mode
		if (gRawMode){
			redrawAll = true;
		}

		if (redrawAll){
			redrawIndex = null;
		}

		// Give a bit of time for garbage collection before the render
		setTimeout(function(){

			// Force a full render if transposing all
			RenderAsync(redrawAll, redrawIndex, function(){

			 var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Transpose to Key Complete!</p>';

			  // Force a raw mode visual refresh
			  gRawLastIndex = -1;

				DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){
					
					// Try and keep the same tune after the redraw for immediate play
					var theSelectionStart = gTheABC.selectionStart;

					// Reset the selection
					if (!transposeAll){

						gCurrentTune = theSelectedTuneIndex;

						// Reset the selection point to the current tune
						resetSelectionAfterTranspose(theSelectedTuneIndex,theSelectedTuneIndex);

					}
					else{

						// Set the select point
						gTheABC.selectionStart = 0;
					    gTheABC.selectionEnd = 0;

					    gCurrentTune = 0;

					}

				    // Focus after operation
				    FocusAfterOperation();

				    // If any errors, show the list of tunes that had issues
					if (gotError){

						ShowTransposeWarningDialog(errorList);

					}
				    
				});
			});

		},0);

	},gSpinnerDelay);
	
}

//
// Get the tune index titles
//
function GetAllTuneTags(theTag,totalTunes){

	var i;

	var theTags = [];

	var theTagToMatch = theTag+":";

	for (i=0;i<totalTunes;++i){

		var thisTune = getTuneByIndex(i);

		var theLines = thisTune.split("\n");

		var bGotTag = false;

		for (var j = 0; j < theLines.length; ++j) {

			if (theLines[j].trim().indexOf(theTagToMatch) == 0){

				var tagValue = theLines[j].slice(2);

				tagValue = tagValue.trim();

				// Just grab the first tag
				theTags.push(tagValue);

				bGotTag = true;

				break

			}
		}

		// If the tune is missing the tag, push a dummy value
		if (!bGotTag){
			theTags.push(" ");
		}
	}

	return theTags;
}

//
// Sort the tunes in the ABC text area
//
function SortTunesByTag(theTag,doCase){

	const meterWeights = [
	    { name:"C|",  weight:1}, 
	    { name:"C",   weight:2}, 
	   	{ name:"2/2", weight:10},
	   	{ name:"3/2", weight:11},
	    { name:"2/4", weight:7}, 
	    { name:"3/4", weight:8}, 
	    { name:"4/4", weight:3}, 
	    { name:"5/4", weight:12}, 
	    { name:"6/4", weight:9}, 
	    { name:"7/4", weight:13}, 
	    { name:"2/8", weight:14}, 
	    { name:"3/8", weight:15}, 
	    { name:"5/8", weight:16},
	    { name:"6/8", weight:4}, 
	    { name:"7/8", weight:17}, 
	    { name:"9/8", weight:5},
	    { name:"10/8", weight:18},
	    { name:"11/8", weight:19},
	    { name:"12/8", weight:6}
	];

	// Get all the tunes
	var theNotes = gTheABC.value;

	var theTunes = theNotes.split(/(^X:.*$)/gm);

	var nTunes = (theTunes.length - 1)/2;

	if (nTunes < 2){
		return;
	}

	var thePrefixABC = theTunes[0];

	//console.log("thePrefixABC: "+thePrefixABC);

	var theTags = GetAllTuneTags(theTag,theTunes.length - 1);

	// Special weighted processing for the meter tag
	var nTags = theTags.length;

	if (theTag == "M"){
		
		var workTags = [];

		for (var i=0;i<nTags;++i){

			var thisMeter = theTags[i];

			var theWeight = 19;

			// Lets see if we have a supported meter
			for (var j=0;j<meterWeights.length;++j){

				if (thisMeter == meterWeights[j].name){

					theWeight = meterWeights[j].weight;
					break;

				}
			}

			workTags.push(theWeight);
		}

		// Replace the tags with meter weights
		theTags = workTags;
	}
	
	var i;

	var tunesToProcess = [];
	var nProcessed = 0;
	var thisTitle;

	for (i=0;i<nTunes;++i){

		if (theTunes[(i*2)+1] != undefined){

			thisTag = theTags[nProcessed];

			if (doCase){
				thisTag = thisTag.toLowerCase();
			}

			nProcessed++;

			//console.log("Tune #"+nProcessed+": "+theTunes[(i*2)+1]+theTunes[(i*2)+2]);

			tunesToProcess.push({tag:thisTag,tune:theTunes[(i*2)+1]+theTunes[(i*2)+2]});

		}

	}

	if ((theTag != "X") && (theTag != "M")){

		// Sort tunes by name
		tunesToProcess.sort(customSortTagWithDiacriticals);

	}
	else{

		// Compare numerically
		tunesToProcess.sort((a, b) => {

		  const tagA = parseInt(a.tag);

		  if (isNaN(tagA)){
		  	tagA = 0;
		  }
		  
		  const tagB = parseInt(b.tag); // ignore upper and lowercase

		  if (isNaN(tagB)){
		  	tagB = 0;
		  }
		  
		  if (tagA < tagB) {
		    return -1;
		  }
		  
		  if (tagA > tagB) {
		    return 1;
		  }

		  // names must be equal
		  return 0;

		});

	}

	theNotes = "";
	theNotes += thePrefixABC;

	// Aggregate the results
	for (i=0;i<nProcessed;++i){

		var thisTune = tunesToProcess[i].tune;

		// Ensure there is a blank line between tunes
		thisTune = thisTune.replace(/\n*$/, '') + '\n\n'

		theNotes += thisTune;
	}

	theNotes = theNotes.replace(/\n*$/, '') + '\n'

	// Put them back in the ABC area
	setABCEditorText(theNotes);

    // Set dirty
	gIsDirty = true;

	// Reset the selection
	gTheABC.selectionStart = 0;
  gTheABC.selectionEnd = 0;

  // Focus after operation
  FocusAfterOperation();

}

//
// DoSortTunesByMeter command
//
function DoSortTunesByMeter() {

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	var elem = document.getElementById("sortbutton");
	if (elem){
		// Give some feedback
		elem.value = "Sorting...";
	}

	setTimeout(function(){

		// Sort the tunes by name
		SortTunes();

		// Sort the tunes
		SortTunesByTag("M",false);

    const scrollY = window.scrollY || document.documentElement.scrollTop;

    // Redraw
    RenderAsync(true,null,function(){

      if (AllowDialogsToScroll()){
        window.scrollTo(0, scrollY);
      }

			var elem = document.getElementById("sortbutton");
			if (elem){
				elem.value = "   Sorted!   ";
			}
		
			setTimeout(function(){

				var elem = document.getElementById("sortbutton");
				if (elem){
					elem.value = "Sort by Tag";
				}

			},500);

		});

	},250);

}


//
// DoSortTunesByKey command
//
function DoSortTunesByKey() {

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Give some feedback
	var elem = document.getElementById("sortbutton");
	if (elem){
		// Give some feedback
		elem.value = "Sorting...";
	}

	setTimeout(function(){

		// Sort the tunes by name first
		SortTunes();

		// Sort the tunes by key
		SortTunesByTag("K",false);

    const scrollY = window.scrollY || document.documentElement.scrollTop;

    // Redraw
    RenderAsync(true,null,function(){

      if (AllowDialogsToScroll()){
        window.scrollTo(0, scrollY);
      }

			var elem = document.getElementById("sortbutton");
			if (elem){
				elem.value = "   Sorted!   ";
			}
		
			setTimeout(function(){

				var elem = document.getElementById("sortbutton");
				if (elem){
					elem.value = "Sort by Tag";
				}

			},500);

		});

	},250);

}

//
// Process a title for sorting
//
function processTitleForSorting(thisTitle) {

  const prefixMap = {
    "The ": ", The",
    "Da ": ", Da",
    "An ": ", An",
    "A ": ", A",
    "Le ": ", Le",
    "La ": ", La",
    "Ye ": ", Ye",
    "Les ": ", Les",
    "an ": ", an"
  };

  for (const [prefix, suffix] of Object.entries(prefixMap)) {

    if (thisTitle.startsWith(prefix)) {

      return thisTitle.slice(prefix.length) + suffix;

    }

  }

  return thisTitle;
}


//
// Sort the tunes in the ABC text area
//
function SortTunes(){

	// Get all the tunes
	var theNotes = gTheABC.value;

	var theTunes = theNotes.split(/(^X:.*$)/gm);

	var nTunes = (theTunes.length - 1)/2;

	if (nTunes < 2){
		return;
	}

	var thePrefixABC = theTunes[0];

	//console.log("thePrefixABC: "+thePrefixABC);

	// Get all the tune titles (uses first T: tag found)
	// Global totalTunes needs to be set for GetTunebookIndexTitles to work
	totalTunes = nTunes;

	var theTitles = GetTunebookIndexTitles();
	
	var i;

	var tunesToProcess = [];
	var nProcessed = 0;
	var thisTitle;

	for (i=0;i<nTunes;++i){

		if (theTunes[(i*2)+1] != undefined){

			thisTitle = theTitles[nProcessed];

			thisTitle = processTitleForSorting(thisTitle);

			nProcessed++;

			//console.log("Tune #"+nProcessed+": "+theTunes[(i*2)+1]+theTunes[(i*2)+2]);

			tunesToProcess.push({title:thisTitle,tune:theTunes[(i*2)+1]+theTunes[(i*2)+2]});

		}

	}


	// Sort tunes by name
	tunesToProcess.sort(customSortTitleWithDiacriticals);

	theNotes = "";
	theNotes += thePrefixABC;

	// Aggregate the results
	for (i=0;i<nProcessed;++i){

		var thisTune = tunesToProcess[i].tune;

		// Ensure there is a blank line between tunes
		thisTune = thisTune.replace(/\n*$/, '') + '\n\n'

		theNotes += thisTune;;
	}

	theNotes = theNotes.replace(/\n*$/, '') + '\n'

	// Put them back in the ABC area
	setABCEditorText(theNotes);

	// Set dirty
	gIsDirty = true;

	// Reset the selection
	gTheABC.selectionStart = 0;
  gTheABC.selectionEnd = 0;

  // Focus after operation
  FocusAfterOperation();

}

//
// DoSortTunesByName command
//
function DoSortTunesByName() {

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Give some feedback
	var elem = document.getElementById("sortbutton");

	if (elem){
		elem.value = "Sorting...";
	}

	setTimeout(function(){

		// Sort the tunes
		SortTunes();

    const scrollY = window.scrollY || document.documentElement.scrollTop;

    // Redraw
    RenderAsync(true,null,function(){

      if (AllowDialogsToScroll()){
        window.scrollTo(0, scrollY);
      }

			var elem = document.getElementById("sortbutton");
			if (elem){
				elem.value = "   Sorted!   ";
			}
		
			setTimeout(function(){

				var elem = document.getElementById("sortbutton");
				if (elem){
					elem.value = "Sort by Tag";
				}

			},500);

		});

	},250);

}

//
// DoSortTunesByRhythm command
//
function DoSortTunesByRhythm() {

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Give some feedback
	var elem = document.getElementById("sortbutton");
	if (elem){
		// Give some feedback
		elem.value = "Sorting...";
	}

	setTimeout(function(){

		// Sort the tunes by name first
		SortTunes();

		// Sort the tunes by rhythm
		SortTunesByTag("R",true);

    const scrollY = window.scrollY || document.documentElement.scrollTop;

    // Redraw
    RenderAsync(true,null,function(){

      if (AllowDialogsToScroll()){
        window.scrollTo(0, scrollY);
      }

			var elem = document.getElementById("sortbutton");
			if (elem){
				elem.value = "   Sorted!   ";
			}
		
			setTimeout(function(){

				var elem = document.getElementById("sortbutton");
				if (elem){
					elem.value = "Sort by Tag";
				}

			},500);

		});

	},250);

}

//
// DoSortTunesByCTag command
//
function DoSortTunesByCTag() {

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Give some feedback
	var elem = document.getElementById("sortbutton");
	if (elem){
		// Give some feedback
		elem.value = "Sorting...";
	}

	setTimeout(function(){

		// Sort the tunes by name first
		SortTunes();

		// Sort the tunes by C tag
		SortTunesByTag("C",true);

    const scrollY = window.scrollY || document.documentElement.scrollTop;

    // Redraw
    RenderAsync(true,null,function(){

      if (AllowDialogsToScroll()){
        window.scrollTo(0, scrollY);
      }

			var elem = document.getElementById("sortbutton");
			if (elem){
				elem.value = "   Sorted!   ";
			}
		
			setTimeout(function(){

				var elem = document.getElementById("sortbutton");
				if (elem){
					elem.value = "Sort by Tag";
				}

			},500);

		});

	},250);

}

//
// DoSortTunesByNTag command
//
function DoSortTunesByNTag() {

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Give some feedback
	var elem = document.getElementById("sortbutton");
	if (elem){
		// Give some feedback
		elem.value = "Sorting...";
	}

	setTimeout(function(){

		// Sort the tunes by name first
		SortTunes();

		// Sort the tunes by N tag
		SortTunesByTag("N",true);

    const scrollY = window.scrollY || document.documentElement.scrollTop;

    // Redraw
    RenderAsync(true,null,function(){

      if (AllowDialogsToScroll()){
        window.scrollTo(0, scrollY);
      }

			var elem = document.getElementById("sortbutton");
			if (elem){
				elem.value = "   Sorted!   ";
			}
		
			setTimeout(function(){

				var elem = document.getElementById("sortbutton");
				if (elem){
					elem.value = "Sort by Tag";
				}

			},500);

		});

	},250);

}

//
// DoSortTunesByOTag command
//
function DoSortTunesByOTag() {

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Give some feedback
	var elem = document.getElementById("sortbutton");
	if (elem){
		// Give some feedback
		elem.value = "Sorting...";
	}

	setTimeout(function(){

		// Sort the tunes by name first
		SortTunes();

		// Sort the tunes by O tag
		SortTunesByTag("O",true);

    const scrollY = window.scrollY || document.documentElement.scrollTop;

    // Redraw
    RenderAsync(true,null,function(){

      if (AllowDialogsToScroll()){
        window.scrollTo(0, scrollY);
      }

			var elem = document.getElementById("sortbutton");
			if (elem){
				elem.value = "   Sorted!   ";
			}
		
			setTimeout(function(){

				var elem = document.getElementById("sortbutton");
				if (elem){
					elem.value = "Sort by Tag";
				}

			},500);

		});

	},250);

}

//
// DoSortTunesByID command
//
function DoSortTunesByID() {

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Give some feedback
	var elem = document.getElementById("sortbutton");
	if (elem){
		// Give some feedback
		elem.value = "Sorting...";
	}

	setTimeout(function(){
		
		// Sort the tunes by name first
		SortTunes();

		// Sort the tunes by key
		SortTunesByTag("X",false);

    const scrollY = window.scrollY || document.documentElement.scrollTop;

		// Redraw
		RenderAsync(true,null,function(){

      if (AllowDialogsToScroll()){
        window.scrollTo(0, scrollY);
      }

			var elem = document.getElementById("sortbutton");
			if (elem){
				elem.value = "   Sorted!   ";
			}
		
			setTimeout(function(){

				var elem = document.getElementById("sortbutton");
				if (elem){
					elem.value = "Sort by Tag";
				}

			},500);

		});

	},250);

}

//
// RenumberXTags command
//
function RenumberXTags() {

	//debugger;

	// Get all the tunes
	var theNotes = gTheABC.value;

	var theTunes = theNotes.split(/(^X:.*$)/gm);

	var nTunes = theTunes.length;

	var thePrefixABC = theTunes[0];

	//console.log("thePrefixABC: "+thePrefixABC);
	theNotes = "";
	theNotes += thePrefixABC;

	var tuneIndex = 1;

	// Aggregate the results
	for (i=1;i<nTunes;++i){

		if (i % 2){
			theNotes += "X:"+tuneIndex;
			tuneIndex++;
		}
		else{
			theNotes += theTunes[i];
		}
	}

	// Put them back in the ABC area
	setABCEditorText(theNotes);

	// Set dirty
	gIsDirty = true;

	// Reset the selection
	gTheABC.selectionStart = 0;
  gTheABC.selectionEnd = 0;

  // Focus after operation
  FocusAfterOperation();

}

//
// Sort Dialog
//
// Prompts for the sorting key
//
var gLastSortOrder = "0";

function SortDialog(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","SortDialog");

 	const sorting_options = [
	    { name: "  Sort by Title (T:)", id: "0" },
	    { name: "  Sort by Key (K:)", id: "1" },
	    { name: "  Sort by Meter (M:)", id: "2" },
	    { name: "  Sort by Rhythm (R:)", id: "3" },
	    { name: "  Sort by Composer (C:)", id: "4" },
	    { name: "  Sort by Notes (N:)", id: "5" },
	    { name: "  Sort by Origin (O:)", id: "6" },
	    { name: "  Sort by ID (X:)", id: "7" },
	    { name: "  Renumber all X: Tags", id: "8" },

  	];

	// Setup initial values
	const theData = {
	  configure_sort:gLastSortOrder,
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Sort by Specific Tag&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#sort_dialog" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;margin-bottom:36px;font-size:12pt;line-height:18pt;font-family:helvetica">This will sort the tunes based on the ABC tag you select:</p>'},	  
	  {name: "Tag to sort by:", id: "configure_sort", type:"select", options:sorting_options, cssClass:"configure_sort_settings_select"}, 	  
	  {html: '<p style="font-size:12pt;font-family:helvetica">&nbsp;</p>'},	  
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 200, width: 500, scrollWithPage: (AllowDialogsToScroll()), okText: "Sort",autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){
			
			gLastSortOrder = args.result.configure_sort;

			switch (args.result.configure_sort){

				case "0":
					DoSortTunesByName();
					break;
				case "1":
					DoSortTunesByKey();
					break;
				case "2":
					DoSortTunesByMeter();
					break;
				case "3":
					DoSortTunesByRhythm();
					break;
				case "4":
					DoSortTunesByCTag();
					break;
				case "5":
					DoSortTunesByNTag();
					break;
				case "6":
					DoSortTunesByOTag();
					break;
				case "7":
					DoSortTunesByID();
					break;
				case "8":
					RenumberXTags();
					break;
				default:
					DoSortTunesByName();
					break;
			}
		}
	});
}

//
// UI Clear command
//
function Clear() {

	function doClear(){

		// Start over
		gIsFromShare = false;

		// Clear dirty flag
		gIsDirty = false;

		var elem = document.getElementById("rawmodebutton");

		elem.value = "Highlighting";

		// Grey it out
		elem.classList.remove("rawmodebutton");
		elem.classList.add("rawmodebuttondisabled");

		elem.classList.add("btn-rawmode-off");
		elem.classList.remove("btn-rawmode-on");

		gTheABC.style.backgroundColor = "white";

		// Turn off raw mode
		gRawMode = false;

		// Clear last tune highlight tracker
		gRawLastIndex = -1;

		// If staff spacing had changed due to a share, restore it
		RestoreSavedStaffSpacing();

		ClearNoRender();

		RenderAsync(true,null);

		// And set the focus
	    gTheABC.focus();

	    // Clear the diagnostics area
	    elem = document.getElementById("diagnostics");
	    elem.innerHTML = "";		
		if (gIsQuickEditor){

			// Clean up last play operation
			gMIDIbuffer = null;

			// If on iOS and the muting controller installed, dispose it now
			if (gIsIOS){

				if (gTheMuteHandle){
					gTheMuteHandle.dispose();
						gTheMuteHandle = null;
					}
			}

			if (gSynthControl){
					
				gSynthControl.destroy();

				gSynthControl = null;

			}

		}
	}

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Keep track of actions
	sendGoogleAnalytics("action","Clear");

	if (gConfirmClear){

		var thePrompt = "Are you sure you want to erase all the ABC and start over?";

		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);

		DayPilot.Modal.confirm(thePrompt,{ top:200, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

			if (!args.canceled){

				doClear();

			}

		});
	}
	else{

		doClear();

	}

}

//
// Clear the ABC area, but don't re-render
//
function ClearNoRender() {

	setABCEditorText("");

	// Save it for the status update display
	gDisplayedName = "No ABC file selected";

	gABCFromFile = false;

	RestoreDefaults();

}

//
// Restore the staff spacing from browser storage
//
function RestoreSavedStaffSpacing(){

	if (gLocalStorageAvailable){

		var val = localStorage.abcStaffSpacing;

		val = parseInt(val);

		if (!isNaN(val)){

			gStaffSpacing = STAFFSPACEOFFSET + val;

		}
		else{

			gStaffSpacing = STAFFSPACEOFFSET + STAFFSPACEDEFAULT;

		}
	}
}


//
// Save the current ABC to browser storage at exit time
//
function DoSaveLastAutoSnapShot(){

	if (gLocalStorageAvailable){
		
		var theABC = gTheABC.value;

		localStorage.LastAutoSnapShot = theABC;

	}
}

//
// Save the current ABC to browser storage
//
function SaveSnapshot(e){

	if (gLocalStorageAvailable){

		// Keep track of actions
		sendGoogleAnalytics("action","SaveSnapshot");

		var theABC = gTheABC.value;

		var postfix;

		if (e && (e.shiftKey && e.altKey)){

			postfix = "4";
			localStorage.SavedSnapshot4 = theABC;

		}
		else 
		if (e && e.altKey){

			postfix = "3";
			localStorage.SavedSnapshot3 = theABC;

		}
		else
		if (e && e.shiftKey){

			postfix = "2";
			localStorage.SavedSnapshot2 = theABC;

		}
		else{

			postfix = "1"
			localStorage.SavedSnapshot = theABC;

		}

		document.getElementById("snapshotbutton").value = "Saved #"+postfix;
		
		setTimeout(function(){

			document.getElementById("snapshotbutton").value = "Snapshot";

		},500);
	}
	else{

		// Keep track of actions
		sendGoogleAnalytics("action","SaveSnapshot_Fail");

		var thePrompt = "Snapshot storage not available on this browser.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);

		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

	}
}

//
// Restore current ABC from browser storage
//
// Restores either a user snapshot or an automatically saved snapshot
//

function RestoreSnapshot(e, bRestoreAutoSnapshot,bIsAddDialogButton){
	
	if (gLocalStorageAvailable){

		// Keep track of actions
		sendGoogleAnalytics("action","RestoreSnapshot");

		var theABC = gTheABC.value;

		var theSnapshot, theSnapshot1, theSnapshot2, theSnapshot3, theSnapshot4;

		var thePrompt, theErrorPrompt;

		if (bRestoreAutoSnapshot){

			theSnapshot = localStorage.LastAutoSnapShot;

			thePrompt = "Replace the contents of the ABC editor with the Auto-Snapshot?";

			theErrorPrompt = "No saved Auto-Snapshot available to restore.";

		}
		else{

			var isModifier = true;

			var postfix;
			
			theSnapshot1 = localStorage.SavedSnapshot;
			theSnapshot2 = localStorage.SavedSnapshot2;
			theSnapshot3 = localStorage.SavedSnapshot3;
			theSnapshot4 = localStorage.SavedSnapshot4;

			if (e && (e.shiftKey && e.altKey)){

				theSnapshot = theSnapshot4;
				postfix = "4";

			}
			else
			if (e && e.altKey){

				theSnapshot = theSnapshot3;
				postfix = "3";

			}
			else
			if (e && e.shiftKey){

				theSnapshot = theSnapshot2;
				postfix = "2";

			}
			else{

				theSnapshot = theSnapshot1;
				isModifier = false;
				postfix = "1";

			}

			if (bIsAddDialogButton){

				if (!isModifier){

					// Is there a snapshot1?
					if ((theSnapshot1) && (theSnapshot1 != "")){
						theSnapshot = theSnapshot1;
						postfix = "1";

					}
					else
					if ((theSnapshot2) && (theSnapshot2 != "")){
						theSnapshot = theSnapshot2;
						postfix = "2";

					}
					else
					if ((theSnapshot3) && (theSnapshot3 != "")){
						theSnapshot = theSnapshot3;
						postfix = "3";
					}
					else
					if ((theSnapshot4) && (theSnapshot4 != "")){
						theSnapshot = theSnapshot4;
						postfix = "4";

					}
				}
			}

			thePrompt = "Replace the contents of the ABC editor with Snapshot #"+postfix+"?";

			theErrorPrompt = "No saved Snapshot #"+postfix+" available to restore.";

		}

		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);

		if ((theSnapshot) && (theSnapshot != "")){

			DayPilot.Modal.confirm(thePrompt,{ top:200, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

				if (!args.canceled){

					if (!bIsAddDialogButton){

						document.getElementById("restorebutton").value = "Restoring";

						setTimeout(function(){

							setABCEditorText(theSnapshot);

							// Not from share
							gIsFromShare = false;

							// If staff spacing had changed due to a share, restore it
							RestoreSavedStaffSpacing();


							// Set dirty flag
							gIsDirty = true;

							// Redraw
							RenderAsync(true,null,function(){

								document.getElementById("restorebutton").value = "Restored";
								
								setTimeout(function(){

									document.getElementById("restorebutton").value = "Restore";

								},500);

								// Reset the current tune
								// Force a raw mode visual refresh
							   	gRawLastIndex = -1;
							   	gCurrentTune = 0;

							});

						},250);
					}
					else{

						var elem;

						// The dialog might have been closed, so check that the element is present before idling it

						if (bRestoreAutoSnapshot){
							elem = document.getElementById("dialogrestoreautobutton");
							if (elem){
								elem.value = "Restoring from Auto-Snapshot";
							}
						}
						else{
							elem = document.getElementById("dialogrestorebutton");
							if (elem){
								elem.value = "Restoring from Snapshot";
							}
						}

						setTimeout(function(){

							setABCEditorText(theSnapshot);

							// Not from share
							gIsFromShare = false;

							// Set dirty flag
							gIsDirty = true;

							// If staff spacing had changed due to a share, restore it
							RestoreSavedStaffSpacing();

							// Redraw
							RenderAsync(true,null,function(){

								var elem;

								// The dialog might have been closed, so check that the element is present before idling it

								if (bRestoreAutoSnapshot){
									elem = document.getElementById("dialogrestoreautobutton");
									if (elem){
										elem.value = "Restored from Auto-Snapshot";
									}
								}
								else{
									elem = document.getElementById("dialogrestorebutton");
									if (elem){
										elem.value = "Restored from Snapshot";
									}
								}

								setTimeout(function(){

									var elem;

									// The dialog might have been closed, so check that the element is present before idling it

									if (bRestoreAutoSnapshot){
										elem = document.getElementById("dialogrestoreautobutton");

										if (elem){
											elem.value = "Restore from Auto-Snapshot";
										}
									}
									else{
										elem = document.getElementById("dialogrestorebutton");
										if (elem){
											elem.value = "Restore from Snapshot";
										}
									}

								},500);

								// Reset the current tune
								// Force a raw mode visual refresh
							   	gRawLastIndex = -1;
							   	gCurrentTune = 0;


							});

						},250);
					}
				}
			});
		}
		else{

			// Keep track of actions
			sendGoogleAnalytics("action","RestoreSnapshot_Fail_1");

			DayPilot.Modal.alert('<p style="text-align:center;font-size:18px;">'+theErrorPrompt+'</p>',{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		}
		
	}
	else{

		// Keep track of actions
		sendGoogleAnalytics("action","RestoreSnapshot_Fail_2");

		var thePrompt = "Snapshot storage not available on this browser.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);

		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

	}
}

//
// PDF conversion shared globals
//

// Rendering offsets based on paper size
var gPAGENUMBERTOP = 296;
var PAGETOPOFFSET = 32;
var PAGEBOTTOMOFFSET = 24; // Was 32
var PAGELEFTOFFSET = 37;
var PAGELEFTOFFSETA4 = 29;
var PAGEHEIGHTLETTER = 792;
var PAGEHEIGHTA4 = 842;
var PAGEHEIGHTLETTER_LANDSCAPE = 580;
var PAGEHEIGHTA4_LANDSCAPE = 565;
var BETWEENTUNESPACE = 20;

var gBetweenTuneSpace = 20;  // Can be overriden with a %pdf_between_tune_space directive
var gGotBetweenTuneSpace = false;

// Keeps track of where we are on the page
var running_height = PAGETOPOFFSET;

// For incipits, which column
var column_number = 0;

// Page count
var theCurrentPageNumber = 1;

// True for the first page rendered
var isFirstPage = true;

// How many tunes processed so far
var tunesProcessed = 0;

// Total number of tunes being processed
var totalTunes = 0;

// Page header and footer
var thePageHeader = "";
var thePageFooter = "";
var thePageHeaderURL = "";
var thePageFooterURL = "";

// Need to cache the time, since you don't want it to change during the render from page to page
var theRenderTime = ""; 

// Don't want to recalc this each time
var theHeaderFooterTuneNames = "";

// Page number vertical offset
var thePageNumberVerticalOffset = 0;

// Did they request a QR code
var gQRCodeRequested = false;
var gQRCodeURLOverride = "";
var gDoForceQRCodeURLOverride = false;

// Did they request a QR code caption override
var gQRCodeCaptionOverride = "";
var gDoForceQRCodeCaptionOverride = false;

// Did they request an tunebook index?
var TunebookIndexRequested = false;
var theTunebookIndexTitle = "";

// Did they request an sorted tunebook index?
var TunebookSortedIndexRequested = false;
var theTunebookSortedIndexTitle = "";

// Did they request an tunebook Index header?
var TunebookIndexHeaderRequested = false;
var theTunebookIndexHeader = "";

// Did they request an tunebook TOC?
var TunebookTOCRequested = false;
var theTunebookTOCTitle = "";

// Did they request a sorted tunebook TOC?
var TunebookSortedTOCRequested = false;
var theTunebookSortedTOCTitle = "";

// Did they request an tunebook TOC header?
var TunebookTOCHeaderRequested = false;
var theTunebookTOCHeader = "";

// Did they request an tunebook title page?
var TunebookTPRequested = false;
var theTunebookTP = "";
var theTunebookTPURL = "";

// Did they request an tunebook title page subtitle?
var TunebookTPSTRequested = false;
var theTunebookTPST = "";
var theTunebookTPSTURL = "";

// Have bookmarks been added
var TunebookBookmarksAdded = false;

// Did they request a TOC with no page numbers?
var TunebookTOCWithNoPageNumbers = false;

// Did they request an Index with no page numbers?
var TunebookIndexWithNoPageNumbers = false;

// First page number number
var TunebookFirstPageNumber = 0;
var TunebookFirstPageAuto = false;

// Tune page map
var theTunePageMap = [];

// PDF JPG quality (range is 0 to 1)
var PDFJPGQUALITY = 0.8;

// Internal PDF scale factor
var PDFSCALEFACTOR = 1.55;

// The offscreen render div
var theOffscreen = null;

// PDF generation cancel requested
var gPDFCancelRequested = false;

// Which instrument
var gPDFTabselected = "noten";

// PDF object to render to
var pdf;

//
// Get the tune index titles
//
function GetTunebookIndexTitles(){

	var i;

	var theTitles = [];

	for (i=0;i<totalTunes;++i){

		var thisTune = getTuneByIndex(i);

		var lines = thisTune.split("\n"); // Split the string by new line

		var bGotTitle = false;

		for (var j = 0; j < lines.length; ++j) {

			var currentLine = lines[j].trim(); // Trim any whitespace from the line

			// Check if the line starts with "T:"
			if (currentLine.startsWith("T:")) {

				var title = currentLine.slice(2).trim(); // Extract the title after "T:"

				theTitles.push(title);

				bGotTitle = true;

				break;

			}

		}

		if (!bGotTitle){
			theTitles.push("No Title");
		}

	}

	return theTitles;
}

//
// Tune title page font sizes
//
var TPTITLESIZE = 24;
var TPSTTITLESIZE = 16;
var gTPTOPOFFSET = 435;
var TPSTOFFSET = 24;

//
// Generate and append a tune index to the current PDF
//
function AppendTuneTitlePage(thePDF,paperStyle,theTitle,theSubtitle){

	// Add a new page
	thePDF.setPage(1); 

	if (theTitle != ""){

		// Set the font size
		thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");

		thePDF.setFontSize(TPTITLESIZE);

		if (theTunebookTPURL && (theTunebookTPURL != "")){

			var textWidth = thePDF.getTextWidth(theTitle);

			// Add the title as a hyperlink			
			thePDF.textWithLink(theTitle, (thePDF.internal.pageSize.getWidth()/3.10)  - (textWidth/2), gTPTOPOFFSET , {align:"center", url:theTunebookTPURL});

		}
		else{

			// Add the title
			thePDF.text(theTitle, thePDF.internal.pageSize.getWidth()/3.10, gTPTOPOFFSET, {align:"center"});

		}

	}

	if (theSubtitle != ""){

		// Set the font size
		thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
		thePDF.setFontSize(TPSTTITLESIZE);

		if (theTunebookTPSTURL && (theTunebookTPSTURL != "")){

			var textWidth = thePDF.getTextWidth(theSubtitle);

			// Add the title as a hyperlink			
			thePDF.textWithLink(theSubtitle, (thePDF.internal.pageSize.getWidth()/3.10)  - (textWidth/2), gTPTOPOFFSET+TPSTOFFSET , {align:"center", url:theTunebookTPSTURL});

		}
		else{

			// Add the subtitle
			thePDF.text(theSubtitle, thePDF.internal.pageSize.getWidth()/3.10, gTPTOPOFFSET+TPSTOFFSET, {align:"center"});

		}

	}

}

//
// Text incipits page layout constants
//
var gTEXTINCIPITTOPOFFSET = 330;
var TEXTINCIPITBOTTOMOFFSET = 12;
var gTEXTINCIPITLEFTMARGIN = 65;
var gTEXTINCIPITRIGHTMARGIN = 190; 
var TEXTINCIPITFONTSIZE = 12;
var TEXTINCIPITLINESPACING = 12;
var TEXTINCIPITGUTTER = 5;
//
// Generate a set of ABC text incipits
//

//
// Fit the title and the key in the available space
// If too wide, truncate with ... 
//
function fitIncipitsTitle(thePDF, title, key, widthToFit){

	var thisTitle = title;

	// Should never happen, but catch it anyway
	if (title == ""){

		thisTitle = "No title";

		if (key != ""){
			thisTitle += " (" + key + ")";
		}

		return thisTitle;
	}

	thisTitle = thisTitle.trim();

	if (key != ""){
		thisTitle += " (" + key + ")";
	}

	thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
	thePDF.setFontSize(TEXTINCIPITFONTSIZE);

	var width = thePDF.getTextWidth(thisTitle);

	if (title == ""){
		return thisTitle;
	}

	// Does it fit without modification
	if (width <= widthToFit){
		return thisTitle;
	}
	// else{
	// 	console.log("fitIncipitsTitle: "+title+" key: "+key+" widthToFit: "+widthToFit);
	// 	console.log("width = "+width+" - too wide!");
	// }

	//debugger;

	// No, need to truncate
	var postFix = "...";
	if (key != ""){
		postFix += " (" + key + ")";
	}

	var postFixWidth = thePDF.getTextWidth(postFix);

	widthToFit -= postFixWidth;
	widthToFit -= thePDF.getTextWidth("W");

	var accum = "";

	var titleLength = thisTitle.length;
	var titleWidth;

	for (var i=0;i<titleLength;++i){
		accum += thisTitle[i];
		titleWidth = thePDF.getTextWidth(accum);
		if (titleWidth > widthToFit){
			break;
		}
	}

	return accum+postFix;

}

//
// Clean an incipit line
//
function cleanIncipitLine(theTextIncipit){

	//console.log("Starting incipit:");
	//console.log(theTextIncipit);

	// Strip any embedded voice [V:*]
	searchRegExp = /\[V:\s*\d+\]/gm
	theTextIncipit = theTextIncipit.replace(searchRegExp, "");
	//console.log(theTextIncipit);

	// Strip any embedded voice V: *
	//searchRegExp = /V: [^ ]+ /gm
	searchRegExp = /V:\s+\S+\s/gm
	theTextIncipit = theTextIncipit.replace(searchRegExp, "");
	//console.log(theTextIncipit);

	// Strip any embedded voice V:*
	searchRegExp = /V:[^ ]+ /gm
	theTextIncipit = theTextIncipit.replace(searchRegExp, "");
	//console.log(theTextIncipit);

	// Sanitize !*! style annotations
    searchRegExp = /![^!\n]*!/gm 
	theTextIncipit = theTextIncipit.replace(searchRegExp, "");
	//console.log(theTextIncipit);

	// Strip out repeat marks
	theTextIncipit = theTextIncipit.replaceAll(":","");
	//console.log(theTextIncipit);

	// Strip out brackets
	theTextIncipit = theTextIncipit.replaceAll("[","");
	//console.log(theTextIncipit);

	// Strip out brackets
	theTextIncipit = theTextIncipit.replaceAll("]","");
	//console.log(theTextIncipit);

	// Strip out continuations
	theTextIncipit = theTextIncipit.replaceAll("\\","");

	//console.log("Final raw incipit :");
	//console.log(theTextIncipit);

	return theTextIncipit;
}

function GenerateTextIncipits(thePDF,addPageNumbers,pageNumberLocation,hideFirstPageNumber,paperStyle,tunePageMap,sortTunes){

	var thePaperHeight = thePDF.internal.pageSize.getHeight();;
	var thePaperWidth = thePDF.internal.pageSize.getWidth()/1.55;

	var pageSizeWithMargins = thePaperHeight - (PAGETOPOFFSET + TEXTINCIPITBOTTOMOFFSET);

	var curTop = gTEXTINCIPITTOPOFFSET;

	// Get all the tune titles (uses first T: tag found)
	var theTitles = GetTunebookIndexTitles();

	var i,j,k;

	// Set the font size
	thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
	thePDF.setFontSize(TEXTINCIPITFONTSIZE);

	var theTune;
	var theTextIncipit;
	var theRawSplits;
	var theSplitIncipit;
	var searchRegExp;
	var theLines;
	var nLines;
	var nSplits;
	var splitAcc;
	var thisTitle;
	var searchRegExp;
	var theKey;

	var theIncipits = [];

	// Add the tunes by name and page number
	for (i=0;i<totalTunes;++i){

		// Get the raw tune ABC
		theTune = getTuneByIndex(i);

		// Strip out annotations
		theTune = StripAnnotationsOne(theTune);

		// Strip out text annotations
		theTune = StripTextAnnotationsOne(theTune);

		// Strip out chord markings
		theTune = StripChordsOne(theTune);

		// Strip out injected tab
		theTune = StripTabOne(theTune);

		// We also need to strip the meter markings:
		searchRegExp = /^M:.*[\r\n]*/gm

		// Strip out tempo markings
		theTune = theTune.replace(searchRegExp, "");

		theLines = theTune.split("\n");

		nLines = theLines.length;

		// Find the key
		theKey = "";

		// Find the key
		for (j=0;j<nLines;++j){

			theKey = theLines[j]; 

			if (theKey.indexOf("K:")!= -1){
				break;
			}

		}

		theKey = theKey.replace("K:","");
		theKey = theKey.trim();

		// Shorten the mode
		theKey = theKey.replace("Major","maj");
		theKey = theKey.replace("Minor","min");
		theKey = theKey.replace("Dorian","dor");
		theKey = theKey.replace("Mixolydian","mix");
		theKey = theKey.replace("major","maj");
		theKey = theKey.replace("minor","min");
		theKey = theKey.replace("dorian","dor");
		theKey = theKey.replace("mixolydian","mix");
		theKey = theKey.replace(" ","");

		//debugger;
		//var gotSecondLine = false;

		// Find the first line of the tune that has measure separators
		for (j=0;j<nLines;++j){

			theTextIncipit = theLines[j]; 

			// Score directives can have bar characters, reject them
			if (theTextIncipit.indexOf("%%score")!= -1){
				continue;
			}

			if (theTextIncipit.indexOf("|")!= -1){

				//debugger;
				//console.log("Incipit first line: "+theTextIncipit);

				// Add on the second line line just in case it's a pickup line (KSS case)
				if (j <= (nLines-2)){

					// Find the second line of the tune that has measure separators
					for (k=j+1;k<nLines;++k){

						var theSecondTextIncipit = theLines[k]; 

						if (theSecondTextIncipit.indexOf("|")!= -1){

							//debugger;

							//console.log("Incipit second line: "+theSecondTextIncipit);

							//gotSecondLine = true;

							// Add on the second line line just in case it's a pickup line
							theTextIncipit = theTextIncipit + theSecondTextIncipit;
							
							break;
						}

					}

				}

				break;
			}

		}

		// if (!gotSecondLine){
		// 	debugger;
		// }

		// Clean out the incipit line of any annotations besides notes and bar lines
		theTextIncipit = cleanIncipitLine(theTextIncipit);

		//console.log("Final raw incipit : "+theTextIncipit);

		// Split the incipit
		theRawSplits = theTextIncipit.split("|");

		theSplitIncipit = [];

		nSplits = theRawSplits.length;

		// Strip out any blank splits
		for (j=0;j<nSplits;++j){

			if (theRawSplits[j] != ""){

				theSplitIncipit.push(theRawSplits[j]);

			}

		}

		// Use just the first few measures
		nSplits = theSplitIncipit.length;

		if (nSplits > 3){
			nSplits = 3;
		}

		splitAcc = "";

		for(j=0;j<nSplits;++j){

			theSplitIncipit[j] = theSplitIncipit[j].trim();

			splitAcc += theSplitIncipit[j];

			if (j != (nSplits - 1)){
				splitAcc += " | ";
			}
		}

		theTextIncipit = splitAcc;

		// Strip initial bar line
		if (theTextIncipit.indexOf(" | ") == 0){
			theTextIncipit = theTextIncipit.substring(3,theTextIncipit.length);
		}

		// Collapse double spaces to a single space
		theTextIncipit = theTextIncipit.replaceAll("  "," ");

		//console.log("Final incipit : "+theTextIncipit);

		//console.log("-------------------------");

		thisTitle = theTitles[i];

		// Limit the incipit length
		if (theTextIncipit.length > 40){
			theTextIncipit = theTextIncipit.substring(0,40);
			theTextIncipit = theTextIncipit.trim();
		}
		else{
			theTextIncipit = theTextIncipit.trim();
		}


		// If sorting incipits, do the The, Da, A, and An replacement before appending the key
		if (sortTunes){

			thisTitle = processTitleForSorting(thisTitle);

		}

		// Fit the title in the available space
		thisTitle = fitIncipitsTitle(thePDF, thisTitle, theKey, ((thePaperWidth-gTEXTINCIPITRIGHTMARGIN) - gTEXTINCIPITLEFTMARGIN) - TEXTINCIPITGUTTER);
			
		theIncipits.push({title:thisTitle,incipit:theTextIncipit,index:i});
	}

	// Sorted incipipits requested?
	if (sortTunes){

		var thisTitle;

		var tuneInfo = [];
		
		//debugger;

		for (i=0;i<totalTunes;++i){

			tuneInfo.push({title:theIncipits[i].title,incipit:theIncipits[i].incipit,index:theIncipits[i].index});

		}

		//debugger;

		// sort tunes by name
		tuneInfo.sort(customSortTitleWithDiacriticals);

		// Copy the results into the normally consumed arrays
		for (i=0;i<totalTunes;++i){

			theIncipits[i].title = tuneInfo[i].title;

			theIncipits[i].incipit = tuneInfo[i].incipit;

			theIncipits[i].index = tuneInfo[i].index;

		}

		//debugger;
	}

	for (i=0;i<totalTunes;++i){

		thisTitle = theIncipits[i].title;

		var isSectionHeader = false;

		// Strip section header markers
		if (thisTitle.indexOf("*") == 0){

			thisTitle = thisTitle.replaceAll("*","");
			thisTitle = thisTitle.trim();
			
			isSectionHeader = true;

			curTop += TEXTINCIPITLINESPACING;

		}

		theTextIncipit = theIncipits[i].incipit;

		// Set the font size
		thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
		thePDF.setFontSize(TEXTINCIPITFONTSIZE);

		var textWidth = thePDF.getTextWidth(thisTitle);

		if (isSectionHeader){

			// Put them on a new page if they aren't the first tune
			if (i!=0){

				// Bump the page count
				theCurrentPageNumber++;

				// Add a new page
				thePDF.addPage(paperStyle,gPDFOrientation); 

				// Set the font size
				thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
				thePDF.setFontSize(TEXTINCIPITFONTSIZE);

				// Start back at the top
				curTop = gTEXTINCIPITTOPOFFSET;

			}

			thePDF.setFont(gPDFFont,"bold","normal");
			thePDF.setFontSize(TEXTINCIPITFONTSIZE);

			// Re-measure the section header with the bold font
			textWidth = thePDF.getTextWidth(thisTitle);

			thePDF.text(thisTitle, (thePDF.internal.pageSize.getWidth()/3.10) - (textWidth/2), curTop, {align:"left"});

		}
		else{

			thePDF.text(thisTitle, gTEXTINCIPITLEFTMARGIN, curTop, {align:"left"});

			thePDF.setFont("Courier","normal","normal");
			thePDF.setFontSize(TEXTINCIPITFONTSIZE);

			thePDF.text(theTextIncipit, thePaperWidth-gTEXTINCIPITRIGHTMARGIN, curTop, {align:"left"});
		}

		tunePageMap.push(theCurrentPageNumber);

		//
		// Some manual tweaking of the title hyperlink coordinates
		// is required to get them to match the full notation
		// hyperlink injection system
		//
		var pdfVoff;

		if (gPDFOrientation == "portrait"){

			pdfVoff = 119; 

			if (paperStyle == "a4"){
				pdfVoff = 125; 
			}

			gTuneHyperlinks.push({page:theCurrentPageNumber,x:gTEXTINCIPITLEFTMARGIN*1.55,y:(curTop*1.55)-(gTEXTINCIPITTOPOFFSET+pdfVoff),width:(textWidth*1.55),height:TEXTINCIPITLINESPACING*1.55,url:""});
		}
		else{

			pdfVoff = 78;

			if (paperStyle == "a4"){
				pdfVoff = 82;
			}
			gTuneHyperlinks.push({page:theCurrentPageNumber,x:gTEXTINCIPITLEFTMARGIN*1.55,y:((curTop-TEXTINCIPITLINESPACING)*1.55)-(gTEXTINCIPITTOPOFFSET+pdfVoff),width:(textWidth*1.55),height:TEXTINCIPITLINESPACING*1.55,url:""});

		}

		curTop += TEXTINCIPITLINESPACING;

		if (isSectionHeader){

			curTop += TEXTINCIPITLINESPACING;

		}

		if (i != (totalTunes - 1)){

			if (curTop > pageSizeWithMargins){


				// Bump the page count
				theCurrentPageNumber++;

				// Add a new page
				thePDF.addPage(paperStyle,gPDFOrientation); 

				// Set the font size
				thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
				thePDF.setFontSize(TEXTINCIPITFONTSIZE);

				// Start back at the top
				curTop = gTEXTINCIPITTOPOFFSET;

			}
		}
	}

	// If sorted, need to shuffle the hyperlink array
	if (sortTunes){

		// debugger;

		var workingLinks = [];

		for (i=0;i<totalTunes;++i){
		
			for (j=0;j<totalTunes;++j){
		
				if (theIncipits[j].index == i){
		
					workingLinks.push(gTuneHyperlinks[j]);
		
					break;
		
				}
			}
		}
		
		// debugger;

		gTuneHyperlinks = workingLinks;
	}

	return (tunePageMap);

}

//
// Generate a set of ABC text incipits
//
var FULLTEXTINCIPITFONTSIZE = 11;
var FULLTEXTINCIPITLINESPACING = 9;
var FULLTEXTINCIPITLEFTMARGIN = 45;

function GenerateFullTextIncipits(thePDF,addPageNumbers,pageNumberLocation,hideFirstPageNumber,paperStyle,tunePageMap,sortTunes,bDoCCETransform){

	var thePaperHeight = thePDF.internal.pageSize.getHeight();;
	var thePaperWidth = thePDF.internal.pageSize.getWidth()/1.55;

	var pageSizeWithMargins = thePaperHeight - (PAGETOPOFFSET + TEXTINCIPITBOTTOMOFFSET);

	var curTop = gTEXTINCIPITTOPOFFSET;

	// Comhaltas tunes are wider, so make the font smaller
	FULLTEXTINCIPITFONTSIZE = 11;
	FULLTEXTINCIPITLINESPACING = 9;
	FULLTEXTINCIPITLEFTMARGIN = 35;

	if (bDoCCETransform){
		FULLTEXTINCIPITFONTSIZE = 10;
		FULLTEXTINCIPITLINESPACING = 8;
		FULLTEXTINCIPITLEFTMARGIN = 30;
	}

	// Get all the tune titles (uses first T: tag found)
	var theTitles = GetTunebookIndexTitles();

	var i,j,k;

	// Set the font size
	thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
	thePDF.setFontSize(FULLTEXTINCIPITFONTSIZE);

	var theTune;
	var theTextIncipit;
	var theRawSplits;
	var theSplitIncipit;
	var searchRegExp;
	var theLines;
	var nLines;
	var nSplits;
	var splitAcc;
	var thisTitle;
	var searchRegExp;
	var theKey;

	var theIncipits = [];

	// Add the tunes by name and page number
	for (i=0;i<totalTunes;++i){

		// Get the raw tune ABC
		theTune = getTuneByIndex(i);

		// If requested, transform it to Comhaltas ABC format
		// Don't transform section headers
		if (bDoCCETransform){

			if (theTitles[i].indexOf("*") != 0){
				theTune = ceoltasABCTransformer(theTune,false,true);
			}

		}

		// Strip out annotations
		theTune = StripAnnotationsOne(theTune);

		// Strip out atextnnotations
		theTune = StripTextAnnotationsOne(theTune);

		// Strip out chord markings
		theTune = StripChordsOne(theTune);

		// Strip out injected tab
		theTune = StripTabOne(theTune);

		// We also need to strip the meter markings:
		searchRegExp = /^M:.*[\r\n]*/gm

		// Strip out tempo markings
		theTune = theTune.replace(searchRegExp, "");

		// Parse out the first few measures
		theLines = theTune.split("\n");

		nLines = theLines.length;

		// Find the key
		theKey = "";

		// Find the first line of the tune that has measure separators
		for (j=0;j<nLines;++j){

			theKey = theLines[j]; 

			if (theKey.indexOf("K:")!= -1){
				break;
			}

		}

		theKey = theKey.replace("K:","");
		theKey = theKey.trim();

		// Shorten the mode
		theKey = theKey.replace("Major","maj");
		theKey = theKey.replace("Minor","min");
		theKey = theKey.replace("Dorian","dor");
		theKey = theKey.replace("Mixolydian","mix");
		theKey = theKey.replace("major","maj");
		theKey = theKey.replace("minor","min");
		theKey = theKey.replace("dorian","dor");
		theKey = theKey.replace("mixolydian","mix");
		theKey = theKey.replace(" ","");

		var theTextIncipits = [];

		// Find the first line of the tune that has measure separators
		for (k=0;k<nLines;++k){

			theTextIncipit = theLines[k];

			// Skip lines that don't have bar lines
			if (theTextIncipit.indexOf("|") == -1){
				continue;
			}

			// Clean out the incipit line of any annotations besides notes and bar lines
			theTextIncipit = cleanIncipitLine(theTextIncipit);

			// Split the incipit
			theRawSplits = theTextIncipit.split("|");

			theSplitIncipit = [];

			nSplits = theRawSplits.length;

			// Strip out any blank splits
			for (j=0;j<nSplits;++j){

				if (theRawSplits[j] != ""){

					theSplitIncipit.push(theRawSplits[j]);

				}

			}

			// Use just the first few measures
			nSplits = theSplitIncipit.length;

			splitAcc = "";

			for(j=0;j<nSplits;++j){

				theSplitIncipit[j] = theSplitIncipit[j].trim();

				splitAcc += theSplitIncipit[j];

				if (j != (nSplits - 1)){
					splitAcc += " | ";
				}
			}

			theTextIncipit = splitAcc;

			// Strip initial bar line
			if (theTextIncipit.indexOf(" | ") == 0){
				theTextIncipit = theTextIncipit.substring(3,theTextIncipit.length);
			}

			theTextIncipits.push(theTextIncipit);
		}

		thisTitle = theTitles[i];

		thisTitle = thisTitle.trim();

		if (theKey != ""){
			thisTitle += " (" + theKey + ")";
		}

		theIncipits.push({title:thisTitle,incipits:theTextIncipits});
	}

	for (i=0;i<totalTunes;++i){

		thisTitle = theIncipits[i].title;

		var isSectionHeader = false;

		// Strip section header markers
		if (thisTitle.indexOf("*") == 0){

			thisTitle = thisTitle.replaceAll("*","");
			thisTitle = thisTitle.trim();
			
			isSectionHeader = true;

			// Put them on a new page if they aren't the first tune
			if (i != 0){

				// Bump the page count
				theCurrentPageNumber++;

				// Add a new page
				thePDF.addPage(paperStyle,gPDFOrientation); 

				// Start back at the top
				curTop = gTEXTINCIPITTOPOFFSET;

			}

		}

		var theTextIncipits = theIncipits[i].incipits;

		var nLines = theTextIncipits.length;
		
		// Measure the tune
		var theTuneHeight = (FULLTEXTINCIPITLINESPACING*1.5);
		if (nLines > 0){
			theTuneHeight += ((nLines-1) * FULLTEXTINCIPITLINESPACING);
		}

		// If it doesn't fit in the remaining space, move it to the next page
		if ((curTop + theTuneHeight) > pageSizeWithMargins){

			// Bump the page count
			theCurrentPageNumber++;

			// Add a new page
			thePDF.addPage(paperStyle,gPDFOrientation); 

			// Set the font size
			thePDF.setFont("Courier","normal","normal");
			thePDF.setFontSize(FULLTEXTINCIPITFONTSIZE);

			// Start back at the top
			curTop = gTEXTINCIPITTOPOFFSET;			
		}

		tunePageMap.push(theCurrentPageNumber);

		thePDF.setFont(gPDFFont,"bold","normal");

		thePDF.setFontSize(FULLTEXTINCIPITFONTSIZE*1.1);

		thePDF.text(thisTitle, FULLTEXTINCIPITLEFTMARGIN, curTop, {align:"left"});

		var textWidth = thePDF.getTextWidth(thisTitle);

		//
		// Some manual tweaking of the title hyperlink coordinates
		// is required to get them to match the full notation
		// hyperlink injection system
		//
		var pdfVoff;

		if (gPDFOrientation == "portrait"){

			pdfVoff = 117;

			if (paperStyle == "a4"){
				pdfVoff = 124;
			}

			gTuneHyperlinks.push({page:theCurrentPageNumber,x:FULLTEXTINCIPITLEFTMARGIN*1.55,y:(curTop*1.55)-(gTEXTINCIPITTOPOFFSET+pdfVoff),width:(textWidth*1.55),height:1.5*FULLTEXTINCIPITLINESPACING*1.55,url:""});
		}
		else{

			pdfVoff = 83;

			if (paperStyle == "a4"){
				pdfVoff = 83;
			}

			gTuneHyperlinks.push({page:theCurrentPageNumber,x:FULLTEXTINCIPITLEFTMARGIN*1.55,y:((curTop-FULLTEXTINCIPITLINESPACING)*1.55)-(gTEXTINCIPITTOPOFFSET+pdfVoff),width:(textWidth*1.55),height:1.8*FULLTEXTINCIPITLINESPACING*1.55,url:""});

		}

		curTop += FULLTEXTINCIPITLINESPACING*1.5;

		for (var j=0;j<nLines;++j){

			var theTextIncipit = theTextIncipits[j];

			thePDF.setFont("Courier","normal","normal");
			
			thePDF.setFontSize(FULLTEXTINCIPITFONTSIZE);

			thePDF.text(theTextIncipit, FULLTEXTINCIPITLEFTMARGIN, curTop, {align:"left"});

			// Add some space for the next tune
			if ((j==nLines-1) && (i != (totalTunes-1))){

				curTop += FULLTEXTINCIPITLINESPACING;

			}

			curTop += FULLTEXTINCIPITLINESPACING;

			if (i != (totalTunes - 1)){

				if (curTop > pageSizeWithMargins){

					// Bump the page count
					theCurrentPageNumber++;

					// Add a new page
					thePDF.addPage(paperStyle,gPDFOrientation); 

					// Set the font size
					thePDF.setFont("Courier","normal","normal");
					thePDF.setFontSize(FULLTEXTINCIPITFONTSIZE);

					// Start back at the top
					curTop = gTEXTINCIPITTOPOFFSET;

				}
			}

		}

		if (isSectionHeader){

			curTop += FULLTEXTINCIPITLINESPACING;

		}

		if (i != (totalTunes - 1)){

			if (curTop > pageSizeWithMargins){

				// Bump the page count
				theCurrentPageNumber++;

				// Add a new page
				thePDF.addPage(paperStyle,gPDFOrientation); 

				// Set the font size
				thePDF.setFont("Courier","normal","normal");
				thePDF.setFontSize(FULLTEXTINCIPITFONTSIZE);

				// Start back at the top
				curTop = gTEXTINCIPITTOPOFFSET;

			}
		}
	}

	return (tunePageMap);
}

//
// Generate a set of ABC QR Codes
//

//
// Pre-process a tune for QR code URL injection
//
function processSingleTunePlaybackInjectsQR(theTune){

	//
	// Setting swing globally for all hornpipes?
	//

	// First check if swing disabled
	if (!gAllNoSwingHornpipesRequested){

		if (gAllSwingHornpipesRequested){

			// Inject %swing into all hornpipes
			if (tuneIsHornpipe(theTune)){

				// Is there a manual swing disable override?
				if (theTune.indexOf("%noswing") == -1){

					// Strip out the X: tag
					var searchRegExp = /^X:.*[\r\n]*/gm 

					theTune = theTune.replace(searchRegExp, "");

					theTune = "X:1\n%swing "+gAllSwingHornpipesSwingFactor+"\n"+theTune;

				}

			}

		}

	}
	else{

		// Inject %noswing into all hornpipes
		if (tuneIsHornpipe(theTune)){

			// Is there a manual swing override?
			if (theTune.indexOf("%swing") == -1){

				// Strip out the X: tag
				var searchRegExp = /^X:.*[\r\n]*/gm 

				theTune = theTune.replace(searchRegExp, "");

				theTune = "X:1\n%noswing\n"+theTune;

			}

		}

	}

	// If MIDI programs to be injected, do it now
	if (gAddPlaybackHyperlinksIncludePrograms){
		
		// Strip out the X: tag
		var searchRegExp = /^X:.*[\r\n]*/gm 

		// Strip out X:
		theTune = theTune.replace(searchRegExp, "");

		if (gAddPlaybackHyperlinkVolumes){
			theTune = "X:1\n%abcjs_soundfont "+gPlaybackHyperlinkSoundFont+"\n"+"%%MIDI program "+gPlaybackHyperlinkMelodyProgram+"\n"+"%%MIDI bassprog "+gPlaybackHyperlinkBassProgram+"\n"+"%%MIDI bassvol "+gPlaybackHyperlinkBassVolume+"\n"+"%%MIDI chordprog "+gPlaybackHyperlinkChordProgram+"\n"+"%%MIDI chordvol "+gPlaybackHyperlinkChordVolume+"\n"+"%add_all_playback_links\n"+theTune;
		}
		else{
			theTune = "X:1\n%abcjs_soundfont "+gPlaybackHyperlinkSoundFont+"\n"+"%%MIDI program "+gPlaybackHyperlinkMelodyProgram+"\n"+"%%MIDI bassprog "+gPlaybackHyperlinkBassProgram+"\n"+"%%MIDI chordprog "+gPlaybackHyperlinkChordProgram+"\n"+"%add_all_playback_links\n"+theTune;
		}

	}

	// Font injection requested?
	if (gAddAllFonts){
		theTune = injectAllFonts(theTune);
	}

	// Strip injected incipit formatting metadata
	// This is for play links that were created from formatted incipits
	var incipitStart = theTune.indexOf("%incipits_inject_start");

	if (incipitStart != -1){

		var output = theTune.substring(0,incipitStart);

		var endMarker = "%incipits_inject_end";
		var incipitEnd = theTune.indexOf(endMarker);
		incipitEnd += endMarker.length+1;

		output += theTune.substring(incipitEnd,theTune.length);

		theTune = output;

	}


	return theTune;

}

//
// Inject QR codes into the tunebook after the notation pages
//
function PostProcessMixedNotationAndQRCode(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,totalPages,rasterize_callback){

	//console.log("PostProcessMixedNotationAndQRCode");
	
	//debugger;

	// Inject the QR codes
	IntermixTuneQRCodes(pdf,paperStyle,theTunePageMap,totalPages,callback);

	function callback(){

		rasterize_callback();

	}
}

function IntermixTuneQRCodes(thePDF,paperStyle,tunePageMap,totalPages,callback){

	// No tunes, early exit
	if (totalTunes == 0){
		callback();
		return;
	}

	// Get all the tune titles (uses first T: tag found)
	var theTitles = GetTunebookIndexTitles();

	var i,j,k;

	var theTune;

	// Reset the hyperlinks array so they get associated with the QR codes
	gTuneHyperlinks = [];

	var tuneCount = 0

	function process_one_qr_code(index){

		// Got a cancel request, early exit
		if (gPDFCancelRequested){
			//console.log("GenerateFullTuneQRCodes cancel requested");
			callback();
			return;
		}

		if (index == totalTunes){
			callback();
			return;
		}
		
		document.getElementById("statustunecount").innerHTML = "Adding Tune QR Code "+(index+1)+" of "+totalTunes;
		
		// Get the raw tune ABC
		theTune = getTuneByIndex(index);

		if (gAddPlaybackHyperlinks){
			// Inject any tune swing and other per-tune modifications
			theTune = processSingleTunePlaybackInjectsQR(theTune);
		}

		// This is consumed by the QR code creator to set the hyperlink page
		if (index != (totalTunes-1)){
			// Need to get the page before the next tune since tunes may span several pages
			theCurrentPageNumber = tunePageMap[index+1]-1;
		}
		else{
			theCurrentPageNumber = totalPages;
		}

		// Set the page to the one after the tune
		thePDF.setPage(theCurrentPageNumber);
			
		// This needs the callback because the rasterizer is async
		AppendPDFTuneQRCode(pdf,paperStyle,theTune,theTitles[index],pdf_qrcode_callback);

		function pdf_qrcode_callback(){
			
			//console.log("qrcode_callback")
			index++;

			process_one_qr_code(index)
		}

	}

	process_one_qr_code(0);
}


function GenerateFullTuneQRCodes(thePDF,addPageNumbers,pageNumberLocation,hideFirstPageNumber,paperStyle,tunePageMap,callback){

	// No tunes, early exit
	if (totalTunes == 0){
		callback([]);
		return;
	}

	// Get all the tune titles (uses first T: tag found)
	var theTitles = GetTunebookIndexTitles();

	var i,j,k;

	var theTune;

	var tuneCount = 0

	function process_one_qr_code(index){

		// Got a cancel request, early exit
		if (gPDFCancelRequested){
			//console.log("GenerateFullTuneQRCodes cancel requested");
			callback(tunePageMap);
			return;
		}

		if (index == totalTunes){
			callback(tunePageMap);
			return;
		}
		
		document.getElementById("statustunecount").innerHTML = "Adding Tune QR Code "+(index+1)+" of "+totalTunes;

		if (index>0){
			// Add a new page
			thePDF.addPage(paperStyle,gPDFOrientation); 	
		}

		// Get the raw tune ABC
		theTune = getTuneByIndex(index);

		if (gAddPlaybackHyperlinks){
			// Inject any tune swing and other per-tune modifications
			theTune = processSingleTunePlaybackInjectsQR(theTune);
		}
			
		// This needs the callback because the rasterizer is async
		AppendPDFTuneQRCode(pdf,paperStyle,theTune,theTitles[index],pdf_qrcode_callback);

		function pdf_qrcode_callback(){
			
			//console.log("qrcode_callback")

			// Add the tune to the page map
			tunePageMap.push(theCurrentPageNumber);

			if (index != (totalTunes-1)){
				theCurrentPageNumber++;
			}

			index++;

			process_one_qr_code(index)
		}

	}

	process_one_qr_code(0);
}

//
// Tune index page layout constants
//
var gINDEXTOPOFFSET = 330;
var INDEXBOTTOMOFFSET = 16;
var INDEXTITLEOFFSET = 35;
var INDEXLEFTMARGIN = 90;
var INDEXRIGHTMARGIN = 105;
var INDEXTITLESIZE = 18;
var INDEXFONTSIZE = 13;
var INDEXLINESPACING = 12;
var gINDEXLEFTOFFSET = 0;
var gINDEXRIGHTOFFSET = 0;

//
// Generate and append a tune index to the current PDF
//
function AppendTunebookIndex(thePDF,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageNumberList,theTitle,sortTunes,isSortedABCIncipits,doPageLinks,pageDelta){

	// Add a new page
	thePDF.addPage(paperStyle,gPDFOrientation); 

	// Tunebook index header requested?
	if (TunebookIndexHeaderRequested){

		AddPageTextHeader(thePDF,paperStyle,theTunebookIndexHeader);

	}

	// Set the font size
	thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
	thePDF.setFontSize(INDEXTITLESIZE);

	if (theTitle != ""){

		// Add the tune names
		thePDF.text(theTitle, thePDF.internal.pageSize.getWidth()/3.10, gINDEXTOPOFFSET, {align:"center"});

	}

	// Get all the tune titles (uses first T: tag found)
	var theTitles = GetTunebookIndexTitles();
 
	var thePaperHeight = pdf.internal.pageSize.getHeight();;
	var thePaperWidth = pdf.internal.pageSize.getWidth()/1.55;

	var pageSizeWithMargins = thePaperHeight - (PAGETOPOFFSET + INDEXBOTTOMOFFSET);

	var curTop = gINDEXTOPOFFSET + INDEXTITLEOFFSET;

	var i;
	var thePageNumber;

	// Set the font size
	thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
	thePDF.setFontSize(INDEXFONTSIZE);

	// Make a copy of the page map
	var localPageMap = [];

	for (i=0;i<totalTunes;++i){

		localPageMap.push(theTunePageNumberList[i]);

	}

	// Sorted index requested?
	if (sortTunes){

		// Move "The", "Da ", "An ", or "A " to the end
		var thisTitle;

		for (i=0;i<totalTunes;++i){

			thisTitle = theTitles[i];

			thisTitle = processTitleForSorting(thisTitle);
			
			theTitles[i] = thisTitle;

		}

		var tuneInfo = [];
		
		for (i=0;i<totalTunes;++i){

			tuneInfo.push({name:theTitles[i],pageNumber:localPageMap[i]});

		}

		// sort tunes by name
		tuneInfo.sort(customSortNameWithDiacriticals);

		// Copy the results into the normally consumed arrays
		for (i=0;i<totalTunes;++i){

			theTitles[i]= tuneInfo[i].name;

			if (!isSortedABCIncipits){

				localPageMap[i]= tuneInfo[i].pageNumber;
			}

		}
	
	}

	var firstSectionHeader = true;

	// Add the tunes by name and page number
	for (i=0;i<totalTunes;++i){

		thePageNumber = localPageMap[i];

		var theFinalPageNumber = thePageNumber;

		// Add title page and TOC page count offset to page links
		if (doPageLinks){
			theFinalPageNumber += pageDelta;
		}

		if (theTitles[i].indexOf("*") != 0){

			// Did they request a TOC with no page numbers?
			if (!TunebookIndexWithNoPageNumbers){

				if (doPageLinks){

					thePDF.textWithLink(theTitles[i], INDEXLEFTMARGIN - gINDEXLEFTOFFSET, curTop, {align:"left",pageNumber:theFinalPageNumber});
    				
    				if (!TunebookBookmarksAdded){

    					thePDF.outline.add(null, theTitles[i], {pageNumber:theFinalPageNumber});

    				}

 				}
				else{
					thePDF.text(theTitles[i], INDEXLEFTMARGIN - gINDEXLEFTOFFSET, curTop, {align:"left"});
				}

				if (doPageLinks){
					thePDF.textWithLink(""+(thePageNumber+TunebookFirstPageNumber-1), thePaperWidth-INDEXRIGHTMARGIN + gINDEXRIGHTOFFSET, curTop, {align:"left",pageNumber:theFinalPageNumber});
				}
				else{
					thePDF.text(""+(thePageNumber+TunebookFirstPageNumber-1), thePaperWidth-INDEXRIGHTMARGIN + gINDEXRIGHTOFFSET, curTop, {align:"left"});
				}

			}
			else{

				var textWidth = thePDF.getTextWidth(theTitles[i]);

				if (doPageLinks){

					thePDF.textWithLink(theTitles[i], (thePDF.internal.pageSize.getWidth()/3.10) - (textWidth/2), curTop, {align:"left",pageNumber:theFinalPageNumber});
    				
    				if (!TunebookBookmarksAdded){

    					thePDF.outline.add(null, theTitles[i], {pageNumber:theFinalPageNumber});

    				}
				}
				else{

					thePDF.text(theTitles[i], (thePDF.internal.pageSize.getWidth()/3.10) - (textWidth/2), curTop, {align:"left"});

				}

			}

			curTop += INDEXLINESPACING;

		}
		else{

			// Add an Index section header
			var theSectionName = theTitles[i];
			
			theSectionName = theSectionName.replaceAll("*","");
			theSectionName = theSectionName.trim();

			var textWidth = thePDF.getTextWidth(theSectionName);

			if (!sortTunes){

				if (!firstSectionHeader){
					curTop += INDEXLINESPACING;
					firstSectionHeader = true;
				}

				if (firstSectionHeader){
					firstSectionHeader = false;
				}

			}

			if (doPageLinks){
				
				thePDF.textWithLink(theSectionName, (thePDF.internal.pageSize.getWidth()/3.10) - (textWidth/2), curTop, {align:"left",pageNumber:theFinalPageNumber});
				
				if (!TunebookBookmarksAdded){

					thePDF.outline.add(null, theSectionName, {pageNumber:theFinalPageNumber});

				}

			}
			else{
				thePDF.text(theSectionName, (thePDF.internal.pageSize.getWidth()/3.10) - (textWidth/2), curTop, {align:"left"});
			}

			if (!sortTunes){

				curTop += INDEXLINESPACING*2;

			}
			else{

				curTop += INDEXLINESPACING;

			}

		}

		if (i != (totalTunes - 1)){

			if (curTop > pageSizeWithMargins){

				// Bump the page count
				theCurrentPageNumber++;

				// Add a new page
				thePDF.addPage(paperStyle,gPDFOrientation);

				// Index header requested? 
				if (TunebookIndexHeaderRequested){

					AddPageTextHeader(thePDF,paperStyle,theTunebookIndexHeader);

				}

				// Set the font size
				thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
				thePDF.setFontSize(INDEXFONTSIZE);

				// Start back at the top
				curTop = gINDEXTOPOFFSET + INDEXTITLEOFFSET;

			}
		}

		// Only remove the top spacing for a first tune section header
		firstSectionHeader = false;

	}


	// We're on a new page
	theCurrentPageNumber++;

}

//
// Post process page headers and footer
//
function PostProcessHeadersAndFooters(thePDF,addPageNumbers,startingPage,nPages,pageNumberLocation,hideFirstPageNumber,paperStyle){

	for (var i=startingPage;i<startingPage+nPages;++i){
		
		// Set the page
		thePDF.setPage(i);

		// Add the header and footer
		AddPageHeaderFooter(thePDF,addPageNumbers,(i-startingPage+1),pageNumberLocation,hideFirstPageNumber,paperStyle);
	}

}

//
// Process tune hyperlinks
//

var gAcrobatURLLimitExceeded = [];
var ACROBATMAXURLLENGTH = 2076;
var gGotURLLengthWarning = false;

// Inject all fonts used by the tune
function injectAllFonts(theTune){

	//console.log("injectAllFonts");
	
	var stringToInject = "";

	// These are always injected
	stringToInject += "%%titlefont "+gRenderingFonts.titlefont+"\n";
	stringToInject += "%%subtitlefont "+gRenderingFonts.subtitlefont+"\n";
	stringToInject += "%%infofont "+gRenderingFonts.infofont+"\n";
	stringToInject += "%%tempofont "+gRenderingFonts.tempofont+"\n";
	stringToInject += "%%gchordfont "+gRenderingFonts.gchordfont+"\n";
	stringToInject += "%%annotationfont "+gRenderingFonts.annotationfont+"\n";
	stringToInject += "%%textfont "+gRenderingFonts.textfont+"\n";

	// The rest are only injected if used

	if (theTune.indexOf("C:") != -1){
		stringToInject += "%%composerfont "+gRenderingFonts.composerfont+"\n";
	}

	if (theTune.indexOf("H:") != -1){
		stringToInject += "%%historyfont "+gRenderingFonts.historyfont+"\n";
	}

	if (theTune.indexOf("V:") != -1){
		stringToInject += "%%voicefont "+gRenderingFonts.voicefont+"\n";
	}

	if (theTune.indexOf("P:") != -1){
		stringToInject += "%%partsfont "+gRenderingFonts.partsfont+"\n";
	}

	if (theTune.indexOf("w:") != -1){
		stringToInject += "%%vocalfont "+gRenderingFonts.vocalfont+"\n";
	}

	if (theTune.indexOf("W:") != -1){
		stringToInject += "%%wordsfont "+gRenderingFonts.wordsfont+"\n";
	}

	var tabs = GetRadioValue("notenodertab");

	if (tabs != "noten"){
		stringToInject += "%%tablabelfont "+gRenderingFonts.tablabelfont+"\n";
		stringToInject += "%%tabnumberfont "+gRenderingFonts.tabnumberfont+"\n";
		stringToInject += "%%tabgracefont "+gRenderingFonts.tabgracefont+"\n";
	}

	// Strip out the X: tag
	var searchRegExp = /^X:.*[\r\n]*/gm 

	theTune = theTune.replace(searchRegExp, "");

	theTune = "X:1\n"+stringToInject+theTune;

	return theTune;
}

function GetAllTuneHyperlinks(theLinks) {

	// Check for max URL length exceeded on a full tunebook hyperlink
	gGotURLLengthWarning = false;

	function processSingleTunePlaybackInjects(theTune){

		//
		// Setting swing globally for all hornpipes?
		//

		// First check if swing disabled
		if (!gAllNoSwingHornpipesRequested){

			if (gAllSwingHornpipesRequested){

				// Inject %swing into all hornpipes
				if (tuneIsHornpipe(theTune)){

					// Is there a manual swing disable override?
					if (theTune.indexOf("%noswing") == -1){

						// Strip out the X: tag
						var searchRegExp = /^X:.*[\r\n]*/gm 

						theTune = theTune.replace(searchRegExp, "");

						theTune = "X:1\n%swing "+gAllSwingHornpipesSwingFactor+"\n"+theTune;

					}

				}

			}

		}
		else{

			// Inject %noswing into all hornpipes
			if (tuneIsHornpipe(theTune)){

				// Is there a manual swing override?
				if (theTune.indexOf("%swing") == -1){

					// Strip out the X: tag
					var searchRegExp = /^X:.*[\r\n]*/gm 

					theTune = theTune.replace(searchRegExp, "");

					theTune = "X:1\n%noswing\n"+theTune;

				}

			}

		}

		// If MIDI programs to be injected, do it now
		if (gAddPlaybackHyperlinksIncludePrograms){
			
			// Strip out the X: tag
			var searchRegExp = /^X:.*[\r\n]*/gm 

			// Strip out X:
			theTune = theTune.replace(searchRegExp, "");

			if (gAddPlaybackHyperlinkVolumes){
				theTune = "X:1\n%abcjs_soundfont "+gPlaybackHyperlinkSoundFont+"\n"+"%%MIDI program "+gPlaybackHyperlinkMelodyProgram+"\n"+"%%MIDI bassprog "+gPlaybackHyperlinkBassProgram+"\n"+"%%MIDI bassvol "+gPlaybackHyperlinkBassVolume+"\n"+"%%MIDI chordprog "+gPlaybackHyperlinkChordProgram+"\n"+"%%MIDI chordvol "+gPlaybackHyperlinkChordVolume+"\n"+"%add_all_playback_links\n"+theTune;
			}
			else{
				theTune = "X:1\n%abcjs_soundfont "+gPlaybackHyperlinkSoundFont+"\n"+"%%MIDI program "+gPlaybackHyperlinkMelodyProgram+"\n"+"%%MIDI bassprog "+gPlaybackHyperlinkBassProgram+"\n"+"%%MIDI chordprog "+gPlaybackHyperlinkChordProgram+"\n"+"%add_all_playback_links\n"+theTune;
			}

		}

		// Font injection requested?
		if (gAddAllFonts){
			theTune = injectAllFonts(theTune);
		}
		
		// Strip injected incipit formatting metadata
		// This is for play links that were created from formatted incipits
		var incipitStart = theTune.indexOf("%incipits_inject_start");

		if (incipitStart != -1){

			var output = theTune.substring(0,incipitStart);

			var endMarker = "%incipits_inject_end";
			var incipitEnd = theTune.indexOf(endMarker);
			incipitEnd += endMarker.length+1;

			output += theTune.substring(incipitEnd,theTune.length);

			theTune = output;

		}

		return theTune;

	}

	// 
	// Process the injections for the entire tunebook
	function processEntireTunebookPlaybackInjects(){

		var nTunes = CountTunes();

		var theNotes = gTheABC.value;
		
		var output = FindPreTuneHeader(theNotes);

		for (var i = 0; i < nTunes; ++i) {

			// See if there is a hyperlink override for this tune
			var thisTune = getTuneByIndex(i);

			// Don't add hyperlinks to section headers
			if (theTitles[i].indexOf("*") == 0){

				output+=thisTune;

			}
			else{

				thisTune = processSingleTunePlaybackInjects(thisTune);
				output += thisTune;

			}

		}

		return output;

	}

	// Keep track of any tunes that exceed the Acrobat maximum length
	gAcrobatURLLimitExceeded = [];

	var nTunes = CountTunes();

	var theTitles;

	theTitles = GetTunebookIndexTitles();

	// There must be a one-to-one correspondence of tune count to hyperlink record count
	if (nTunes != theLinks.length){

		return false;

	}

	for (var i = 0; i < nTunes; ++i) {

		// See if there is a hyperlink override for this tune
		var thisTune = getTuneByIndex(i);

		// Don't add hyperlinks to section headers
		if (theTitles[i].indexOf("*") == 0){
			continue;
		}

		// Clear the tunebook toc string
		var theHyperlink = "";

		// Add a playback hyperlink?
		if (gAddPlaybackHyperlinks){

			var tuneWithPatch = thisTune;

			if (gAddTunebookPlaybackHyperlinks){

				// Inject any tune swing and other per-tune modifications
				tuneWithPatch = processEntireTunebookPlaybackInjects();

			}
			else{

				// Inject any tune swing and other per-tune modifications
				tuneWithPatch = processSingleTunePlaybackInjects(tuneWithPatch);

			}

			tuneWithPatch = GetABCFileHeader() + tuneWithPatch;

			// Create a share URL for this tune
			var theURL = FillUrlBoxWithAbcInLZW(tuneWithPatch,false);

			// Test max share URL length and one-time warn if too long
			if (theURL.length >= 8100 ){

				if (!gGotURLLengthWarning){

					gGotURLLengthWarning = true;
					
					if (gAddTunebookPlaybackHyperlinks){

						DayPilot.Modal.alert('<p style="text-align:center;font-family:helvetica;font-size:12pt;">Share URL for entire tunebook is too long to add to the tunes.</p>',{ theme: "modal_flat", top: 230, scrollWithPage: (AllowDialogsToScroll()) });

					}
				}
			}
			else{

				// MAE 11 July 2024 - For open in editor
				if (!gOpenInEditor){

					// Add play link
					theURL += "&play=1";

					// If full tunebook play link, add tune index
					if (gAddTunebookPlaybackHyperlinks){
						theURL += "&index="+i;
					}

					// Add the play parameter
					if (gInjectEditDisabled){
						theURL += "&dx=1"
					}

					// Warn if too large for Acrobat Reader
					if (theURL.length > ACROBATMAXURLLENGTH){

						gAcrobatURLLimitExceeded.push({name:theTitles[i],urllength:theURL.length});

					}			

					theLinks[i].url = theURL;
				}
				else{

					// Add open in editor
					theURL += "&editor=1";

					// Warn if too large for Acrobat Reader
					if (theURL.length > ACROBATMAXURLLENGTH){

						gAcrobatURLLimitExceeded.push({name:theTitles[i],urllength:theURL.length});

					}			

					theLinks[i].url = theURL;

				}

			}

		}
		else
		// Add a thesession.org hyperlink?
		if (gAddTheSessionHyperlinks){

			theLinks[i].url = "https://thesession.org/tunes/search?q="+encodeURIComponent(theTitles[i]);

		}

		// Search for a thesession hyperlink request
		var searchRegExp = /^%add_link_to_thesession.*$/m

		// Detect thesession hyperlink annotation
		var addTheSessionHyperlink = thisTune.match(searchRegExp);

		if ((addTheSessionHyperlink) && (addTheSessionHyperlink.length > 0)){

			theLinks[i].url = "https://thesession.org/tunes/search?q="+encodeURIComponent(theTitles[i]);

		}
		
		// Search for a playback hyperlink request
		searchRegExp = /^%add_playback_link.*$/m

		// Detect playback hyperlink annotation
		var addPlaybackHyperlink = thisTune.match(searchRegExp);

		if ((addPlaybackHyperlink) && (addPlaybackHyperlink.length > 0)){

			var tuneWithPatch = thisTune;

			var thePatch = addPlaybackHyperlink[0].replace("%add_playback_link","");

			var thePatches = thePatch.match(/\b(\w+)\b/g);

			// Initially, use the defaults
			var theMelodyPatch = gTheMelodyProgram;
			var theBassPatch = gTheBassProgram;
			var theChordPatch = gTheChordProgram;
			var theSoundFont = "fluid";

			if (gDefaultSoundFont.indexOf("FluidR3_GM")!=-1){
				theSoundFont = "fluid";
			}else
			if (gDefaultSoundFont.indexOf("Musyng")!=-1){
				theSoundFont = "musyng";
			}else
			if (gDefaultSoundFont.indexOf("fatboy")!=-1){
				theSoundFont = "fatboy";
			}else
			if (gDefaultSoundFont.indexOf("canvas")!=-1){
				theSoundFont = "canvas";
			}else
			if (gDefaultSoundFont.indexOf("mscore")!=-1){
				theSoundFont = "mscore";
			}else
			if (gDefaultSoundFont.indexOf("arachno")!=-1){
				theSoundFont = "arachno";
			}else
			if (gDefaultSoundFont.indexOf("fluidhq")!=-1){
				theSoundFont = "fluidhq";
			}

			// If adding complete tunebook patches, they take precedence over the defaults
			if (gAddPlaybackHyperlinks){

				theSoundFont = gPlaybackHyperlinkSoundFont;
				theMelodyPatch = gPlaybackHyperlinkMelodyProgram;
				theBassPatch = gPlaybackHyperlinkBassProgram;
				theChordPatch = gPlaybackHyperlinkChordProgram;
			}

			var doAddPatches = false;

			if (thePatches && (thePatches.length > 0)){

				if (thePatches.length >= 1){
					theMelodyPatch = thePatches[0];
					theMelodyPatch = theMelodyPatch.trim();
				}

				if (thePatches.length >= 2){
					theBassPatch = thePatches[1];
					theBassPatch = theBassPatch.trim();
				}

				if (thePatches.length >= 3){
					theChordPatch = thePatches[2];
					theChordPatch = theChordPatch.trim();
				}

				if (thePatches.length >= 4){
					theSoundFont = thePatches[3];
					theSoundFont = theSoundFont.trim();
				}

				doAddPatches = true;

			}

			if (doAddPatches){

				// Strip out the X: tag
				var searchRegExp = /^X:.*[\r\n]*/gm 

				// Strip out tempo markings
				tuneWithPatch = tuneWithPatch.replace(searchRegExp, "");

				tuneWithPatch = "X:1\n%abcjs_soundfont "+theSoundFont+"\n"+"%%MIDI program "+theMelodyPatch+"\n"+"%%MIDI bassprog "+theBassPatch+"\n"+"%%MIDI chordprog "+theChordPatch+"\n"+tuneWithPatch;
			}

			tuneWithPatch = GetABCFileHeader() + tuneWithPatch;

			// Create a share URL for this tune
			var theURL = FillUrlBoxWithAbcInLZW(tuneWithPatch,false);
			
			// MAE 11 Jul 2024 - For open in editor
			if (!gOpenInEditor){

				// Normal play/edit link
				theURL += "&play=1"	

				// Add the play parameter
				if (gInjectEditDisabled){
					// Mark this as a play-only link
					theURL += "&dx=1"
				}
			}
			else{

				// Open in editor
				theURL += "&editor=1"	

			}

			// Warn if too large for Acrobat Reader
			if (theURL.length > ACROBATMAXURLLENGTH){

				gAcrobatURLLimitExceeded.push({name:theTitles[i],urllength:theURL.length});

			}			

			theLinks[i].url = theURL;

		}

		// Search for a general purpose hyperlink request
		searchRegExp = /^%hyperlink.*$/m

		// Detect tunebook TOC annotation
		var addTunebookHyperlink = thisTune.match(searchRegExp);

		if ((addTunebookHyperlink) && (addTunebookHyperlink.length > 0)){

			theHyperlink = addTunebookHyperlink[0].replace("%hyperlink","");
			
			theHyperlink = theHyperlink.trim();

			// Warn if too large for Acrobat Reader
			if (theHyperlink.length > ACROBATMAXURLLENGTH){

				gAcrobatURLLimitExceeded.push({name:theTitles[i],urllength:theHyperlink.length});

			}			

			theLinks[i].url = theHyperlink;

		}

	}

	return true;

}

//
// Post process any tune hyperlinks 
//
function PostProcessTuneHyperlinks(pdf,theLinks,paperStyle,startPage){

	// Sanity check the links array
	if (!theLinks){
		return;
	}

	// First scan the ABC for all the tune hyperlinks
	var res = GetAllTuneHyperlinks(theLinks);

	//If there is a page to hyperlink count mismatch,early exit
	if (!res){
		return;
	}
	
	var pageWidth = pdf.internal.pageSize.getWidth();
	var pageHeight = pdf.internal.pageSize.getHeight();

	pdf.setFont("Verdana","","normal");
	pdf.setFontSize(18.0);

	var nLinks = theLinks.length;

	var curPage = -1;

	for (var i=0;i<nLinks;++i){

		var thisLink = theLinks[i];

		if (thisLink.url != ""){
		
			var thisPage = thisLink.page;

			if (thisPage != curPage){

				// Set the page
				pdf.setPage(thisPage+startPage-1);

				curPage = thisPage;

			}

			// Convert the page relative rect to link relative
			
			var r = {left:thisLink.x, top:thisLink.y, width: thisLink.width, height: thisLink.height}
			
			// // Debug the link location by putting a rect around it
			// console.log("Link r "+r.left+" "+r.top+" "+r.width+" "+r.height+" "+"URL length: "+thisLink.url.length);

			// pdf.rect(r.left,r.top,r.width,r.height,"S");

			r = pageRect2LinkRect(pdf,r, paperStyle);

			// And the title link
			pdf.link(r.left,r.top,r.width,r.height,{url:thisLink.url})



		}

	}


}

//
// Post process any linkbacks to the TOC or 
//
function PostProcessTOCAndIndexLinks(pdf,startPage,endPage,addTOCLinks,theTOCLinkPage,addIndexLinks,theIndexLinkPage){
	
	// console.log("PostProcessTOCAndIndexLinks");
	// console.log("startPage = "+startPage);
	// console.log("endPage = "+endPage);
	// console.log("addTOCLinks = "+addTOCLinks);
	// console.log("theTOCLinkPage = "+theTOCLinkPage);
	// console.log("addIndexLinks = "+addIndexLinks);
	// console.log("theIndexLinkPage = "+theIndexLinkPage);

	for (var i=startPage;i<=endPage;++i){
		
		// Set the page
		pdf.setPage(i);

		// Set the font
		pdf.setFont("Verdana","","normal");
		pdf.setFontSize(18.0);

		var pageWidth = pdf.internal.pageSize.getWidth();
		var pageHeight = pdf.internal.pageSize.getHeight();

		if (addTOCLinks){
			// Add the TOC link
			pdf.textWithLink("<<", 5, (pageHeight/1.55), {align:"left", pageNumber:theTOCLinkPage});
		}

		if (addIndexLinks){
			// Add the Index link
			var textWidth = pdf.getTextWidth(">>");
			pdf.textWithLink(">>", (pageWidth/1.55)-(textWidth+5), (pageHeight/1.55), {align:"left", pageNumber:theIndexLinkPage});
		}


	}

}

//
// Add a table of contents or index header
//
function AddPageTextHeader(thePDF,paperStyle,theHeaderText){

	// Calc offset for A4 paper (set by PDF export dialog)
	var voff = gPAGENUMBERTOP;

	thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
	thePDF.setFontSize(HEADERFOOTERFONTSIZE);

	// Add the TOC header
	thePDF.text(theHeaderText, (thePDF.internal.pageSize.getWidth()/3.10), voff, {align:"center"});

}

//
// Tune table of contents page layout constants
//

var gTOCTOPOFFSET = 330;
var TOCBOTTOMOFFSET = 16;
var TOCTITLEOFFSET = 35;
var TOCLEFTMARGIN = 90;
var TOCRIGHTMARGIN = 105; 
var TOCTITLESIZE = 18;
var TOCFONTSIZE = 13;
var TOCLINESPACING = 12;
var gTOCLEFTOFFSET = 0;
var gTOCRIGHTOFFSET = 0;

//
// Generate and append a tune index to the current PDF
//
function AppendTuneTOC(thePDF,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageNumberList,theTitle,sortTunes,isSortedABCIncipits,doPageLinks,pageDelta,tocStartPage){

	var TOCpage = tocStartPage;

	// Add a new page
	thePDF.setPage(TOCpage); 

	if (TunebookTOCHeaderRequested){

		AddPageTextHeader(thePDF,paperStyle,theTunebookTOCHeader);

	}

	// Set the font size
	thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
	thePDF.setFontSize(TOCTITLESIZE);

	if (theTitle != ""){

		// Add the tune names
		thePDF.text(theTitle, thePDF.internal.pageSize.getWidth()/3.10, gTOCTOPOFFSET, {align:"center"});

	}

	// Get all the tune titles (uses first T: tag found)
	var theTitles = GetTunebookIndexTitles();

	var thePaperHeight = pdf.internal.pageSize.getHeight();;
	var thePaperWidth = pdf.internal.pageSize.getWidth()/1.55;

	var pageSizeWithMargins = thePaperHeight - (PAGETOPOFFSET + TOCBOTTOMOFFSET);

	var curTop = gTOCTOPOFFSET + TOCTITLEOFFSET;

	var i;
	var thePageNumber;

	// Set the font size
	thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
	thePDF.setFontSize(TOCFONTSIZE);

	// Make a copy of the page map
	var localPageMap = [];

	for (i=0;i<totalTunes;++i){

		localPageMap.push(theTunePageNumberList[i]);

	}

	// Sorted TOC requested?
	if (sortTunes){

		// Move "The" to the end
		var thisTitle;

		for (i=0;i<totalTunes;++i){

			thisTitle = theTitles[i];

			thisTitle = processTitleForSorting(thisTitle);
			
			theTitles[i] = thisTitle;

		}

		var tuneInfo = [];
		
		for (i=0;i<totalTunes;++i){

			tuneInfo.push({name:theTitles[i],pageNumber:localPageMap[i]});

		}

		// sort tunes by name
		tuneInfo.sort(customSortNameWithDiacriticals);

		// Copy the results into the normally consumed arrays
		for (i=0;i<totalTunes;++i){

			theTitles[i]= tuneInfo[i].name;

			if (!isSortedABCIncipits){

				localPageMap[i]= tuneInfo[i].pageNumber;

			}

		}
		
	}

	var firstSectionHeader = true;

	// Add the tunes by name and page number
	for (i=0;i<totalTunes;++i){

		thePageNumber = localPageMap[i];

		if (theTitles[i].indexOf("*") != 0){

			// Did they request a TOC with no page numbers?
			if (!TunebookTOCWithNoPageNumbers){

				if (doPageLinks){

					thePDF.textWithLink(theTitles[i], TOCLEFTMARGIN - gTOCLEFTOFFSET, curTop, {align:"left",pageNumber:(thePageNumber+pageDelta)});

     				thePDF.outline.add(null, theTitles[i], {pageNumber:(thePageNumber+pageDelta)});

     				TunebookBookmarksAdded = true;

 
				}
				else{

					thePDF.text(theTitles[i], TOCLEFTMARGIN - gTOCLEFTOFFSET, curTop, {align:"left"});

				}

				if (doPageLinks){

					thePDF.textWithLink(""+(thePageNumber+TunebookFirstPageNumber-1), thePaperWidth-TOCRIGHTMARGIN + gTOCRIGHTOFFSET, curTop, {align:"left",pageNumber:(thePageNumber+pageDelta)});

				}
				else{

					thePDF.text(""+(thePageNumber+TunebookFirstPageNumber-1), thePaperWidth-TOCRIGHTMARGIN + gTOCRIGHTOFFSET, curTop, {align:"left"});

				}

			}
			else{

				var textWidth = thePDF.getTextWidth(theTitles[i]);

				if (doPageLinks){

					thePDF.textWithLink(theTitles[i], (thePDF.internal.pageSize.getWidth()/3.10) - (textWidth/2), curTop, {align:"left",pageNumber:(thePageNumber+pageDelta)});

     				thePDF.outline.add(null, theTitles[i], {pageNumber:(thePageNumber+pageDelta)});

     				TunebookBookmarksAdded = true;

				}
				else{

					thePDF.text(theTitles[i], (thePDF.internal.pageSize.getWidth()/3.10) - (textWidth/2), curTop, {align:"left"});

				}

			}

			curTop += TOCLINESPACING;

		}
		else{

			// Add a TOC header
			var theSectionName = theTitles[i];
			theSectionName = theSectionName.replaceAll("*","");
			theSectionName = theSectionName.trim();				

			var textWidth = thePDF.getTextWidth(theSectionName);

			if (!sortTunes){

				if (!firstSectionHeader){
					curTop += TOCLINESPACING;
					firstSectionHeader = true;
				}

				if (firstSectionHeader){
					firstSectionHeader = false;
				}
			}

			if (doPageLinks){
				thePDF.textWithLink(theSectionName, (thePDF.internal.pageSize.getWidth()/3.10) - (textWidth/2), curTop, {align:"left",pageNumber:(thePageNumber+pageDelta)});
     			
     			thePDF.outline.add(null, theSectionName, {pageNumber:(thePageNumber+pageDelta)});

     			TunebookBookmarksAdded = true;

			}
			else{
				thePDF.text(theSectionName, (thePDF.internal.pageSize.getWidth()/3.10) - (textWidth/2), curTop, {align:"left"});
			}
			
			if (!sortTunes){
				curTop += TOCLINESPACING*2;
			}
			else{
				curTop += TOCLINESPACING;
			}

		}

		if (i != (totalTunes - 1)){

			if (curTop > pageSizeWithMargins){

				TOCpage++;

				// Add a new page
				thePDF.setPage(TOCpage); 

				if (TunebookTOCHeaderRequested){

					AddPageTextHeader(thePDF,paperStyle,theTunebookTOCHeader);
					
				}

				// Set the font size
				thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
				thePDF.setFontSize(TOCFONTSIZE);

				// Start back at the top
				curTop = gTOCTOPOFFSET + TOCTITLEOFFSET;


			}
		}

		// Only remove the top spacing for a first tune section header
		firstSectionHeader = false;
	}
}

//
// Dry run adding a TOC to determine how many pages are required
//
function DryRunAddTuneTOC(thePDF,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageNumberList,theTitle,sortTunes,isSortedABCIncipits){
	
	// Add a new page
	thePDF.addPage(paperStyle,gPDFOrientation); 

	// Get all the tune titles (uses first T: tag found)
	var theTitles = GetTunebookIndexTitles();

	var thePaperHeight = pdf.internal.pageSize.getHeight();;
	var thePaperWidth = pdf.internal.pageSize.getWidth()/1.55;

	var pageSizeWithMargins = thePaperHeight - (PAGETOPOFFSET + TOCBOTTOMOFFSET);

	var curTop = gTOCTOPOFFSET + TOCTITLEOFFSET;

	var i;
	var thePageNumber;

	var tocPageOffset = 1;

	// Make a copy of the page map
	var localPageMap = [];

	for (i=0;i<totalTunes;++i){

		localPageMap.push(theTunePageNumberList[i]);

	}

	// Sorted TOC requested?
	if (sortTunes){

		// Move "The" to the end
		var thisTitle;

		for (i=0;i<totalTunes;++i){

			thisTitle = theTitles[i];

			thisTitle = processTitleForSorting(thisTitle);
			
			theTitles[i] = thisTitle;

		}

		var tuneInfo = [];
		
		for (i=0;i<totalTunes;++i){

			tuneInfo.push({name:theTitles[i],pageNumber:localPageMap[i]});

		}

		// sort tunes by name
		tuneInfo.sort(customSortNameWithDiacriticals);

		// Copy the results into the normally consumed arrays
		for (i=0;i<totalTunes;++i){

			theTitles[i]= tuneInfo[i].name;

			if (!isSortedABCIncipits){

				localPageMap[i]= tuneInfo[i].pageNumber;

			}

		}
	
	}

	var firstSectionHeader = true;

	// Add the tunes by name and page number
	for (i=0;i<totalTunes;++i){

		if (theTitles[i].indexOf("*") != 0){

			curTop += TOCLINESPACING;

		}
		else{

			if (!sortTunes){

				if (firstSectionHeader){
					curTop += TOCLINESPACING*2;
				}
				else{
					curTop += TOCLINESPACING*3;
				}

				if (firstSectionHeader){
					firstSectionHeader = false;
				}
			}
			else{
				
				curTop += TOCLINESPACING;
			
			}

		}

		if (i != (totalTunes - 1)){

			if (curTop > pageSizeWithMargins){

				// Bump the page count
				theCurrentPageNumber++;

				// Move the page to the top
				thePDF.movePage(theCurrentPageNumber,tocPageOffset);

				// Start back at the top
				curTop = gTOCTOPOFFSET + TOCTITLEOFFSET;

				// Add a new page
				thePDF.addPage(paperStyle,gPDFOrientation); 

			}
		}
	}

	// We're on a new page
	theCurrentPageNumber++;

	// Move the page to the top
	thePDF.movePage(theCurrentPageNumber,tocPageOffset);

}

//
// Convert page relative rect to link relative rect
//
function pageRect2LinkRect(pdf, r,thePaperStyle){

	var pdfVoff = 26;

	if (thePaperStyle == "a4"){
		pdfVoff = 27;
	}

	r.left = r.left/1.55;
	
	r.top = ((pdf.internal.pageSize.getHeight()/3.10)+pdfVoff) + (r.top/1.55);

	r.width = r.width / 1.55;

	r.height = r.height / 1.55;

	return r;

}

//
// Convert page relative vertical offset to link relative vertical offset
//

function pageVOffset2LinkVOffset(pdf, v,thePaperStyle){

	var pdfVoff = 26;

	if (thePaperStyle == "a4"){
		pdfVoff = 27;
	}

	return ((pdf.internal.pageSize.getHeight()/3.10)+pdfVoff) + (v/1.55)
}

//
// Convert link relative vertical offset to page relative vertical offset
//
function linkVOffset2PageVOffset(pdf, v,thePaperStyle){

	var pdfVoff = 26;

	if (thePaperStyle == "a4"){
		pdfVoff = 27;
	}

	v = v - ((pdf.internal.pageSize.getHeight()/3.10)+pdfVoff);

	v *= 1.55;

	return v;

}

//
// Generate and append a QR code for a specific tune to the current PDF
//
function AppendPDFTuneQRCode(thePDF,paperStyle,theABC,theTitle,callback){

	//console.log("AppendPDFTuneQRCode theTitle: "+theTitle);
	//console.log("theABC: \n"+theABC);

	var theURL;
 
    theABC = GetABCFileHeader() + theABC;

	// Can we make a QR code from the current share link URL?
	theURL = FillUrlBoxWithAbcInLZW(theABC,false);

	// Adding play links?
	if (gAddPlaybackHyperlinks){
		theURL += "&play=1"; 
	}

	//console.log("theURL = "+theURL);

	var isValidURL = true;

	if (theURL.length > 2300){

		// URL too long for QR code...
		theURL = FillUrlBoxWithAbcInLZW("X:1\nT:"+theTitle+"\nT:Tune ABC was too long to generate a valid QR Code\n",false);

		isValidURL = false;

	}

	// Generate the QR code
	if (gTheQRCode == null) {

		gTheQRCode = new QRCode(document.getElementById("qrcode"), {
			text: theURL,
			width: 548,
			height: 548,
			colorDark: "#000000",
			colorLight: "#ffffff",
			border: 16,
    		correctLevel : QRCode.CorrectLevel.M 
		});

	} else {

		gTheQRCode.clear();

		gTheQRCode.makeCode(theURL);

	}

	//
	// Needs a page render cycle for the QR code image to show up
	//
	setTimeout(function(){

		// Find the QR code image to rasterize
		var theQRCodeImage = document.querySelectorAll('div[id="qrcode"] > img');

		if (theQRCodeImage && theQRCodeImage[0]){

			var theHOffset;

			if (gPDFOrientation == "portrait"){

				if (gPDFPaperSize == "letter"){

					theHOffset = (thePDF.internal.pageSize.getWidth()/3.10) - 18;

				}
				else{

					theHOffset = (thePDF.internal.pageSize.getWidth()/3.10) - 22;

				}

			}
			else{

				if (gPDFPaperSize == "letter"){

					theHOffset = (thePDF.internal.pageSize.getWidth()/3.10) + 12;

				}
				else{
					
					theHOffset = (thePDF.internal.pageSize.getWidth()/3.10) + 24;

				}

			}

			theQRCodeImage = theQRCodeImage[0];

			var theImageSource = theQRCodeImage.src;
			
			// Adjust down for 384 size
			theHOffset -= 64;

			// Fix up the page-relative link
			var r;

			if (gPDFOrientation == "portrait"){

				// Add the QR code
				thePDF.addImage(theImageSource, 'PNG', theHOffset, 150, 384, 384, undefined, "FAST"); 

				r = {left:theHOffset, top: 150, width: 384, height: 384};

			}
			else{

				// Add the QR code
				thePDF.addImage(theImageSource, 'PNG', theHOffset, 86, 384, 384, undefined, "FAST"); 

				r = {left:theHOffset, top: 75, width: 384, height: 384};

			}
			
			gTuneHyperlinks.push({page:theCurrentPageNumber,x:r.left,y:r.top,width:r.width,height:r.height,url:theURL});

			// Set the font size
			thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
			thePDF.setFontSize(QRCODECAPTIONPDFFONTSIZE);

			var captionOffset;

			if (gPDFOrientation == "portrait"){

				// Different caption offset for letter vs a4
				captionOffset = 558;

				if (paperStyle == "a4"){
					captionOffset = 575;
				}

				// Adjust down for 384 size
				captionOffset += 80;

			}
			else{

				// Different caption offset for letter vs a4
				captionOffset = 500;

				if (paperStyle == "a4"){
					captionOffset = 500;
				}

				captionOffset += 32;

			}


			// See if there is a QR code caption override
			var theQRCodeCaption = theTitle;

			if (!isValidURL){
				theQRCodeCaption = theTitle + " - Tune is too long to generate a QR Code. Click to open instead."
			}

			var pageWidth = thePDF.internal.pageSize.getWidth();

			var textWidth = thePDF.getTextWidth(theQRCodeCaption);

			// Add the tune names
			thePDF.text(theQRCodeCaption, (pageWidth/3.10)-(textWidth/2), captionOffset, {align:"left"});
			
			// Clear the QR code
			gTheQRCode.clear();

			// Call back to finalize the PDF
			callback();

		}
		else{

			// Clear the QR code
			gTheQRCode.clear();

			// Something went wrong getting the QR code, just callback immediately
			callback();

		}

	}, 25);
}

//
// Generate and append a QR code to the current PDF
//
function AppendQRCode(thePDF,paperStyle,callback){

	var theURL;

	if (!gDoForceQRCodeURLOverride){

		// Can we make a QR code from the current share link URL?
		theURL = FillUrlBoxWithAbcInLZW(null,false);

		if (!gAllowQRCodeSave){

			//console.log("Share URL too long for QR Code, early exit...")
			
			// URL too long for QR code... early exit

			callback(false);
			
			return;

		}
	}
	else{

		// Use the specified URL for the QR code
		theURL = gQRCodeURLOverride;

	}

	// Generate the QR code
	if (gTheQRCode == null) {

		gTheQRCode = new QRCode(document.getElementById("qrcode"), {
			text: theURL,
			width: 548,
			height: 548,
			colorDark: "#000000",
			colorLight: "#ffffff",
			border: 16,
    		correctLevel : QRCode.CorrectLevel.M 
		});

	} else {

		gTheQRCode.clear();

		gTheQRCode.makeCode(theURL);

	}

	//
	// Needs a page render cycle for the QR code image to show up
	//
	setTimeout(function(){

		// Find the QR code image to rasterize
		var theQRCodeImage = document.querySelectorAll('div[id="qrcode"] > img');

		if (theQRCodeImage && theQRCodeImage[0]){

			// Add a new page
			thePDF.addPage(paperStyle,gPDFOrientation); 

			var theHOffset;

			if (gPDFOrientation == "portrait"){

				if (gPDFPaperSize == "letter"){

					theHOffset = (thePDF.internal.pageSize.getWidth()/3.10) - 18;

				}
				else{

					theHOffset = (thePDF.internal.pageSize.getWidth()/3.10) - 22;

				}

			}
			else{

				if (gPDFPaperSize == "letter"){

					theHOffset = (thePDF.internal.pageSize.getWidth()/3.10) + 12;

				}
				else{
					
					theHOffset = (thePDF.internal.pageSize.getWidth()/3.10) + 24;

				}

			}

			theQRCodeImage = theQRCodeImage[0];

			var theImageSource = theQRCodeImage.src;

			// Adjust down for 384 size
			theHOffset -= 64;

			// Full page link example
			//thePDF.link(0, (thePDF.internal.pageSize.getHeight()/3.10)+pdfVoff, (thePDF.internal.pageSize.getWidth()/1.55), (thePDF.internal.pageSize.getHeight()/1.55), {url:theURL});

			// Fix up the page-relative link
			var r;

			if (gPDFOrientation == "portrait"){

				// Add the QR code
				thePDF.addImage(theImageSource, 'PNG', theHOffset, 150, 384, 384, undefined, "FAST");

				r = {left:theHOffset, top: 150, width: 384, height: 384};

			}
			else{

				// Add the QR code
				thePDF.addImage(theImageSource, 'PNG', theHOffset, 86, 384, 384, undefined, "FAST"); 

				r = {left:theHOffset, top: 75, width: 384, height: 384};

			}
			
			r = pageRect2LinkRect(thePDF,r,paperStyle);

			thePDF.link(r.left, r.top, r.width, r.height, {url:theURL});

			// Set the font size
			thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
			thePDF.setFontSize(QRCODECAPTIONPDFFONTSIZE);

			var captionOffset;

			if (gPDFOrientation == "portrait"){

				// Different caption offset for letter vs a4
				captionOffset = 558;

				if (paperStyle == "a4"){
					captionOffset = 575;
				}

				// Adjust down for 384 size
				captionOffset += 80;
			}
			else{

				// Different caption offset for letter vs a4
				captionOffset = 500;

				if (paperStyle == "a4"){
					captionOffset = 500;
				}
				
				captionOffset += 32;

			}

			// Frame-of-reference round-trip test

			// captionOffset = linkVOffset2PageVOffset(thePDF,captionOffset,paperStyle);

			// captionOffset = pageVOffset2LinkVOffset(thePDF,captionOffset,paperStyle);

			// See if there is a QR code caption override
			var theQRCodeCaption = theHeaderFooterTuneNames;

			if (gDoForceQRCodeCaptionOverride){
				theQRCodeCaption = gQRCodeCaptionOverride;
			}

			var pageWidth = thePDF.internal.pageSize.getWidth();

			var textWidth = thePDF.getTextWidth(theQRCodeCaption);

			// Add the tune names
			thePDF.textWithLink(theQRCodeCaption, (pageWidth/3.10)-(textWidth/2), captionOffset, {align:"left", url:theURL});
			
			// Clear the QR code
			gTheQRCode.clear();

			// Call back to finalize the PDF
			callback(true);

		}
		else{

			// Clear the QR code
			gTheQRCode.clear();

			// Something went wrong getting the QR code, just callback immediately
			callback(false);

		}

	}, 1000);
}

//
// Get a good filename for the PDF or share name either from the current filename or tunes themselves
//
function getDescriptiveFileName(tuneCount,bAllowSpaces){

	var title = "";

	if (gABCFromFile){

		// If this was from a file, use the filename for the PDF
		title = gDisplayedName;

		// Clean up the filename

		// Trim any whitespace
		title = title.trim();

		if (!bAllowSpaces){

			// Strip out any naughty HTML tag characters
			title = cleanFileName(title);

			// Replace any spaces
			title = title.replace(/\s/g, '_');
		}
		else{

			// Strip out any naughty HTML tag characters
			title = cleanFileName(title);

			// Replace any spaces
			title = title.replace(/\s/g, ' ');

		}

		// Strip the extension
		title = title.replace(/\..+$/, '');

	}
	else{

		// Get the title from the first tune in the ABC
		title = GetFirstTuneTitle(bAllowSpaces);

		// If there is more than one tune, make the name reflect that it is a set
		if (tuneCount > 1){

			if (bAllowSpaces){
				title += " Set";
			}
			else{
				title += "_Set";
			}

		}
	}

	return title;
}

//
// Measure all the tunes for PDF layout
//
function ProcessTunesForContinuousLayout(pageBreakList,pageHeight,doIncipits){

	// Measure the tunes
	var nTunes = pageBreakList.length;

	// Doesn't matter for one tune
	if (nTunes <= 1){
		return pageBreakList;
	}

	var renderingDivs = [];

	var i,j;
	var theElem;
	var theElemHeight;

	for (i=0;i<nTunes;++i){

		// Get each rendering div
		theElem = document.getElementById("notation"+i);

		// Get the height
		theElemHeight = theElem.offsetHeight/PDFSCALEFACTOR;

		// Get each staff height
		var theStaffHeights = [];

		// Get the children of the notation div, one block per staff
		var theBlocks = theElem.children;

		var nBlocks = theBlocks.length;

		var scale_factor = 1.0;

		if (doIncipits){

			if (nBlocks > 2){

				nBlocks = 2;

			}

			if (gIncipitsColumns == 2){

				scale_factor = 2.0;

			}

		}

		var theBlockHeight;
		var currentBlock;

		var accumHeight = 0;

		for (j=0;j<nBlocks;++j){

			// Get the node from the HTML collection
			currentBlock = theBlocks.item(j);

			theBlockHeight = currentBlock.offsetHeight / PDFSCALEFACTOR;

			theBlockHeight /= scale_factor;

			theStaffHeights.push(theBlockHeight);

			accumHeight += theBlockHeight;

		}

		// If doing incipits, the tune block height is only the height of the first two lines
		if (doIncipits){

			theElemHeight = accumHeight;

		}

		var tuneStruct = 
		{	
			theElement:theElem, 
			height:theElemHeight, 
			staffHeights:theStaffHeights
		};

		renderingDivs.push(tuneStruct);

	}

	// 
	// Now layout the page breaks
	//

	// Keep track of the space left on the page with top and bottom margins
	var pageSizeWithMargins = pageHeight - (PAGETOPOFFSET + PAGEBOTTOMOFFSET);

	var spaceAvailable = pageSizeWithMargins + BETWEENTUNESPACE;

	var thisTuneHeight;

	var firstTuneOnPage = true;

	var column_number = 0;

	for (i=0;i<nTunes;++i){

		if (i != 0){

			if (pageBreakList[i-1]){

				// Reset the page offset
				spaceAvailable = pageSizeWithMargins + BETWEENTUNESPACE;

			}
		}

		// The PDF generator adds one extra line per block it renders

		var theRenderingDivsHeight = renderingDivs[i].height;

		// Need to scale up the rendering size if landscape

		if (gPDFOrientation == "landscape"){

			if (gPDFPaperSize == "letter"){

				theRenderingDivsHeight = (theRenderingDivsHeight * 718) / 535;

			}
			else{

				theRenderingDivsHeight = (theRenderingDivsHeight * 785) / 535;

			}

		}

		var thisTuneHeight = theRenderingDivsHeight + (renderingDivs[i].staffHeights.length / scale_factor);

		// Does this tune fit on the page?
		if (thisTuneHeight > spaceAvailable){

			// Put in a page break (not on the first tune)
			if (i != 0){

				pageBreakList[i-1] = true;

			}

			// Reset the page offset
			spaceAvailable = pageSizeWithMargins + BETWEENTUNESPACE;

			// Is this a tune moved to a new page that takes up more than one page
			if (thisTuneHeight > pageSizeWithMargins){ 

				// Then we have to walk the staffs
				var nStaffs = renderingDivs[i].staffHeights.length;

				var spaceTest;

				var thisStaffHeight;

				// How many staffs fit on this page?
				for (j=0;j<nStaffs;++j){

					// The +1 is an additional offset in the PDF generator
					thisStaffHeight = renderingDivs[i].staffHeights[j] + 1;

					spaceTest = spaceAvailable - thisStaffHeight;

					// Out of room on this page, move to the next page
					if (spaceTest < 0){

						// This staff moves to a new page
						spaceAvailable = pageSizeWithMargins;

					}

					spaceAvailable -= thisStaffHeight;

				}

				// Add the space below for the next tune
				spaceAvailable -= (BETWEENTUNESPACE/scale_factor);

				// Try to layout next tune below this one
				firstTuneOnPage = false;

			}
			else{

				// Reset the page offset
				spaceAvailable = pageSizeWithMargins + BETWEENTUNESPACE;

				// Place the tune on the page
				spaceAvailable -= thisTuneHeight;

				// With a space below
				spaceAvailable -= (BETWEENTUNESPACE/scale_factor);

				// Flag this as the first tune on the page
				firstTuneOnPage = true;

			}

		}
		else{

			// Only add in-between space after the first tune on the page
			if (firstTuneOnPage){

				firstTuneOnPage = false;

			}

			// Take space for the tune
			spaceAvailable -= thisTuneHeight;

			// And the spacer below
			spaceAvailable -= (BETWEENTUNESPACE/scale_factor);

		}

	}


	return pageBreakList;

}

//
// Scan the tune and return an array that indicates if a tune as %%newpage under X:
//

function scanTunesForPageBreaks(pdf,paperStyle,doIncipits){

	var thePaperHeight;

	//debugger;

	switch (gPDFOrientation){

		case "portrait":

			// Get the paper height at 72 dpi from the PDF generator
			thePaperHeight = PAGEHEIGHTLETTER;

			if (paperStyle == "a4"){

				thePaperHeight = PAGEHEIGHTA4;
				
			}

			break;

		case "landscape":

			// Get the paper height at 72 dpi from the PDF generator
			thePaperHeight = PAGEHEIGHTLETTER_LANDSCAPE;

			if (paperStyle == "a4"){

				thePaperHeight = PAGEHEIGHTA4_LANDSCAPE;
				
			}

			break;
	}

	var pageBreakRequested = [];

	// Count the tunes in the text area
	var theNotes = gTheABC.value;

	var theTunes = theNotes.split(/^X:.*$/gm);

	var nTunes = theTunes.length - 1;

	// Exit out if no tunes
	if (nTunes == 0){
		return pageBreakRequested;
	}

	if (!doIncipits){

		for (var i=1;i<=nTunes;++i){

			// Auto inject page breaks for section headers
			if (i>1){
				if (isSectionHeader(theTunes[i])){
					pageBreakRequested[i-2] = true;
				}
			}

			if (theTunes[i].indexOf("%%newpage") != -1){
				pageBreakRequested.push(true);
			}
			else{
				pageBreakRequested.push(false);
			}

		}
	}
	else{

		// No pagebreaks for incipits
		for (var i=1;i<=nTunes;++i){

			pageBreakRequested.push(false);

		}

	}

	// Measure the tunes and insert any automatic page breaks
	pageBreakRequested = ProcessTunesForContinuousLayout(pageBreakRequested,thePaperHeight,doIncipits);

	return pageBreakRequested;
}

//
// Date formatter for header/footers
//
function formatDate(format) {

    var d = new Date(),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

    if (month.length < 2) 
        month = '0' + month;

    if (day.length < 2) 
        day = '0' + day;

    if (format == 0){

      	return [month, day, year].join('-');

    }else{

      	return [year, month, day].join('-');

    }

}

//
// Time formatter for header/footers
//
function formatTime() {

	// If this was called once already during a render, re-use the previous results
	if (theRenderTime != ""){
		return theRenderTime;
	}

    var d = new Date(),
        hour = d.getHours(),
        minute = d.getMinutes();

    var postfix = " AM";

    if (hour == 0){
    	hour = 12;
    }

    if (hour > 12){
    	hour -= 12;
    	postfix = " PM";
    }

    hour = "" + hour;
    minute = "" + minute;

    if (minute.length < 2) 
        minute = '0' + minute;

    var str = [hour, minute].join(':');
    str = str + postfix;

    // Cache the rendering time
    theRenderTime = str;

    return str;

}

//
// Parse the ABC looking for comment-based commands for page header, TOC, index, QR code, incipts, etc.
//
function ParseCommentCommands(theNotes){

	// Clear the header and footer strings
	thePageHeader = "";
	thePageFooter = "";

	// Search for a page header
	var searchRegExp = /^%pageheader.*$/m

	// Detect page header annotation
	var allPageHeaders = theNotes.match(searchRegExp);

	if ((allPageHeaders) && (allPageHeaders.length > 0)){
		thePageHeader = allPageHeaders[0].replace("%pageheader","");
		thePageHeader = thePageHeader.trim();
	}

	// Search for a page footer
	searchRegExp = /^%pagefooter.*$/m

	// Detect page footer annotation
	var allPageFooters = theNotes.match(searchRegExp);

	if ((allPageFooters) && (allPageFooters.length > 0)){
		thePageFooter = allPageFooters[0].replace("%pagefooter","");
		thePageFooter = thePageFooter.trim();
	}

	// Did they request a QR code?
	gQRCodeRequested = false;

	gDoForceQRCodeURLOverride = false;

	gQRCodeURLOverride = "";

	// Search for a QR code request
	searchRegExp = /^%qrcode.*$/m

	// Detect QR code annotation
	var addQRCode = theNotes.match(searchRegExp);

	if ((addQRCode) && (addQRCode.length > 0)){
		
		gQRCodeRequested = true;

		gQRCodeURLOverride = addQRCode[0].replace("%qrcode","");

		gQRCodeURLOverride = gQRCodeURLOverride.trim();

		if (gQRCodeURLOverride != ""){

			gDoForceQRCodeURLOverride = true; 

		}
	}

	// Did they request a QR code caption override?
	gDoForceQRCodeCaptionOverride = false;

	gQRCodeCaptionOverride = "";

	// Search for a QR code caption request
	searchRegExp = /^%caption_for_qrcode.*$/m

	// Detect QR code caption annotation
	var addQRCodeCaption = theNotes.match(searchRegExp);

	if ((addQRCodeCaption) && (addQRCodeCaption.length > 0)){
		
		gQRCodeCaptionOverride = addQRCodeCaption[0].replace("%caption_for_qrcode","");

		gQRCodeCaptionOverride = gQRCodeCaptionOverride.trim();

		if (gQRCodeCaptionOverride != ""){

			gDoForceQRCodeCaptionOverride = true; 

		}
	}

	// Clear the tunebook index string
	theTunebookIndexTitle = "";

	// Did they request a tunebook index?
	TunebookIndexRequested = false;

	// Search for a tune index request
	searchRegExp = /^%addindex.*$/m

	// Detect tune index annotation
	var addTunebookIndex = theNotes.match(searchRegExp);

	if ((addTunebookIndex) && (addTunebookIndex.length > 0)){
		TunebookIndexRequested = true;
		theTunebookIndexTitle = addTunebookIndex[0].replace("%addindex","");
		theTunebookIndexTitle = theTunebookIndexTitle.trim();
	}

	// Clear the sorted tunebook index string
	theTunebookSortedIndexTitle = "";

	// Did they request a sorted tunebook index?
	TunebookSortedIndexRequested = false;

	// Search for a sorted tune index request
	searchRegExp = /^%addsortedindex.*$/m

	// Detect sorted tune index annotation
	var addTunebookSortedIndex = theNotes.match(searchRegExp);

	if ((addTunebookSortedIndex) && (addTunebookSortedIndex.length > 0)){
		TunebookSortedIndexRequested = true;
		theTunebookSortedIndexTitle = addTunebookSortedIndex[0].replace("%addsortedindex","");
		theTunebookSortedIndexTitle = theTunebookSortedIndexTitle.trim();
	}

	// Clear bookmarks rendered
	TunebookBookmarksAdded = false;

	// Clear the tunebook toc string
	theTunebookTOCTitle = "";

	// Did they request a tunebook TOC?
	TunebookTOCRequested = false;

	// Search for a tunebook TOC request
	searchRegExp = /^%addtoc.*$/m

	// Detect tunebook TOC annotation
	var addTunebookTOC = theNotes.match(searchRegExp);

	if ((addTunebookTOC) && (addTunebookTOC.length > 0)){
		TunebookTOCRequested = true;
		theTunebookTOCTitle = addTunebookTOC[0].replace("%addtoc","");
		theTunebookTOCTitle = theTunebookTOCTitle.trim();
	}

	// Clear the sorted tunebook TOC string
	theTunebookSortedTOCTitle = "";

	// Did they request a sorted tunebook TOC?
	TunebookSortedTOCRequested = false;

	// Search for a sorted tune TOC request
	searchRegExp = /^%addsortedtoc.*$/m

	// Detect sorted tune TOC annotation
	var addTunebookSortedTOC = theNotes.match(searchRegExp);

	if ((addTunebookSortedTOC) && (addTunebookSortedTOC.length > 0)){
		TunebookSortedTOCRequested = true;
		theTunebookSortedTOCTitle = addTunebookSortedTOC[0].replace("%addsortedtoc","");
		theTunebookSortedTOCTitle = theTunebookSortedTOCTitle.trim();
	}

	// Clear the tunebook title page string
	theTunebookTP = "";

	// Did they request a tunebook title page?
	TunebookTPRequested = false;

	// Search for a tunebook title page request
	searchRegExp = /^%addtitle.*$/m

	// Detect tunebook title page annotation
	var addTunebookTP = theNotes.match(searchRegExp);

	if ((addTunebookTP) && (addTunebookTP.length > 0)){
		TunebookTPRequested = true;
		theTunebookTP = addTunebookTP[0].replace("%addtitle","");
		theTunebookTP = theTunebookTP.trim();
	}

	// Clear the tunebook subtitle page string
	theTunebookTPST = "";

	// Did they request a tunebook subtitle page?
	TunebookTPSTRequested = false;

	// Search for a tunebook title page request
	searchRegExp = /^%addsubtitle.*$/m

	// Detect tunebook subtitle page annotation
	var addTunebookTPST = theNotes.match(searchRegExp);

	if ((addTunebookTPST) && (addTunebookTPST.length > 0)){
		TunebookTPSTRequested = true;
		theTunebookTPST = addTunebookTPST[0].replace("%addsubtitle","");
		theTunebookTPST = theTunebookTPST.trim();
	}

	// Set the default tunebook index font size override
	INDEXFONTSIZE = 13;

	// Search for a tunebook index font size override request
	searchRegExp = /^%indexfontsize.*$/m

	// Detect tunebook index font size annotation
	var overrideIndexFontSize = theNotes.match(searchRegExp);

	if ((overrideIndexFontSize) && (overrideIndexFontSize.length > 0)){

		var theFontSize = overrideIndexFontSize[0].replace("%indexfontsize","");

		theFontSize = theFontSize.trim();
		
		var theFontSizeInt = parseInt(theFontSize);
		
		if ((!isNaN(theFontSizeInt)) && (theFontSizeInt > 0)){

			INDEXFONTSIZE = theFontSizeInt;

		}
	}

	// Set the default tunebook index line spacing 
	INDEXLINESPACING = 12;

	// Search for a tunebook index line spacing override request
	searchRegExp = /^%indexlinespacing.*$/m

	// Detect tunebook index line spacing annotation
	var overrideIndexLineSpacing = theNotes.match(searchRegExp);

	if ((overrideIndexLineSpacing) && (overrideIndexLineSpacing.length > 0)){

		var theLineSpacing = overrideIndexLineSpacing[0].replace("%indexlinespacing","");

		theLineSpacing = theLineSpacing.trim();
		
		var theLineSpacingInt = parseInt(theLineSpacing);
		
		if ((!isNaN(theLineSpacingInt)) && (theLineSpacingInt >= 0)){

			INDEXLINESPACING = theLineSpacingInt;

		}
	}


	// Set the default tunebook top offset override
	INDEXTITLESIZE = 18;

	// Search for a tunebook index title font size override request
	searchRegExp = /^%indextitlefontsize.*$/m

	// Detect tunebook index title font size annotation
	var overrideIndexTitleFontSize = theNotes.match(searchRegExp);

	if ((overrideIndexTitleFontSize) && (overrideIndexTitleFontSize.length > 0)){

		var theFontSize = overrideIndexTitleFontSize[0].replace("%indextitlefontsize","");

		theFontSize = theFontSize.trim();
		
		var theFontSizeInt = parseInt(theFontSize);
		
		if ((!isNaN(theFontSizeInt)) && (theFontSizeInt > 0)){

			INDEXTITLESIZE = theFontSizeInt;

		}
	}

	// Set the default tunebook title offset 
	INDEXTITLEOFFSET = 35;

	// Search for a tunebook index title offset override request
	searchRegExp = /^%indextitleoffset.*$/m

	// Detect tunebook index title offset annotation
	var overrideIndexTitleOffset = theNotes.match(searchRegExp);

	if ((overrideIndexTitleOffset) && (overrideIndexTitleOffset.length > 0)){

		var theTitleOffset = overrideIndexTitleOffset[0].replace("%indextitleoffset","");

		theTitleOffset = theTitleOffset.trim();
		
		var theTitleOffsetInt = parseInt(theTitleOffset);
		
		if ((!isNaN(theTitleOffsetInt)) && (theTitleOffsetInt >= 0)){

			INDEXTITLEOFFSET = theTitleOffsetInt;

		}
	}

	// Set the default tunebook index top offset
	// Set by the PDF export dialog 

	// Search for a tunebook index top offset override request
	searchRegExp = /^%indextopoffset.*$/m

	// Detect tunebook index top offset annotation
	var overrideIndexTopOffset = theNotes.match(searchRegExp);

	if ((overrideIndexTopOffset) && (overrideIndexTopOffset.length > 0)){

		var theTopOffset = overrideIndexTopOffset[0].replace("%indextopoffset","");

		theTopOffset = theTopOffset.trim();
		
		var theTopOffsetInt = parseInt(theTopOffset);
		
		if ((!isNaN(theTopOffsetInt)) && (theTopOffsetInt >= 0)){

			gINDEXTOPOFFSET = theTopOffsetInt + 300;

		}
	}

	// Set the default tunebook TOC font size override
	TOCFONTSIZE = 13;

	// Search for a tunebook TOC font size override request
	searchRegExp = /^%tocfontsize.*$/m

	// Detect tunebook TOC font size annotation
	var overrideTOCFontSize = theNotes.match(searchRegExp);

	if ((overrideTOCFontSize) && (overrideTOCFontSize.length > 0)){

		var theFontSize = overrideTOCFontSize[0].replace("%tocfontsize","");

		theFontSize = theFontSize.trim();
		
		var theFontSizeInt = parseInt(theFontSize);
		
		if ((!isNaN(theFontSizeInt)) && (theFontSizeInt > 0)){

			TOCFONTSIZE = theFontSizeInt;

		}
	}

	// Set the default tunebook TOC line spacing 
	TOCLINESPACING = 12;

	// Search for a tunebook TOC line spacing override request
	searchRegExp = /^%toclinespacing.*$/m

	// Detect tunebook TOC line spacing annotation
	var overrideTOCLineSpacing = theNotes.match(searchRegExp);

	if ((overrideTOCLineSpacing) && (overrideTOCLineSpacing.length > 0)){

		var theLineSpacing = overrideTOCLineSpacing[0].replace("%toclinespacing","");

		theLineSpacing = theLineSpacing.trim();
		
		var theLineSpacingInt = parseInt(theLineSpacing);
		
		if ((!isNaN(theLineSpacingInt)) && (theLineSpacingInt >= 0)){

			TOCLINESPACING = theLineSpacingInt;

		}
	}

	// Set the default tunebook top offset override
	TOCTITLESIZE = 18;

	// Search for a tunebook TOC title font size override request
	searchRegExp = /^%toctitlefontsize.*$/m

	// Detect tunebook TOC title font size annotation
	var overrideTOCTitleFontSize = theNotes.match(searchRegExp);

	if ((overrideTOCTitleFontSize) && (overrideTOCTitleFontSize.length > 0)){

		var theFontSize = overrideTOCTitleFontSize[0].replace("%toctitlefontsize","");

		theFontSize = theFontSize.trim();
		
		var theFontSizeInt = parseInt(theFontSize);
		
		if ((!isNaN(theFontSizeInt)) && (theFontSizeInt > 0)){

			TOCTITLESIZE = theFontSizeInt;

		}
	}

	// Set the default tunebook title offset 
	TOCTITLEOFFSET = 35;

	// Search for a tunebook TOC title offset override request
	searchRegExp = /^%toctitleoffset.*$/m

	// Detect tunebook index title offset annotation
	var overrideTOCTitleOffset = theNotes.match(searchRegExp);

	if ((overrideTOCTitleOffset) && (overrideTOCTitleOffset.length > 0)){

		var theTitleOffset = overrideTOCTitleOffset[0].replace("%toctitleoffset","");

		theTitleOffset = theTitleOffset.trim();
		
		var theTitleOffsetInt = parseInt(theTitleOffset);
		
		if ((!isNaN(theTitleOffsetInt)) && (theTitleOffsetInt >= 0)){

			TOCTITLEOFFSET = theTitleOffsetInt;

		}
	}

	// TOC top offset was set by the PDF export dialog

	// Search for a tunebook TOC top offset override request
	searchRegExp = /^%toctopoffset.*$/m

	// Detect tunebook TOC top offset annotation
	var overrideTOCTopOffset = theNotes.match(searchRegExp);

	if ((overrideTOCTopOffset) && (overrideTOCTopOffset.length > 0)){

		var theTopOffset = overrideTOCTopOffset[0].replace("%toctopoffset","");

		theTopOffset = theTopOffset.trim();
		
		var theTopOffsetInt = parseInt(theTopOffset);
		
		if ((!isNaN(theTopOffsetInt)) && (theTopOffsetInt >= 0)){

			gTOCTOPOFFSET = theTopOffsetInt + 300;

		}
	}

	// Set the default tunebook TOC left offset 
	gTOCLEFTOFFSET = 0;

	// Search for a tunebook TOC left offset override request
	searchRegExp = /^%tocleftoffset.*$/m

	// Detect tunebook TOC left offset annotation
	var overrideTOCLeftOffset = theNotes.match(searchRegExp);

	if ((overrideTOCLeftOffset) && (overrideTOCLeftOffset.length > 0)){

		var theTOCLeftOffset = overrideTOCLeftOffset[0].replace("%tocleftoffset","");

		theTOCLeftOffset = theTOCLeftOffset.trim();
		
		var theTOCLeftOffsetInt = parseInt(theTOCLeftOffset);
		
		if (!isNaN(theTOCLeftOffsetInt)){

			gTOCLEFTOFFSET = theTOCLeftOffsetInt;

		}
	}

	// Set the default tunebook Index left offset 
	gINDEXLEFTOFFSET = 0;

	// Search for a tunebook index left offset annotation
	searchRegExp = /^%indexleftoffset.*$/m

	// Detect tunebook index line spacing annotation
	var overrideIndexLeftOffset = theNotes.match(searchRegExp);

	if ((overrideIndexLeftOffset) && (overrideIndexLeftOffset.length > 0)){

		var theIndexLeftOffset = overrideIndexLeftOffset[0].replace("%indexleftoffset","");

		theIndexLeftOffset = theIndexLeftOffset.trim();
		
		var theIndexLeftOffsetInt = parseInt(theIndexLeftOffset);
		
		if (!isNaN(theIndexLeftOffsetInt)){

			gINDEXLEFTOFFSET = theIndexLeftOffsetInt;

		}
	}

	// Set the default tunebook TOC right offset 
	gTOCRIGHTOFFSET = 0;

	// Search for a tunebook TOC right offset override request
	searchRegExp = /^%tocrightoffset.*$/m

	// Detect tunebook TOC right offset annotation
	var overrideTOCRightOffset = theNotes.match(searchRegExp);

	if ((overrideTOCRightOffset) && (overrideTOCRightOffset.length > 0)){

		var theTOCRightOffset = overrideTOCRightOffset[0].replace("%tocrightoffset","");

		theTOCRightOffset = theTOCRightOffset.trim();
		
		var theTOCRightOffsetInt = parseInt(theTOCRightOffset);
		
		if (!isNaN(theTOCRightOffsetInt)){

			gTOCRIGHTOFFSET = theTOCRightOffsetInt;

		}
	}

	// Set the default tunebook Index right offset 
	gINDEXRIGHTOFFSET = 0;

	// Search for a tunebook Index right offset override request
	searchRegExp = /^%indexrightoffset.*$/m

	// Detect tunebook Index right offset annotation
	var overrideIndexRightOffset = theNotes.match(searchRegExp);

	if ((overrideIndexRightOffset) && (overrideIndexRightOffset.length > 0)){

		var theIndexRightOffset = overrideIndexRightOffset[0].replace("%indexrightoffset","");

		theIndexRightOffset = theIndexRightOffset.trim();
		
		var theIndexRightOffsetInt = parseInt(theIndexRightOffset);
		
		if (!isNaN(theIndexRightOffsetInt)){

			gINDEXRIGHTOFFSET = theIndexRightOffsetInt;

		}
	}

	// Set the default tunebook header and footer font size
	// MAE 22 May 2025
	HEADERFOOTERFONTSIZE = 12;

	// Search for a tunebook header/footer font size override request
	searchRegExp = /^%headerfooterfontsize.*$/m

	// Detect tunebook TOC font size annotation
	var overrideHFFontSize = theNotes.match(searchRegExp);

	if ((overrideHFFontSize) && (overrideHFFontSize.length > 0)){

		var theFontSize = overrideHFFontSize[0].replace("%headerfooterfontsize","");

		theFontSize = theFontSize.trim();
		
		var theFontSizeInt = parseInt(theFontSize);
		
		if ((!isNaN(theFontSizeInt)) && (theFontSizeInt > 0)){

			HEADERFOOTERFONTSIZE = theFontSizeInt;

		}
	}

  // Set the default text incipits font size and line height
  // MAE 1 June 2025
  TEXTINCIPITFONTSIZE = 12;

  // Search for a tunebook text incipits font size override request
  searchRegExp = /^%textincipitsfontsize.*$/m

  // Detect tunebook text incipits size annotation
  var overrideTIFontSize = theNotes.match(searchRegExp);

  if ((overrideTIFontSize) && (overrideTIFontSize.length > 0)){

    var theFontSize = overrideTIFontSize[0].replace("%textincipitsfontsize","");

    theFontSize = theFontSize.trim();
    
    var theFontSizeInt = parseInt(theFontSize);
    
    if ((!isNaN(theFontSizeInt)) && (theFontSizeInt > 0)){

      TEXTINCIPITFONTSIZE = theFontSizeInt;

    }
  }

  TEXTINCIPITLINESPACING = 12;

  // Search for a tunebook text incipits line spacing override request
  searchRegExp = /^%textincipitslinespacing.*$/m

  // Detect tunebook text incipits size annotation
  var overrideTILineSpacing = theNotes.match(searchRegExp);

  if ((overrideTILineSpacing) && (overrideTILineSpacing.length > 0)){

    var theFontSize = overrideTILineSpacing[0].replace("%textincipitslinespacing","");

    theFontSize = theFontSize.trim();
    
    var theFontSizeInt = parseInt(theFontSize);
    
    if ((!isNaN(theFontSizeInt)) && (theFontSizeInt > 0)){

      TEXTINCIPITLINESPACING = theFontSizeInt;

    }
  }


	// Set the default title page title font size
	// MAE 24 May 2025
	TPTITLESIZE = 24;

	// Search for a tunebook title page title font size override request
	searchRegExp = /^%titlefontsize.*$/m

	// Detect tunebook TOC font size annotation
	var overrideTitleFontSize = theNotes.match(searchRegExp);

	if ((overrideTitleFontSize) && (overrideTitleFontSize.length > 0)){

		var theFontSize = overrideTitleFontSize[0].replace("%titlefontsize","");

		theFontSize = theFontSize.trim();
		
		var theFontSizeInt = parseInt(theFontSize);
		
		if ((!isNaN(theFontSizeInt)) && (theFontSizeInt > 0)){

			TPTITLESIZE = theFontSizeInt;

		}
	}

	// Set the default title page subtitle font size
	// MAE 24 May 2025
	TPSTTITLESIZE = 16;

	// Search for a tunebook title page subtitle font size override request
	searchRegExp = /^%subtitlefontsize.*$/m

	// Detect tunebook TOC font size annotation
	var overrideSubTitleFontSize = theNotes.match(searchRegExp);

	if ((overrideSubTitleFontSize) && (overrideSubTitleFontSize.length > 0)){

		var theFontSize = overrideSubTitleFontSize[0].replace("%subtitlefontsize","");

		theFontSize = theFontSize.trim();
		
		var theFontSizeInt = parseInt(theFontSize);
		
		if ((!isNaN(theFontSizeInt)) && (theFontSizeInt > 0)){

			TPSTTITLESIZE = theFontSizeInt;

		}
	}


	// Set the default tunebook PDF quality for 2X oversampling
	gPDFQuality = 0.75;

	// Search for a tunebook PDF quality request
	searchRegExp = /^%pdfquality.*$/m

	// Detect tunebook pdf quality annotation
	var overridePDFQuality = theNotes.match(searchRegExp);

	if ((overridePDFQuality) && (overridePDFQuality.length > 0)){

		var thePDFQuality = overridePDFQuality[0].replace("%pdfquality","");

		thePDFQuality = thePDFQuality.trim();
		
		var thePDFQualityFloat = parseFloat(thePDFQuality);
		
		if ((!isNaN(thePDFQualityFloat)) && (thePDFQualityFloat >= 0)){

			gPDFQuality = thePDFQualityFloat;

		}
	}

	// Include links to pages in the index
	gIncludePageLinks = true;

	// Search for a tunebook index page links request
	searchRegExp = /^%no_toc_or_index_links.*$/m

	// Detect tunebook page links annotation
	var noPageLinks = theNotes.match(searchRegExp);

	if ((noPageLinks) && (noPageLinks.length > 0)){

		gIncludePageLinks = false;

	}

	// Clear the tunebook forced PDF title
	gForcePDFFilename = "";

	// Did they request a tunebook title force
	gDoForcePDFFilename = false;

	// Search for a tunebook force PDF title request
	searchRegExp = /^%pdfname.*$/m

	// Detect force tunebook PDF title
	var forcePDFFilename = theNotes.match(searchRegExp);

	if ((forcePDFFilename) && (forcePDFFilename.length > 0)){

		gDoForcePDFFilename = true;

		gForcePDFFilename = forcePDFFilename[0].replace("%pdfname","");

		gForcePDFFilename = gForcePDFFilename.trim();

		// Must include a name after the directive
		if (gForcePDFFilename == ""){
			gDoForcePDFFilename = false;
		}

	}

	// Clear the URL page header and footers
	thePageHeaderURL = "";
	thePageFooterURL = "";
	
	// Check for URL pageheader annotation
	searchRegExp = /^%urlpageheader.*$/m

	// Detect URL page header annotation
	var urlPageHeader = theNotes.match(searchRegExp);

	if ((urlPageHeader) && (urlPageHeader.length > 0)){

		var theFullPageHeader = urlPageHeader[0].replace("%urlpageheader ","");
		
		theFullPageHeader = theFullPageHeader.trim();
		
		var theSplits = theFullPageHeader.split(" ");
		
		if (theSplits.length > 1){
		
			thePageHeaderURL = theSplits[0];
		
			thePageHeader = theFullPageHeader.replace(thePageHeaderURL,"");
		
			thePageHeader = thePageHeader.trim();
		
		}
	}

	// Check for URL page footer annotation
	searchRegExp = /^%urlpagefooter.*$/m

	// Detect URL page footer annotation
	var urlPageFooter = theNotes.match(searchRegExp);

	if ((urlPageFooter) && (urlPageFooter.length > 0)){

		var theFullPageFooter = urlPageFooter[0].replace("%urlpagefooter ","");
		
		theFullPageFooter = theFullPageFooter.trim();
		
		var theSplits = theFullPageFooter.split(" ");
		
		if (theSplits.length > 1){
		
			thePageFooterURL = theSplits[0];
		
			thePageFooter = theFullPageFooter.replace(thePageFooterURL,"");
		
			thePageFooter = thePageFooter.trim();
		
		}
	}

	// Search for a tunebook first page offset
	TunebookFirstPageNumber = 1;
	TunebookFirstPageAuto = false;

	searchRegExp = /^%firstpagenumber.*$/m

	// Detect tunebook index font size annotation
	var overrideFirstPageNumber = theNotes.match(searchRegExp);

	if ((overrideFirstPageNumber) && (overrideFirstPageNumber.length > 0)){

		var theFirstPage = overrideFirstPageNumber[0].replace("%firstpagenumber","");

		theFirstPage = theFirstPage.trim();

		if (theFirstPage == "auto"){
			TunebookFirstPageAuto = true;
		}
		else{
		
			var theFirstPageInt = parseInt(theFirstPage);
			
			if ((!isNaN(theFirstPageInt)) && (theFirstPageInt > 0)){

				TunebookFirstPageNumber = theFirstPageInt;

			}
		}
	}

	// Check my work
	// console.log("thePageHeader = "+thePageHeader);
	// console.log("thePageFooter = "+thePageFooter);
	// console.log("thePageHeaderURL = "+thePageHeaderURL);
	// console.log("thePageFooterURL = "+thePageFooterURL);

	theTunebookTPURL = "";
	theTunebookTPSTURL = "";

	// Check for URL titlepage annotation
	searchRegExp = /^%urladdtitle.*$/m

	// Detect URL title page annotation
	var urlTitlePage = theNotes.match(searchRegExp);

	if ((urlTitlePage) && (urlTitlePage.length > 0)){

		var theFullTitlePage = urlTitlePage[0].replace("%urladdtitle ","");
		
		theTunebookTP = theFullTitlePage.trim();
		
		var theSplits = theFullTitlePage.split(" ");
		
		if (theSplits.length > 1){
		
			theTunebookTPURL = theSplits[0];
		
			theTunebookTP = theFullTitlePage.replace(theTunebookTPURL,"");
		
			theTunebookTP = theTunebookTP.trim();

			TunebookTPRequested = true;

		}
	}

	// Check for URL subtitlepage annotation
	searchRegExp = /^%urladdsubtitle.*$/m

	// Detect URL subtitle page annotation
	var urlSubTitlePage = theNotes.match(searchRegExp);

	if ((urlSubTitlePage) && (urlSubTitlePage.length > 0)){

		var theFullSubTitlePage = urlSubTitlePage[0].replace("%urladdsubtitle ","");
		
		theTunebookTPST = theFullSubTitlePage.trim();
		
		var theSplits = theFullSubTitlePage.split(" ");
		
		if (theSplits.length > 1){
		
			theTunebookTPSTURL = theSplits[0];
		
			theTunebookTPST = theFullSubTitlePage.replace(theTunebookTPSTURL,"");
		
			theTunebookTPST = theTunebookTPST.trim();

			TunebookTPSTRequested = true;

		}
	}

	// Include links to TOC on each page 
	gAddTOCLinkback = false;

	// Search for a TOC linkback 
	searchRegExp = /^%addlinkbacktotoc.*$/m

	// Detect TOC linkback annotation
	var addTOCLinkback = theNotes.match(searchRegExp);

	if ((addTOCLinkback) && (addTOCLinkback.length > 0)){

		gAddTOCLinkback = true;

	}

	// Include links to the index on each page 
	gAddIndexLinkback = false;

	// Search for a TOC linkback request
	searchRegExp = /^%addlinkbacktoindex.*$/m

	// Detect Index linkback annotation
	var addIndexLinkback = theNotes.match(searchRegExp);

	if ((addIndexLinkback) && (addIndexLinkback.length > 0)){

		gAddIndexLinkback = true;

	}

	// Include links to thesession for every tune
	gAddTheSessionHyperlinks = false;

	// Search for a thesession.org linkback request
	searchRegExp = /^%add_all_links_to_thesession.*$/m

	// Detect thesession linkback annotation
	var addSessionLinkback = theNotes.match(searchRegExp);

	if ((addSessionLinkback) && (addSessionLinkback.length > 0)){

		gAddTheSessionHyperlinks = true;

	}

	// Legacy directive
	// Search for a thesession.org linkback request
	searchRegExp = /^%addlinkstothesession.*$/m

	// Detect thesession linkback annotation
	addSessionLinkback = theNotes.match(searchRegExp);

	if ((addSessionLinkback) && (addSessionLinkback.length > 0)){

		gAddTheSessionHyperlinks = true;

	}

	// See if no editing allowed
	gInjectEditDisabled = false;
	
	searchRegExp = /^%no_edit_allowed.*$/m

	// Detect no edit allowed annotatoin
	var no_edit_allowed = theNotes.match(searchRegExp);

	if ((no_edit_allowed) && (no_edit_allowed.length > 0)){

		gInjectEditDisabled = true;

	}

	// See if hornpipe swing global inject requested
	gAllSwingHornpipesRequested = false;
	gAllSwingHornpipesSwingFactor = gAutoSwingFactor;
	
	searchRegExp = /^%swing_all_hornpipes.*$/m

	// Detect swing all hornpipes annotation
	var swing_all_hornpipes = theNotes.match(searchRegExp);

	if ((swing_all_hornpipes) && (swing_all_hornpipes.length > 0)){

		gAllSwingHornpipesRequested = true;

		var theSwingFactor = swing_all_hornpipes[0].replace("%swing_all_hornpipes","");
		
		theSwingFactor = theSwingFactor.trim();

		if (theSwingFactor != ""){

			var theSwingFactorFloat = parseFloat(theSwingFactor);

			if (!isNaN(theSwingFactorFloat)){

				// Range check swing value
				if ((theSwingFactorFloat >= -0.9) && (theSwingFactorFloat <= 0.9)){

					gAllSwingHornpipesSwingFactor = theSwingFactorFloat; 

				}

			}
		}

	}

	// See if hornpipe swing disable global inject requested
	gAllNoSwingHornpipesRequested = false;
	
	searchRegExp = /^%noswing_all_hornpipes.*$/m

	// Detect no swing all hornpipes annotation
	var no_swing_all_hornpipes = theNotes.match(searchRegExp);

	if ((no_swing_all_hornpipes) && (no_swing_all_hornpipes.length > 0)){

		gAllNoSwingHornpipesRequested = true;

	}

	// Include playback links for every tune
	gAddPlaybackHyperlinks = false;

	// Inject the MIDI program in the ABC before creating the link
	gAddPlaybackHyperlinksIncludePrograms = false;

	// Search for a playback link request
	searchRegExp = /^%add_all_playback_links.*$/m

	// Detect playback link annotation
	var addPlaybackHyperlinks = theNotes.match(searchRegExp);

	if ((addPlaybackHyperlinks) && (addPlaybackHyperlinks.length > 0)){

		gAddPlaybackHyperlinks = true;

		var thePatch = addPlaybackHyperlinks[0].replace("%add_all_playback_links","");

		thePatch = thePatch.trim();

		var thePatches = thePatch.match(/\b(\w+)\b/g);

		gPlaybackHyperlinkMelodyProgram = gTheMelodyProgram;
		gPlaybackHyperlinkBassProgram = gTheBassProgram;
		gPlaybackHyperlinkChordProgram = gTheChordProgram;
		gPlaybackHyperlinkSoundFont = "fluid";

		if (gDefaultSoundFont.indexOf("FluidR3_GM")!=-1){
			gPlaybackHyperlinkSoundFont = "fluid";
		}else
		if (gDefaultSoundFont.indexOf("Musyng")!=-1){
			gPlaybackHyperlinkSoundFont = "musyng";
		}else
		if (gDefaultSoundFont.indexOf("fatboy")!=-1){
			gPlaybackHyperlinkSoundFont = "fatboy";
		}else
		if (gDefaultSoundFont.indexOf("canvas")!=-1){
			gPlaybackHyperlinkSoundFont = "canvas";
		}else
		if (gDefaultSoundFont.indexOf("mscore")!=-1){
			gPlaybackHyperlinkSoundFont = "mscore";
		}else
		if (gDefaultSoundFont.indexOf("arachno")!=-1){
			gPlaybackHyperlinkSoundFont = "arachno";
		}else
		if (gDefaultSoundFont.indexOf("fluidhq")!=-1){
			theSoundFont = "fluidhq";
		}

		if (thePatches && (thePatches.length > 0)){
			
			// Inject MIDI program info in the tune
			gAddPlaybackHyperlinksIncludePrograms = true;

			if (thePatches.length >= 1){
				gPlaybackHyperlinkMelodyProgram = thePatches[0];
				gPlaybackHyperlinkMelodyProgram = gPlaybackHyperlinkMelodyProgram.trim();
			}

			if (thePatches.length >= 2){
				gPlaybackHyperlinkBassProgram = thePatches[1];
				gPlaybackHyperlinkBassProgram = gPlaybackHyperlinkBassProgram.trim();
			}	

			if (thePatches.length >= 3){
				gPlaybackHyperlinkChordProgram = thePatches[2];
				gPlaybackHyperlinkChordProgram = gPlaybackHyperlinkChordProgram.trim();
			}	

			if (thePatches.length >= 4){
				gPlaybackHyperlinkSoundFont = thePatches[3];
				gPlaybackHyperlinkSoundFont = gPlaybackHyperlinkSoundFont.trim();
			}

		}
		else{

			// No programs specified, just add the link, but don't inject the programs
			gAddPlaybackHyperlinksIncludePrograms = false;

		}
	}

	// 
	// MAE 11 Jul 2024 - No open in edit allowed if editing disallowed
	//
	// See if open in editor requested
	gOpenInEditor = false;

	if (!gInjectEditDisabled){	
		
		searchRegExp = /^%links_open_in_editor.*$/m

		// Detect no edit allowed annotatoin
		var open_in_editor = theNotes.match(searchRegExp);

		if ((open_in_editor) && (open_in_editor.length > 0)){

			gOpenInEditor = true;

			// Turn on link generation
			gAddPlaybackHyperlinks = true;

			// But don't inject the play information
			gAddPlaybackHyperlinksIncludePrograms = false;

		}
	}

	// Search for a font inject request
	gAddAllFonts = false;
	searchRegExp = /^%add_all_fonts.*$/m

	// Detect font inject request
	var addAllFonts = theNotes.match(searchRegExp);
	if ((addAllFonts) && (addAllFonts.length > 0)){
		//console.log("Got gAddAllFonts!");
		gAddAllFonts = true;
	}

	// Inject the MIDI volumes in the ABC before creating the link
	gAddPlaybackHyperlinkVolumes = false;

	// Search for a playback volume request
	searchRegExp = /^%add_all_playback_volumes.*$/m

	// Detect playback volume annotation
	var addPlaybackVolumes = theNotes.match(searchRegExp);

	if ((addPlaybackVolumes) && (addPlaybackVolumes.length > 0)){

		// Default to the settings volumes
		gPlaybackHyperlinkBassVolume = gTheBassVolume;
		gPlaybackHyperlinkChordVolume = gTheChordVolume;

		var thePatch = addPlaybackVolumes[0].replace("%add_all_playback_volumes","");

		thePatch = thePatch.trim();

		var thePatches = thePatch.match(/\b(\w+)\b/g);

		if (thePatches && (thePatches.length > 0)){

			gAddPlaybackHyperlinkVolumes = true;
			
			if (thePatches.length >= 1){
				gPlaybackHyperlinkBassVolume = thePatches[0];
				gPlaybackHyperlinkBassVolume = gPlaybackHyperlinkBassVolume.trim();
			}

			if (thePatches.length >= 2){
				gPlaybackHyperlinkChordVolume = thePatches[1];
				gPlaybackHyperlinkChordVolume = gPlaybackHyperlinkChordVolume.trim();
			}	
		}
	}

	// Should playback links include the entire tunebook
	gAddTunebookPlaybackHyperlinks = false;

	// Search for a playback links include the entire tunebook
	searchRegExp = /^%playback_links_are_complete_tunebook.*$/m

	// Detect notation
	var addTunebookPlaybackHyperlinks = theNotes.match(searchRegExp);

	if ((addTunebookPlaybackHyperlinks) && (addTunebookPlaybackHyperlinks.length > 0)){

		gAddTunebookPlaybackHyperlinks = true;

	}

	// Clear the tunebook toc headerstring
	theTunebookTOCHeader = "";

	// Did they request a tunebook TOC header?
	TunebookTOCHeaderRequested = false;

	// Search for a tunebook TOC header request
	searchRegExp = /^%tocheader.*$/m

	// Detect tunebook TOC annotation
	var addTunebookTOCHeader = theNotes.match(searchRegExp);

	if ((addTunebookTOCHeader) && (addTunebookTOCHeader.length > 0)){
		TunebookTOCHeaderRequested = true;
		theTunebookTOCHeader = addTunebookTOCHeader[0].replace("%tocheader","");
		theTunebookTOCHeader = theTunebookTOCHeader.trim();
	}

	// Clear the tunebook index headerstring
	theTunebookIndexHeader = "";

	// Did they request a tunebook index header?
	TunebookTOCIndexHeaderRequested = false;

	// Search for a tunebook index header request
	searchRegExp = /^%indexheader.*$/m

	// Detect tunebook TOC annotation
	var addTunebookIndexHeader = theNotes.match(searchRegExp);

	if ((addTunebookIndexHeader) && (addTunebookIndexHeader.length > 0)){
		TunebookIndexHeaderRequested = true;
		theTunebookIndexHeader = addTunebookIndexHeader[0].replace("%indexheader","");
		theTunebookIndexHeader = theTunebookIndexHeader.trim();
	}

	// Search for a between tunes space override
	searchRegExp = /^%pdf_between_tune_space.*$/m

	// Detect tunebook pdf between tune space override
	// Default is 20/72"
	gBetweenTuneSpace = 20;
	gGotBetweenTuneSpace = false;

	var betweenTuneSpace = theNotes.match(searchRegExp);

	if ((betweenTuneSpace) && (betweenTuneSpace.length > 0)){

		var betweenTuneSpace = betweenTuneSpace[0].replace("%pdf_between_tune_space","");

		betweenTuneSpace = betweenTuneSpace.trim();
		
		var betweenTuneSpaceInt = parseInt(betweenTuneSpace);
		
		if ((!isNaN(betweenTuneSpaceInt)) && (betweenTuneSpaceInt >= 0)){

			gBetweenTuneSpace = betweenTuneSpaceInt;

			gGotBetweenTuneSpace = true;

		}
	}

	// Search for a PDF font request
	searchRegExp = /^%pdffont.*$/m

	// Now being set in the PDF dialog
	// gPDFFont = "Times";
	// gPDFFontStyle = "";

	// Detect tunebook TOC annotation
	var pdfFont = theNotes.match(searchRegExp);

	if ((pdfFont) && (pdfFont.length > 0)){

		pdfFont = pdfFont[0].replace("%pdffont","");
		
		pdfFont = pdfFont.trim();
		
		var theFontSplit = pdfFont.split(" ");
		
		if ((theFontSplit) && (theFontSplit.length>1)){

			gPDFFont = theFontSplit[0];
			gPDFFontStyle = theFontSplit[1];

		}
		else{
			
			gPDFFont = pdfFont;
			gPDFFontStyle = "";

		}

		if (gPDFFontStyle.toLowerCase() == "normal"){
			gPDFFontStyle = "";
		}

		// Sanity check font name
		var lcfont = gPDFFont.toLowerCase();

		switch (lcfont){
			case "times":
				// Translate Times style description
				if(gPDFFontStyle.toLowerCase() == "oblique"){
					gPDFFontStyle = "Italic";
				}
				else
				if(gPDFFontStyle.toLowerCase() == "boldoblique"){
					gPDFFontStyle = "BoldItalic";
				}
				break;

			case "helvetica":
			case "courier":
			case "noto-sans":
			case "noto-serif":
				break;

			default:
				gPDFFont = "Times";
				gPDFFontStyle = "";
				break;
				
		}

		// Sanity check font style
		var lcstyle = gPDFFontStyle.toLowerCase();

		if (lcstyle != ""){
		
			switch (lcstyle){
				case "normal":
				case "bold":
				case "oblique":
				case "boldoblique":
				case "italic":
				case "bolditalic":
					break;

				default:
					gPDFFontStyle = "";
					break;
			}
		}
	}

	// Did they request a TOC with no page numbers?
	TunebookTOCWithNoPageNumbers = false;

	searchRegExp = /^%toc_no_page_numbers.*$/m

	var tocNoPageNumbers = theNotes.match(searchRegExp);

	if ((tocNoPageNumbers) && (tocNoPageNumbers.length > 0)){

		TunebookTOCWithNoPageNumbers = true;

	}

	// Did they request an index with no page numbers?
	TunebookIndexWithNoPageNumbers = false;

	searchRegExp = /^%index_no_page_numbers.*$/m

	var indexNoPageNumbers = theNotes.match(searchRegExp);

	if ((indexNoPageNumbers) && (indexNoPageNumbers.length > 0)){

		TunebookIndexWithNoPageNumbers = true;

	}

}

//
// Process a header or footer and replace macros
// 
// Header/footer macros:
//
// $PDFNAME - Same as the saved PDF name
// $PAGENUMBER - Current page number
// $DATEMDY - Current date in M-D-Y format
// $DATEYMD - Current date in Y-M-D format
// $TIME - Current time in HH:MM format
// $TUNECOUNT - Number of tunes in the ABC
// $TUNENAMES - All the tune names in the ABC
// $QRCODE
//
// Examples: 
// %pageheader My Awesome Tune Book - Saved at $TIME - Page: $PAGENUMBER
// %pagefooter My Awesome Tune Book - Saved on $DATEMDY at $TIME - Page: $PAGENUMBER

function ProcessHeaderFooter(str,pageNumber,pageCount){

	var theFileName = getDescriptiveFileName(pageCount,true);

	// If forcing a specific PDF export name, inject it now.
	if (gDoForcePDFFilename){

		var originalFileName = theFileName;
		
		theFileName = gForcePDFFilename;

		// Clean the forced PDF name
		theFileName = theFileName.trim();

		// Just in case they put .pdf in the forced name
		theFileName = theFileName.replace(".pdf","");

		// Make sure we actually have a placeholder after cleaning
		if (theFileName == ""){
			theFileName = originalFileName;
		}

	}

	var workstr = str.replace("$PDFNAME",theFileName+".pdf");

	workstr = workstr.replace("$PAGENUMBER",(pageNumber+TunebookFirstPageNumber-1));

	workstr = workstr.replace("$TUNECOUNT",totalTunes);

	workstr = workstr.replace("$TUNENAMES",theHeaderFooterTuneNames);
	
	var dateFormatMDY = formatDate(0);
	var dateFormatYMD = formatDate(1);

	workstr = workstr.replace("$DATEMDY",dateFormatMDY);

	workstr = workstr.replace("$DATEYMD",dateFormatYMD);

	var theTime = formatTime();

	workstr = workstr.replace("$TIME",theTime);

	return workstr;
}

//
// Calculate and cache the page number and footer position
//
function calcPageNumberVerticalOffset(thePDF){

	thePageNumberVerticalOffset = thePDF.internal.pageSize.getHeight()-9;

}

//
// Add optional page numbers and header or footer on the current PDF page
//
function AddPageHeaderFooter(thePDF,doAddPageNumber,pageNumber,pageNumberLocation,hideFirstPageNumber,paperStyle){

	// Set by the PDF export dialog
	var voff = gPAGENUMBERTOP;

	thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
	thePDF.setFontSize(HEADERFOOTERFONTSIZE);

	var hasHeader = false;

	if (thePageHeader && (thePageHeader != "")){

		var thePageHeaderProcessed = ProcessHeaderFooter(thePageHeader,pageNumber,totalTunes);

		if (thePageHeaderURL && (thePageHeaderURL != "")){

			var textWidth = thePDF.getTextWidth(thePageHeaderProcessed);

			// Add the header as a hyperlink
			thePDF.textWithLink(thePageHeaderProcessed, (thePDF.internal.pageSize.getWidth()/3.10) - (textWidth/2), voff, {align:"left", url:thePageHeaderURL});

		}
		else{

			// Add the header
			thePDF.text(thePageHeaderProcessed, (thePDF.internal.pageSize.getWidth()/3.10), voff, {align:"center"});

		}

		// Hide page number in center of header
		hasHeader = true;

	}

	var hasFooter = false;

	if (thePageFooter && (thePageFooter != "")){

		var thePageFooterProcessed = ProcessHeaderFooter(thePageFooter,pageNumber,totalTunes);

		if (thePageFooterURL && (thePageFooterURL != "")){

			var textWidth = thePDF.getTextWidth(thePageFooterProcessed);

			// Add the footer as a hyperlink
			thePDF.textWithLink(thePageFooterProcessed, (thePDF.internal.pageSize.getWidth()/3.10)  - (textWidth/2), thePageNumberVerticalOffset , {align:"center", url:thePageFooterURL});

		}
		else{

			// Add the footer
			thePDF.text(thePageFooterProcessed, (thePDF.internal.pageSize.getWidth()/3.10), thePageNumberVerticalOffset , {align:"center"});

		}

		// Hide page number in the center of the footer
		hasFooter = true;

	}

	// Only processing headers and footers
	if (!doAddPageNumber){
		return;
	}

	// Hiding the first page number?
	if (hideFirstPageNumber ){
		if (pageNumber == 1){
			return;
		}
	}

	thePDF.setFont(gPDFFont,gPDFFontStyle,"normal");
	thePDF.setFontSize(HEADERFOOTERFONTSIZE);

	// Add page number
	var str = "" + (pageNumber+TunebookFirstPageNumber-1);

	// Division accounts for the PDF internal scaling

	switch (pageNumberLocation){
		case "tl":
			// Top left
			thePDF.text(str, 13, voff, {align:"center"});
			break;
		case "tc":
			// Top center - don't print if there is a header
			if (!hasHeader){
				thePDF.text(str, (thePDF.internal.pageSize.getWidth()/3.10), voff, {align:"center"});
			}
			break;
		case "tr":
			// Top right
			thePDF.text(str, (thePDF.internal.pageSize.getWidth()/1.55)-12, voff, {align:"center"});
			break;
		case "bl":
			// Bottom left
			thePDF.text(str, 13, thePageNumberVerticalOffset , {align:"center"});
			break;
		case "bc":
			// Bottom center - don't print if there is a footer
			if (!hasFooter){
				thePDF.text(str, (thePDF.internal.pageSize.getWidth()/3.10), thePageNumberVerticalOffset , {align:"center"});
			}
			break;
		case "br":
			// Bottom right
			thePDF.text(str, (thePDF.internal.pageSize.getWidth()/1.55)-12, thePageNumberVerticalOffset , {align:"center"});
			break;
		case "tlr":
			if ((pageNumber % 2) == 1){
				// Top left
				thePDF.text(str, 13, voff, {align:"center"});
			}
			else{
				// Top right
				thePDF.text(str, (thePDF.internal.pageSize.getWidth()/1.55)-12, voff , {align:"center"});
			}
			break;
		case "trl":
			if ((pageNumber % 2) == 1){
				// Top right
				thePDF.text(str, (thePDF.internal.pageSize.getWidth()/1.55)-12, voff , {align:"center"});
			}
			else{
				// Top left
				thePDF.text(str, 13, voff, {align:"center"});
			}
			break;
		case "blr":
			if ((pageNumber % 2) == 1){
				// Bottom left
				thePDF.text(str, 13, thePageNumberVerticalOffset , {align:"center"});
			}
			else{
				// Bottom right
				thePDF.text(str, (thePDF.internal.pageSize.getWidth()/1.55)-12, thePageNumberVerticalOffset , {align:"center"});
			}
			break;
		case "brl":
			if ((pageNumber % 2) == 1){
				// Bottom right
				thePDF.text(str, (thePDF.internal.pageSize.getWidth()/1.55)-12, thePageNumberVerticalOffset , {align:"center"});
			}
			else{
				// Bottom left
				thePDF.text(str, 13, thePageNumberVerticalOffset , {align:"center"});
			}
			break;

	}	
}

// 
// Prime the whistle rendering
//
// This is a hack for SVG rendering latency for the Tin Whistle font seen on Safari and mobile Safari
//
function PrimeWhistleRender(theBlocks,callback){
	
	// Need at least a couple of lines, generally the first is the title, the second is the notation
	if (theBlocks.length < 2){

		callback();

		return;

	}

	//console.log("PrimeWhistleRender 1");

	var theBlock = theBlocks[0];

	// Get the SVG from the block
	var svg = theBlock.querySelector("svg");

	// Copy the SVG to the offscreen
	theOffscreen.innerHTML = "<div>" + svg.outerHTML + "</div>";

	// Find the SVG in the offscreen
	svg = theOffscreen.querySelector("svg");

	// Set the SVG width for high resolution rasterization
	svg.setAttribute("width", gQualitaet);

	// scale improves the subsequent PDF quality. was theBlock
	htmlToImage.toCanvas(svg, {
			backgroundColor: "white",
			style: {
				background: "white"
			},
			pixelRatio: (gPDFQuality*gRenderPixelRatio)
		})
		.then(function(canvas){

			//console.log("PrimeWhistleRender 2");

			var theBlock = theBlocks[1];

			// Get the SVG from the block
			var svg = theBlock.querySelector("svg");

			// Copy the SVG to the offscreen
			theOffscreen.innerHTML = "<div>" + svg.outerHTML + "</div>";

			// Find the SVG in the offscreen
			svg = theOffscreen.querySelector("svg");

			// Set the SVG width for high resolution rasterization
			svg.setAttribute("width", gQualitaet);

			// scale improves the subsequent PDF quality. was theBlock
			htmlToImage.toCanvas(svg, {
					backgroundColor: "white",
					style: {
						background: "white"
					},
					pixelRatio: (gPDFQuality*gRenderPixelRatio)
				})
				.then(function(canvas){

					//console.log("PrimeWhistleRender 3");

					var theBlock;

					// This allows the demo ABC created by the "New ABC" command to work, only has one line of notation
					if (theBlocks.length < 3){

						// Just re-render the second line
						theBlock = theBlocks[1];

					}
					else{

						theBlock = theBlocks[2];

					}

					// Get the SVG from the block
					var svg = theBlock.querySelector("svg");

					// Copy the SVG to the offscreen
					theOffscreen.innerHTML = "<div>" + svg.outerHTML + "</div>";

					// Find the SVG in the offscreen
					svg = theOffscreen.querySelector("svg");

					// Set the SVG width for high resolution rasterization
					svg.setAttribute("width", gQualitaet);

					// scale improves the subsequent PDF quality. was theBlock
					htmlToImage.toCanvas(svg, {
							backgroundColor: "white",
							style: {
								background: "white"
							},
							pixelRatio: (gPDFQuality*gRenderPixelRatio) 
						})
						.then(function(canvas){

							//console.log("PrimeWhistleRender 4");

							// And finally callback to the main render to allow it to proceed
							callback();

						});
				});
		});
}

// 
// Inject hidden text into the PDF for search
function injectHiddenSearchText(hiddenY, isIncipits, incipitsColumn, inciptsColumnNumber){

	//console.log("injecting: "+gExportPDFTuneTitles[tunesProcessed]);

	// Are we injecting hidden titles?
	if (!gPDFIncludeHiddenTitles){
		//console.log("Not injecting hidden titles");
		return;
	}

	//console.log("Injecting hidden titles");

	//console.log("injectHiddenSearchText hiddenY scaled: "+(hiddenY+gPAGENUMBERTOP));
	pdf.setFont(gPDFFont,gPDFFontStyle,"normal");
	pdf.setFontSize(HIDDENPDFTEXTSIZE);
	pdf.setTextColor("#FFFFFF");

	var hiddenTextX = gPDFHiddenTextX;

	if (isIncipits && (incipitsColumn == 2)){

		//console.log("incipits two column case");

		if (inciptsColumnNumber == 0){
			//console.log("incipits two column case - Column 1");
			hiddenTextX = hiddenTextX / 2;
		}
		else{
			//console.log("incipits two column case - Column 2");			
			hiddenTextX = 3 * (hiddenTextX / 2);
		}
	}

	pdf.text(gExportPDFTuneTitles[tunesProcessed], hiddenTextX, (hiddenY/1.55)+gPAGENUMBERTOP+(HIDDENPDFTEXTSIZE/3.1), {align:"center"});

    pdf.setTextColor("#000000");


}

//
// Render a single SVG block to PDF and callback when done
//
function RenderPDFBlock(theBlock, blockIndex, doSinglePage, pageBreakList, addPageNumbers, pageNumberLocation, hideFirstPageNumber, paperStyle, doIncipits, callback){

	// Make sure we have a valid block
	if ((theBlock == null) || (theBlock == undefined)){

		return;

	}

	var scale_factor = 1;

	if (doIncipits){

		var theBlockID = theBlock.id + ".block";

		// Only process the first two blocks of each tune if doing incipits
		if ((theBlockID.indexOf("_0.block") == -1) && (theBlockID.indexOf("_1.block") == -1)) {

			callback();

			return;
		}

		// Doing two column incipits
		if (gIncipitsColumns == 2){

			scale_factor = 2;

		}

	}

	// Get the SVG from the block
	var svg = theBlock.querySelector("svg");

	// Copy the SVG to the offscreen
	theOffscreen.innerHTML = "<div>" + svg.outerHTML + "</div>";

	// Find the SVG in the offscreen
	svg = theOffscreen.querySelector("svg");

	// Set the SVG width for high resolution rasterization
	svg.setAttribute("width", gQualitaet);

	// scale improves the subsequent PDF quality. was theBlock
	htmlToImage.toCanvas(svg, {
			backgroundColor: "white",
			style: {
				background: "white"
			},
			pixelRatio: (gPDFQuality*gRenderPixelRatio) 
		})
		.then(function(canvas) {

			// Select left offset based on paper style
			var hoff = PAGELEFTOFFSET;

			if (paperStyle == "a4"){

				hoff = PAGELEFTOFFSETA4;

			}

			// Calculate the column offsets
			var col0_hoff = hoff;

			var col1_hoff = hoff + (gPageWidth/2);

			// For second column incipits
			if (column_number == 1){

			 	hoff = col1_hoff;
			
			}

			//debugger;

			var thePageHeight;

			switch (gPDFOrientation){

				case "portrait":

					// Get the paper height at 72 dpi from the PDF generator
					thePageHeight = PAGEHEIGHTLETTER;

					if (paperStyle == "a4"){

						thePageHeight = PAGEHEIGHTA4;
						
					}

					break;
				case "landscape":

					// Get the paper height at 72 dpi from the PDF generator
					thePageHeight = PAGEHEIGHTLETTER_LANDSCAPE;

					if (paperStyle == "a4"){

						thePageHeight = PAGEHEIGHTA4_LANDSCAPE;
						
					}

				break;
			}

			// Creates a sharper image
			pdf.internal.scaleFactor = PDFSCALEFACTOR;

			var imgData = canvas.toDataURL("image/jpeg", PDFJPGQUALITY); 

			var theBlockID = theBlock.id + ".block";

			var isFirstBlock = false;

			// Insert a new page for each tune
			if (theBlockID.indexOf("_0.block") != -1) {

				//console.log("Got first block for tune "+gExportPDFTuneTitles[tunesProcessed]);

				isFirstBlock = true;

				if (!isFirstPage) {

					if (doSinglePage) {

						// Mixing notation and QR codes, add an extra page
						if (gMixedNotationAndQRCode){

							//console.log("gMixedNotationAndQRCode adding page placeholder");

							theCurrentPageNumber++; // for the status display.

							pdf.addPage(paperStyle,gPDFOrientation); //... create a page in letter or A4 format, then leave a 30 pt margin at the top and continue.

						}

						running_height = PAGETOPOFFSET;

						theCurrentPageNumber++; // for the status display.

						pdf.addPage(paperStyle,gPDFOrientation); //... create a page in letter or A4 format, then leave a 30 pt margin at the top and continue.

						document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";

						// Add hidden text for search
						injectHiddenSearchText(running_height, doIncipits, gIncipitsColumns, column_number);


					} else {

						// 
						// Does this tune have a forced page break?
						//
						if (pageBreakList[tunesProcessed-1]){

							if (doIncipits){

								// Setup second column if doing notation incipits in two column mode
								if ((gIncipitsColumns==2) && (column_number == 0)){

									// Yes, force it to the second column
									running_height = PAGETOPOFFSET;

									column_number = 1;

									// Place this tune in the second column
									hoff = col1_hoff;

									// Add hidden text for search
									injectHiddenSearchText(running_height, doIncipits, gIncipitsColumns, column_number);
								}
								else{

									// Filled the second column, generate a new page

									// Yes, force it to a new page
									running_height = PAGETOPOFFSET;

									theCurrentPageNumber++; // for the status display.

									pdf.addPage(paperStyle,gPDFOrientation); //... create a page in letter or a4 format, then leave a 30 pt margin at the top and continue.

									document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";

									// Reset column number
									column_number = 0;

									// Reset the offset
									hoff = col0_hoff;

									// Add hidden text for search
									injectHiddenSearchText(running_height, doIncipits, gIncipitsColumns, column_number);

								}

							}
							else{

								// Yes, force it to a new page

								running_height = PAGETOPOFFSET;

								theCurrentPageNumber++; // for the status display.

								pdf.addPage(paperStyle,gPDFOrientation); //... create a page in letter or a4 format, then leave a 30 pt margin at the top and continue.

								document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";

								// Add hidden text for search
								injectHiddenSearchText(running_height, doIncipits, gIncipitsColumns, column_number);

							}

						}
						else{

							// Otherwise, move it down the current page a bit
							running_height += (BETWEENTUNESPACE / scale_factor);

							// Add hidden text for search
							injectHiddenSearchText(running_height, doIncipits, gIncipitsColumns, column_number);

						}

					}

				} else {

					isFirstPage = false;

					// Get the position for future page numbers and footers
					calcPageNumberVerticalOffset(pdf);

					// Add hidden text for search
					injectHiddenSearchText(running_height, doIncipits, gIncipitsColumns, column_number);

				}

				// Save the tune page number
				theTunePageMap[tunesProcessed] = theCurrentPageNumber;

				// Bump the tune processed counter
				tunesProcessed++;

				if (tunesProcessed < totalTunes){

					document.getElementById("statustunecount").innerHTML = "Rendering tune <font color=\"red\">"+(tunesProcessed+1)+"</font>" + " of  <font color=\"red\">"+totalTunes+"</font>"

				}

			}

			height = parseInt(canvas.height * gPageWidth / canvas.width);

			height /= scale_factor;

			// the first two values mean x,y coordinates for the upper left corner. Enlarge to get larger margin.
			// then comes width, then height. The second value can be freely selected - then it leaves more space at the top.

			if (running_height + height <= thePageHeight - PAGEBOTTOMOFFSET) // i.e. if a block of notes would get in the way with the bottom margin (30 pt), then a new one please...
			{

				if (isFirstBlock){

					gTuneHyperlinks.push({page:theCurrentPageNumber,x:hoff,y:running_height,width:(gPageWidth / scale_factor),height:height,url:""});

				}

				pdf.addImage(imgData, 'JPG', hoff, running_height, (gPageWidth / scale_factor), height);


			} else {

				// Reset the running height
				running_height = PAGETOPOFFSET;

				theCurrentPageNumber++; // for the status display.

				// Set the tune page map and hyperlink for this tune if moved to the top of the next page
				if (isFirstBlock){

					gTuneHyperlinks.push({page:theCurrentPageNumber,x:hoff,y:running_height,width:(gPageWidth / scale_factor),height:height,url:""});

					theTunePageMap[tunesProcessed - 1] = theCurrentPageNumber;

				}

				//console.log("1 Adding page");

				pdf.addPage(paperStyle,gPDFOrientation); //... create a page in letter or a4 format, then leave a 30 pt margin at the top and continue.

				pdf.addImage(imgData, 'JPG', hoff, running_height, (gPageWidth / scale_factor), height);

				document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";
			}

			// so that it starts the new one exactly one pt behind the current one.
			running_height = running_height + height + (1 / scale_factor);

			callback(true);


		});

}

//
// Prompt for PDF filename
//
function promptForPDFFilename(placeholder, callback){

	// Process comment-based PDF commands
	ParseCommentCommands(gTheABC.value);

	// If forcing a specific PDF export name, inject it now.
	if (gDoForcePDFFilename){

		var originalPlaceHolder = placeholder;
		
		placeholder = gForcePDFFilename;

		// Clean the forced PDF name
		placeholder = placeholder.trim();

		// Just in case they put .pdf in the forced name
		placeholder = placeholder.replace(".pdf","");

		// Make sure we actually have a placeholder after cleaning
		if (placeholder == ""){
			placeholder = originalPlaceHolder;
		}

	}

	// Use the replace method to replace the matched pattern with an empty string
	// MAE 13 Sep 2024 - Allow spaces in filenames
	//placeholder = placeholder.replace(/[. ]+/ig, '');
	placeholder = placeholder.replace(/[.]+/ig, '');

	placeholder = placeholder.trim();

	// Clean any leading underscore after the title number clean
	var theregex = /^[_]+/;
	placeholder = placeholder.replace(theregex, '');

	// Reuse last placeholder
	if (!gDoForcePDFFilename){
		if (gPDFFileName != ""){
			placeholder = gPDFFileName;
			placeholder = placeholder.replace(".pdf","");
		}
	}

	DayPilot.Modal.prompt("Please enter a filename for your PDF file:", placeholder+".pdf",{ theme: "modal_flat", top: 200, autoFocus: false, scrollWithPage: (AllowDialogsToScroll()) }).then(function(args) {

		var fname = args.result;

		// If the user pressed Cancel, exit
		if (fname != null){

			// Strip out any naughty HTML tag characters
			fname = cleanFileName(fname);

			if (fname.length != 0){
				// Give it a good extension
				if (isPureDesktopBrowser()){

					if (!fname.endsWith(".pdf")){

						// Give it a good extension
						fname = fname.replace(/\..+$/, '');
						fname = fname + ".pdf";

					}
				}
				else{

					// iOS and Android have odd rules about text file saving
					// Give it a good extension
					fname = fname.replace(/\..+$/, '');
					fname = fname + ".pdf";

				}

				// Save the previous name
				gPDFFileName = fname;

			}
			else{

				fname = null;

			}
		}

		callback(fname);

	});
}

//
// Warn if coming in from a bad Acrobat link
//
function ShowAcrobatHyperlinkLengthWarning(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","ShowAcrobatHyperlinkLengthWarning");

	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;">Adobe Acrobat Hyperlink Length Warning</p>';
	modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:36px;">Adobe Acrobat limits the length of clicked hyperlinks to 2076 characters.</p>';
	modal_msg += '<p style="font-size:12pt;line-height:18pt;">Some very complex tune Share URLs used in tunebooks generated with this tool may exceed this limit.</p>';
	modal_msg += '<p style="font-size:12pt;line-height:18pt;">If you are using Adobe Acrobat as your PDF reader, and you are seeing this message after clicking a complex tune link, try instead simply dragging the PDF of the tunebook to your browser to read it.</p>';
	modal_msg += '<p style="font-size:12pt;line-height:18pt;">The PDF readers built into most modern browsers do not have this hyperlink length limitation and will properly open the tune hyperlink when clicked.</p>'

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 100, width: 700,  scrollWithPage: (AllowDialogsToScroll()) });
}

//
// Put up an alert that there is a decode issue
//
function ShowHyperlinkBadDecodeAlert(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","ShowHyperlinkBadDecodeAlert");

	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;">Problem Decoding Tune Share URL</p>';
	modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:36px;text-align:center;">An unrecoverable error occured when decoding this tune ShareURL.</p>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 100, width: 700,  scrollWithPage: (AllowDialogsToScroll()) });

}

// 
// Warn if there are any play ShareURLs too large for Adobe Acrobat
//
function ShowAcrobatURLSizeWarningDialog(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","ShowAcrobatURLSizeWarningDialog");

	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;">Adobe Acrobat Maximum URL Length Warning</p>';

	// Different messaging if hyperlinks are the entire tunebook
	if (gAddTunebookPlaybackHyperlinks){

		modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:36px;">During PDF export play hyperlink embedding, the entire tunebook play hyperlink length of '+gAcrobatURLLimitExceeded[0].urllength+' characters exceeded the Adobe Acrobat maximum URL length of 2076 characters.</p>';
		modal_msg += '<p style="font-size:12pt;line-height:18pt;">These play links will work with the built-in PDF reader on most web browsers and online PDF readers, many non-Adobe desktop and mobile PDF readers, but will not open correctly if the tune title is clicked when the PDF is viewed using Adobe Acrobat:</p>';
		modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:24px">If Adobe Acrobat is your target PDF reader, your best option is to use the per-tune %hyperlink directive in these tunes with a shortened play Share URL to the entire tunebook manually generated using the Sharing dialog.</p>';
	}
	else{

		modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:36px;">During PDF export play hyperlink embedding, some very long and complex tunes had play hyperlinks that exceeded the Adobe Acrobat maximum URL length of 2076 characters.</p>';
		modal_msg += '<p style="font-size:12pt;line-height:18pt;">These play links will work with the built-in PDF reader on most web browsers and online PDF readers, many non-Adobe desktop and mobile PDF readers, but will not open correctly if the tune title is clicked when the PDF is viewed using Adobe Acrobat:</p>';

		var nBadTunes = gAcrobatURLLimitExceeded.length;
		for (var i=0;i<nBadTunes;++i){
			modal_msg += '<p style="font-size:12pt;line-height:10pt;">"'+gAcrobatURLLimitExceeded[i].name+'"&nbsp;-&nbsp;URL length: '+gAcrobatURLLimitExceeded[i].urllength+'</p>';
		}
		modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:24px">If Adobe Acrobat is your target PDF reader, your best option is to use the per-tune %hyperlink directive in these tunes with a shortened play Share URL manually generated using the Sharing dialog.</p>';		
	}


	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 75, width: 700,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

		// Clear the list of bad URLs
		gAcrobatURLLimitExceeded = [];
			
	});
}

//
// PDF Exporter
//
var gOriginalWidthBeforePDFExport;

var gExportPDFTuneTitles;

function ExportPDF(){

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// If disabled, return
	if (!gAllowPDF){
		return;
	}

	// Get the page format
	var elem;

	var thePageOptions = getPDFFormat();

	var textIncipitsRequested = ((thePageOptions == "incipits_abc") || (thePageOptions == "incipits_a4_abc") || (thePageOptions == "incipits_abc_sort") || (thePageOptions == "incipits_a4_abc_sort") || (thePageOptions == "incipits_abc_full") || (thePageOptions == "incipits_a4_abc_full") || (thePageOptions == "incipits_abc_full_cce") || (thePageOptions == "incipits_a4_abc_full_cce"));

	var bQRCodesRequested = ((thePageOptions == "all_qr_codes") || (thePageOptions == "all_qr_codes_a4"));
	
	// Are we doing ABC incipits?
	var bDoFullTunes = ((thePageOptions == "incipits_abc_full") || (thePageOptions == "incipits_a4_abc_full") || (thePageOptions == "incipits_abc_full_cce") || (thePageOptions == "incipits_a4_abc_full_cce"));
	
	var bDoCCETransform = ((thePageOptions == "incipits_abc_full_cce") || (thePageOptions == "incipits_a4_abc_full_cce"));

	// Are we mixing notation and QR codes
	gMixedNotationAndQRCode = ((thePageOptions == "mixed_notation_qr") || (thePageOptions == "mixed_notation_qr_a4"));

	if (gMixedNotationAndQRCode){

		//console.log("Got gMixedNotationAndQRCode");

		if (thePageOptions == "mixed_notation_qr"){
			thePageOptions = "one";
		}
		else{
			thePageOptions = "one_a4";
		}

		// We know the user requests mixed notation and QR, set the page options back to one tune per page
		// Future operations read this value
		setPDFFormat(thePageOptions);

	}

	// Count the tunes
	totalTunes = CountTunes();
	
	var title = getDescriptiveFileName(totalTunes,true);

	if (bQRCodesRequested){
		
		// MAE 13 Sep 2024 - Allow spaces in filenames
		title += " QR Codes";

		promptForPDFFilename(title,function(fname){

			if (fname){

				ExportTextIncipitsPDF(fname,bDoFullTunes,bDoCCETransform,true);

			}
		});

	}
	else
	// Exporting text full ABC or text incipits?
	if (textIncipitsRequested){

		if (bDoFullTunes){
			// MAE 13 Sep 2024 - Allow spaces in filenames
			if (!bDoCCETransform){
				title += " ABC";
			}
			else{
				title += " Comhaltas";
			}

		}
		else{
			title += " Incipits";
		}

		promptForPDFFilename(title,function(fname){

			if (fname){

				ExportTextIncipitsPDF(fname,bDoFullTunes,bDoCCETransform,false);

			}
		});

	}
	else{

		// Standard PDF export not allowed when rendering is disabled
		if (gDisableNotationRendering){

			var thePrompt = "Notation PDF export not possible with rendering disabled.";
			
			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);
			
			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;
		}


		// Standard PDF export path

		// Get the page format
		var elem;

		var thePageOptions = getPDFFormat();

		var incipitsRequested = ((thePageOptions == "incipits") || (thePageOptions == "incipits_a4"));
		
		// If doing incipits add a PDF filename suffix
		if (incipitsRequested){

			// MAE 13 Sep 2024 - Allow spaces in filenames
			title += " Incipits";
		}

		// If mixing notation and QR add a PDF filename suffix
		if (gMixedNotationAndQRCode){

			// MAE 13 Sep 2024 - Allow spaces in filenames
			title += " Notation QR";

		}

		var individualPDFPerTune = ((thePageOptions == "pdf_per_tune") || (thePageOptions == "pdf_per_tune_a4"));

		// Normal path, prompt for filename
		if (!individualPDFPerTune) {

			promptForPDFFilename(title,function(fname){

				if (fname){

					// Save off the image display size
					gOriginalWidthBeforePDFExport = gTheNotation.style.width;

					// Fix the size for the PDF rendering
					gTheNotation.style.width = "850px";

					ExportNotationPDF(fname);
				}
			});
		}
		else{

			// Saving one PDF per tune

			// Save off the image display size
			gOriginalWidthBeforePDFExport = gTheNotation.style.width;

			// Fix the size for the PDF rendering
			gTheNotation.style.width = "850px";

			ExportNotationPDF("an Individual PDF File for Each Tune");

		}

	}
}

//
// Export the first few bars of each tune in ABC format
//
function ExportTextIncipitsPDF(title, bDoFullTunes, bDoCCETransform, bDoQRCodes){

	// Clear the cancel flag
	gPDFCancelRequested = false;

	// Get the page format
	var elem;

	var thePageOptions = getPDFFormat();

	// Show the PDF status modal
	var pdfstatus = document.getElementById("pdf-controls");
	pdfstatus.style.display = "block";

	// Page number location
	var pageNumberLocation = getPageNumbers();

	// Add page numbers?
	var addPageNumbers = (pageNumberLocation != "none");

	// What size paper? Letter or A4?
	var paperStyle = "letter";

	if ((thePageOptions == "incipits_a4_abc") || (thePageOptions == "incipits_a4_abc_sort")  || (thePageOptions == "incipits_a4_abc_full") || (thePageOptions == "incipits_a4_abc_full_cce") || (thePageOptions == "all_qr_codes_a4")) {

		paperStyle = "a4";

	}

	// Requested sorted ABC incipits?
	var TunebookABCSortedIncipitsRequested = false;

	if ((thePageOptions == "incipits_abc_sort") || (thePageOptions == "incipits_a4_abc_sort")) {

		TunebookABCSortedIncipitsRequested = true;

	}

	// Hide page numbers on page 1?
	var hideFirstPageNumber = false;

	var firstPageNumbers = getFirstPage();

	if (firstPageNumbers == "no"){

		hideFirstPageNumber = true;

	}

	// Process comment-based PDF commands
	ParseCommentCommands(gTheABC.value);

	// Clear the render time
	theRenderTime = "";

	// Cache the tune titles
	theHeaderFooterTuneNames = GetAllTuneTitles();

	// Init the shared globals
	theCurrentPageNumber = 1;

	// Count the tunes
	totalTunes = CountTunes();

	isFirstPage = true;

	// Setup function scope shared vars

	// Set the global PDF rendering flag
	gRenderingPDF = true;

	// Dynamic loading of fonts with Chinese characters
	// They are huge files, so don't want to burden the normal use of the tool with them
	if ((gPDFFont == "Noto-Sans") || (gPDFFont == "Noto-Serif")){

		document.getElementById("statustunecount").innerHTML = "";

		document.getElementById("pagestatustext").innerHTML = "&nbsp;";

		if (gPDFFont == "Noto-Sans") {

			if (!gNotoSansLoaded){

				document.getElementById("statuspdfname").innerHTML = "Loading Noto-Sans Font";

				loadScript("./notosans-regular.js",

					function(){

						//console.log("Noto Sans font loaded");

						gNotoSansLoaded = true;
						
						gPDFFontStyle = "Normal";

						doPDFStepTwo();

					});
			}
			else{

				gPDFFontStyle = "Normal";

				doPDFStepTwo();

			}
		}
		else
		if (gPDFFont == "Noto-Serif") {

			if (!gNotoSerifLoaded){
				
				document.getElementById("statuspdfname").innerHTML = "Loading Noto-Serif Font";

				loadScript("./notoserif-regular.js",

					function(){

						//console.log("Noto Serif font loaded");

						gNotoSerifLoaded = true;
						
						gPDFFontStyle = "Normal";

						doPDFStepTwo();

					});
			}
			else{

				gPDFFontStyle = "Normal";

				doPDFStepTwo();

			}
		}
	}
	else{

		doPDFStepTwo();

	}

	function doPDFStepTwo(){

		document.getElementById("statuspdfname").innerHTML = "Generating <font color=\"blue\">" + title + "</font>";

		document.getElementById("statustunecount").innerHTML = "";

		document.getElementById("pagestatustext").innerHTML = "&nbsp;";


		pdf = new jsPDF(gPDFOrientation, 'pt', paperStyle);	

		// Set the initial PDF display mode
		pdf.setDisplayMode("fullpage","single","UseNone");

		// Creates a sharper image
		pdf.internal.scaleFactor = PDFSCALEFACTOR;

		// Get the position for future page numbers and footers
		calcPageNumberVerticalOffset(pdf);

		// Track tune hyperlinks
		gTuneHyperlinks = [];

		setTimeout(function(){

			var theTunePageMap = [];

			if (bDoQRCodes){

				// Keep track of use of PDF exporter
				sendGoogleAnalytics("export","PDFQRCodes");

				theTunePageMap = GenerateFullTuneQRCodes(pdf,addPageNumbers,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,qr_done_callback);

				function qr_done_callback(pageMap){
					
					theTunePageMap = pageMap;

					document.getElementById("statustunecount").innerHTML = "All QR Codes Added!";
					
					ExportTextIncipitsPDF_callback();

				}			
			}
			else
			if (bDoFullTunes){

				// Keep track of use of PDF exporter
				sendGoogleAnalytics("export","PDFFullText");

				theTunePageMap = GenerateFullTextIncipits(pdf,addPageNumbers,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,false,bDoCCETransform);
				document.getElementById("statustunecount").innerHTML = "Full ABC Text Added!";

				ExportTextIncipitsPDF_callback();
			}
			else{
				// Keep track of use of PDF exporter
				sendGoogleAnalytics("export","PDFTextIncipits");

				theTunePageMap = GenerateTextIncipits(pdf,addPageNumbers,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,TunebookABCSortedIncipitsRequested);
				document.getElementById("statustunecount").innerHTML = "ABC Incipits Added!";

				ExportTextIncipitsPDF_callback();
			}

			function ExportTextIncipitsPDF_callback(){

				// Was a cancel requested?
				if (gPDFCancelRequested){

					gRenderingPDF = false;

					clearGetTuneByIndexCache();

					// Hide the PDF status modal
					var pdfstatus = document.getElementById("pdf-controls");
					pdfstatus.style.display = "none";

					// Exit early
					return;
				}
			
				var totalPages = theCurrentPageNumber;

				if (TunebookTPRequested){

					// Add a new page
					pdf.addPage(paperStyle,gPDFOrientation);
					theCurrentPageNumber++;

					pdf.movePage(theCurrentPageNumber,1);

				} 

				var theDelta = theCurrentPageNumber;
				var theTOCStart = 1;
				var theTOCSortedStart = 1;

				if (TunebookTOCRequested){

					DryRunAddTuneTOC(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,theTunebookSortedTOCTitle, false, TunebookABCSortedIncipitsRequested);

				}

				theTOCSortedStart = theCurrentPageNumber-theDelta;
				theTOCSortedStart++;

				if (TunebookSortedTOCRequested){

					DryRunAddTuneTOC(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,theTunebookSortedTOCTitle,true,TunebookABCSortedIncipitsRequested);

				}

				// Get the number of pages added by the TOC operations
				theTOCDelta = theCurrentPageNumber - theDelta;

				// Restore the working page number
				theCurrentPageNumber = theDelta;

				// If a title page is present, increment the start pages and tune page offset
				if (TunebookTPRequested){
					theTOCStart++;
					theTOCSortedStart++;
					theTOCDelta++;
				}	

				// Automatically offset tune numbers by Title Page and TOC length?
				if (TunebookFirstPageAuto || gPDFAutoPageNumbers){
					TunebookFirstPageNumber = theTOCDelta+1;
				}

				// Did they request a tune TOC?
				if (TunebookTOCRequested){
					
					document.getElementById("statustunecount").innerHTML = "Adding Table of Contents";
					
					AppendTuneTOC(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,theTunebookTOCTitle, TunebookABCSortedIncipitsRequested,TunebookABCSortedIncipitsRequested,gIncludePageLinks,theTOCDelta,theTOCStart);

					document.getElementById("statustunecount").innerHTML = "Table of Contents Added!";
					
					document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";
					
				}

				// Did they request a sorted tune TOC?
				if (TunebookSortedTOCRequested){
					
					document.getElementById("statustunecount").innerHTML = "Adding Sorted Table of Contents";
					
					AppendTuneTOC(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,theTunebookSortedTOCTitle, true, TunebookABCSortedIncipitsRequested,gIncludePageLinks,theTOCDelta,theTOCSortedStart);

					document.getElementById("statustunecount").innerHTML = "Sorted Table of Contents Added!";
					
					document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";
					
				}

				// Did they request a tunebook title page?
				if (TunebookTPRequested){
					
					document.getElementById("statustunecount").innerHTML = "Adding Title Page";
					
					AppendTuneTitlePage(pdf,paperStyle,theTunebookTP,theTunebookTPST);

					document.getElementById("statustunecount").innerHTML = "Title Page Added!";
					
					document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";
					
				}

				// How many pages were added before the tunes?
				theDelta = theCurrentPageNumber - theDelta;

				if (TunebookTPRequested){
					theDelta++;
				}

				if (TunebookTOCRequested || TunebookSortedTOCRequested){
					theDelta = theTOCDelta;
				}

				// Add all the headers and footers at once
				PostProcessHeadersAndFooters(pdf,addPageNumbers,theDelta+1,totalPages,pageNumberLocation,hideFirstPageNumber,paperStyle);

				// Did they request a tunebook index?
				if (TunebookIndexRequested){
					
					document.getElementById("statustunecount").innerHTML = "Adding Tunebook Index";

					AppendTunebookIndex(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,theTunebookIndexTitle,TunebookABCSortedIncipitsRequested,TunebookABCSortedIncipitsRequested,gIncludePageLinks, theDelta);

					document.getElementById("statustunecount").innerHTML = "Tunebook Index Added!";
					
					document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";
					
				}

				// Did they request a sorted tunebook index?
				if (TunebookSortedIndexRequested){
					
					document.getElementById("statustunecount").innerHTML = "Adding Tunebook Sorted Index";

					AppendTunebookIndex(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,theTunebookSortedIndexTitle,true,TunebookABCSortedIncipitsRequested,gIncludePageLinks,theDelta);

					document.getElementById("statustunecount").innerHTML = "Tunebook Sorted Index Added!";
					
					document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";
					
				}

				// Add any link back requested to the index or TOC
				var addTOCLinks = false;
				var theTOCLinkPage = 1;
				var addIndexLinks = false;
				var theIndexLinkPage = 1;
				var startPage = theTOCDelta+1;
				var endPage = theTOCDelta + totalPages;

				if (gAddTOCLinkback&& (TunebookTOCRequested || TunebookSortedTOCRequested)){
					addTOCLinks = true;
					if (TunebookTPRequested){
						theTOCLinkPage = 2;
					}
				}

				if (gAddIndexLinkback&& (TunebookIndexRequested || TunebookSortedIndexRequested)){
					addIndexLinks = true;
					theIndexLinkPage = totalPages + theTOCDelta + 1;
				}

				if (addTOCLinks || addIndexLinks){
					PostProcessTOCAndIndexLinks(pdf,startPage,endPage,addTOCLinks,theTOCLinkPage,addIndexLinks,theIndexLinkPage);
				}

				if (gTuneHyperlinks.length > 0){
					PostProcessTuneHyperlinks(pdf,gTuneHyperlinks,paperStyle,startPage);						
				}
				
				// Did they request a QR code?
				if (gQRCodeRequested){

					document.getElementById("statustunecount").innerHTML = "Adding Tunebook QR Code";

					// This needs the callback because the rasterizer is async
					AppendQRCode(pdf,paperStyle,qrcode_callback);

					function qrcode_callback(status){

						if (!status){

							document.getElementById("statustunecount").innerHTML = "Share URL too long for QR Code, try sharing fewer tunes";

						}
						else{

							theCurrentPageNumber++;

							document.getElementById("statustunecount").innerHTML = "Tunebook QR Code Added!";
							
							document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";

						}

						// If the QR code generation failed, leave more time for a status update
						var statusDelay = 1000;

						if (!status){

							statusDelay = 4000;
						}

						// Delay for final QR code UI status update
						setTimeout(function(){
						
							// Handle the status display for the new page
							document.getElementById("statustunecount").innerHTML = "&nbsp;";

							// And complete the PDF
							finalize_pdf_export();

						},statusDelay);

						return;

					}
				}	
				else{

					// No QR code requested, just run the callback directly
					finalize_pdf_export();
					
					return;

				}

				//
				// Finalize the PDF document
				//
				function finalize_pdf_export(){				

					document.getElementById("statuspdfname").innerHTML = "<font color=\"darkgreen\">Rendering Complete!</font>";

						setTimeout(function(){

						document.getElementById("statuspdfname").innerHTML = "Saving <font color=\"blue\">" + title + "</font>";

						// Save the status up for a bit before saving
						setTimeout(function(){

							// Start the PDF save
							// On mobile, have to use a different save strategy otherwise the PDF loads in the same tab
							if (isMobileBrowser()){

								var theBlob = pdf.output('blob', { filename: (title) });
							 	
							 	var newBlob = new Blob([theBlob], { type: 'application/octet-stream' });

								var a = document.createElement("a");

						        document.body.appendChild(a);
						        
						        a.style = "display: none";

						        url = window.URL.createObjectURL(newBlob);
						        a.href = url;
						        a.download = (title);
						        a.click();

						        document.body.removeChild(a);

						        setTimeout(function() {
						          window.URL.revokeObjectURL(url);
						        }, 1000);

							}
							else{

								// This works fine on all desktop browsers
							 	pdf.save(title);
						 	}

							document.getElementById("statuspdfname").innerHTML = "&nbsp;";

							document.getElementById("statustunecount").innerHTML = "&nbsp;";

							document.getElementById("pagestatustext").innerHTML = "&nbsp;";

							// Hide the PDF status modal
							var pdfstatus = document.getElementById("pdf-controls");
							pdfstatus.style.display = "none";

							// Clear the PDF rendering global
							gRenderingPDF = false;

							clearGetTuneByIndexCache();

						},500);

					},500);
				};
			}

		},250);
	}
}

//
// Export a PDF document with notation, either full or first line incipits
//

// For per-tune PDFs
var gNSplitPDF;
var gSplitPDFIndex;
var gTheSplitPDFTitles;

function ExportNotationPDF(title) {

	// Clear the cancel flag
	gPDFCancelRequested = false;

	// Cache the tab selected for adaptive rendering delay
	gPDFTabselected = GetRadioValue("notenodertab");

	// Show the PDF status modal
	var pdfstatus = document.getElementById("pdf-controls");
	pdfstatus.style.display = "block";

	// Get the page format
	var elem;

	var thePageOptions = getPDFFormat();

	// Don't allow per-tune PDFs on mobile
	if (isMobileBrowser() && ((thePageOptions == "pdf_per_tune") || (thePageOptions == "pdf_per_tune_a4"))){
		thePageOptions = "one";
	}

	// Page number location
	var pageNumberLocation = getPageNumbers();

	var doPDFPerTune = (thePageOptions == "pdf_per_tune") || (thePageOptions == "pdf_per_tune_a4");

	var doSinglePage = ((thePageOptions == "one") || (thePageOptions == "one_a4") || doPDFPerTune);

	// Add page numbers?
	var addPageNumbers = (pageNumberLocation != "none");

	// What size paper? Letter or A4?
	var paperStyle = "letter";

	if ((thePageOptions == "one_a4") || (thePageOptions == "multi_a4") || (thePageOptions == "incipits_a4") || (thePageOptions == "pdf_per_tune_a4")){

		paperStyle = "a4";

	}

	var incipitsRequested = ((thePageOptions == "incipits") || (thePageOptions == "incipits_a4"));

	// Hide page numbers on page 1?
	var hideFirstPageNumber = false;

	var firstPageNumbers = getFirstPage();

	if (firstPageNumbers == "no"){

		hideFirstPageNumber = true;

	}

	// Process comment-based PDF commands
	ParseCommentCommands(gTheABC.value);

	// If doing PDF per tune, need to generate a TOC to get a page map
	if (doPDFPerTune){

		// Force TOC generation to get a page map for PDF splitting later
		TunebookTOCRequested = true;

		// No navigation markers on the tunes
		gAddTOCLinkback = false;
		gAddIndexLinkback = false;

	}

	// Clear the render time
	theRenderTime = "";

	// Cache the tune titles
	theHeaderFooterTuneNames = GetAllTuneTitles();

	gExportPDFTuneTitles = GetTunebookIndexTitles();

	// Init the shared globals
	theCurrentPageNumber = 1;

	tunesProcessed = 0;

	// Init two column incipit layout
	column_number = 0;

	// Init the page map
	theTunePageMap = [];

	// Count the tunes
	totalTunes = CountTunes();

	isFirstPage = true;

	// Setup function scope shared vars
	var nBlocksProcessed = 0;

	var pageBreakList = [];

	var theBlocks = null;

	var nBlocks = 0;

	var theBlock = null;

	// If doing incipits, force a render with striped annotations and text
	// If the annotations or text aren't already stripped, render them stripped
	var requirePostRender = false;

	// Track tune hyperlinks
	gTuneHyperlinks = [];

	// Restore the default between-tune layout spacing
	BETWEENTUNESPACE = gBetweenTuneSpace;

	if (incipitsRequested){

		// Keep track of use of PDF exporter
		sendGoogleAnalytics("export","PDFIncipits");

		// Unless overridden, reduce the space between tunes for single column note incipits
		if ((gIncipitsColumns == 1) && (!gGotBetweenTuneSpace)){

			BETWEENTUNESPACE = 0;	
		}

		// Force an idle on the advanced controls to determine if we need to hide the annotations or text annotations before incipit render
		IdleAdvancedControls(false);

		// Are we showing tablature?
		IdleAllowShowTabNames();

		// Is annotation suppressed allowed, but not enabled, or is text annotation suppression allowed but not enabled, do a render
		// If tabnames are being shown, hide them
		if (gRawMode || (gAllowFilterAnnotations && (!gStripAnnotations)) || (gAllowFilterText && (!gStripTextAnnotations)) || (gAllowShowTabNames && (gShowTabNames))){

			document.getElementById("statuspdfname").innerHTML = "Generating <font color=\"blue\">" + title + "</font>";

			document.getElementById("statustunecount").innerHTML = "Processing Incipits for PDF generation";

			document.getElementById("pagestatustext").innerHTML = "&nbsp;";

			// Need to provide time for the UI to update
			setTimeout(function(){

				var saveStripAnnotations = gStripAnnotations;
				gStripAnnotations = true;

				var saveStripTextAnnotations = gStripTextAnnotations;
				gStripTextAnnotations = true;

				var saveShowTabNames = gShowTabNames;
				if (gAllowShowTabNames){
					gShowTabNames = false;
				}
				
				// Save off the raw mode
				var oldRawMode = gRawMode;
				gRawMode = false;

				// Force a full render 
				Render(true,null);

				gRawMode = oldRawMode;

				// Restore the advanced controls flags
				gStripAnnotations = saveStripAnnotations;

				gStripTextAnnotations = saveStripTextAnnotations;

				if (gAllowShowTabNames){
					gShowTabNames = saveShowTabNames;
				}

				// Going to need to clean up later
				requirePostRender = true;

				doPDFStepTwo();

			},100);
		}
		else{

			doPDFStepTwo();
		}

	}
	else
	if (gRawMode){

		document.getElementById("statuspdfname").innerHTML = "Generating <font color=\"blue\">" + title + "</font>";

		document.getElementById("statustunecount").innerHTML = "Processing ABC for PDF generation";

		document.getElementById("pagestatustext").innerHTML = "&nbsp;";

		// Need to provide time for the UI to update
		setTimeout(function(){

			// Clear raw mode
			gRawMode = false;

			// Force a full render 
			Render(true,null);

			// Reset raw mode
			gRawMode = true;

			// Going to need to clean up later
			requirePostRender = true;

			doPDFStepTwo();

		},100);
	}
	else{

		doPDFStepTwo();

	}

	function doPDFStepTwo(){

		if ((gPDFFont == "Noto-Sans") || (gPDFFont == "Noto-Serif")){

			document.getElementById("statustunecount").innerHTML = "";

			document.getElementById("pagestatustext").innerHTML = "&nbsp;";

			if (gPDFFont == "Noto-Sans") {

				if (!gNotoSansLoaded){

					document.getElementById("statuspdfname").innerHTML = "Loading Noto-Sans Font";

					loadScript("./notosans-regular.js",

						function(){

							//console.log("Noto Sans font loaded");

							gNotoSansLoaded = true;
							
							gPDFFontStyle = "Normal";

							doPDFStepThree();

						});
				}
				else{

					gPDFFontStyle = "Normal";

					doPDFStepThree();

				}
			}
			else
			if (gPDFFont == "Noto-Serif") {

				if (!gNotoSerifLoaded){

					document.getElementById("statuspdfname").innerHTML = "Loading Noto-Serif Font";

					loadScript("./notoserif-regular.js",

						function(){

							//console.log("Noto Serif font loaded");

							gNotoSerifLoaded = true;
							
							gPDFFontStyle = "Normal";

							doPDFStepThree();

						});
				}
				else{

					gPDFFontStyle = "Normal";

					doPDFStepThree();

				}
			}
		}
		else{

			doPDFStepThree();

		}
	}

	function doPDFStepThree(){

		// Keep track of use of PDF exporter
		sendGoogleAnalytics("export","PDFFull");

		running_height = PAGETOPOFFSET;

		document.getElementById("statuspdfname").innerHTML = "Generating <font color=\"blue\">" + title + "</font>";

		document.getElementById("statustunecount").innerHTML = "Processing notation for PDF generation";

		document.getElementById("pagestatustext").innerHTML = "&nbsp;";

		// Cache the offscreen rendering div
		theOffscreen = document.getElementById("offscreenrender");

		// Rather than do a full render, which should not be needed, 
		// just mark the existing divs for later SVG scraping during PDF rasterization
		PrepareSVGDivsForRasterization();
		
		document.getElementById("statustunecount").innerHTML = "Rendering tune <font color=\"red\">1</font>" + " of  <font color=\"red\">"+totalTunes+"</font>"

		// Save the first tune page number
		theTunePageMap[0] = theCurrentPageNumber;

		// Set the global PDF rendering flag
		gRenderingPDF = true;

		pdf = new jsPDF(gPDFOrientation, 'pt', paperStyle);

		// Set the initial PDF display mode
		pdf.setDisplayMode("fullpage","single","UseNone");

		// For search injected hidden text, cache the text draw coordinates
		gPDFHiddenTextX = pdf.internal.pageSize.getWidth()/3.10;
		//console.log("gPDFHiddenTextX: "+ gPDFHiddenTextX);

		// If not doing single page, find any tunes that have page break requests
		pageBreakList = [];

		if (!doSinglePage){

			// Process any automatic or manual page breaks
			pageBreakList = scanTunesForPageBreaks(pdf,paperStyle,incipitsRequested);

		}

		theBlocks = document.querySelectorAll('div[class="block"]');

		nBlocks = theBlocks.length;

		// Kick off the rendering loop
		theBlock = theBlocks[0];

		// If doing whistle, try async priming the HTML renderer
		// This is to work around the issue where on Safari and mobile Safari, we often are missing the first line of whistle tab
		// the first time the notation is rasterized

		if ((gPDFTabselected == "whistle") || (gPDFTabselected == "recorder"))  {

			PrimeWhistleRender(theBlocks,Rasterize);

		}
		else{

			Rasterize();

		}

	}

	function Rasterize(){

		setTimeout(function() {

			// Render and stamp one block
			RenderPDFBlock(theBlock, 0, doSinglePage, pageBreakList, addPageNumbers, pageNumberLocation, hideFirstPageNumber, paperStyle, incipitsRequested, callback);

			function callback() {

				//console.log("nBlocksProcessed = "+nBlocksProcessed);

				// Was a cancel requested?
				if (gPDFCancelRequested){

					gRenderingPDF = false;

					clearGetTuneByIndexCache();

					// Fix up any display width changes done for the PDF export
					gTheNotation.style.width = gOriginalWidthBeforePDFExport;

					// Clean up a bit
					pdf = null;
					theBlocks = null;

					// Did incipit generation require a re-render?
					if (requirePostRender){
						
						document.getElementById("statuspdfname").innerHTML = "<font color=\"red\">Cleaning up after PDF generation</font>";
						
						RenderAsync(true,null,function(){

							// Hide the PDF status modal
							var pdfstatus = document.getElementById("pdf-controls");
							pdfstatus.style.display = "none";

							// Clear the offscreen rendering div
							document.getElementById("offscreenrender").innerHTML = ""; 

						});


					}
					else{

						// Hide the PDF status modal
						var pdfstatus = document.getElementById("pdf-controls");
						pdfstatus.style.display = "none";

						// Just clean up the div IDs and classes
						RestoreSVGDivsAfterRasterization();

					}

					// Mixed notation and QR codes resets the format selector to one, so fix it and save it here
					if (gMixedNotationAndQRCode){
						
						//console.log("gMixedNotationAndQRCode - Resetting pdfformat - Cancelled");

						if (paperStyle == "a4"){
							setPDFFormat("mixed_notation_qr_a4");
						}
						else{
							setPDFFormat("mixed_notation_qr");
						}

						SavePDFSettings();

					}

					// Exit early
					return;

				}

				nBlocksProcessed++;

				if (nBlocksProcessed == nBlocks) {

					// Mixing notation and QR codes, add an extra page at the very end
					if (gMixedNotationAndQRCode){

						//console.log("gMixedNotationAndQRCode adding page placeholder");

						theCurrentPageNumber++; // for the status display.

						pdf.addPage(paperStyle,gPDFOrientation); //... create a page in letter or A4 format, then leave a 30 pt margin at the top and continue.

					}

					var totalPages = theCurrentPageNumber;

					// If mixed Notation and QR codes request, inject the QR codes now
					if (gMixedNotationAndQRCode){

						//console.log("gMixedNotationAndQRCode postProcess");

						PostProcessMixedNotationAndQRCode(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,totalPages,rasterize_callback);

					}
					else{

						rasterize_callback();

					}

					function rasterize_callback(){

						if (TunebookTPRequested){

							// Add a new page
							pdf.addPage(paperStyle,gPDFOrientation);
							theCurrentPageNumber++;

							pdf.movePage(theCurrentPageNumber,1);

						} 


						var theDelta = theCurrentPageNumber;
						var theTOCStart = 1;
						var theTOCSortedStart = 1;

						if (TunebookTOCRequested){

							DryRunAddTuneTOC(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,theTunebookTOCTitle,false,false);

						}

						theTOCSortedStart = theCurrentPageNumber-theDelta;
						theTOCSortedStart++;

						if (TunebookSortedTOCRequested){

							DryRunAddTuneTOC(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,theTunebookSortedTOCTitle,true,false);

						}

						// Get the number of pages added by the TOC operations
						theTOCDelta = theCurrentPageNumber - theDelta;

						// Restore the working page number
						theCurrentPageNumber = theDelta;

						// If a title page is present, increment the start pages and tune page offset
						if (TunebookTPRequested){
							theTOCStart++;
							theTOCSortedStart++;
							theTOCDelta++;
						}	

						// Automatically offset tune numbers by Title Page and TOC length?
						if (TunebookFirstPageAuto || gPDFAutoPageNumbers){
							TunebookFirstPageNumber = theTOCDelta+1;
						}

						// Did they request a tune TOC?
						if (TunebookTOCRequested){

							if (!doPDFPerTune){
							
								document.getElementById("statustunecount").innerHTML = "Adding Table of Contents";

							}
							
							AppendTuneTOC(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,theTunebookTOCTitle,false,false,gIncludePageLinks,theTOCDelta,theTOCStart);
							
							if (!doPDFPerTune){

								document.getElementById("statustunecount").innerHTML = "Table of Contents Added!";

							}
							
							document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";
							
						}

						if (!doPDFPerTune){

							// Did they request a sorted tune TOC?
							if (TunebookSortedTOCRequested){
								
								document.getElementById("statustunecount").innerHTML = "Adding Sorted Table of Contents";
								
								AppendTuneTOC(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,theTunebookSortedTOCTitle,true,false,gIncludePageLinks,theTOCDelta,theTOCSortedStart);

								document.getElementById("statustunecount").innerHTML = "Sorted Table of Contents Added!";
								
								document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";

							}

							// Did they request a tunebook title page?
							if (TunebookTPRequested){
								
								document.getElementById("statustunecount").innerHTML = "Adding Title Page";
								
								AppendTuneTitlePage(pdf,paperStyle,theTunebookTP,theTunebookTPST);

								document.getElementById("statustunecount").innerHTML = "Title Page Added!";
								
								document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";
								
							}
						}

						// How many pages were added before the tunes?
						theDelta = theCurrentPageNumber - theDelta;

						if (TunebookTPRequested){
							theDelta++;
						}

						if (TunebookTOCRequested || TunebookSortedTOCRequested){
							theDelta = theTOCDelta;
						}

						// Add all the headers and footers at once
						PostProcessHeadersAndFooters(pdf,addPageNumbers,theDelta+1,totalPages,pageNumberLocation,hideFirstPageNumber,paperStyle);

						if (!doPDFPerTune){

							// Did they request a tunebook index?
							if (TunebookIndexRequested){
								
								document.getElementById("statustunecount").innerHTML = "Adding Tunebook Index";

								AppendTunebookIndex(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,theTunebookIndexTitle,false,false,gIncludePageLinks,theDelta);

								document.getElementById("statustunecount").innerHTML = "Tunebook Index Added!";
								
								document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";
								
							}

							// Did they request a sorted tunebook index?
							if (TunebookSortedIndexRequested){
								
								document.getElementById("statustunecount").innerHTML = "Adding Tunebook Sorted Index";

								AppendTunebookIndex(pdf,pageNumberLocation,hideFirstPageNumber,paperStyle,theTunePageMap,theTunebookSortedIndexTitle,true,false,gIncludePageLinks,theDelta);

								document.getElementById("statustunecount").innerHTML = "Tunebook Sorted Index Added!";
								
								document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";
								
							}
						}

						// Add any link back requested to the index or TOC
						var addTOCLinks = false;
						var theTOCLinkPage = 1;
						var addIndexLinks = false;
						var theIndexLinkPage = 1;
						var startPage = theTOCDelta+1;
						var endPage = theTOCDelta + totalPages;

						if (gAddTOCLinkback&& (TunebookTOCRequested || TunebookSortedTOCRequested)){
							addTOCLinks = true;
							if (TunebookTPRequested){
								theTOCLinkPage = 2;
							}
						}

						if (gAddIndexLinkback&& (TunebookIndexRequested || TunebookSortedIndexRequested)){
							addIndexLinks = true;
							theIndexLinkPage = totalPages + theTOCDelta + 1;
						}

						if (addTOCLinks || addIndexLinks){
							PostProcessTOCAndIndexLinks(pdf,startPage,endPage,addTOCLinks,theTOCLinkPage,addIndexLinks,theIndexLinkPage);
						}

						if (gTuneHyperlinks.length > 0){
							PostProcessTuneHyperlinks(pdf,gTuneHyperlinks,paperStyle,startPage);						
						}

						// Did they request a QR code?
						if (gQRCodeRequested && (!doPDFPerTune)){

							document.getElementById("statustunecount").innerHTML = "Adding Tunebook QR Code";

							// This needs the callback because the rasterizer is async
							AppendQRCode(pdf,paperStyle,qrcode_callback);

							function qrcode_callback(status){

								if (!status){

									document.getElementById("statustunecount").innerHTML = "Share URL too long for QR Code, try sharing fewer tunes";

								}
								else{

									theCurrentPageNumber++;

									document.getElementById("statustunecount").innerHTML = "Tunebook QR Code Added!";
									
									document.getElementById("pagestatustext").innerHTML = "Rendered <font color=\"red\">" + theCurrentPageNumber + "</font> pages";

								}

								// If the QR code generation failed, leave more time for a status update
								var statusDelay = 500;

								if (!status){

									statusDelay = 3000;
								}

								// Delay for final QR code UI status update
								setTimeout(function(){
								
									// Handle the status display for the new page
									document.getElementById("statustunecount").innerHTML = "&nbsp;";

									// And complete the PDF
									finalize_pdf_export();

								},statusDelay);

								return;

							}
						}	
						else{

							// No QR code requested, just run the callback directly
							finalize_pdf_export();
							
							return;

						}

						//
						// Finalize the PDF document
						//
						function finalize_pdf_export(){				

							document.getElementById("statuspdfname").innerHTML = "<font color=\"darkgreen\">Rendering Complete!</font>";

							setTimeout(function(){

								if (title){

									document.getElementById("statuspdfname").innerHTML = "Saving <font color=\"blue\">" + title + "</font>";

								}


								// If PDF per tune requested, split the file
								if (doPDFPerTune){

									//debugger;

									createSplitPDFs(pdf,theTunePageMap,totalPages,theTOCDelta,postSaveCallback);

								}
								else{

									// Start the normal PDF save
									setTimeout(function(){

										// On mobile, have to use a different save strategy otherwise the PDF loads in the same tab
										if (isMobileBrowser()){

											var theBlob = pdf.output('blob', { filename: (title) });
										 	
										 	var newBlob = new Blob([theBlob], { type: 'application/octet-stream' });

											var a = document.createElement("a");
		        
									        document.body.appendChild(a);
									        
									        a.style = "display: none";

									        url = window.URL.createObjectURL(newBlob);
									        a.href = url;
									        a.download = (title);
									        a.click();

									        document.body.removeChild(a);

									        setTimeout(function() {
									          window.URL.revokeObjectURL(url);
									        }, 1000);

										}
										else{

											// This works fine on all desktop browsers
										 	pdf.save(title);
									 	}

									 	// Clean up and finish
									 	postSaveCallback();

									},500);
								}

								function postSaveCallback(){

									// Did incipit generation require a re-render?
									if (requirePostRender){

										document.getElementById("statuspdfname").innerHTML = "<font color=\"red\">Cleaning up after PDF generation</font>";

										// Need some time for UI update
										setTimeout(function(){

											gRenderingPDF = false;

											clearGetTuneByIndexCache();

											// Fix up any display width changes done for the PDF export
											gTheNotation.style.width = gOriginalWidthBeforePDFExport;

											Render(true,null);

											// Clear the offscreen rendering div
											document.getElementById("offscreenrender").innerHTML = ""; 

											finalize_pdf_export_stage_2();

										},100);
										
									}
									else{

										// Catch up on any UI changes during the PDF rendering
										RestoreSVGDivsAfterRasterization();

										finalize_pdf_export_stage_2();

										gRenderingPDF = false;

										clearGetTuneByIndexCache();

										// Fix up any display width changes done for the PDF export
										gTheNotation.style.width = gOriginalWidthBeforePDFExport;

									}
								}

								function finalize_pdf_export_stage_2(){

									document.getElementById("statuspdfname").innerHTML = "&nbsp;";

									document.getElementById("statustunecount").innerHTML = "&nbsp;";

									document.getElementById("pagestatustext").innerHTML = "&nbsp;";

									// Hide the PDF status modal
									var pdfstatus = document.getElementById("pdf-controls");
									pdfstatus.style.display = "none";

									// Were there any injected URLs that exceeded the Acrobat max?
									if (gAcrobatURLLimitExceeded.length > 0){

										ShowAcrobatURLSizeWarningDialog();

									}

									// Mixed notation and QR codes resets the format selector to one, so fix it and save it here
									if (gMixedNotationAndQRCode){

										//console.log("gMixedNotationAndQRCode - Resetting pdfformat - Normal");

										if (paperStyle == "a4"){
											setPDFFormat("mixed_notation_qr_a4");
										}
										else{
											setPDFFormat("mixed_notation_qr");
										}

										SavePDFSettings();

									}

								}

								return;

							},500);
						}
					} // End of rasterize_callback()

				} else {

					// Sanity check the block index
					if (nBlocksProcessed > theBlocks.length){

						return;

					}

					// Early release of the last block
					if (nBlocksProcessed > 0){
						
						theBlocks[nBlocksProcessed-1] = null;

					}

					theBlock = theBlocks[nBlocksProcessed];


					// Sanity check the block
					if (theBlock){

						RenderPDFBlock(theBlock, nBlocksProcessed, doSinglePage, pageBreakList, addPageNumbers, pageNumberLocation, hideFirstPageNumber, paperStyle, incipitsRequested, callback);

					}

				}

			}

		}, 250);  
	}
}

//
// Cancel a PDF export
//
function CancelPDF(){
	
	gPDFCancelRequested = true;

}

//
// Split the PDF into individual PDFs per page
//

async function createSplitPDFs(thePDF,pageMap,totalPages,TOCDelta,thePostSaveCallback){

	//debugger;

	gTheSplitPDFTitles = GetTunebookIndexTitles();

	TOCDelta--;

	const pdfBlob = thePDF.output('blob');

    // Convert Blob to ArrayBuffer
    const pdfArrayBuffer = await blobToArrayBuffer(pdfBlob);

    // Utility function to convert Blob to ArrayBuffer
    function blobToArrayBuffer(blob) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsArrayBuffer(blob);
        });
    }

	function countImagesInPDF(dict) {

		const entries = Array.from(dict.dict.entries());

		var nImages = 0;

		var nEntries = entries.length;
		for (var i = 0; i < nEntries; ++i) {
			var thisEntry = entries[i];

			if (thisEntry[0].encodedName.indexOf("/I") != -1) {

				nImages++
			}
		}

		return nImages;

	}

	const findKeyForValue = (value, dict) => {

		//debugger;

		const entries = Array.from(dict.dict.entries());

		var match = null;

		var nEntries = entries.length;
		for (var i = 0; i < nEntries; ++i) {
			var thisEntry = entries[i];

			if (thisEntry[0].encodedName == value) {

				match = thisEntry;
				break;
			}
		}

		if (match) return match[0];

		return undefined;
	};

	// Parse the content stream for this page and find the images
	function getImagesInThisPage(thePage){

		var theContents = thePage.node.Contents();

		var decoder = new TextDecoder('utf-8');
		var rawString = decoder.decode(theContents.contents);
		
		//console.log(rawString);

		const lines = rawString.split('\n');

		// Filter lines that start with '/I'
		const filteredLines = lines.filter(line => line.startsWith('/I'));

		var nLines = filteredLines.length;

		var imageList = [];

		for (var i=0;i<nLines;++i){

			var thisLine = filteredLines[i];

			thisLine = thisLine.replace(" Do","");
			thisLine = thisLine.replace("/I","");
			thisLine = thisLine.trim();

			imageList.push(parseInt(thisLine));
		}

		return imageList;
	}

	async function splitPDF(originalPdf, range) {

		//debugger;

		const {
			PDFDocument,
			PDFName,
			PDFDict
		} = PDFLib;

		//console.log("splitPDF range start: " + range.start + " end: " + range.end );

		const newPdf = await PDFDocument.create();

		var newPDFPageCount = 0;

		for (let i = range.start; i <= range.end; i++) {

			const [copiedPage] = await newPdf.copyPages(originalPdf, [i]);

			newPdf.addPage(copiedPage);

			newPDFPageCount++;

		}

		for (let i=0;i<newPDFPageCount;++i){

			const thisPage = newPdf.getPages()[i];

			const xObjects = thisPage.node
				.Resources()
				.lookup(PDFName.of('XObject'), PDFDict);

			var nImagesInPDF = countImagesInPDF(xObjects);

			//console.log("Image count in PDF: " + nImagesInPDF);

			var imagesInThisPDF = getImagesInThisPage(thisPage);

			// Get all the images in the command stream

			for (var j = 0; j < nImagesInPDF; ++j) {

				if (!(imagesInThisPDF.includes(j))){

					const key = findKeyForValue('/I' + j, xObjects);

					const imageRef = xObjects.get(key);

					if (imageRef) {

						//console.log("deleting "+ ('/I' + j));

						newPdf.context.delete(imageRef);

					}
				}
			}
		}

		newPdfBytes = await newPdf.save();

		return newPdfBytes;

	}

	var nTunes = pageMap.length;

	if (nTunes == 0){
		return;
	}
	
	document.getElementById("statuspdfname").innerHTML = "Splitting PDF Tunebook Into Individual Tune PDFs";
	
	document.getElementById("statustunecount").innerHTML = "&nbsp;";

	document.getElementById("pagestatustext").innerHTML = "&nbsp;";

	// Give a little time for UI feedback drawing
	setTimeout(async function(){

		const {
			PDFDocument,
		} = PDFLib;

		var theOriginalPdf = await PDFDocument.load(pdfArrayBuffer);

	    gNSplitPDF = nTunes;

	    gSplitPDFIndex = 0;

	    function saveSplitPDF(pdfBytes,fname,callback){

	    	//debugger;
	 		document.getElementById("statustunecount").innerHTML = "Saving tune <font color=\"red\">"+(gSplitPDFIndex+1)+"</font> of <font color=\"red\">"+gNSplitPDF +"</font>"
	 		document.getElementById("pagestatustext").innerHTML = "<font color=\"blue\">"+fname+"</font>"
	       
	        const blob = new Blob([pdfBytes], { type: 'application/pdf' });

	        const link = document.createElement('a');

	        var href = URL.createObjectURL(blob);

	        link.href = href;

	        link.download = `${fname}.pdf`;
	        
	        document.body.appendChild(link);
	        
	        link.click();
	        
	        document.body.removeChild(link);

	        setTimeout(function() {
			  window.URL.revokeObjectURL(href);
			}, 1000);		

	        callback()

	    };


	    // Sequence the split saves
	    async function splitCallback(){

	    	var range;

	    	// Cancel requested?
	    	if (gPDFCancelRequested){

	 			document.getElementById("statuspdfname").innerHTML = "&nbsp;"
	    		document.getElementById("statustunecount").innerHTML = "Operation Cancelled";
		 		document.getElementById("pagestatustext").innerHTML = "&nbsp;"

	    		setTimeout(function(){

	     			thePostSaveCallback();
	  			
	    		},500);

	    		return;

	    	}

	    	gSplitPDFIndex++;

	    	if (gSplitPDFIndex < gNSplitPDF){

				if (gSplitPDFIndex!=gNSplitPDF-1){
					
					var nPages = pageMap[gSplitPDFIndex+1] - pageMap[gSplitPDFIndex];

					nPages--;

					//console.log("pushing start: "+(pageMap[gSplitPDFIndex]+TOCDelta)+" end: "+(pageMap[gSplitPDFIndex]+nPages+TOCDelta));

					range = {start: pageMap[gSplitPDFIndex]+TOCDelta, end: pageMap[gSplitPDFIndex]+nPages+TOCDelta};
				}
				else{

					//console.log("last pushing start: "+(pageMap[gSplitPDFIndex]+TOCDelta)+" end: "+(pageMap[gSplitPDFIndex]+nPages+TOCDelta));

					var nPages = (totalPages-pageMap[gSplitPDFIndex]);

				 	range = {start: pageMap[gSplitPDFIndex]+TOCDelta, end:pageMap[gSplitPDFIndex]+nPages+TOCDelta};		
				}

				var theSplitPDF = await splitPDF(theOriginalPdf, range)

	    		setTimeout(function(){

	     			saveSplitPDF(theSplitPDF,gTheSplitPDFTitles[gSplitPDFIndex],splitCallback);
	  			
	    		},100);
	    	}
	    	else{

	    		// All done
	    		thePostSaveCallback();
	    	}

	    }
	    
	    var range;

	    if (gNSplitPDF > 0){

			//console.log("Processing tune: "+gSplitPDFIndex);

			if (gSplitPDFIndex!=gNSplitPDF-1){
				
				var nPages = pageMap[gSplitPDFIndex+1] - pageMap[gSplitPDFIndex];

				nPages--;

				//console.log("pushing start: "+(pageMap[gSplitPDFIndex]+TOCDelta)+" end: "+(pageMap[gSplitPDFIndex]+nPages+TOCDelta));

				range = {start: pageMap[gSplitPDFIndex]+TOCDelta, end: pageMap[gSplitPDFIndex]+nPages+TOCDelta};
			}
			else{

				//console.log("last pushing start: "+(pageMap[gSplitPDFIndex]+TOCDelta)+" end: "+(pageMap[gSplitPDFIndex]+nPages+TOCDelta));

				var nPages = (totalPages-pageMap[gSplitPDFIndex]);

			 	range = {start: pageMap[gSplitPDFIndex]+TOCDelta, end:pageMap[gSplitPDFIndex]+nPages+TOCDelta};		
			}
				

			var theSplitPDF = await splitPDF(theOriginalPdf, range)

	    	saveSplitPDF(theSplitPDF,gTheSplitPDFTitles[0],splitCallback);

	    }

	}, 500);
}

function getNextSiblings(el, filter) {
	var siblings = [];
	while (el = el.nextSibling) {
		if (!filter || filter(el)) siblings.push(el);
	}
	return siblings;
}

function getStyleProp(elem, prop) {
	if (window.getComputedStyle)
		return window.getComputedStyle(elem, null).getPropertyValue(prop);
	else if (elem.currentStyle) return elem.currentStyle[prop]; //IE
}

function GetABCJSParams(instrument){

	var postfix = "";

	var theLabel = "";

	// Let's add some capo information to the stringed instrument tab
	if (instrument){

		// Do we allow whistle transpose?
		gAllowWhistleTabTranspose = (instrument == "whistle");

		// Do we allow recorder transpose?
		gAllowRecorderTabTranspose = (instrument == "recorder");

		if (gShowTabNames){

			if (gCapo > 0){
				postfix = " (Capo " + gCapo + ")";
			}

			switch (instrument){

				case "noten":
					break;

				case "notenames":
					theLabel = " ";
					break;

				case "whistle":
					theLabel = " ";
					break;

				case "recorder":
					theLabel = " ";
					break;

				case "mandolin":
					theLabel = 'Mandolin'+postfix;
					break;

				case "gdad":
					theLabel = 'GDAD'+postfix;
					break;

				case "cgda":
					theLabel = 'CGDA'+postfix;
					break;

				case "cgdae":
					theLabel = 'CGDAE'+postfix;
					break;

				case "dgdae":
					theLabel = 'DGDAE'+postfix;
					break;

				case "guitare":
					theLabel = "Guitar"+postfix;
					break;

				case "guitard":
					theLabel = "DADGAD"+postfix;
					break;

				case "uke":
					theLabel = "Ukulele"+postfix;
					break;

			}
		}
	}

	var commonFontFormat = gRenderingFonts;

	var params;

	// Normally, have abcjs draw tab icon for tablatures
	gDrawTabSymbol = true;
	var allowMultitab = true;

	if (!instrument) {
		allowMultitab = false;
		params = {
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		};
		instrument = ""; 
	} else if (instrument == "noten"){
		allowMultitab = false;
		params = {
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		};
	}
	else if (instrument == "mandolin") {
		params = {
			tablature: [{
				instrument: 'violin',
				label: theLabel,
				tuning: ['G,', 'D', 'A', 'e'],
				highestNote: "f'",
				capo: gCapo
			}],
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		}
	} else if (instrument == "gdad") {
		params = {
			tablature: [{
				instrument: 'violin',
				label: theLabel,
				tuning: ['G,', 'D', 'A', 'd'],
				highestNote: "f'",
				capo: gCapo
			}],
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		}	
	} else if (instrument == "cgda") {
		params = {
			tablature: [{
				instrument: 'violin',
				label: theLabel,
				tuning: ['C,', 'G,', 'D', 'A'],
				highestNote: "f'",
				capo: gCapo
			}],
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		}	
	} else if (instrument == "cgdae") {
		params = {
			tablature: [{
				instrument: 'fivestring',
				label: theLabel,
				tuning: ['C,', 'G,', 'D', 'A', 'e'],
				highestNote: "f'",
				capo: gCapo
			}],
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		}		
	} else if (instrument == "dgdae") {
		params = {
			tablature: [{
				instrument: 'fivestring',
				label: theLabel,
				tuning: ['D,', 'G,', 'D', 'A', 'e'],
				highestNote: "f'",
				capo: gCapo
			}],
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		}		
	} else if (instrument == "guitare") {
		params = {
			tablature: [{
				instrument: 'guitar',
				label: theLabel,
				tuning: ['E,', 'A,', 'D', 'G', 'B', 'e'],
				highestNote: "f'",
				capo: gCapo
			}],
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		}
	} else if (instrument == "guitard") {
		params = {
			tablature: [{
				instrument: 'guitar',
				label: theLabel,
				tuning: ['D,', 'A,', 'D', 'G', 'A', 'd'],
				highestNote: "f'",
				capo: gCapo
			}],
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		}
	} else if (instrument == "uke") {
		params = {
			tablature: [{
				instrument: 'violin',
				label: theLabel,
				tuning: ['G,','C', 'E', 'A'],
				highestNote: "f'",
				capo: gCapo
			}],
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		}
	} else if (instrument == "notenames") {
		// Suppress the tab icon
		gDrawTabSymbol = false;
		params = {
			tablature: [{
				instrument: 'violin',
				label: theLabel,
				tuning: ['G,,,','G,,','G,'],
				highestNote: "b'",
				hideTabSymbol:true,
				// Added 28 Dec 2023 for less tall note name tablature
				linePitch: 2,
			}],
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		}
	} else if (instrument == "whistle") {
		// Suppress the tab icon
		gDrawTabSymbol = false;
		params = {
			tablature: [{
				instrument: 'violin',
				label: theLabel,
				tuning: ['G,,,'],
				highestNote: "^a'",
				hideTabSymbol:true
			}],
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		}
	} else if (instrument == "recorder") {
		// Suppress the tab icon
		gDrawTabSymbol = false;
		params = {
			tablature: [{
				instrument: 'violin',
				label: theLabel,
				tuning: ['C,,'],
				highestNote: "^a'",
				hideTabSymbol:true
			}],
			responsive: 'resize',
			oneSvgPerLine: 'true',
			expandToWidest: 'true',
			selectTypes: false,
			format: commonFontFormat
		}
	}
	else{
		// Default for deprecated instruments
		//console.log("Got deprecated instrument")
		allowMultitab = false;
		params = {
			responsive: 'resize',
			oneSvgPerLine: 'true',
			selectTypes: false,
			format: commonFontFormat
		};
	}

	// 
	// Added 26 November 2023
	//
	// Support multiple voice tab

	if (allowMultitab){
		if ((params.tablature)&&(params.tablature.length > 0)){
			var theTab = params.tablature[0];
			for (var i=0;i<7;++i){
				params.tablature.push(theTab);
			}
		}
	}

	// Adding classes for V1 highlighting filter?
	if (gOnlyHighlightV1){
		//console.log("Adding classes");
		params.add_classes = true;
	}

	return params;

}

//
// Update local storage
//
function UpdateLocalStorage(){

	// 
	// Centralized place to save local browser storage values
	//
	if (gLocalStorageAvailable){

		//console.log("UpdateLocalStorage");
		
		// If coming in from a share link, don't change the default tab
		if ((!gIsFromShare) || gForceTabSave){

			// if (gForceTabSave){
			// 	console.log("gForceTabSave");
			// }

			var format = GetRadioValue("notenodertab");
			localStorage.abcTab = format;

			gForceTabSave = false;
		}

		var capo = gCapo;
		localStorage.abcCapo = capo;

		// Don't reset saved staff spacing if from a share
		// Related to issue where shared tune reset the saved staff spacing

		if (!gIsFromShare){
			var ssp = gStaffSpacing - STAFFSPACEOFFSET;
			localStorage.abcStaffSpacing = ssp;
		}

		var pdfformat = getPDFFormat();
		localStorage.abcTunesPerPage = pdfformat;

		var pagenumbers = getPageNumbers();
		localStorage.abcPageNumberLocation = pagenumbers;

		var firstpage = getFirstPage();
		localStorage.abcPageNumberOnPageOne = firstpage;

		var topbar = gTopBarShowing;
		if (!topbar){
			localStorage.abcHideTopBar = "true";
		}
		else{
			localStorage.abcHideTopBar = "false";
		}

		var showtabnames = gShowTabNames;
		if (showtabnames){
			localStorage.abcShowTabNames = "true";
		}
		else{
			localStorage.abcShowTabNames = "false";
		}

		// Save the last PDF font and style
		localStorage.PDFFont = gPDFFont;
		localStorage.PDFFontStyle = gPDFFontStyle;

		// Save the last PDF orientation
		localStorage.PDFOrientation = gPDFOrientation;

		// Save the last PDF hidden titles
		localStorage.PDFIncludeHiddenTitles = gPDFIncludeHiddenTitles;

		// Save the auto page number state
		localStorage.PDFAutoPageNumbers = gPDFAutoPageNumbers;
	}

}

//
// Save PDF settings change
//
function SavePDFSettings(){

	// If available, save all the app settings to local storage
	UpdateLocalStorage();

}

//
// Setup the notation divs for PDF rasterization
// Each div is marked with the "block" class and incrementing block ids of the form block_<tuneindex>_<blockindex>
//
function PrepareSVGDivsForRasterization(){

	// Clear the offscreen rendering div
	document.getElementById("offscreenrender").innerHTML = ""; 

	var nTunes = CountTunes();
		
	for (var i = 0; i < nTunes; ++i) {
		
		var renderDivID = "notation" + i;

		var svgDivs = document.querySelectorAll('div[id="' + renderDivID + '"] > div');

		var nSVGs = svgDivs.length;

		var j;

		var elem;

		for (j=0;j<nSVGs;++j){

			elem = svgDivs.item(j);

			// Add the "block" class
			elem.classList.add("block");

			// Add the incrementing block ID (used to find the start of tunes)
			elem.id = "block_" + i + "_" + j;

		}
	}

}

//
// Clean up the SVG div tagging after rasterization
// Each div is marked with the "block" class and incrementing block ids of the form block_<tuneindex>_<blockindex>
//
function RestoreSVGDivsAfterRasterization(){

	// Clear the offscreen rendering div
	document.getElementById("offscreenrender").innerHTML = ""; 

	var nTunes = CountTunes();
		
	for (var i = 0; i < nTunes; ++i) {
		
		var renderDivID = "notation" + i;

		var svgDivs = document.querySelectorAll('div[id="' + renderDivID + '"] > div');

		var nSVGs = svgDivs.length;

		var j;

		var elem;

		for (j=0;j<nSVGs;++j){

			elem = svgDivs.item(j);

			// Remove the class
			elem.removeAttribute("class");

			// Remove the block SVG id
			elem.removeAttribute("id");

		}
	}

}

//
// Callback for when notes are clicked when Raw Mode is enabled
//
function NoteClickListener(abcelem, tuneNumber, classes, analysis, drag, mouseEvent) {

	// Initially, this feature only works if there is a single tune in the ABC

	// The renderer only adds this callback for the single tune case
	
	// Problem is that progressive tune div updates mess up the ABC offset relative to the full tune ABC
	var scrollPos = window.scrollY;
	
	setTimeout(function(){

		window.scrollTo(0,scrollPos);

		gTheABC.focus();
		
		var theStart = abcelem.startChar;
		
		var theEnd = abcelem.endChar;
		
		ScrollABCTextIntoView(gTheABC,theStart,theEnd,2);


	},10);
}

//
// Callback when events happen in the text area in raw mode
//

function fireSelectionChanged(){

	if (gRawMode){

	    if (CountTunes() > 0){

	    	if (gRawVisual){

				// If not the current tune, clear the last notation highlight
				if (gCurrentTune != gRawLastIndex){

					var nVisuals = gRawVisual.length;

					for (var i=0;i<nVisuals;++i){

	    				var engraver = gRawVisual[i].engraver;

						engraver.rangeHighlight(0, 0);
					}

					gRawLastIndex = gCurrentTune;
				}


	    		var engraver = gRawVisual[gRawLastIndex].engraver;

	    		if (engraver){

	    			engraver.rangeHighlight(gTheABC.selectionStart, gTheABC.selectionEnd);

	    		}
		    }
	    }
	}
}

//
// Main routine for rendering the notation
//
function RenderTheNotes(tune, instrument, renderAll, tuneNumber) {

	//console.log("RenderTheNotes renderAll: "+renderAll+" tuneNumber: "+tuneNumber);

	if (gIsQuickEditor){

		// MAE 15 July 2024
		// For the Quick Editor

    // Remove all previously added custom CSS <style> blocks 
    document.querySelectorAll('style[data-aggregate-css="true"]').forEach(el => el.remove());

		renderAll = false;
		tuneNumber = 0;
	}

	// If notation rendering is disabled, return immediately
	if (gDisableNotationRendering){

		return;
	
	}

	// Used for rendering time measurement
	//var currentTime;

	// Get the rendering params
	var params = GetABCJSParams(instrument);

	if (gIsQuickEditor){
		// MAE 15 July 2024 - For quick editor
		params.oneSvgPerLine = false;

	}

	// Create the render div ID array
	var renderDivs = [];

	var nTunes = 0;
	var startTune = 0;
	var endTune = 0;

	// If rendering all, push all the divs
	if (renderAll){

    // Remove all previously added custom CSS <style> blocks 
    document.querySelectorAll('style[data-aggregate-css="true"]').forEach(el => el.remove());

		nTunes = CountTunes();
		endTune = nTunes;
		
		for (var i = 0; i < nTunes; ++i) {
			renderDivs.push("notation" + i);
		}
	}
	else{

		// Otherwise, just push the single div
		nTunes = 1;
		startTune = tuneNumber;
		endTune = tuneNumber+1;
		
		// Just rendering one tune
		renderDivs.push("notation" + tuneNumber);

	}

	// If there are no tunes to render, exit early
	if (nTunes == 0){
		return;
	}

	//
	// If we're in Raw mode, setup a callback from abcjs when users click on the notation
	//
	if (gRawMode){

		if (isDesktopBrowser()){

			// Setup the notation click callback
			params.clickListener = NoteClickListener;

			// Default to selecting all element types
			params.selectTypes = true;

			// Set the selection highlight color
			params.selectionColor = gRawHighlightColor;

			// selectTypes options are:
			// 	"author"
			// 	"bar"
			// 	"brace"
			// 	"clef"
			// 	"composer"
			// 	"dynamicDecoration"
			// 	"ending"
			// 	"extraText"
			// 	"freeText"
			// 	"keySignature"
			// 	"note"
			// 	"part"
			// 	"partOrder"
			// 	"rhythm"
			// 	"slur"
			// 	"subtitle"
			// 	"tempo"
			// 	"timeSignature"
			// 	"title"
			// 	"unalignedWords"
			// 	"voiceName"
		}
	}
	
	gTabFirstStaffOnly = ScanTuneForTabFirstStaffOnly(tune, instrument);

	gTabSecondStaffOnly = false;

	if (!gTabFirstStaffOnly){
		gTabSecondStaffOnly = ScanTuneForTabSecondStaffOnly(tune, instrument);
	}
	
	// Wrap this in a try/catch to see if we can avoid crashing the app on a bad tune
	try{
		var visualObj = ABCJS.renderAbc(renderDivs, tune, params);
	}
	catch(err){

		var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;">Tune Rendering Issue</p>';

		modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:36px;text-align:center;">During rendering, the following tune caused the tool to crash:</p>';

		modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:20px;text-align:center;"><strong>'+gLastRenderedTuneName+'</strong></p>';

		modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:20px;text-align:center;">Try isolating this one tune to determine the issue.</p>';

		modal_msg += '<p style="font-size:3pt;line-height:3pt;text-align:center;">&nbsp;</p>';
		
		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

	}

	// Odd case where diagnostics work with highlighting, but only if there is a single tune
	if (gShowDiagnostics && gRawMode && renderAll && (nTunes > 1)){
		var elem = document.getElementById("diagnostics");
		elem.innerHTML = '<p class="diagnostics_message">Diagnostics are not available if Highlighting is on and there are multiple tunes in the ABC editor.</p>';		
	}
	else
	// Generate diagnostics for this tune?
	if (gShowDiagnostics && ((!renderAll) || (nTunes == 1))){

		if ((visualObj) && (visualObj[0])){

			var data = visualObj[0].warnings;

			var elem = document.getElementById("diagnostics");

			if (data){
				var allMessages = "";
				var nMessages = data.length;
				var i;
				for (i=0;i<nMessages;++i){
					allMessages += '<p class="diagnostics_message">'+data[i]+"</p>"
				}
				elem.innerHTML = allMessages;
			}
			else{
				elem.innerHTML = '<p class="diagnostics_message">No issues found</p>';		
			}
		}

	}


	// Save off the visual for selection handling
	if (gRawMode){
		gRawVisual = visualObj;
	}
	else{
		gRawVisual = null;
	}

	for (var tuneIndex = startTune; tuneIndex < endTune; ++tuneIndex) {

		var renderDivID = "notation" + tuneIndex;

		// If whistle or note name tab, inject replacement values for tab numbers
		postProcessTab(visualObj, renderDivID, instrument, false);

	}
	if (!gIsQuickEditor){

		// Early release of the abcjs visual
		visualObj = null;
	}
}

function SetRadioValue(radioName, value) {
	const theRadioElemSelector = "input[name=\"" + radioName + "\"]";
	const radioButtons = document.querySelectorAll(theRadioElemSelector);

	for (const radioButton of radioButtons) {
		if (radioButton.value == value) {
			radioButton.checked = true;
		} else {
			radioButton.checked = false;
		}
	}
}

function GetRadioValue(radioName) {

	const theRadioElemSelector = "input[name=\"" + radioName + "\"]";
	const radioButtons = document.querySelectorAll(theRadioElemSelector);

	let radiovalue;
	for (const radioButton of radioButtons) {
		if (radioButton.checked) {
			radiovalue = radioButton.value;
			break;
		}
	}

	return radiovalue;
}

//
// Strip all annotations in the ABC
//
function StripAnnotations(){

	var theNotes = gTheABC.value;

	theNotes = StripAnnotationsOne(theNotes);

	// Replace the ABC
	setABCEditorText(theNotes);

	// Set dirty
	gIsDirty = true;

}

//
// Strip all annotations in a specific ABC
//
function StripAnnotationsOne(theNotes){

	// Strip out tempo markings
	var searchRegExp = /^Q:.*[\r\n]*/gm 

	// Strip out tempo markings
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out Z: annotation
	searchRegExp = /^Z:.*[\r\n]*/gm

	// Strip out Z: annotation
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out R: annotation
	searchRegExp = /^R:.*[\r\n]*/gm

	// Strip out R: annotation
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out S: annotation
	searchRegExp = /^S:.*[\r\n]*/gm

	// Strip out S: annotation
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out N: annotation
	searchRegExp = /^N:.*[\r\n]*/gm

	// Strip out N: annotation
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out D: annotation
	searchRegExp = /^D:.*[\r\n]*/gm

	// Strip out D: annotation
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out H: annotation
	searchRegExp = /^H:.*[\r\n]*/gm

	// Strip out H: annotation
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out B: annotation
	searchRegExp = /^B:.*[\r\n]*/gm

	// Strip out B: annotation
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out C: annotation
	searchRegExp = /^C:.*[\r\n]*/gm

	// Strip out C: annotation
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out O: annotation
	searchRegExp = /^O:.*[\r\n]*/gm

	// Strip out O: annotation
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out A: annotation
	searchRegExp = /^A:.*[\r\n]*/gm

	// Strip out A: annotation
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out P: annotation
	searchRegExp = /^P:.*[\r\n]*/gm

	// Strip out P: annotation
	theNotes = theNotes.replace(searchRegExp, "");

	return theNotes
}


//
// Strip all the text annotations in the ABC
//
function StripTextAnnotations(){

	var theNotes = gTheABC.value;

	theNotes = StripTextAnnotationsOne(theNotes);

	// Replace the ABC
	setABCEditorText(theNotes);

	// Set dirty
	gIsDirty = true;

}

//
// Strip all the text annotations in the ABC
//
function StripTextAnnotationsOne(theNotes){

	// Strip out text markings
	var searchRegExp = /%%text .*[\r\n]*/gm

	theNotes = theNotes.replace(searchRegExp, "");

	searchRegExp = /%%text[\r\n]/gm

	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out %%center annotation
	searchRegExp = /%%center.*[\r\n]*/gm

	// Strip out %%center annotation
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out %%right annotation
	searchRegExp = /%%right.*[\r\n]*/gm

	// Strip out %%right annotation
	theNotes = theNotes.replace(searchRegExp, "");

	// Strip out %%begintext / %%endtext blocks	
  theNotes =  theNotes.replace(/^%%begintext[\s\S]*?^%%endtext.*(\r?\n)?/gm, '');

	return theNotes;

}

//
// Comment out %%begintext / %%endtext blocks
function commentBeginEndTextBlocks(input) {
  return input.replace(/^%%begintext[\s\S]*?^%%endtext.*$/gm, match => {
    return match
      .split(/\r?\n/)
      .map(line => `% comment`)
      .join('\n');
  });
}

// 
// Strip all the chords in the ABC
//
function StripChords(){

	var theNotes = gTheABC.value;

	theNotes = StripChordsOne(theNotes);

	// Replace the ABC
	setABCEditorText(theNotes);

	// Set dirty
	gIsDirty = true;

}

// 
// Strip all the chords in the ABC
//
function StripChordsOne(theNotes){

	function match_callback(match){

		// Don't strip tab annotations, only chords
		if ((match.indexOf('"_') == -1) && (match.indexOf('"^') == -1)){

			// Try and avoid stripping long text strings that aren't chords
			if (match.length > 9){
				return match;
			}
			else
			// If there are spaces in the match, also probably not a chord
			if (match.indexOf(" ") != -1){
				return match;
			}
			else{
				return "";
			}
		}
		else{
			return match;
		}
		
	}

	// Strip out chord markings and not text annotations
	var searchRegExp = /"[^"]*"/gm

	const output = theNotes
	.split('\n')
	.map(line => {
	    // If line starts with one of the forbidden prefixes, skip replacement
	    if (/^[XTMKLQWZRCAOPNGHBDFSIV]:/.test(line) || /^%/.test(line)) {
	    	return line;
	    } else {		
	    	return line.replace(searchRegExp,match_callback);
		}
	})
	.join('\n');

	// Replace the ABC
	return output;

}


// 
// Are there chords in a match regex?
//
function AreChordsInMatch(theMatch){

	if (!theMatch){
		return false;
	}
	
	var nMatch = theMatch.length;

	for (var i=0; i<nMatch; ++i){

		var match = theMatch[i];

		// Detect chords
		if ((match.indexOf('"_') == -1) && (match.indexOf('"^') == -1)){

			// Try and avoid stripping long text strings that aren't chords
			if (match.length > 9){
				continue;
			}
			else
			// If there are spaces in the match, also probably not a chord
			if (match.indexOf(" ") != -1){
				continue;
			}
			else{
				return true;
			}
		}
	}

	return false;

}


// 
// Are there chords in the ABC?
//
function AreChordsInABC(theABC){

	var res = false;

	// Detect chord markings and not text annotations
	var searchRegExp = /"[^"]*"/gm

	const output = theABC
	.split('\n')
	.map(line => {
		if (!res){
		    // If line starts with one of the forbidden prefixes, skip replacement
		    if (/^[XTMKLQWZRCAOPNGHBDFSIV]:/.test(line) || /^%/.test(line)) {
		    	// Do nothing
		    } else {
		    	
		    	var theMatch = line.match(searchRegExp);

				var isMatch = AreChordsInMatch(theMatch);

		    	if (isMatch){
		    		res = true;
		    	}
			}
		}
	})

	return res;

}

// 
// Are there tabs in a match regex?
//
function IsTabInMatch(theMatch){

	if (!theMatch){
		return false;
	}
	
	var nMatch = theMatch.length;

	for (var i=0; i<nMatch; ++i){

		// Detect tab annotation
		if ((theMatch[i].indexOf('"_') == 0) || (theMatch[i].indexOf('"^') == 0)){

			return true;

		}
	}

	return false;

}

// 
// Are there tabs in the ABC?
//
function IsTabInABC(theABC){

	var res = false;

	// Detect chord markings and not text annotations
	var searchRegExp = /"[^"]*"/gm

	const output = theABC
	.split('\n')
	.map(line => {
		if (!res){
		    // If line starts with one of the forbidden prefixes, skip replacement
		    if (/^[XTMKLQWZRCAOPNGHBDFSIV]:/.test(line) || /^%/.test(line)) {
		    	// Do nothing
		    } else {
		    	
		    	var theMatch = line.match(searchRegExp);

				var isMatch = IsTabInMatch(theMatch);

		    	if (isMatch){
		    		res = true;
		    	}
			}
		}
	})

	return res;

}

// 
// Strip all the tab in the ABC
//
function StripTab(){

	var theNotes = gTheABC.value;

	theNotes = StripTabOne(theNotes);

	// Replace the ABC
	setABCEditorText(theNotes);

	// Set dirty
	gIsDirty = true;

}

// 
// Strip all the tab in the ABC
//
function StripTabOne(theNotes){

	function match_callback(match){

		// Don't strip chords, only tab
		if ((match.indexOf('"_') == 0) || (match.indexOf('"^') == 0)){
			return "";
		}
		else{
			return match;
		}
		
	}

	// Strip out text annotation and not chords
	var searchRegExp = /"[^"]*"/gm

	const output = theNotes
	.split('\n')
	.map(line => {
	    // If line starts with one of the forbidden prefixes, skip replacement
	    if (/^[XTMKLQWZRCAOPNGHBDFSIV]:/.test(line) || /^%/.test(line)){
	    	return line;
	    } else {	
        // Strip push and draw annotations as well
        line = line.replaceAll("!push!","");
        line = line.replaceAll("!draw!","");	
	    	return line.replace(searchRegExp,match_callback);
		}
	})
	.join('\n');

	// Replace the ABC
	return output;

}

// 
// Strip all the ornaments in the ABC
//
function StripOrnaments(theNotes){

	var theNotes = gTheABC.value;

	theNotes = StripOrnamentsOne(theNotes,true);

	// Replace the ABC
	setABCEditorText(theNotes);

	// Set dirty
	gIsDirty = true;
}

// 
// Strip all the ornaments in the ABC
//
function StripOrnamentsOne(theNotes, doTilde){

	function replaceUnlessStartsWithScore(text, regex, replacement) {
	    return text.replace(regex, (match) => {
	        if (match.startsWith('%%score')) {
	            return match; // Do not replace if match starts with %%score
	        }
	        return replacement; // Replace otherwise
	    });
	}

	// Strip out all ornaments

	//  NOTE: %%score directives potentially use brackets, so filter for them

	// Strip out all ornaments
	//var searchRegExp = /{[^}]*}/gm

	var searchRegExp = /%%score \{[^}]*\}|\{[^}]*\}/gm

	theNotes = replaceUnlessStartsWithScore(theNotes, searchRegExp,"");

	if (doTilde){
		theNotes = theNotes.replaceAll("~","");
	}

	// Replace the ABC
	return theNotes;

}

//
// Shared ABC features stripping between render and play
//
function processAllStripping(theNotes){

	var searchRegExp = "";

	if (gStripAnnotations) {

		// Strip out tempo markings
		searchRegExp = /^Q:.*$/gm

		// Strip out tempo markings
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out Z: annotation
		searchRegExp = /^Z:.*$/gm

		// Strip out Z: annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out R: annotation
		searchRegExp = /^R:.*$/gm

		// Strip out R: annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out S: annotation
		searchRegExp = /^S:.*$/gm

		// Strip out S: annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out N: annotation
		searchRegExp = /^N:.*$/gm

		// Strip out N: annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out D: annotation
		searchRegExp = /^D:.*$/gm

		// Strip out D: annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out H: annotation
		searchRegExp = /^H:.*$/gm

		// Strip out H: annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out B: annotation
		searchRegExp = /^B:.*$/gm

		// Strip out B: annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out C: annotation
		searchRegExp = /^C:.*$/gm

		// Strip out C: annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out O: annotation
		searchRegExp = /^O:.*$/gm

		// Strip out O: annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out A: annotation
		searchRegExp = /^A:.*$/gm

		// Strip out A: annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out P: annotation
		searchRegExp = /^P:.*$/gm

		// Strip out P: annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");
	}

	if (gStripTextAnnotations) {

		// Strip out text markings
		searchRegExp = /%%text .*$/gm

		theNotes = theNotes.replace(searchRegExp, "% comment");

		searchRegExp = /%%text[\r\n]/gm

		theNotes = theNotes.replace(searchRegExp, "% comment\n");

		// Strip out %%center annotation
		searchRegExp = /%%center.*$/gm

		// Strip out %%center annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out %%right annotation
		searchRegExp = /%%right.*$/gm

		// Strip out %%right annotation
		theNotes = theNotes.replace(searchRegExp, "% comment");

		// Strip out text blocks
		theNotes = commentBeginEndTextBlocks(theNotes);

	}

	if (gStripChords) {

		// Strip out chord markings
		theNotes = StripChordsOne(theNotes)
	}

	if (gStripTab) {

		// Strip out tab markings
		theNotes = StripTabOne(theNotes);
	}

	if (gStripOrnaments) {

		// Strip out ornaments markings
		theNotes = StripOrnamentsOne(theNotes,true);
	}

	return theNotes;
}

//
// Render a range of tunes async
//
function RenderRangeAsync(start,end,callback){

	//console.log("RenderRangeAsync start: "+start+" end: "+end);

	// Don't allow a re-render during PDF generation
	if (gRenderingPDF){
		if (callback && (callback != undefined)){
			callback();
		}
		return;
	}
	
	var nTunes = (end - start)+1;

	// Should never happen
	if (nTunes <= 0){
		if (callback && (callback != undefined)){
			callback();
		}
		return;
	}

	// Start with spinner hidden
	hideTheSpinner();

	// Show the spinner for a large number of tunes
	var showSpinner = false;

	if (nTunes > 5){
		showSpinner = true;
	}

	if (showSpinner){

		showTheSpinner();

	}

	// Render after a short delay
	setTimeout(function(){

		for (var i=start;i<=end;++i){

			Render(false,i);

		}

		// Hide the spinner
		hideTheSpinner();

		if (callback && (callback != undefined)){
			callback();
		}

	}, gSpinnerDelay);  

}

// 
// Allow putting up a spiner before the synchronous Render() function
//
function RenderAsync(renderAll,tuneNumber,callback){

	if (gIsQuickEditor){
		// MAE 15 July 2024 - For Quick Editor
		renderAll = false;
		tuneNumber = 0;
	}

	// Don't allow a re-render during PDF generation
	if (gRenderingPDF){
		if (callback && (callback != undefined)){
			callback();
		}
		return;
	}

	// Clear the split tunes cache
	clearGetTuneByIndexCache();

	//console.log("RenderAsync renderAll = "+renderAll+" tuneNumber = "+tuneNumber);
	
	// Start with spinner hidden
	hideTheSpinner();

	// Show the spinner
	if (renderAll){

		showTheSpinner();

		// Render after a short delay
		setTimeout(function(){

			Render(renderAll,tuneNumber);

			hideTheSpinner();
			
			// Recalc the top tune position and scroll it into view if required
			MakeTuneVisible(true);

			if (callback && (callback != undefined)){
				callback();
			}


		}, gSpinnerDelay); 
	}
	else{

		// Immediately render just a single tune
		Render(renderAll,tuneNumber);

		if (callback && (callback != undefined)){
			callback();
		}

	}

}

function Render(renderAll,tuneNumber) {

	//debugger;
	//console.log("Render renderAll="+renderAll+" tuneNumber="+tuneNumber); 

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Clear the split tunes cache
	clearGetTuneByIndexCache();

	// Idle the file status display
	var nTunes = CountTunes();

	if ((gTheABC.value != "") && (nTunes > 0)) {

		var fileSelected = document.getElementById('abc-selected');

		if (nTunes == 1){

			fileSelected.innerText = gDisplayedName + "  (" + nTunes + " Tune)";

		}
		else{

			fileSelected.innerText = gDisplayedName + "  (" + nTunes + " Tunes)";

		}

		// Avoid jump scroll on render
		var scrollTop = window.pageYOffset;

		// If available, save all the app settings to local storage
		UpdateLocalStorage();

		// Hide the notation placeholder
		document.getElementById("notation-placeholder").style.display = "none";

		if (isDesktopBrowser()){
			// Show the notation block
			if (gIsMaximized)
				gTheNotation.style.display = "flex";
			else
				gTheNotation.style.display = "inline";
		}
		else{
			// Show the notation block
			if (gIsMaximized)
				gTheNotation.style.display = "flex";
			else
				gTheNotation.style.display = "block";

		}

		// Hide/Show the zoom control
		if (gDisableEditFromPlayLink){
			HideMaximizeButton();
		}
		else{
			ShowMaximizeButton();
		}

		if (isDesktopBrowser() || gIsMaximized){

			// Add the play button
			ShowPlayButton();

		}

		if (!gIsQuickEditor){

			if (isDesktopBrowser() || gIsMaximized){

				// Add the PDF button
				ShowPDFButton();

			}
		}		

		// MAE 20 July 2024 - Avoid showing bottom bar if top bar hidden
		if (gShowAllControls && gTopBarShowing){

			document.getElementById("notenrechts").style.display = "inline-block";

			// Recalculate the notation top position first time the notation is rendered
			if (gIsFirstRender){
				UpdateNotationTopPosition();
				gIsFirstRender = false;
			}

		}
		else{
			document.getElementById("notenrechts").style.display = "none";
		}

		// Enable the save button
		document.getElementById("saveabcfile").classList.remove("saveabcfiledisabled");
		document.getElementById("saveabcfile").classList.add("saveabcfile");
		gAllowSave = true;

		// Enable the control display toggle
		gAllowControlToggle = true;

		if (!gIsQuickEditor){
			// Enable the PDF generation button
			document.getElementById("saveaspdf").classList.remove("saveaspdfdisabled");
			document.getElementById("saveaspdf").classList.add("saveaspdf");
			gAllowPDF = true;

			// Enable the website generation button
			document.getElementById("saveaswebsite").classList.remove("saveaswebsitedisabled");
			document.getElementById("saveaswebsite").classList.add("saveaswebsite");
			gAllowWebExport = true;

		}

		// Enable the copy button
		document.getElementById("copybutton").classList.remove("copybuttondisabled");
		document.getElementById("copybutton").classList.add("copybutton");

		// Enable the play button
		if (!gIsQuickEditor){
			document.getElementById("playbutton").classList.remove("playbuttondisabled");
			document.getElementById("playbutton").classList.add("playbutton");
		}
		else{
			// Don't enable play button on raw mode on the Quick Editor
			if (!gRawMode){
				document.getElementById("playbutton").classList.remove("playbuttondisabled");
				document.getElementById("playbutton").classList.add("playbutton");
			}
		}
		
		// Enable the raw mode button (Desktop only)
		if (isPureDesktopBrowser()){
			document.getElementById("rawmodebutton").classList.remove("rawmodebuttondisabled");
			document.getElementById("rawmodebutton").classList.add("rawmodebutton");
		}

		gAllowCopy = true;

		var radiovalue = GetRadioValue("notenodertab");

		var theNotes;

		// Generate the rendering divs
		// Only required if rendering all the tunes, otherwise will re-use an existing div
		if (renderAll){
			if (gIsQuickEditor){
				
				//console.log("Quick editor renderAll true");
				GenerateRenderingDivs(1);

				if (!gRawMode){
					// Just get the ABC for the current tune
					theNotes = GetABCFileHeader() + getTuneByIndex(tuneNumber);
				}
				else{
					// Need the entire ABC for highlighting
					theNotes = gTheABC.value;					
				}
			}
			else{
				GenerateRenderingDivs(nTunes);
				theNotes = gTheABC.value;
			}
		}
		else{
			if (gIsQuickEditor){	

				//console.log("Quick editor renderAll false");
				GenerateRenderingDivs(1);

				if (!gRawMode){
					// Just get the ABC for the current tune
					theNotes = GetABCFileHeader() + getTuneByIndex(gCurrentTune);
				}
				else{
					// Need the entire ABC for highlighting
					theNotes = gTheABC.value;
				}

			}
			else{

				// Just get the ABC for the current tune
				theNotes = GetABCFileHeader() + getTuneByIndex(tuneNumber);

			}
		}

		if (gIsQuickEditor){
			
			if (nTunes > 1){
				
				gRawMode = false;

				document.getElementById("rawmodebutton").classList.remove("rawmodebutton");
				document.getElementById("rawmodebutton").classList.add("rawmodebuttondisabled");

				document.getElementById("rawmodebutton").classList.add("btn-rawmode-off");
				document.getElementById("rawmodebutton").classList.remove("btn-rawmode-on");

				document.getElementById("rawmodebutton").value = "Highlighting";

				gTheABC.style.backgroundColor = "white";

				// Turn off raw mode
				gRawMode = false;

				// Clear last tune highlight tracker
				gRawLastIndex = -1;

			}
		}
		
		if (!gRawMode){

			theNotes = processAllStripping(theNotes);

			// Inject %%staffsep 
			var searchRegExp = /^X:.*$/gm

			theNotes = theNotes.replace(searchRegExp, "X:1\n%%staffsep " + gStaffSpacing);

		}

		//console.log("theNotes for RenderTheNotes:"+theNotes);

		// Render the notes
		if (gIsQuickEditor){
			RenderTheNotes(theNotes,radiovalue,false,0);
		}
		else{
			RenderTheNotes(theNotes,radiovalue,renderAll,tuneNumber);
		}	

		// Maintain scroll position after render
		window.scrollTo(0, scrollTop);

		if (gIsQuickEditor){

			// MAE 15 Jul 2024 - For quick editor
			if (!gSuppressQuickPlayer){
				inlinePlayback(); 
			}
		}

	} else {

		// Hide all the buttons and notation
		document.getElementById("notenrechts").style.display = "none";
		gTheNotation.style.display = "none";

		// Disable the save button
		document.getElementById("saveabcfile").classList.remove("saveabcfile");
		document.getElementById("saveabcfile").classList.add("saveabcfiledisabled");
		gAllowSave = false;

		if (!gIsQuickEditor){
			// Disable the generate PDF button
			document.getElementById("saveaspdf").classList.remove("saveaspdf");
			document.getElementById("saveaspdf").classList.add("saveaspdfdisabled");
			gAllowPDF = false;

			// Disable the generate website button
			document.getElementById("saveaswebsite").classList.remove("saveaswebsite");
			document.getElementById("saveaswebsite").classList.add("saveaswebsitedisabled");
			gAllowWebExport = false;
		}

		// Disable the control display toggle
		gAllowControlToggle = false;

		// Disable the copy button
		document.getElementById("copybutton").classList.remove("copybutton");
		document.getElementById("copybutton").classList.add("copybuttondisabled");

		// Disable the play button
		document.getElementById("playbutton").classList.remove("playbutton");
		document.getElementById("playbutton").classList.add("playbuttondisabled");

		// Disable the raw mode button
		document.getElementById("rawmodebutton").classList.remove("rawmodebutton");
		document.getElementById("rawmodebutton").classList.add("rawmodebuttondisabled");

		document.getElementById("rawmodebutton").classList.add("btn-rawmode-off");
		document.getElementById("rawmodebutton").classList.remove("btn-rawmode-on");

		document.getElementById("rawmodebutton").value = "Highlighting";

		gTheABC.style.backgroundColor = "white";

		// Turn off raw mode
		gRawMode = false;

		// Clear last tune highlight tracker
		gRawLastIndex = -1;

		// Clear the last tune clicked tracker
		gLastClickedTune = -1;

		gAllowCopy = false;

		// Show the notation placeholder
		document.getElementById("notation-placeholder").style.display = "block";

		// Hide the zoom control
		document.getElementById("zoombutton").style.display = "none";

		if (!gIsQuickEditor){

			// Hide the play button
			HidePlayButton();

			// Hide the PDF button
			HidePDFButton();

		}
		else{

			// Hide the play button
			HidePlayButton();

		}

		// Hide the spinner
		hideTheSpinner();

		var fileSelected = document.getElementById('abc-selected');

		fileSelected.innerText = "No ABC file selected";

		gDisplayedName = "No ABC file selected";

		gABCFromFile = false;

		gIsFirstRender = true;

		// Also clear the diagnostics area
	    elem = document.getElementById("diagnostics");
	    elem.innerHTML = "";		


		// Recalculate the notation top position
		UpdateNotationTopPosition();

		if (gIsQuickEditor){
			// MAE FOOFOO 15 Jul 2024
			// Hide playback controls
			document.getElementById("playback-audio-inline").innerHTML = "";

		}

    // Remove all previously added custom CSS <style> blocks 
    document.querySelectorAll('style[data-aggregate-css="true"]').forEach(el => el.remove());

	}

}

//
// Check that the user has selected a .abc file to render
//
function ensureABCFile(filename) {

	var fileExtension = "";

	if (filename.lastIndexOf(".") > 0) {
		fileExtension = filename.substring(filename.lastIndexOf(".") + 1, filename.length);
	}

	if ((fileExtension.toLowerCase() == "abc") || (fileExtension.toLowerCase() == "txt") || (fileExtension.toLowerCase() == "xml") || (fileExtension.toLowerCase() == "musicxml") || (fileExtension.toLowerCase() == "mxl") || (fileExtension.toLowerCase() == "mid") || (fileExtension.toLowerCase() == "midi") || (fileExtension.toLowerCase() == "bww") || (fileExtension.toLowerCase() == "BWW")){
		return true;
	} else {
		return false;
	}
}

//
// Idle the advanced controls
//
// If bUpdateUI is false, just updates the global filtering options states
// If bUpdateUI is true also idles the UI elements
//
function IdleAdvancedControls(bUpdateUI){

	var theNotes = gTheABC.value;

	var searchRegExp = "";

	var EnableAnnotations = false;
	var EnableText = false;
	var EnableChords = false;
	var EnableOrnaments = false;

	var gotMatch = false;

	// Detect tempo markings
	searchRegExp = /^Q:.*$/gm

	// Detect tempo markings
	gotMatch = theNotes.search(searchRegExp) != -1;

	if (!gotMatch){

		// Detect Z: annotation
		searchRegExp = /^Z:.*$/gm

		// Detect Z: annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect R: annotation
		searchRegExp = /^R:.*$/gm

		// Detect R: annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect S: annotation
		searchRegExp = /^S:.*$/gm

		// Detect S: annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect N: annotation
		searchRegExp = /^N:.*$/gm

		// Detect N: annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect D: annotation
		searchRegExp = /^D:.*$/gm

		// Detect D: annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect H: annotation
		searchRegExp = /^H:.*$/gm

		// Detect H: annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect B: annotation
		searchRegExp = /^B:.*$/gm

		// Detect B: annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect C: annotation
		searchRegExp = /^C:.*$/gm

		// Detect C: annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect O: annotation
		searchRegExp = /^O:.*$/gm

		// Detect O: annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect A: annotation
		searchRegExp = /^A:.*$/gm

		// Detect A: annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect P: annotation
		searchRegExp = /^P:.*$/gm

		// Detect P: annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	EnableAnnotations = gotMatch;

	gotMatch = false;

	// Detect text annotation
	searchRegExp = /%%text .*$/gm

	// Detect text annotation
	gotMatch = theNotes.search(searchRegExp) != -1;

	if (!gotMatch){

		// Detect %%text annotation
		searchRegExp = /%%text[\r\n]/gm

		// Detect %%text annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect %%center annotation
		searchRegExp = /%%center.*$/gm

		// Detect %%center annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect %%right annotation
		searchRegExp = /%%right.*$/gm

		// Detect %%right annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	if (!gotMatch){

		// Detect %%begintext annotation
		searchRegExp = /%%begintext.*$/gm

		// Detect %%begintext annotation
		gotMatch = theNotes.search(searchRegExp) != -1;

	}

	EnableText = gotMatch;

	gotMatch = false;

	// Detect chord markings
	searchRegExp = /"[^"]*"/gm

	gotMatch = AreChordsInABC(theNotes);

	EnableChords = gotMatch;

	// Detect tab markings
	gotMatch = IsTabInABC(theNotes);

	EnableTab = gotMatch;

	// Detect ornaments
	gotMatch = false;

	if (theNotes.indexOf("~") != -1){
		gotMatch = true;
	}

	if (!gotMatch){

		// %%score directives potentially use brackets, so filter for them
		//searchRegExp = /%%score \{[^}]*\}|\{([^}]*)\}/gm
		searchRegExp = /%%score \{[^}]*\}|\{[^}]*\}/gm

		//debugger;

		theMatch = theNotes.match(searchRegExp);

		if (theMatch && theMatch.length){

			var nMatches = theMatch.length;

			for (var i=0;i<nMatches;++i){

				if (theMatch[i].indexOf("{") == 0){

					gotMatch = true;
					break;

				}
			}
		}

		// Simple regex for text in brackets
		//searchRegExp = /{[^}]*}/gm
		//gotMatch = theNotes.search(searchRegExp) != -1;

	}

	EnableOrnaments = gotMatch;

	// Now set the button styling based on the results
	if (EnableAnnotations){

		gAllowFilterAnnotations = true;

		if (bUpdateUI){

			// Enable the Toggle Annotations button
			document.getElementById("toggleannotations").classList.remove("advancedcontrolsdisabled");
			document.getElementById("toggleannotations").classList.add("advancedcontrols");	

			// Enable the Strip Annotations button
			document.getElementById("stripannotations").classList.remove("advancedcontrolsdisabled");
			document.getElementById("stripannotations").classList.add("advancedcontrols");	

		}
	}
	else{

		gAllowFilterAnnotations = false;

		if (bUpdateUI){

			// Disable the Toggle Annotations button
			document.getElementById("toggleannotations").classList.remove("advancedcontrols");
			document.getElementById("toggleannotations").classList.add("advancedcontrolsdisabled");	

			// Disable the Strip Annotations button
			document.getElementById("stripannotations").classList.remove("advancedcontrols");
			document.getElementById("stripannotations").classList.add("advancedcontrolsdisabled");	

		}			
	}

	if (EnableText){

		gAllowFilterText = true;

		if (bUpdateUI){

			// Enable the Toggle Text button
			document.getElementById("toggletext").classList.remove("advancedcontrolsdisabled");
			document.getElementById("toggletext").classList.add("advancedcontrols");

			// Enable the Strip Text button
			document.getElementById("striptext").classList.remove("advancedcontrolsdisabled");
			document.getElementById("striptext").classList.add("advancedcontrols");

		}	
	}
	else{

		gAllowFilterText = false;
		
		if (bUpdateUI){

			// Disable the Toggle Text button
			document.getElementById("toggletext").classList.remove("advancedcontrols");
			document.getElementById("toggletext").classList.add("advancedcontrolsdisabled");

			// Disable the Strip Text button
			document.getElementById("striptext").classList.remove("advancedcontrols");
			document.getElementById("striptext").classList.add("advancedcontrolsdisabled");
		}				
	}

	if (EnableChords){

		gAllowFilterChords = true;
		
		if (bUpdateUI){

			// Enable the Toggle Chords button
			document.getElementById("togglechords").classList.remove("advancedcontrolsdisabled");
			document.getElementById("togglechords").classList.add("advancedcontrols");

			// Enable the Strip Chords button
			document.getElementById("stripchords").classList.remove("advancedcontrolsdisabled");
			document.getElementById("stripchords").classList.add("advancedcontrols");

		}	
	}
	else{

		gAllowFilterChords = false;

		if (bUpdateUI){

			// Disable the Toggle Chords button
			document.getElementById("togglechords").classList.remove("advancedcontrols");
			document.getElementById("togglechords").classList.add("advancedcontrolsdisabled");

			// Disable the Strip Chords button
			document.getElementById("stripchords").classList.remove("advancedcontrols");
			document.getElementById("stripchords").classList.add("advancedcontrolsdisabled");

		}			
	}

	if (EnableTab){

		gAllowFilterTab = true;
		
		if (bUpdateUI){

			// Enable the Toggle Tab button
			document.getElementById("toggletab").classList.remove("advancedcontrolsdisabled");
			document.getElementById("toggletab").classList.add("advancedcontrols");

			// Enable the Strip Tab button
			document.getElementById("striptab").classList.remove("advancedcontrolsdisabled");
			document.getElementById("striptab").classList.add("advancedcontrols");
		}	
	}
	else{

		gAllowFilterTab = false;

		if (bUpdateUI){

			// Disable the Toggle Tab button
			document.getElementById("toggletab").classList.remove("advancedcontrols");
			document.getElementById("toggletab").classList.add("advancedcontrolsdisabled");

			// Disable the Strip Chords button
			document.getElementById("striptab").classList.remove("advancedcontrols");
			document.getElementById("striptab").classList.add("advancedcontrolsdisabled");

		}			
	}

	if (EnableOrnaments){

		gAllowFilterOrnaments = true;
		
		if (bUpdateUI){

			// Enable the Toggle Ornaments button
			document.getElementById("toggleornaments").classList.remove("advancedcontrolsdisabled");
			document.getElementById("toggleornaments").classList.add("advancedcontrols");

			// Enable the Strip Ornaments button
			document.getElementById("stripornaments").classList.remove("advancedcontrolsdisabled");
			document.getElementById("stripornaments").classList.add("advancedcontrols");
		}	
	}
	else{

		gAllowFilterOrnaments = false;
		
		if (bUpdateUI){

			// Disable the Toggle Ornaments button
			document.getElementById("toggleornaments").classList.remove("advancedcontrols");
			document.getElementById("toggleornaments").classList.add("advancedcontrolsdisabled");

			// Disable the Strip Ornaments button
			document.getElementById("stripornaments").classList.remove("advancedcontrols");
			document.getElementById("stripornaments").classList.add("advancedcontrolsdisabled");
		}	

	}

	if (bUpdateUI){

		// Now idle the button labels based on the global states

		if (gStripAnnotations){

			document.getElementById("toggleannotations").value = "Show Annotations";

		}
		else{

			document.getElementById("toggleannotations").value = "Hide Annotations";

		}

		if (gStripTextAnnotations){

			document.getElementById("toggletext").value = "Show Text";

		}
		else{

			document.getElementById("toggletext").value = "Hide Text";

		}

		if (gStripChords){

			document.getElementById("togglechords").value = "Show Chords";

		}
		else{

			document.getElementById("togglechords").value = "Hide Chords";

		}

		if (gStripTab){

			document.getElementById("toggletab").value = "Show Injected Tab";

		}
		else{

			document.getElementById("toggletab").value = "Hide Injected Tab";

		}

		if (gStripOrnaments){

			document.getElementById("toggleornaments").value = "Show Ornaments";

		}
		else{

			document.getElementById("toggleornaments").value = "Hide Ornaments";

		}

	}

}


//
// Recalculate and update the top position for the music
//
function UpdateNotationTopPosition(){

	// Position the notation block
	var noscroller = document.getElementById("noscroller");

	var noscroller_height = noscroller.offsetHeight; 

	// Position the notation holder under the controls
	var notation_spacer = document.getElementById("notation-spacer");

	notation_spacer.style.height = noscroller_height+"px"; 
}

//
// Set the defaults
//
function RestoreDefaults() {

	// Reset globals
	gStripAnnotations = false;
	gStripTextAnnotations = false;
	gStripChords = false;
	gStripTab = false;
	gStripOrnaments = false;
	
	gAllowFilterAnnotations = false;
	gAllowFilterText = false;
	gAllowFilterChords = false;
	gAllowFilterTab = false;
	gAllowFilterOrnaments = false;

	gTotalTunes = 0;
	gCurrentTune = 0;
	gRawLastIndex = -1;
	gForceFullRender = false;
	gIsFirstRender = true;

	// Clear the autoscroll state
	gLastAutoScrolledTune = -1;
	gLastClickedTune = -1;

	gPDFFileName = "";
	gWebsiteFilename = "";

	gSuppressQuickPlayer = false;

	// Reset file selectors
	let fileElement = document.getElementById('selectabcfile');

	fileElement.value = "";

	// Clear the QR code
	clearQRCode();

	// Clear the split tunes cache
	clearGetTuneByIndexCache();

	// Recalculate the notation top position
	UpdateNotationTopPosition();

}

//
// Toggle annotations
//
function ToggleAnnotations(bDoStrip) {

	if (!gAllowFilterAnnotations){

		return;

	}


	// Strips the annotations in the actual ABC and re-renders
	if (bDoStrip){

		StripAnnotations();
		
		RenderAsync(true,null);

		IdleAdvancedControls(true);

		return;
	}

	gStripAnnotations = !gStripAnnotations;

	RenderAsync(true,null);

	IdleAdvancedControls(true);


}

//
// Toggle text
//
function ToggleTextAnnotations(bDoStrip) {

	if (!gAllowFilterText){

		return;

	}

	// Strip the text annotations in the actual ABC and re-renders
	if (bDoStrip){

		StripTextAnnotations();
		
		RenderAsync(true,null);
		
		IdleAdvancedControls(true);

		return;
	}
	
	gStripTextAnnotations = !gStripTextAnnotations;

	RenderAsync(true,null);

	IdleAdvancedControls(true);

}

//
// Toggle chords
//
function ToggleChords(bDoStrip) {

	if (!gAllowFilterChords){

		return;
	
	}

	// Strips the text annotations in the actual ABC and re-renders
	if (bDoStrip){

		StripChords();
		
		RenderAsync(true,null)

		IdleAdvancedControls(true);

		return;
	}

	gStripChords = !gStripChords;

	RenderAsync(true,null)

	IdleAdvancedControls(true);

}

//
// Toggle tab
//
function ToggleTab(bDoStrip) {

	if (!gAllowFilterTab){

		return;
	
	}

	// Strips the text annotations in the actual ABC and re-renders
	if (bDoStrip){

		StripTab();
		
		RenderAsync(true,null)

		IdleAdvancedControls(true);

		return;
	}

	gStripTab = !gStripTab;

	RenderAsync(true,null)

	IdleAdvancedControls(true);

}

//
// Toggle ornaments
//
function ToggleOrnaments(bDoStrip) {

	if (!gAllowFilterOrnaments){

		return;
	
	}

	// Strips the ornamentation in the actual ABC and re-renders
	if (bDoStrip){

		StripOrnaments();
		
		RenderAsync(true,null)

		IdleAdvancedControls(true);

		return;
	}

	gStripOrnaments = !gStripOrnaments;

	RenderAsync(true,null)

	IdleAdvancedControls(true);

}


//
// Add a new ABC tune template, song template, or PDF tunebook annotation template to the current ABC
//
function idleAddABC(){

	if (gIsIOS){

		document.getElementById("addabcfilebutton").removeAttribute("accept");
	
	}	

	//
	// Setup the file import control
	//
	document.getElementById("addabcfilebutton").onchange = () => {

		let fileElement = document.getElementById("addabcfilebutton");

		// check if user had selected a file
		if (fileElement.files.length === 0) {

			var thePrompt = "Please select an ABC, MusicXML, or MIDI file";
			
			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;

		}

    const add_files = Array.from(fileElement.files);

    // Use the common multi-file reader
    DoMultiReadCommon(add_files, fileElement);

	}

	// Show the snapshot button if one is available in browser storage
	var elem1 = document.getElementById("dialogrestorebutton");

	elem1.style.display="none";

	var elem2 = document.getElementById("dialogrestoreautobutton");

	elem2.style.display="none";

	if (gLocalStorageAvailable){

		var theSnapshot = localStorage.SavedSnapshot;
		var theSnapshot2 = localStorage.SavedSnapshot2;
		var theSnapshot3 = localStorage.SavedSnapshot3;
		var theSnapshot4 = localStorage.SavedSnapshot4;

		var bTheSnapShotAvailable = (((theSnapshot) && (theSnapshot != "")) || ((theSnapshot2) && (theSnapshot2 != "")) || ((theSnapshot3) && (theSnapshot3 != "")) || ((theSnapshot4) && (theSnapshot4 != "")));

		var theLastAutoSnapShot = localStorage.LastAutoSnapShot;

		var bTheLastAutoSnapShotAvailable = ((theLastAutoSnapShot) && (theLastAutoSnapShot != ""));

		if (bTheSnapShotAvailable){

			elem1.style.display="inline";

		}

		if (bTheLastAutoSnapShotAvailable){

			elem2.style.display="inline";

		}

	}

	// Find the OK button

	var theOKButtons = document.getElementsByClassName("modal_flat_ok");

	// Find the button that says "OK" to use to close the dialog when changing UI settings
	var theOKButton = null;
	
	gAddABCOKButton = null;

	for (var i=0;i<theOKButtons.length;++i){

		theOKButton = theOKButtons[i];

		if (theOKButton.innerText == "OK"){

			//console.log("Found OK button");
			gAddABCOKButton = theOKButton;

			break;

		}
	}

}

//
// PDF Tunebook builder
//

//
// PDF Tunebook features
//
var gPDFTunebookConfig ={

 	// PDF Quality
	pdfquality: 0.75,

	// Space between tunes
	pdf_between_tune_space: 20,

	// Title
	addtitle: "Tunebook Title",

	// Subtitle
	addsubtitle: "Tunebook Subtitle",

	// TOC Title
	addtoc: "Table of Contents",

	// Index Title
	addindex: "Index",

	// Page Header
	pageheader: "This is the Page Header",

	// Page Footer
	pagefooter: "This is the Page Footer",

	// Add playback links?
	bAdd_add_all_playback_links: true,

	// Inject full tunebook
	bAdd_add_full_tunebook: false,

	// Inject instruments?
	bInjectInstruments: true,

	// Sound font
	sound_font: "fluid",

	// Melody Instrument
	melody_instrument: 1,

	// Bass Instrument
	bass_instrument: 1,

	// Bass Volume
	bass_volume: 64,

	// Chord Instrument
	chord_instrument: 1,

	// Chord Volume
	chord_volume: 64,

	// Add all required fonts
	bAdd_add_fonts: false,

	// QR Code?
	bAdd_QRCode: true,

	// Link override
	qrcode_link: "https://michaeleskin.com/abc",

	// Caption
	caption_for_qrcode: "Created using Michael Eskin's ABC Transcription Tools",
}

// Reset the PDF tunebook config to defaults
function resetPDFTunebookConfig(){

	gPDFTunebookConfig ={

	 	// PDF Quality
		pdfquality: 0.75,

		// Space between tunes
		pdf_between_tune_space: 20,

		// Title
		addtitle: "Tunebook Title",

		// Subtitle
		addsubtitle: "Tunebook Subtitle",

		// TOC Title
		addtoc: "Table of Contents",

		// Index Title
		addindex: "Index",

		// Page Header
		pageheader: "This is the Page Header",

		// Page Footer
		pagefooter: "This is the Page Footer",

		// Add playback links?
		bAdd_add_all_playback_links: true,

		// Inject full tunebook
		bAdd_add_full_tunebook: false,

		// Inject instruments?
		bInjectInstruments: true,

		// Sound font
		sound_font: "fluid",

		// Melody Instrument
		melody_instrument: 1,

		// Bass Instrument
		bass_instrument: 1,

		// Bass volume:
		bass_volume: 64,

		// Chord Instrument
		chord_instrument: 1,

		// Chord volume:
		chord_volume: 64,

		// Add all required fonts
		bAdd_add_fonts: false,

		// QR Code?
		bAdd_QRCode: true,

		// Link override
		qrcode_link: "https://michaeleskin.com/abc",

		// Caption
		caption_for_qrcode: "Created using Michael Eskin's ABC Transcription Tools",
	}
}

function idlePDFTunebookBuilder(){

	$('[name="addtitle"]').attr('placeholder', 'No Title Page will be included');
	$('[name="addsubtitle"]').attr('placeholder', 'No Title Page subtitle will be included');
	$('[name="addtoc"]').attr('placeholder', 'No Table of Contents will be included');
	$('[name="addindex"]').attr('placeholder', 'No Index will be included');
	$('[name="pageheader"]').attr('placeholder', 'No Page Header will be included');
	$('[name="pagefooter"]').attr('placeholder', 'No Page Footer will be included');
	$('[name="qrcode_link"]').attr('placeholder', 'QR Code will use default Share URL');
	$('[name="caption_for_qrcode"]').attr('placeholder', 'No QR Code caption will be included');

}

function PDFTunebookBuilder(){

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","PDFTunebookBuilder");

	// sound_font was added later, make sure the field is present
	if ((!gPDFTunebookConfig.sound_font) || (gPDFTunebookConfig.sound_font == "")){
		gPDFTunebookConfig.sound_font = "fluid";
	}

	// bass_instrument was added later, make sure the field is present
	if ((!gPDFTunebookConfig.bass_instrument) || (gPDFTunebookConfig.bass_instrument == "")){
		gPDFTunebookConfig.bass_instrument = 1;
	}

	// bass and chord volume was added later, make sure the field is present
	if ((!gPDFTunebookConfig.bass_volume) || (gPDFTunebookConfig.bass_volume == "")){
		gPDFTunebookConfig.bass_volume = "64";
	}

	if ((!gPDFTunebookConfig.chord_volume) || (gPDFTunebookConfig.chord_volume == "")){
		gPDFTunebookConfig.chord_volume = "64";
	}

	var midi_program_list = [];

  	for (var i=0;i<=MIDI_PATCH_COUNT;++i){
  		midi_program_list.push({name: "  "+ generalMIDISoundNames[i], id: i });
  	}

    const pdf_quality_list = [
	    { name: "  Draft", id: 0.4 },
	    { name: "  Good", id: 0.5 },
	    { name: "  High", id: 0.75 },
  	];

 	const sound_font_options = [
	    { name: "  Fluid", id: "fluid" },
	    { name: "  Musyng Kite", id: "musyng" },
	    { name: "  FatBoy", id: "fatboy" },
 	    { name: "  Canvas", id: "canvas" },
 	    { name: "  MScore", id: "mscore" },
 	    { name: "  Arachno", id: "arachno" },
 	    { name: "  FluidHQ", id: "fluidhq"}
 	];

  	for (var i=0;i<=MIDI_PATCH_COUNT;++i){
  		midi_program_list.push({name: "  "+ generalMIDISoundNames[i], id: i });
  	}

	var form = [
	  {html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;margin-bottom:18px">Inject All PDF Tunebook Features&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#inject_pdf_tunebook_features" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},  
	  {html: '<p style="margin-top:12px;margin-bottom:12px;font-size:12pt;line-height:14pt;font-family:helvetica">Clicking "Inject" will inject PDF tunebook feature commands at the top of your ABC.</p>'},  
	  {html: '<p style="margin-top:12px;margin-bottom:12px;font-size:12pt;line-height:14pt;font-family:helvetica">Leave any text fields blank for features you don\'t want in your PDF tunebook.</p>'},  
	  {name: "PDF quality:", id: "pdfquality", type:"select", options:pdf_quality_list, cssClass:"configure_pdfquality_select"},
	  {name: "Space between tunes (in 1/72\"):", id: "pdf_between_tune_space", type:"number", cssClass:"configure_setuppdftunebook_form_text3"},
	  {name: "Title Page title:", id: "addtitle", type:"text", cssClass:"configure_setuppdftunebook_form_text_wide2"},
	  {name: "Title Page subtitle:", id: "addsubtitle", type:"text", cssClass:"configure_setuppdftunebook_form_text_wide"},
	  {name: "Table of Contents title:", id: "addtoc", type:"text", cssClass:"configure_setuppdftunebook_form_text_wide"},
	  {name: "Index title:", id: "addindex", type:"text", cssClass:"configure_setuppdftunebook_form_text_wide"},
	  {name: "Page Header:", id: "pageheader", type:"text", cssClass:"configure_setuppdftunebook_form_text_wide"},
	  {name: "Page Footer:", id: "pagefooter", type:"text", cssClass:"configure_setuppdftunebook_form_text_wide"},
	  {name: "          Add playback links to each tune to allow playing the tune by clicking the tune title", id: "bAdd_add_all_playback_links", type:"checkbox", cssClass:"configure_setuppdftunebook_form_text2"},
	  {name: "          Playback links contain entire tunebook", id: "bAdd_add_full_tunebook", type:"checkbox", cssClass:"configure_setuppdftunebook_form_text"},
	  {name: "Soundfont for playback links:", id: "sound_font", type:"select", options:sound_font_options, cssClass:"configure_setuppdftunebook_midi_program_select"},
	  {name: "Melody instrument for playback links:", id: "melody_instrument", type:"select", options:midi_program_list, cssClass:"configure_setuppdftunebook_midi_program_select"},
	  {name: "Bass instrument for playback links:", id: "bass_instrument", type:"select", options:midi_program_list, cssClass:"configure_setuppdftunebook_midi_program_select"},
	  {name: "Bass volume (0-127):", id: "bass_volume", type:"number", cssClass:"configure_setuppdftunebook_form_text"},
	  {name: "Chord instrument for playback links:", id: "chord_instrument", type:"select", options:midi_program_list, cssClass:"configure_setuppdftunebook_midi_program_select"},
	  {name: "Chord volume (0-127):", id: "chord_volume", type:"number", cssClass:"configure_setuppdftunebook_form_text"},
	  {name: "          Inject all required fonts into the ABC in the playback links", id: "bAdd_add_fonts", type:"checkbox", cssClass:"configure_setuppdftunebook_form_text"},
	  {name: "          Add a QR Code to the end of the PDF", id: "bAdd_QRCode", type:"checkbox", cssClass:"configure_setuppdftunebook_form_text"},
	  {html: '<p style="margin-top:18px;margin-bottom:16px;font-size:12pt;line-height:10pt;font-family:helvetica">To override the default Share URL QR Code, enter your own URL below:</p>'},  
	  {name: "Custom URL:", id: "qrcode_link", type:"text", cssClass:"configure_setuppdftunebook_form_text_wide"},
	  {name: "QR Code caption:", id: "caption_for_qrcode", type:"text", cssClass:"configure_setuppdftunebook_form_text_wide"},
	];

	setTimeout(function(){

		idlePDFTunebookBuilder();

	}, 150);

	const modal = DayPilot.Modal.form(form, gPDFTunebookConfig, { theme: "modal_flat", top: 10, width: 690, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject", autoFocus: false } ).then(function(args){
	
		if (!args.canceled){

			// debugger;
			// %pdfquality .75
			// %pdf_between_tune_space 20
			// %addtitle Tunebook Title
			// %addsubtitle Tunebook Subtitle
			// %addtoc Table of Contents
			// %addlinkbacktotoc
			// %addsortedindex Index
			// %addlinkbacktoindex
			// %pageheader This is the Page Header
			// %pagefooter This is the Page Footer
			// %add_all_playback_links 0 0 0 fatboy
			// %playback_links_are_complete_tunebook
			// %add_all_fonts
			// %qrcode https://michaeleskin.com
			// %caption_for_qrcode Click or Scan to Visit my Home Page

			var header_to_add = "% Start of PDF Tunebook Features\n";
			header_to_add += "%\n";

			// PDF Quality
			gPDFTunebookConfig.pdfquality = args.result.pdfquality

			header_to_add += "%pdfquality "+gPDFTunebookConfig.pdfquality+"\n";

			// Space between tunes
			gPDFTunebookConfig.pdf_between_tune_space = args.result.pdf_between_tune_space;

			if (gPDFTunebookConfig.pdf_between_tune_space != ""){

				header_to_add += "%pdf_between_tune_space "+gPDFTunebookConfig.pdf_between_tune_space+"\n";

			}

			// Title
			gPDFTunebookConfig.addtitle = args.result.addtitle;

			// Subtitle
			gPDFTunebookConfig.addsubtitle = args.result.addsubtitle;

			if (gPDFTunebookConfig.addtitle != ""){

				header_to_add += "%addtitle "+gPDFTunebookConfig.addtitle+"\n";
				header_to_add += "%titlefontsize 24\n";

				if (gPDFTunebookConfig.addsubtitle != ""){

					header_to_add += "%addsubtitle "+gPDFTunebookConfig.addsubtitle+"\n";
					header_to_add += "%subtitlefontsize 16\n";

				}

			}

			// TOC Title
			gPDFTunebookConfig.addtoc = args.result.addtoc;

			if (gPDFTunebookConfig.addtoc != ""){

				header_to_add += "%addtoc "+gPDFTunebookConfig.addtoc+"\n";
				header_to_add += "%addlinkbacktotoc\n";
				header_to_add += "%tocleftoffset 0\n";
				header_to_add += "%tocrightoffset 0\n";
			}

			// Index Title
			gPDFTunebookConfig.addindex = args.result.addindex;

			if (gPDFTunebookConfig.addindex != ""){

				header_to_add += "%addsortedindex "+gPDFTunebookConfig.addindex+"\n";
				header_to_add += "%addlinkbacktoindex\n";
				header_to_add += "%indexleftoffset 0\n";
				header_to_add += "%indexrightoffset 0\n";

			}

			// Page Header
			gPDFTunebookConfig.pageheader = args.result.pageheader;

			if (gPDFTunebookConfig.pageheader != ""){

				header_to_add += "%pageheader "+gPDFTunebookConfig.pageheader+"\n";

			}

			// Page Footer
			gPDFTunebookConfig.pagefooter = args.result.pagefooter;

			if (gPDFTunebookConfig.pagefooter != ""){

				header_to_add += "%pagefooter "+gPDFTunebookConfig.pagefooter+"\n";
				
			}

			// Add playback links?
			gPDFTunebookConfig.bAdd_add_all_playback_links = args.result.bAdd_add_all_playback_links;

			// Playback links are entire tunebook?
			gPDFTunebookConfig.bAdd_add_full_tunebook = args.result.bAdd_add_full_tunebook;

			// Inject instruments?
			gPDFTunebookConfig.bInjectInstruments = args.result.bInjectInstruments;

			// Soundfont
			gPDFTunebookConfig.sound_font = args.result.sound_font;

			// Melody Instrument
			gPDFTunebookConfig.melody_instrument = args.result.melody_instrument;

			// Bass Instrument
			gPDFTunebookConfig.bass_instrument = args.result.bass_instrument;

			// Bass volume
			gPDFTunebookConfig.bass_volume = args.result.bass_volume;

			// Chord Instrument
			gPDFTunebookConfig.chord_instrument = args.result.chord_instrument;

			// Chord volume
			gPDFTunebookConfig.chord_volume = args.result.chord_volume;

			if (gPDFTunebookConfig.bAdd_add_all_playback_links){
				
				var soundFont = gPDFTunebookConfig.sound_font;

				var progNumMelody = gPDFTunebookConfig.melody_instrument;

				var progNumBass = gPDFTunebookConfig.bass_instrument;

				var progNumChord = gPDFTunebookConfig.chord_instrument;

				// Special case for muting voices
				if (progNumMelody == 0){

					progNumMelody = "mute";

				}
				else{

					progNumMelody = progNumMelody - 1;

					if ((progNumMelody < 0) || (progNumMelody > MIDI_PATCH_COUNT)){

						progNumMelody = 0;

					}

				}

				// Special case for muting voices
				if (progNumBass == 0){

					progNumBass = "mute";

				}
				else{

					progNumBass = progNumBass - 1;

					if ((progNumBass < 0) || (progNumBass > MIDI_PATCH_COUNT)){

						progNumBass = 0;

					}

				}

				// Special case for muting voices
				if (progNumChord == 0){

					progNumChord = "mute";

				}
				else{

					progNumChord = progNumChord - 1;

					if ((progNumChord < 0) || (progNumChord > MIDI_PATCH_COUNT)){

						progNumChord = 0;

					}

				}

				var volBass = gPDFTunebookConfig.bass_volume;

				var volChord = gPDFTunebookConfig.chord_volume;

				header_to_add += "%add_all_playback_links "+progNumMelody+" "+progNumBass+" "+progNumChord+" "+soundFont+"\n";
				header_to_add += "%add_all_playback_volumes "+volBass+" "+volChord+"\n";

				// Will only add the full tunebook Share URL annotation if the playback links are also enabled
				if (gPDFTunebookConfig.bAdd_add_full_tunebook){

					header_to_add += "%playback_links_are_complete_tunebook\n";

				}

				// Add required fonts
				gPDFTunebookConfig.bAdd_add_fonts = args.result.bAdd_add_fonts;

				if (gPDFTunebookConfig.bAdd_add_fonts){
					header_to_add += "%add_all_fonts\n";
				}

			}

			// QR Code?
			gPDFTunebookConfig.bAdd_QRCode = args.result.bAdd_QRCode;

			// Link override
			gPDFTunebookConfig.qrcode_link = args.result.qrcode_link;

			// Caption
			gPDFTunebookConfig.caption_for_qrcode = args.result.caption_for_qrcode;

			if (gPDFTunebookConfig.bAdd_QRCode){

				if (gPDFTunebookConfig.qrcode_link != ""){

					header_to_add += "%qrcode "+gPDFTunebookConfig.qrcode_link+"\n";

				}
				else{

					header_to_add += "%qrcode\n";

				}

				if (gPDFTunebookConfig.caption_for_qrcode != ""){

					header_to_add += "%caption_for_qrcode "+gPDFTunebookConfig.caption_for_qrcode+"\n";

				}
			}

			header_to_add += "%\n";

			header_to_add += "% End of PDF Tunebook Features\n";

			header_to_add += "\n";

			SaveConfigurationSettings();

			// Add the feature annotations to the top of the ABC
			var theNotes = gTheABC.value;

			//debugger;

			// Strip off any existing settings

			var markerString = "% End of PDF Tunebook Features\n\n";

			var startIndex = theNotes.indexOf(markerString);

			if (startIndex != -1){

				startIndex += markerString.length;

				theNotes = theNotes.substring(startIndex); 

			}

			header_to_add += theNotes;

			// Replace the ABC
			setABCEditorText(header_to_add);

			// Set dirty
			gIsDirty = true;

			// Have to redraw if in raw mode
		    if (gRawMode){

				RenderAsync(true,null);

			}

		}

	});
}

function PDFTunebookBuilderPlayOnly(){

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","PDFTunebookBuilderPlayOnly");

	// sound_font was added later, make sure the field is present
	if ((!gPDFTunebookConfig.sound_font) || (gPDFTunebookConfig.sound_font == "")){
		gPDFTunebookConfig.sound_font = "fluid";
	}

	// bass_instrument was added later, make sure the field is present
	if ((!gPDFTunebookConfig.bass_instrument) || (gPDFTunebookConfig.bass_instrument == "")){
		gPDFTunebookConfig.bass_instrument = 1;
	}

	// bass and chord volume was added later, make sure the field is present
	if ((!gPDFTunebookConfig.bass_volume) || (gPDFTunebookConfig.bass_volume == "")){
		gPDFTunebookConfig.bass_volume = "64";
	}

	if ((!gPDFTunebookConfig.chord_volume) || (gPDFTunebookConfig.chord_volume == "")){
		gPDFTunebookConfig.chord_volume = "64";
	}

	var midi_program_list = [];

  	for (var i=0;i<=MIDI_PATCH_COUNT;++i){
  		midi_program_list.push({name: "  "+ generalMIDISoundNames[i], id: i });
  	}

 	const sound_font_options = [
	    { name: "  Fluid", id: "fluid" },
	    { name: "  Musyng Kite", id: "musyng" },
	    { name: "  FatBoy", id: "fatboy" },
 	    { name: "  Canvas", id: "canvas" },
 	    { name: "  MScore", id: "mscore" },
 	    { name: "  Arachno", id: "arachno" },
 	    { name: "  FluidHQ", id: "fluidhq"}
 	];

  	for (var i=0;i<=MIDI_PATCH_COUNT;++i){
  		midi_program_list.push({name: "  "+ generalMIDISoundNames[i], id: i });
  	}

	var form = [
	  {html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;margin-bottom:18px">Inject Only PDF Tunebook Play Features&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#inject_pdf_tunebook_features_play" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},  
	  {html: '<p style="margin-top:12px;margin-bottom:12px;font-size:12pt;line-height:20pt;font-family:helvetica">Clicking "Inject" will inject PDF playback enabling commands at the top of your ABC.</p>'},  
	  {html: '<p style="margin-top:12px;margin-bottom:24px;font-size:12pt;line-height:20pt;font-family:helvetica">With these injected commands in place, in an exported PDF file, clicking the title of the tunes will open them in the Player in a new browser tab.</p>'},  
	  {name: "Soundfont for playback links:", id: "sound_font", type:"select", options:sound_font_options, cssClass:"configure_setuppdftunebook_midi_program_select_play"},
	  {name: "Melody instrument for playback links:", id: "melody_instrument", type:"select", options:midi_program_list, cssClass:"configure_setuppdftunebook_midi_program_select_play"},
	  {name: "Bass instrument for playback links:", id: "bass_instrument", type:"select", options:midi_program_list, cssClass:"configure_setuppdftunebook_midi_program_select_play"},
	  {name: "Bass volume (0-127):", id: "bass_volume", type:"number", cssClass:"configure_setuppdftunebook_form_text_play"},
	  {name: "Chord instrument for playback links:", id: "chord_instrument", type:"select", options:midi_program_list, cssClass:"configure_setuppdftunebook_midi_program_select_play"},
	  {name: "Chord volume (0-127):", id: "chord_volume", type:"number", cssClass:"configure_setuppdftunebook_form_text_play"},
	];

	const modal = DayPilot.Modal.form(form, gPDFTunebookConfig, { theme: "modal_flat", top: 100, width: 690, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject", autoFocus: false } ).then(function(args){
	
		if (!args.canceled){

			var header_to_add = "% Start of PDF Tunebook Features\n";
			header_to_add += "%\n";

			// Soundfont
			gPDFTunebookConfig.sound_font = args.result.sound_font;

			// Melody Instrument
			gPDFTunebookConfig.melody_instrument = args.result.melody_instrument;

			// Bass Instrument
			gPDFTunebookConfig.bass_instrument = args.result.bass_instrument;

			// Bass volume
			gPDFTunebookConfig.bass_volume = args.result.bass_volume;

			// Chord Instrument
			gPDFTunebookConfig.chord_instrument = args.result.chord_instrument;

			// Chord volume
			gPDFTunebookConfig.chord_volume = args.result.chord_volume;
				
			var soundFont = gPDFTunebookConfig.sound_font;

			var progNumMelody = gPDFTunebookConfig.melody_instrument;

			var progNumBass = gPDFTunebookConfig.bass_instrument;

			var progNumChord = gPDFTunebookConfig.chord_instrument;

			// Special case for muting voices
			if (progNumMelody == 0){

				progNumMelody = "mute";

			}
			else{

				progNumMelody = progNumMelody - 1;

				if ((progNumMelody < 0) || (progNumMelody > MIDI_PATCH_COUNT)){

					progNumMelody = 0;

				}

			}

			// Special case for muting voices
			if (progNumBass == 0){

				progNumBass = "mute";

			}
			else{

				progNumBass = progNumBass - 1;

				if ((progNumBass < 0) || (progNumBass > MIDI_PATCH_COUNT)){

					progNumBass = 0;

				}

			}

			// Special case for muting voices
			if (progNumChord == 0){

				progNumChord = "mute";

			}
			else{

				progNumChord = progNumChord - 1;

				if ((progNumChord < 0) || (progNumChord > MIDI_PATCH_COUNT)){

					progNumChord = 0;

				}

			}

			var volBass = gPDFTunebookConfig.bass_volume;

			var volChord = gPDFTunebookConfig.chord_volume;

			header_to_add += "%pdfquality 0.6\n";
			header_to_add += "%pdf_between_tune_space 20\n";
			header_to_add += "%\n";
			header_to_add += "%pageheader Click the tune title to play\n";
			header_to_add += "%\n";
			header_to_add += "%add_all_playback_links "+progNumMelody+" "+progNumBass+" "+progNumChord+" "+soundFont+"\n";
			header_to_add += "%add_all_playback_volumes "+volBass+" "+volChord+"\n";

			header_to_add += "%\n";

			header_to_add += "% End of PDF Tunebook Features\n";

			header_to_add += "\n";

			SaveConfigurationSettings();

			// Add the feature annotations to the top of the ABC
			var theNotes = gTheABC.value;

			//debugger;

			// Strip off any existing settings

			var markerString = "% End of PDF Tunebook Features\n\n";

			var startIndex = theNotes.indexOf(markerString);

			if (startIndex != -1){

				startIndex += markerString.length;

				theNotes = theNotes.substring(startIndex); 

			}

			markerString = "% End of PDF Tunebook Features\n";

			startIndex = theNotes.indexOf(markerString);

			if (startIndex != -1){

				startIndex += markerString.length;

				theNotes = theNotes.substring(startIndex); 

			}

			header_to_add += theNotes;

			// Replace the ABC
			setABCEditorText(header_to_add);

			// Set dirty
			gIsDirty = true;

			// Have to redraw if in raw mode
		    if (gRawMode){

				RenderAsync(true,null);

			}

		}

	});
}

//
// Capitalize a song name but not certain words between words
//

function capitalizeSongName(songName) {

  const excludeWords = ['the', 'of', 'and', 'for', 'a', 'an'];

  // Split the song name into an array of words
  const words = songName.split(' ');

  // Capitalize each word, excluding specified words
  const capitalizedWords = words.map((word, index) => {

    // Check if the word is not in the exclusion list or is the first word
    if (!excludeWords.includes(word.toLowerCase()) || index === 0) {
      // Capitalize the first letter of the word
      return word.charAt(0).toUpperCase() + word.slice(1);
    } else {
      // Keep excluded words in lowercase
      return word.toLowerCase();
    }

  });

  // Join the words back into a sentence
  const capitalizedSongName = capitalizedWords.join(' ');

  return capitalizedSongName;
}

//
// Capitalize after an O'
//
function capitalizeAfterO(str) {
  return str.replace(/(O')([a-z])/g, function(match, p1, p2) {
    return p1 + p2.toUpperCase();
  });
}

//
// Sort the tune search results
//
function SortTuneSearchResults(theNotes){

	function getTuneForSearchSort(tuneNumber){

	    // Now find all the X: items
	    var theTunes = theNotes.split(/^X:/gm);

	 	return ("X:"+theTunes[tuneNumber+1]);
	}

	var theTunes = theNotes.split(/(^X:.*$)/gm);

	var nTunes = (theTunes.length - 1)/2;

	if (nTunes < 2){
		return theNotes;
	}

	var thePrefixABC = theTunes[0];

	//console.log("thePrefixABC: "+thePrefixABC);

	var i;

	var theTitles = [];

	for (i=0;i<nTunes;++i){

		var thisTune = getTuneForSearchSort(i);

		var lines = thisTune.split("\n"); // Split the string by new line

		var bGotTitle = false;

		for (var j = 0; j < lines.length; ++j) {

			var currentLine = lines[j].trim(); // Trim any whitespace from the line

			// Check if the line starts with "T:"
			if (currentLine.startsWith("T:")) {

				var title = currentLine.slice(2).trim(); // Extract the title after "T:"

				theTitles.push(title);

				bGotTitle = true;

				break;

			}

		}

		if (!bGotTitle){
			theTitles.push("No Title");
		}

	}

	var tunesToProcess = [];
	var nProcessed = 0;
	var thisTitle;

	for (i=0;i<nTunes;++i){

		if (theTunes[(i*2)+1] != undefined){

			thisTitle = theTitles[nProcessed];

			thisTitle = processTitleForSorting(thisTitle);

			nProcessed++;

			//console.log("Tune #"+nProcessed+": "+theTunes[(i*2)+1]+theTunes[(i*2)+2]);

			tunesToProcess.push({title:thisTitle,tune:theTunes[(i*2)+1]+theTunes[(i*2)+2]});

		}

	}

	// Sort tunes by name
	tunesToProcess.sort(customSortTitleWithDiacriticals);

	theNotes = "";
	theNotes += thePrefixABC;

	// Aggregate the results
	for (i=0;i<nProcessed;++i){

		theNotes += tunesToProcess[i].tune;
	}

	// Renumber the tunes
	theTunes = theNotes.split(/(^X:.*$)/gm);

	nTunes = theTunes.length;

	thePrefixABC = theTunes[0];

	//console.log("thePrefixABC: "+thePrefixABC);
	theNotes = "";
	theNotes += thePrefixABC;

	var tuneIndex = 1;

	// Aggregate the results
	for (i=1;i<nTunes;++i){

		if (i % 2){
			theNotes += "X:"+tuneIndex;
			tuneIndex++;
		}
		else{
			theNotes += theTunes[i];
		}
	}

	return theNotes;

}

//
// Search the parsed tune database for the tune name
//
function searchForTunes() {

    var databaseID = gTheCurrentTuneDatabase;

    if (databaseID == 0){

	     if (!gTheParsedTuneDatabase){
	        
	        var prompt = makeCenteredPromptString("Gavin Heneghan tune database still loading...")

	        DayPilot.Modal.alert(prompt, {
	            theme: "modal_flat",
	            top: 200
	        });

	        return;
	    }
    }
    else{

	    if (!gTheFolkFriendDatabase){
	        
	        var prompt = makeCenteredPromptString("FolkFriend tune database still loading...")

	        DayPilot.Modal.alert(prompt, {
	            theme: "modal_flat",
	            top: 200
	        });

	        return;
	    }


    }

    var tuneNameToSearch = document.getElementById("tuneNameToSearch").value;

    // Save off the last search value
    gLastTuneSearchValue = tuneNameToSearch;

    if (gLocalStorageAvailable){
    	localStorage.LastTuneSearchValue = gLastTuneSearchValue;
    }

    if (tuneNameToSearch == ""){

        var prompt = makeCenteredPromptString("No Text Entered in the Search Field")
 
        DayPilot.Modal.alert(prompt, {
            theme: "modal_flat",
            top: 200
        });

        return;
    }

    // Disabling trim so that words with spaces can be searched for more easily
    //tuneNameToSearch = tuneNameToSearch.trim();

    tuneNameToSearch = tuneNameToSearch.toLowerCase();

    tuneNameToSearch = tuneNameToSearch.replace("'","");
    tuneNameToSearch = tuneNameToSearch.replace('"',"");

    document.getElementById('search_results').value = "";

    if (databaseID == 0){

	    var returnOnlyWithChords = document.getElementById('chords_only').checked;

	    var matchTitleStart = document.getElementById('match_title_start').checked;

	    var onlyFirstVariation = document.getElementById('only_first_variation').checked;

	    var nTunes = gTheParsedTuneDatabase.length;

	    var theOutput = "";

	    var theTotal = 0;

	    var maxResultsHit = false;

	    for (var i=0;((i<nTunes) && (!maxResultsHit));++i){

	        var theInfo = gTheParsedTuneDatabase[i].info;

	        // Filtering by style?
	        if (gTheTuneSearchStyle != ""){

	        	var thisStyle = theInfo["R"];
	        	
	        	if (!thisStyle){
	        		continue;
	        	}
	        	
	        	thisStyle = thisStyle.toLowerCase();
	        	
	        	if (thisStyle != gTheTuneSearchStyle){
	        		continue;
	        	}

	        }

	        var thisTitle = theInfo["T"];

	        thisTitle = thisTitle.toLowerCase();

	        thisTitle = thisTitle.replace("'","");
	        thisTitle = thisTitle.replace('"',"");

	        if (((!matchTitleStart) && (thisTitle.indexOf(tuneNameToSearch) != -1)) || ((matchTitleStart) && (thisTitle.indexOf(tuneNameToSearch) == 0))){

	            var theVariations = gTheParsedTuneDatabase[i].variations;

	            var index = 1;
	            var total = Object.entries(theVariations).length;

	            for (const [key, thisTuneABC] of Object.entries(theVariations))
	            {
	            	// Searching by key?
	            	if (gTheTuneSearchKey != ""){
	            		if (thisTuneABC.indexOf("K: "+gTheTuneSearchKey) == -1){
	            			//console.log("Got match, but wrong key");
	            			continue;
	            		}
	            		//console.log("Got match, correct key");
	            	}

	                // Are we only returning tunes with chords?
	                if (returnOnlyWithChords){

	                    var searchRegExp = /"[^"]*"/gm

	                    var chordsPresent = thisTuneABC.match(searchRegExp);

	                    if ((chordsPresent) && (chordsPresent.length > 0)){

	                        for (const [key2, value2] of Object.entries(theInfo)) {

	                        	if (key2 == "X"){
	                        		theOutput += key2+": "+(theTotal+1)+"\n";
	                        	}
	                        	else{
	                            	theOutput += key2+": "+value2+"\n";
	                            }
	                        }

	                        theOutput += thisTuneABC+"\n\n";

	                        index++;

	                        theTotal++;

	                        // Have we hit the max of search results?
	                        if (theTotal == gTheMaxDatabaseResults){
	                        	maxResultsHit = true;
	                        	break;
	                        }

	                        // Only returning the first variations?
	                        if (onlyFirstVariation){
	                        	break;
	                        }

	                    }
	                }
	                else{

	                    for (const [key2, value2] of Object.entries(theInfo)) {

                        	if (key2 == "X"){
                        		theOutput += key2+": "+(theTotal+1)+"\n";
                        	}
                        	else{
                            	theOutput += key2+": "+value2+"\n";
                            }
	                    }

	                    theOutput += thisTuneABC+"\n\n";

	                    index++;

	                    theTotal++;

	                    // Have we hit the max of search results?
                    	if (theTotal == gTheMaxDatabaseResults){
                        	maxResultsHit = true;
                        	break;
                        }

                       	// Only returning the first variations?
                        if (onlyFirstVariation){
                        	break;
                        }

	               	}
	            }
	        }
	    }
	}
	else{

	    var returnOnlyWithChords = document.getElementById('chords_only').checked;

 	    var matchTitleStart = document.getElementById('match_title_start').checked;

	    var onlyFirstVariation = document.getElementById('only_first_variation').checked;
		    
 		// Search FolkFriend session.org database
	    var rawSettings = gTheFolkFriendDatabase.settings;

	    var settingsMap = [];

 		for (let key in rawSettings) {
		
		    if (rawSettings.hasOwnProperty(key)) {
		        settingsMap.push(key);
		    }
		}

		var nSettings = settingsMap.length;

		//console.log("nSettings = "+nSettings);

	    var rawAliases = gTheFolkFriendDatabase.aliases;

	    var aliasMap = [];

 		for (let key in rawAliases) {
		
		    if (rawAliases.hasOwnProperty(key)) {
		        aliasMap.push(key);
		    }
		
		}

		var nAliaseSets= aliasMap.length;

	    var theOutput = "";

	    var theTotal = 0;

	    var maxResultsHit = false;

	    var variations_found = [];

	    for (var i=0;((i<nAliaseSets) && (!maxResultsHit));++i){

	        var thisAlias = gTheFolkFriendDatabase.aliases[aliasMap[i]];

	        var theAliases = [];

			for (let key in thisAlias) {
			
			    if (thisAlias.hasOwnProperty(key)) {
			        theAliases.push(key);
			    }
			
			}

			var nAliases = theAliases.length;
	
	        for (var j=0;((j<nAliases) && (!maxResultsHit));++j){

	        	// Alias ID maps to the tune_id in the setting
	        	var thisTitle = thisAlias[theAliases[j]];

	        	var theOriginalTitle = thisTitle;

		        thisTitle = thisTitle.toLowerCase();

		        thisTitle = thisTitle.replace("'","");
		        thisTitle = thisTitle.replace('"',"");

	        	if (((!matchTitleStart) && (thisTitle.indexOf(tuneNameToSearch) != -1)) || ((matchTitleStart) && (thisTitle.indexOf(tuneNameToSearch) == 0))){

		        	thisTitle = theOriginalTitle;

		        	for (var k=0;((k<nSettings) && (!maxResultsHit));++k){

		            	var theABCInfo = gTheFolkFriendDatabase.settings[settingsMap[k]];


		            	// Filtering by style?
				        if (gTheTuneSearchStyle != ""){

				        	var thisStyle = theABCInfo.dance;
				        	
				        	if (!thisStyle){
				        		continue;
				        	}
				        	
				        	thisStyle = thisStyle.toLowerCase();
				        	
				        	if (thisStyle != gTheTuneSearchStyle){
				        		continue;
				        	}

				        }

		            	if (theABCInfo.tune_id == aliasMap[i]){

			          		// Searching by key?
			            	if (gTheTuneSearchKey != ""){

			            		var thisMode = theABCInfo.mode;
					        	
					        	if (!thisMode){
					        		continue;
					        	}

			            		if (thisMode != gTheTuneSearchKey){
			            			//console.log("Got match, but wrong key");
			            			continue;
			            		}
			            		//console.log("Got match, correct key");
			            	}

		            		var ok_to_process = true;

		            		// If only returning first variation, see if the tune_id has already been seen
		            		if (onlyFirstVariation){

		            			var nVariationsSeen = variations_found.length;
		            			
		            			for(var ii=0;ii<nVariationsSeen;++ii){
		            				if (variations_found[ii] == theABCInfo.tune_id){
		            					ok_to_process = false;
		            				}
		            			}

		            			variations_found.push(theABCInfo.tune_id);

		            		}

		            		if (ok_to_process){

				                // Are we only returning tunes with chords?
				                if (returnOnlyWithChords){

				                    var searchRegExp = /"[^"]*"/gm

				                    var chordsPresent = theABCInfo.abc.match(searchRegExp);

				                    if ((chordsPresent) && (chordsPresent.length > 0)){

				                        theTotal++;

							            var theCapitalizedTitle = capitalizeSongName(thisTitle);

										theCapitalizedTitle = capitalizeAfterO(theCapitalizedTitle);

							            theOutput += "X: "+theTotal+"\n";

							            theOutput += "T: "+theCapitalizedTitle+"\n";

							            theOutput += "S: https://thesession.org/tunes/"+theABCInfo.tune_id+"\n";

							            var doLTag = false;

							            if (theABCInfo.dance){
							            	theOutput += "R: "+theABCInfo.dance+"\n";
							            	if (theABCInfo.dance == "polka"){
							            		doLTag = true;
							            	}
							            }
							            if (theABCInfo.meter){
							            	theOutput += "M: "+theABCInfo.meter+"\n";
							            	if (doLTag){
							            		if (theABCInfo.meter == "2/4"){
							            			theOutput += "L: 1/8\n";
							            		}
							            	}
							            }
							            if (theABCInfo.mode){
							            	theOutput += "K: "+theABCInfo.mode+"\n";
							            }

							            theOutput += theABCInfo.abc+"\n\n";

							            // Have we hit the max results count?
							            if (theTotal == gTheMaxDatabaseResults){
							            	maxResultsHit = true;
							            }
				                    }

				                }
				                else
				                {

				            		theTotal++;

						            var theCapitalizedTitle = capitalizeSongName(thisTitle);

									theCapitalizedTitle = capitalizeAfterO(theCapitalizedTitle);

						            theOutput += "X: "+theTotal+"\n";

						            theOutput += "T: "+theCapitalizedTitle+"\n";
							        
							        theOutput += "S: https://thesession.org/tunes/"+theABCInfo.tune_id+"\n";

						            var doLTag = false;

						            if (theABCInfo.dance){
						            	theOutput += "R: "+theABCInfo.dance+"\n";
						            	if (theABCInfo.dance == "polka"){
						            		doLTag = true;
						            	}
						            }
						            if (theABCInfo.meter){
						            	theOutput += "M: "+theABCInfo.meter+"\n";
						            	if (doLTag){
						            		if (theABCInfo.meter == "2/4"){
						            			theOutput += "L: 1/8\n";
						            		}
						            	}
						            }
					            	if (theABCInfo.mode){
						            	theOutput += "K: "+theABCInfo.mode+"\n";
						            }

						            theOutput += theABCInfo.abc+"\n\n";

						            // Have we hit the max results count?
						            if (theTotal == gTheMaxDatabaseResults){
						            	maxResultsHit = true;
						            }
						        }
						    }
		            	}
		        	}
		        }
		    }
	    }
	}

    var elem = document.getElementById("search_result");
    elem.innerHTML = "Search Results:&nbsp;&nbsp;"+theTotal+ " found";

    // Sort the results by tune name
    theOutput = SortTuneSearchResults(theOutput)

    document.getElementById('search_results').value = theOutput;

    elem = document.getElementById('search_results');
	elem.selectionStart = 0;
	elem.selectionEnd = 0;

	if(isPureDesktopBrowser()){

		// And reset the focus
	    elem.focus();	

	}
	else{

	    // And clear the focus
	    elem.blur();

	}

    elem = document.getElementById('add-search-results');

    if (theTotal > 0){
    	elem.classList.remove("add-search-results-disabled");
		elem.classList.add("add-search-results");
		elem.disabled = false;
     }
    else{
		elem.classList.remove("add-search-results");
    	elem.classList.add("add-search-results-disabled");
		elem.disabled = true;
    }

}

//
// Add the search results to the ABC
//
function addSearchResults(){

	var elem = document.getElementById('search_results');

	var theSearchResult;

	var selStart = elem.selectionStart;

	var selEnd = elem.selectionEnd;

	if (selStart == selEnd){

 		theSearchResults = elem.value;

 	}
 	else{

  		// Get the selected text using selectionStart and selectionEnd
    	theSearchResults = elem.value.substring(selStart, selEnd);

    	if (gTheABC.value.length == 0){
    		theSearchResults = theSearchResults+"\n";
    	}
    	else{
   			theSearchResults = "\n"+theSearchResults+"\n";
    	}
		
 	}

 	if (theSearchResults && (theSearchResults.length != 0)){

	 	ProcessAddTune(theSearchResults);

	 	var buttonElem = document.getElementById('add-search-results');

	 	if (buttonElem){

	 		buttonElem.value = "Results Added to Tunebook!";

	 		setTimeout(function(){

	 			buttonElem = document.getElementById('add-search-results');

	 			if (buttonElem){
	 				buttonElem.value = "Add Results to Tunebook";
	 			}
	 		},500);
	 	}

	 	if (!gIsIOS){

			setTimeout(function(){

				// And reset the focus
			    elem.focus();	
				
				elem.selectionStart = selStart;
				
				elem.selectionEnd = selEnd;


			},100);

	 	}
	 	else{
	 		
		  // create invisible dummy input to receive the focus first
		  const fakeInput = document.createElement('input')
		  fakeInput.setAttribute('type', 'text')
		  fakeInput.style.position = 'absolute'
		  fakeInput.style.opacity = 0
		  fakeInput.style.height = 0
		  fakeInput.style.fontSize = '16px' // disable auto zoom

		  // you may need to append to another element depending on the browser's auto 
		  // zoom/scroll behavior
		  document.body.prepend(fakeInput)

		  // focus so that subsequent async focus will work
		  fakeInput.focus()

		  setTimeout(function(){

		    // now we can focus on the target input
		    elem.focus()

			elem.selectionStart = selStart;
			
			elem.selectionEnd = selEnd;

		    // cleanup
		    fakeInput.remove()
		    
		  }, 100);

	 	}
	}
	else{

		var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Nothing to Add!</p>';

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 700,  scrollWithPage: (AllowDialogsToScroll()) });
	
	}

}

//
// Idle the search result inject button
//
function idleSearchResults(){

	//console.log("idleSearchResults");

 	var theSearchResults = document.getElementById('search_results').value;

    var elem = document.getElementById('add-search-results');

 	if (theSearchResults && (theSearchResults.length > 0)){
    	elem.classList.remove("add-search-results-disabled");
		elem.classList.add("add-search-results");
		elem.disabled = false;
 	}
 	else{
		elem.classList.remove("add-search-results");
    	elem.classList.add("add-search-results-disabled");
		elem.disabled = true;
 	}

}

//
// Set the maximum search results
//
function SetTuneSearchMaxResults(){

	var theMaxResults = document.getElementById("maxtunesearchresults").value;
	gTheMaxDatabaseResults = parseInt(theMaxResults);

	if (isNaN(gTheMaxDatabaseResults)){
		gTheMaxDatabaseResults = 25;
	}

}

//
// Set the tune style
//

function SetTuneSearchStyle(){

	gTheTuneSearchStyle = document.getElementById("tunesearchstyle").value;

	//console.log("gTheTuneSearchStyle = "+gTheTuneSearchStyle);

}

//
// Set the tune key
//

function SetTuneSearchKey(){

	gTheTuneSearchKey = document.getElementById("tunesearchkey").value;

	//console.log("gTheTuneSearchKey = "+gTheTuneSearchKey);

}


//
// Fetch with retry
//

function wait_for_retry(delay){

	//console.log("wait_for_retry delay = "+delay);

    return new Promise((resolve) => setTimeout(resolve, delay));

}

function fetchWithRetry(url, delay, tries, fetchOptions = {}) {

	//console.log("fetchWithRetry top delay = "+delay+" tries = "+tries);
    
    function onError(err){

        triesLeft = tries - 1;
		
		//console.log("fetchWithRetry onError triesLeft = "+triesLeft);
        
        if(!triesLeft){
			//console.log("fetchWithRetry no more retries ");
            throw err;
        }
        
        return wait_for_retry(delay).then(() => fetchWithRetry(url, delay, triesLeft, fetchOptions));
    }

    return fetch(url,fetchOptions).catch(onError);
}

//
// Switch the search database
//
function SwitchTuneDatabase(){

	//console.log("SwitchTuneDatabase")

   	var theDatabase = document.getElementById("databaseselect").value;

   	switch (theDatabase){

   		case "0":

			gTheCurrentTuneDatabase = 0;

			if(!gTheParsedTuneDatabase){
				
				document.getElementById("status").innerHTML="&nbsp;&nbsp;&nbsp;Waiting for tune collection to load...";

				getTuneDatabase_DB(false,function(theTunes){

					//debugger;
					
					if (theTunes && (theTunes.length>0)){	

						//console.log("Heneghan database was found")

						var elem = document.getElementById("status");
				    	if (elem){
				        	document.getElementById("status").innerHTML="&nbsp;&nbsp;&nbsp;Ready to search";
				        }

				        gTheParsedTuneDatabase = theTunes[0];

					}
					else{

						//console.log("Heneghan tunes not in database, fetching...");

				   		// Fetch the Gavin Heneghan tune database
					    fetchWithRetry('https://michaeleskin.com/abctools/abctunes_gavin_heneghan_10nov2023.json',gTuneDatabaseRetryTimeMS,gTuneDatabaseRetryCount)
					    .then((response) => response.json())
					    .then((json) => {

					    	//console.log("got abctunes_gavin_heneghan_10nov2023 data");
					    	
					    	var elem = document.getElementById("status");
					    	if (elem){
				    			if (gTheCurrentTuneDatabase == 0){
					        		document.getElementById("status").innerHTML="&nbsp;&nbsp;&nbsp;Ready to search";
					        	}
					        }

					        gTheParsedTuneDatabase = json;

					        // Persist the database for later reads
					        saveTuneDatabase_DB(json, false);
					    })
					    .catch(function(error) {

					    	var elem = document.getElementById("status");

					    	if (elem){

					    		if (gTheCurrentTuneDatabase == 0){
					        		document.getElementById("status").innerHTML="&nbsp;&nbsp;&nbsp;Unable to load tune collection, please retry later...";
					        	}

					        }
					    }); 
					}
				});

			}
			else{
				document.getElementById("status").innerHTML="&nbsp;&nbsp;&nbsp;Ready to search";
			}


			// Reset the dialog fields
    		document.getElementById('search_results').value = "";

		    document.getElementById("search_result").innerHTML = "Search Results:";

			idleSearchResults();

	   		break;

   		case "1":

			gTheCurrentTuneDatabase = 1; 

			if(!gTheFolkFriendDatabase){
				
				document.getElementById("status").innerHTML="&nbsp;&nbsp;&nbsp;Waiting for tune collection to load...";
				
				getTuneDatabase_DB(true,function(theTunes){

					//debugger;
						
					if (theTunes && (theTunes.length>0)){
						
						//console.log("FolkFriend database was found")

						var elem = document.getElementById("status");
						if (elem){
				        	document.getElementById("status").innerHTML="&nbsp;&nbsp;&nbsp;Ready to search";
				        }

				        gTheFolkFriendDatabase = theTunes[0];

					}
					else{

						//console.log("FolkFriend tunes not in database, fetching...");

				   		// Fetch the FolkFriend database
					    fetchWithRetry('https://michaeleskin.com/abctools/folkfriend-non-user-data_22dec2023.json',gTuneDatabaseRetryTimeMS,gTuneDatabaseRetryCount)
					    .then((response) => response.json())
					    .then((json) => {

					    	//console.log("got folkfriend-non-user-data_21dec2023 data");
					    	
					    	var elem = document.getElementById("status");
					    	if (elem){
					    		if (gTheCurrentTuneDatabase == 1){
					        		document.getElementById("status").innerHTML="&nbsp;&nbsp;&nbsp;Ready to search";
					        	}
					        }

					        gTheFolkFriendDatabase = json;

					        // Persist the database for later reads
					        saveTuneDatabase_DB(json, true);

					    })
					    .catch(function(error) {
					    	
					    	var elem = document.getElementById("status");
					    	
					    	if (elem){
					    		if (gTheCurrentTuneDatabase == 1){
					        		document.getElementById("status").innerHTML="&nbsp;&nbsp;&nbsp;Unable to load tune collection, please retry later...";
					        	}

					        }
					    }); 
					}
				});
			}
			else{
				document.getElementById("status").innerHTML="&nbsp;&nbsp;&nbsp;Ready to search";
			}

			// Reset the dialog fields
    		document.getElementById('search_results').value = "";

		    document.getElementById("search_result").innerHTML = "Search Results:";

			idleSearchResults();

			break;
   	}

   	// Save the selection in browser storage
   	gDefaultTuneDatabase = gTheCurrentTuneDatabase;

   	SaveConfigurationSettings();
}

//
// Search for a tune 
//

var gTheParsedTuneDatabase = null;
var gTheFolkFriendDatabase = null;
var gTheCurrentTuneDatabase = 0;
var gTheMaxDatabaseResults = 25;
var gDefaultSearchCollection = 0;
var gTheTuneSearchStyle = "";
var gTheTuneSearchKey ="";
var gLastTuneSearchValue = "";

// Retry parameters
var gTuneDatabaseRetryTimeMS = 3000;
var gTuneDatabaseRetryCount = 10;

function AddFromSearch(e,callback){
	
	//console.log("AddFromSearch");

	// For tune selection
	const TOUCH_TIMEOUT_MILLISECONDS = 1000;
	var touch_count = 0;

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","AddFromSearch");

	if (e){
		e.preventDefault();
	}

	// Setup the default search collection
	gTheCurrentTuneDatabase = gDefaultTuneDatabase;

	var theHeight = window.innerHeight - 680;

	if (isMobileBrowser()){
		theHeight = window.innerHeight - 705;
	}

	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Tune Search Engine&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#tune_search_engine" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>';
	
	modal_msg+='<p style="font-size:12pt;line-height:24pt;margin-top:20px;margin-bottom:12px;" class="switchtunedatabase">Tune Collection to Search: <select id="databaseselect" onchange="SwitchTuneDatabase();" title="Select your tune search database"><option value="0">Gavin Heneghan\'s Collection (20,000+ Tune Settings)</option><option value="1">FolkFriend.app Collection (45,000+ Tune Settings)</option></select></p>';

	modal_msg+='<p style="font-size:12pt;line-height:24pt;margin-top:0px;margin-bottom:18px;">Search for text in the tune name:&nbsp;&nbsp;<input style="width:100%;font-size:12pt;line-height:18px;padding:6px;" id="tuneNameToSearch" title="Enter your search text here" autocomplete="off" autocorrect="off" placeholder="Enter your search text here"/> </p>';

	modal_msg+='<p class="tunesearchoptions">Only return first variation found?&nbsp;<input id="only_first_variation" type="checkbox" style="margin-top:-5px;margin-bottom:0px;" checked/>&nbsp;&nbsp;&nbsp;Match start of title?&nbsp;<input id="match_title_start" type="checkbox" style="margin-top:-5px;margin-bottom:0px;"/>&nbsp;&nbsp;&nbsp;Only return tunes with chords?&nbsp;<input id="chords_only" type="checkbox" style="margin-top:-5px;margin-bottom:0px;"/></p>';
	
	modal_msg+='<p class="tunesearchoptionsmax">Tune style:<select id="tunesearchstyle" onchange="SetTuneSearchStyle();" title="Tune style to search" style="margin-top:-7px;width:130px"><option value="">All Tunes</option> <option value="jig">Jigs</option> <option value="reel">Reels</option> <option value="slip jig">Slip Jigs</option> <option value="hornpipe">Hornpipes</option> <option value="polka">Polkas</option> <option value="slide">Slides</option> <option value="waltz">Waltzes</option> <option value="barndance">Barndances</option> <option value="strathspey">Strathspeys</option> <option value="three-two">Three-Twos</option> <option value="mazurka">Mazurkas</option> <option value="march">Marches</option></select>&nbsp;&nbsp;&nbsp;&nbsp;Key:<select id="tunesearchkey" onchange="SetTuneSearchKey();" title="Filter by Key/Mode" style="margin-top:-7px;width:130px;"><option value="">All Keys</option> <option value="Cmajor">C Major</option> <option value="Cdorian">C Dorian</option> <option value="Dmajor">D Major</option> <option value="Dmixolydian">D Mixolydian</option> <option value="Dminor">D Minor</option> <option value="Ddorian">D Dorian</option> <option value="Emajor">E Major</option> <option value="Emixolydian">E Mixolydian</option> <option value="Eminor">E Minor</option> <option value="Edorian">E Dorian</option> <option value="Fmajor">F Major</option> <option value="Fdorian">F Dorian</option> <option value="Gmajor">G Major</option> <option value="Gmixolydian">G Mixolydian</option> <option value="Gminor">G Minor</option> <option value="Gdorian">G Dorian</option> <option value="Amajor">A Major</option> <option value="Amixolydian">A Mixolydian</option> <option value="Aminor">A Minor</option> <option value="Adorian">A Dorian</option> <option value="Bminor">B Minor</option> <option value="Bmixolydian">B Mixolydian</option> <option value="Bdorian">B Dorian</option> </select>&nbsp;&nbsp;&nbsp;&nbsp;Maximum number of results:<select id="maxtunesearchresults" onchange="SetTuneSearchMaxResults();" title="Maximum number of results" style="margin-top:-7px;"><option value="10">10</option><option value="25">25</option><option value="50">50</option><option value="100">100</option></select></p>';

	modal_msg+='<p style="margin-top:10px;font-size:12pt;">	<input class="btn btn-start-search start-search" id="start-search" onclick="searchForTunes();" type="button" value="Search" title="Start search"><span id="status">&nbsp;&nbsp;&nbsp;Waiting for tune collection to load...</span></p>';

	modal_msg+='<div style="margin-bottom: 18px;">';

	modal_msg+='<h4 id="search_result">Search Results:</h4>';

	modal_msg+='<textarea id="search_results" style="font-family:Courier;font-size:13pt;line-height:16pt;width:724px;height:'+theHeight+'px;padding:6px" placeholder="Search results will appear here" spellcheck="false" autocorrect="off" autocapitalize="none" spellcheck="false" oninput="idleSearchResults()"></textarea>';

	modal_msg+='<p style="margin-top:20px;text-align: center;">';
	
	if (isPureDesktopBrowser()){
		modal_msg+='Select text to add or add all text if no selection.&nbsp;&nbsp;Triple-click or Alt-click to select an entire tune.<br/><br/>';
	}
	else{
		modal_msg+='Select text to add or add all text if no selection.&nbsp;&nbsp;Click once in a tune to select it.<br/><br/>';		
	}

	modal_msg += '<input class="btn btn-add-search-results add-search-results-disabled" id="add-search-results" onclick="addSearchResults();" type="button" value="Add Results to Tunebook" title="Add Results to Tunebook.&nbsp;&nbsp;If there is a text selection, only the selected text will be added, otherwise all the text will be added.">';

	modal_msg+='</p>';

	var theWidth = 800;

	if (giPadTwoColumn){
		theWidth = 900;
	}

    DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 25, width: theWidth,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){
    	if (callback){
    		callback();
    	}
    })

    // Default initial max results to 25
	document.getElementById("maxtunesearchresults").value = "25";
	gTheMaxDatabaseResults = 25;

	// Initially search all tunes
	document.getElementById("tunesearchstyle").value = "";
	gTheTuneSearchStyle = "";

	// Initially search all keys
	document.getElementById("tunesearchkey").value = "";
	gTheTuneSearchKey = "";

	document.getElementById("add-search-results").disabled = true;

	document.getElementById("tuneNameToSearch").addEventListener("keydown", function(event) {

    	// Check if the pressed key is Enter 
	    if (event.key === "Enter") {
	        event.stopPropagation();
	        event.preventDefault();
	        searchForTunes();
	    }
	});

	if (isPureDesktopBrowser()){

		document.getElementById('search_results').addEventListener('click', function(event){

	        if ((event.detail === 3) || (event.altKey)) {  // Triple-click or Alt-click detected
	            const textarea = event.target;
	            const text = textarea.value;
	            const selectionStart = textarea.selectionStart;

	            // Find the start by searching backwards for a line that starts with 'X:'
	            let start = text.lastIndexOf('\nX:', selectionStart);
	            if (start === -1) {
	                start = text.indexOf('X:', 0); // If no previous 'X:' is found, find the first
	            } else {
	                start++;  // Move past the newline character before 'X:'
	            }

	            // Find the end by searching for a blank line or the end of the text
	            var end = text.indexOf('\n\n', selectionStart); // Find double newline (blank line)
	            var end2 = text.indexOf('X:', selectionStart); // Find next tune

	            if ((end===-1) && (end2===-1)) {
	                end = text.length; // If no blank line, go to the end of the text
	            }
	            else{
	            	if (end===-1){
	            		end = end2;
	            	}
	            	else
	            	if (end >= end2){
	            		end = end2;
	            	}
	            }

	            // Select the text from 'X:' line to the blank line or end of text
	            textarea.setSelectionRange(start, end);
	        }
    	});
	}
	else{

		document.getElementById('search_results').addEventListener('click', function(event){
			
            const textarea = event.target;
            const text = textarea.value;
            const selectionStart = textarea.selectionStart;

            // Find the start by searching backwards for a line that starts with 'X:'
            let start = text.lastIndexOf('\nX:', selectionStart);
            if (start === -1) {
                start = text.indexOf('X:', 0); // If no previous 'X:' is found, find the first
            } else {
                start++;  // Move past the newline character before 'X:'
            }

            // Find the end by searching for a blank line or the end of the text
            let end = text.indexOf('\n\n', selectionStart); // Find double newline (blank line)
            if (end === -1) {
                end = text.length; // If no blank line, go to the end of the text
            }

            // Select the text from 'X:' line to the blank line or end of text
            textarea.setSelectionRange(start, end);

    	});

	}


	// Load the default database
	if (gTheCurrentTuneDatabase == 0){

		document.getElementById("databaseselect").value = "0"

	}
	else{

		document.getElementById("databaseselect").value = "1"

	}

   	// Set the last tune search value
	document.getElementById("tuneNameToSearch").value = gLastTuneSearchValue;

	SwitchTuneDatabase();

}

//
// Change the tune order using up and down buttons for mobile
// Drag and drop not available on mobile browsers
//

function ChangeTuneOrderMobileSelect(item){

	if (ChangeTuneOrderCurrent){
		ChangeTuneOrderCurrent.classList.remove('draggable_tune_mobile_selected');
	}

	ChangeTuneOrderCurrent = item;

	item.classList.add('draggable_tune_mobile_selected');

}

function ChangeTuneOrderMobileUp(){

	//console.log("ChangeTuneOrderMobileUp");

	if (ChangeTuneOrderCurrent == null){
		return;
	}

	// Find the previous sibling div
	var previousSibling = ChangeTuneOrderCurrent.previousElementSibling;

	// Check if there is a previous sibling 
	if (previousSibling == null) {

		// Already at the top
		//console.log("Already at the top");
		return;
	}

	const sortableList = document.getElementById('sortable-tune-list-mobile');

	sortableList.insertBefore(ChangeTuneOrderCurrent,previousSibling);

	const childDivs = document.querySelectorAll('#sortable-tune-list-mobile .draggable_tune_mobile');

	// Extract and display data_tune_index values
	ChangeTuneOrderNewOrder = Array.from(childDivs).map(div => div.getAttribute('data_tune_index'));
}

function ChangeTuneOrderMobileDown(){

	//console.log("ChangeTuneOrderMobileDown");

	if (ChangeTuneOrderCurrent == null){
		return;
	}

	// Find the next sibling div
	var nextSibling = ChangeTuneOrderCurrent.nextElementSibling;

	// Check if there is a next sibling
	if (nextSibling == null) {
		//console.log("Already at the bottom");
		return;
	}

	var prevSibling = nextSibling;
	nextSibling = nextSibling.nextElementSibling;

	const sortableList = document.getElementById('sortable-tune-list-mobile');

	// Check if there is a next sibling

	// Special handling of the last item
	if (nextSibling == null) {
		sortableList.insertBefore(prevSibling, ChangeTuneOrderCurrent);
	}
	else{

		sortableList.insertBefore(ChangeTuneOrderCurrent, nextSibling);
	}

	const childDivs = document.querySelectorAll('#sortable-tune-list-mobile .draggable_tune_mobile');

	// Extract and display data_tune_index values
	ChangeTuneOrderNewOrder = Array.from(childDivs).map(div => div.getAttribute('data_tune_index'));

}

var ChangeTuneOrderCurrent = null;
var ChangeTuneOrderOriginalOrder = [];
var ChangeTuneOrderNewOrder = [];

function ChangeTuneOrderMobile(){

	//console.log("ChangeTuneOrderMobile");

	var i,j,k;

	var ChangeTuneOrderOriginalOrder = [];
	ChangeTuneOrderNewOrder = [];

	ChangeTuneOrderCurrent = null;

	totalTunes = CountTunes();

	var theTitles = GetTunebookIndexTitles();
	var nTitles = theTitles.length;

	if (nTitles == 0){

		var thePrompt = "No tunes to reorder.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	var theData = {};

	// MAE 14 Jul 2024 - Make the div fill the screen
	var theHeight = window.innerHeight - 430;

	var theSortableDiv = '<div id="sortable-tune-list-mobile" style="overflow:auto;height:'+theHeight+'px;margin-top:18px">';

	for (i=0;i<nTitles;++i){

		theSortableDiv += '<div class="draggable_tune_mobile" data_tune_index="'+i+'" onclick="ChangeTuneOrderMobileSelect(this)">'+theTitles[i]+'</div>';
	}
	
	theSortableDiv += '</div>';

	var form = [

		{html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Change the Order of the Tunes&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#change_tune_order" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
		{html: theSortableDiv},
		{html: '<p style="text-align:center;margin-top:36px;"><input id="mobile_tune_order_up" class="advancedcontrols btn btn-injectcontrols-headers" onclick="ChangeTuneOrderMobileUp(this);" type="button" value="Move Up" title="Moves the currently selected tune up one position"><input id="mobile_tune_order_down" class="advancedcontrols btn btn-injectcontrols-headers" onclick="ChangeTuneOrderMobileDown(this);" type="button" value="Move Down" title="Moves the currently selected tune down one position"></p>'}
	];

	setTimeout(function(){

	    const childDivs = document.querySelectorAll('#sortable-tune-list-mobile .draggable_tune_mobile');

		// Extract and display data_tune_index values
		ChangeTuneOrderNewOrder = Array.from(childDivs).map(div => div.getAttribute('data_tune_index'));

		// Clone it
		ChangeTuneOrderOriginalOrder = ChangeTuneOrderNewOrder.slice();

	},100);

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 25, width: 650, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){

    	if (!args.canceled){

    		var bGotChange = false;

    		for (i=0;i<totalTunes;++i){
    			if (ChangeTuneOrderNewOrder[i] != ChangeTuneOrderOriginalOrder[i]){
    				bGotChange = true;
    				break;
    			}
    		}

    		// If no change, exit
    		if (!bGotChange){

    			//console.log("No order change detected!")
    			return;
    		}

			var thePrompt = "Are you sure you want to change the order of the tunes in your tunebook?";

			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.confirm(thePrompt,{ top:200, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

				if (!args.canceled){

		    		// Reorder the tunes
		    		var theABC = gTheABC.value;

		    		var result = FindPreTuneHeader(theABC);

		    		for (i=0;i<totalTunes;++i){
		    			
		    			var thisTune = getTuneByIndex(parseInt(ChangeTuneOrderNewOrder[i]));

		    			thisTune = thisTune.trim();

		    			// Make sure every tune has a carriage return after it
		    			thisTune+="\n\n";

		    			result += thisTune;
		    		}

		    		// Stuff in the new result
		    		setABCEditorText(result);

		    		RenderAsync(true,null, function(){

						gTheABC.selectionStart = 0;
						gTheABC.selectionEnd = 0;

						// And reset the focus
						gTheABC.focus();	

						// Scroll to the top
						MakeTuneVisible(true);

		    		});

		    		// Set dirty
					gIsDirty = true;

		    	}

		   });

		}

    });

}

//
// Change the tune order using drag and drop
//
function ChangeTuneOrder(){

	var i,j,k;

	var originalOrder = [];
	var newOrder = [];

	ChangeTuneOrderCurrent = null;

	totalTunes = CountTunes();

	var theTitles = GetTunebookIndexTitles();
	var nTitles = theTitles.length;

	if (nTitles == 0){

		var thePrompt = "No tunes to reorder.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	var theData = {};

	// MAE 14 Jul 2024 - Make the div fill the screen
	var theHeight = window.innerHeight - 380;

	var theSortableDiv = '<div id="sortable-tune-list" style="overflow:auto;height:'+theHeight+'px;margin-top:18px">';

	for (i=0;i<nTitles;++i){

		theSortableDiv += '<div class="draggable_tune" draggable="true" data_tune_index="'+i+'">'+theTitles[i]+'</div>';
	}
	
	theSortableDiv += '</div>';

	var form = [

		{html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Change the Order of the Tunes&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#change_tune_order" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
		{html: '<p style="margin-top:18px;font-size:12pt;">Drag and drop the tune names to change the order of the tunes in the tunebook:</p>'},
		{html: theSortableDiv}
	];

	setTimeout(function(){

	    const childDivs = document.querySelectorAll('#sortable-tune-list .draggable_tune');

		// Extract and display data_tune_index values
		newOrder = Array.from(childDivs).map(div => div.getAttribute('data_tune_index'));

		// Clone it
		originalOrder = newOrder.slice();

	},100);

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 25, width: 650, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){

    	if (!args.canceled){

    		var bGotChange = false;

    		for (i=0;i<totalTunes;++i){
    			if (newOrder[i] != originalOrder[i]){
    				bGotChange = true;
    				break;
    			}
    		}

    		// If no change, exit
    		if (!bGotChange){

    			//console.log("No order change detected!")
    			return;
    		}

			var thePrompt = "Are you sure you want to change the order of the tunes in your tunebook?";

			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.confirm(thePrompt,{ top:200, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

				if (!args.canceled){

		    		// Reorder the tunes
		    		var theABC = gTheABC.value;

		    		var result = FindPreTuneHeader(theABC);

		    		for (i=0;i<totalTunes;++i){
		    			
		    			var thisTune = getTuneByIndex(parseInt(newOrder[i]));

		    			thisTune = thisTune.trim();

		    			// Make sure every tune has a carriage return after it
		    			thisTune+="\n\n";

		    			result += thisTune;
		    		}

		    		// Stuff in the new result
		    		setABCEditorText(result);

		    		RenderAsync(true,null, function(){

						gTheABC.selectionStart = 0;
						gTheABC.selectionEnd = 0;

						// And reset the focus
						gTheABC.focus();	

						// Scroll to the top
						MakeTuneVisible(true);

		    		});

		    		// Set dirty
					gIsDirty = true;


		    	}
		    });
		}

    });

	const sortableList = document.getElementById('sortable-tune-list');

	let dragItem = null;

	sortableList.addEventListener('click', function (e) {

		var theTarget = e.target;

		if (theTarget.classList && theTarget.classList.contains('draggable_tune')){
		
			dragItem = theTarget;

			if (ChangeTuneOrderCurrent){
				ChangeTuneOrderCurrent.classList.remove('draggable_tune_selected');
			}

			ChangeTuneOrderCurrent = dragItem;

			dragItem.classList.add('draggable_tune_selected');
		}

	});
	
	// Add drag and drop event listeners
	sortableList.addEventListener('dragstart', function (e) {
		
		dragItem = e.target;
		e.dataTransfer.effectAllowed = 'move';
		e.dataTransfer.setData('text/plain', dragItem.innerHTML);

		if (ChangeTuneOrderCurrent){
			ChangeTuneOrderCurrent.classList.remove('draggable_tune_selected');
		}

		ChangeTuneOrderCurrent = dragItem;

		dragItem.classList.add('draggable_tune_selected');

	});

	sortableList.addEventListener('dragover', function (e) {
		e.preventDefault();
		const target = e.target;
		if (target && target !== dragItem && target.classList.contains('draggable_tune')) {

			const rect = target.getBoundingClientRect();
			
			const next = (e.clientY - rect.top) / (rect.bottom - rect.top) > 0.5;
			
			sortableList.insertBefore(dragItem, next ? target.nextElementSibling : target);

	    	const childDivs = document.querySelectorAll('#sortable-tune-list .draggable_tune');

			// Extract and display data_tune_index values
			newOrder = Array.from(childDivs).map(div => div.getAttribute('data_tune_index'));

		}

	});

	sortableList.addEventListener('dragend', function () {
		dragItem = null;
	});

}

//
// Cull tunes from the tunebook
//

function CullTunesUpdateKeepList(){

	// Reset the keep list
	CullTunesKeepList = [];

	const childDivs = document.querySelectorAll('#cullable-tune-list .cullable_tune');

	Array.from(childDivs).map(div => 
	{
		if (div.classList.contains('cull_selected')){
			CullTunesKeepList.push(0);
		}
		else{
			CullTunesKeepList.push(1);
		}
	});
}

function CullToggleSelection(item) {
  	item.classList.toggle('cull_selected');
  	CullTunesUpdateKeepList();
}

function CullSelectAll(){
	const childDivs = document.querySelectorAll('#cullable-tune-list .cullable_tune');
	Array.from(childDivs).map(div => div.classList.add('cull_selected'));
  	CullTunesUpdateKeepList();
}

function CullClearSelection(){
	const childDivs = document.querySelectorAll('#cullable-tune-list .cullable_tune');
	Array.from(childDivs).map(div => div.classList.remove('cull_selected'));
  	CullTunesUpdateKeepList();
}

var CullTunesKeepList = [];

function CullTunes(){

	var i,j,k;

	// Clear the delete list
	CullTunesKeepList = [];

	totalTunes = CountTunes();

	var theTitles = GetTunebookIndexTitles();
	var nTitles = theTitles.length;

	if (nTitles == 0){

		var thePrompt = "No tunes to delete.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	var theData = {};

	// MAE 14 Jul 2024 - Make the div fill the screen
	var theHeight = window.innerHeight - 410;

	var theCullableDiv = '<div id="cullable-tune-list" style="overflow:auto;height:'+theHeight+'px;margin-top:18px">';

	for (i=0;i<nTitles;++i){

		theCullableDiv += '<div class="cullable_tune" onclick="CullToggleSelection(this)">'+theTitles[i]+'</div>';
	}
	
	theCullableDiv += '</div>';

	var form = [

		{html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Delete Selected Tunes&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#delete_selected_tunes" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
		{html: theCullableDiv},
		{html: '<p style="text-align:center;margin-top:36px;"><input id="cull_select_all" class="advancedcontrols btn btn-injectcontrols-headers" onclick="CullSelectAll();" type="button" value="Select All" title="Selects all the tunes for deletion"><input id="cull_clear_selection" class="advancedcontrols btn btn-injectcontrols-headers" onclick="CullClearSelection();" type="button" value="Clear Selection" title="Unselects all the tunes for deletion"></p>'}
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 25, width: 650, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false, okText:"Delete" } ).then(function(args){

    	if (!args.canceled){

    		// Any tunes to delete?
    		var nKeep = CullTunesKeepList.length;
    		var nToDelete = 0;
    		for (i=0;i<nKeep;++i){
    			if (CullTunesKeepList[i] == 0){
    				bGotChange = true;
    				nToDelete ++;
    			}
    		}

    		if (nToDelete){

				var thePrompt = "Are you sure you want to delete "+nToDelete;

				if (nToDelete == 1){
					thePrompt += " tune from your tunebook?";
				}
				else{
					thePrompt += " tunes from your tunebook?";

				}

				// Center the string in the prompt
				thePrompt = makeCenteredPromptString(thePrompt);

				DayPilot.Modal.confirm(thePrompt,{ top:200, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){
					if (!args.canceled){

						// Reorder the tunes
			    		var theABC = gTheABC.value;

			    		var result = FindPreTuneHeader(theABC);

			    		for (i=0;i<totalTunes;++i){

			    			if (CullTunesKeepList[i] == 1){
			    			
				    			var thisTune = getTuneByIndex(i);

				    			thisTune = thisTune.trim();

				    			// Make sure every tune has a carriage return after it
				    			thisTune+="\n\n";

				    			result += thisTune;
				    		}
			    		}

			    		// Stuff in the new result
			    		setABCEditorText(result);

			    		RenderAsync(true,null, function(){

							gTheABC.selectionStart = 0;
							gTheABC.selectionEnd = 0;

							// And reset the focus
							gTheABC.focus();	

							// Scroll to the top
							MakeTuneVisible(true);

			    		});

			    		// Set dirty
						gIsDirty = true;
					}
				})
			}
		}
    });
}


//
// Create a set of tunes
//
function removeExtraTags(abcText,theTag) {

     // Split the ABC into lines
    let lines = abcText.split('\n');

    // Flag to track if the first tag has been found
    let firstTag = false;

    theTag = theTag+":";

    // Filter lines to keep the first tag and remove subsequent ones
    lines = lines.filter(line => {
        if (line.startsWith(theTag)) {
            if (!firstTag) {
                firstTag = true;
                return true; // Keep the first tag
            }
            return false; // Skip subsequent tag lines
        }
        return line.trim() !== ''; // Keep non-blank lines
    });

    // Join the lines back into a single string
    return lines.join('\n');
}

function removeAllTags(abcText,theTag) {

     // Split the ABC into lines
    let lines = abcText.split('\n');

    theTag = theTag+":";

    // Filter lines 
    lines = lines.filter(line => {
        if (line.startsWith(theTag)) {
            return false; // Skip all tag lines
        }
        return line.trim() !== ''; // Keep non-blank lines
    });

    // Join the lines back into a single string
    return lines.join('\n');
}


function generateIndexedRepeatedString(str, itemCount, repeatCount) {
    let result = [];
    for (let i = 0; i < itemCount && i < str.length; i++) {
        result.push(`${str[i].repeat(repeatCount)}`);
    }
    return result.join('');
}

function processTuneSet(tuneSet,tuneNames,bRepeat,nRepeat,bIsVerbose) {

	var setName = tuneNames.join(' / ');

	var lines = tuneSet.split(/\r?\n/);

	var nonBlankLines = lines.filter(line => line.trim() !== '');

	var firstXFound = false;

	var partLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	var partIndex = 1;

	if (bRepeat){
		var partsControlString = generateIndexedRepeatedString(partLetters,tuneNames.length,nRepeat);
	}

	var output = nonBlankLines.map(line => {
		if (line.startsWith('X:')) {

			if (!firstXFound) {
			
				firstXFound = true;

        if (bIsVerbose){

          line = line + "\n%\n% Title and subtitle fonts\n%%titlefont "+gRenderingFonts.titlefont+"\n"+"%%subtitlefont "+gRenderingFonts.titlefont+"\n%\n% Tune set title\nT:"+setName+"\n%\n% If you delete the tune set title T tag, delete the next line\n%hide_first_title_on_play\n%\n% Hide the rhythm tag\n%hide_rhythm_tag\n%\n% Hide cautionary key signatures\n%hide_cautionary_ks\n%\n% Hide any vskip space in the Player\n%hide_vskip_on_play\n%\n% To fit the set on a PDF page, increase the staffwidth value.\n% 850 often works for a set of three four-stave tunes.\n%\n%%staffwidth 556\n%\n% Last measure fills the staff width\n%%stretchlast true\n%\n";
  			
  				if (bRepeat){
  					line = line + "% Expand the parts in the Player\n%play_flatten_parts\n%\n% Remove the x from the start of the next line to always hide all\n% P tag text in the notation and the Player.\n% Even if the P tags are hidden, the tunes will play multiple times.\n%xhide_part_tags\n%\n% Delete the next line to show the P tag text in the Player.\n% If %hide_parts_tags is present above, it takes precedence.\n%hide_player_part_tags\n%\n% Parts play order\nP:"+partsControlString+"\n%\nP:A\n%";
  				}

        }
        else{

          line = line + "\n%\n%%titlefont "+gRenderingFonts.titlefont+"\n"+"%%subtitlefont "+gRenderingFonts.titlefont+"\n%\nT:"+setName+"\n%\n%hide_first_title_on_play\n%hide_rhythm_tag\n%hide_cautionary_ks\n%hide_vskip_on_play\n%%staffwidth 556\n%%stretchlast true\n%\n";
        
          if (bRepeat){
            line = line + "%play_flatten_parts\n%xhide_part_tags\n%hide_player_part_tags\n%\nP:"+partsControlString+"\n%\nP:A\n%";
          }

        }

				return line;

			} else {

				if (bRepeat){

          if (bIsVerbose){
					 return '%\n% Put some space before the next tune\n%%text\n%\nP:'+partLetters[partIndex++]+"\n%";
          }
          else{
           return '%\n%%text\n%\nP:'+partLetters[partIndex++]+"\n%";            
          }

				}
				else{

          if (bIsVerbose){
           return '%\n% Put some space before the next tune\n%%text\n%';
          }
          else{
           return '%\n%%text\n%';            
          }

				}

			}

		} else {

			return line;

		}
	});

	tuneSet = output.join('\n');

	tuneSet = removeAllTags(tuneSet,"C");		
	tuneSet = removeAllTags(tuneSet,"A");		
	tuneSet = removeAllTags(tuneSet,"O");		
	tuneSet = removeAllTags(tuneSet,"Z");		
	tuneSet = removeAllTags(tuneSet,"N");		
	tuneSet = removeAllTags(tuneSet,"B");		
	tuneSet = removeAllTags(tuneSet,"S");		
	tuneSet = removeAllTags(tuneSet,"I");		
	tuneSet = removeAllTags(tuneSet,"D");		
	tuneSet = removeAllTags(tuneSet,"W");		
	tuneSet = removeAllTags(tuneSet,"w");		

  if (bIsVerbose){

	 tuneSet += '\n%\n% Put some space before the next tune\n%%text\n\n';

  }
  else{

   tuneSet += '\n%\n%%text\n\n'; 

  }

	return tuneSet;
}

function BuildTuneSetToggleSelection(item) {

    item.classList.toggle('tuneset_selected');

    const index = BuildTuneSetSelectionOrder.indexOf(item);
    
    if (item.classList.contains('tuneset_selected')) {
        if (index === -1) {
            BuildTuneSetSelectionOrder.push(item);
        }
    } else {
        if (index !== -1) {
            BuildTuneSetSelectionOrder.splice(index, 1);
        }
    }

    updateTuneSelectionNumbers();
}

function updateTuneSelectionNumbers() {

    const allItems = document.querySelectorAll('#tuneset-tune-list .tuneset_tune');

    allItems.forEach(item => {
        const numberTag = item.querySelector('.tuneset-selection-number');
        if (numberTag) {
            item.removeChild(numberTag);
        }
    });

    BuildTuneSetSelectionOrder.forEach((item, index) => {
        let tag = document.createElement('span');
        tag.className = 'tuneset-selection-number';
        tag.textContent = ` ${index + 1}`;
		item.appendChild(tag);
    });

}

function BuildTuneSetSelectAll(){

	const childDivs = document.querySelectorAll('#tuneset-tune-list .tuneset_tune');

	BuildTuneSetSelectionOrder = []; // reset

	Array.from(childDivs).forEach(div => {
		div.classList.add('tuneset_selected');
		BuildTuneSetSelectionOrder.push(div);
	});

	updateTuneSelectionNumbers();

}

function BuildTuneSetOpen(bOpenInNewTabInEditor){

	//debugger;

	var bRepeat = false;
	var nRepeat = 1;
  var bIsVerbose = true;

	var elem = document.querySelector("input[name=repeat_enable]");

	if (elem){
		bRepeat = elem.checked;
	}

	BuildTuneSetRepeat = bRepeat;

	elem = document.querySelector("input[name=repeat_count]");

	if (elem){
		nRepeat = elem.value;
	}

	nRepeat = parseInt(nRepeat);

	if (isNaN(nRepeat)){
		nRepeat = 1;
	}

	if (nRepeat < 1){
		nRepeat = 1;
	}

	BuildTuneSetRepeatCount = nRepeat;

  elem = document.querySelector("input[name=is_verbose]");

  if (elem){
    bIsVerbose = elem.checked;
  }

  BuildTuneSetVerbose = bIsVerbose;

  //console.log("bRepeat "+bRepeat+" nRepeat "+nRepeat+ " bIsVerbose "+bIsVerbose);

	// Save the settings for next time
	SaveConfigurationSettings();

	if (nRepeat == 1){
		bRepeat = false;
	}

	// Any tunes in set?
	var nTunesInSet = BuildTuneSetSelectionOrder.length;

	if (nTunesInSet === 0) {

		var thePrompt = "No tunes selected for the set.";
		thePrompt = makeCenteredPromptString(thePrompt);
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });
		return;

	}

	// Process the tune set
	var theABC = gTheABC.value;
	var tuneSet = "";
	var setNames = [];

	// Add selected tunes in order
	for (i = 0; i < BuildTuneSetSelectionOrder.length; ++i) {

		const tuneElement = BuildTuneSetSelectionOrder[i];
		
		const tuneName = tuneElement.textContent.trim().replace(/\s+\d+$/, ''); // Remove number tag
		
		const index = GetTunebookIndexTitles().indexOf(tuneName);
		
		if (index !== -1) {
			const tuneABC = getTuneByIndex(index).trim() + "\n\n";
			tuneSet += tuneABC;
			setNames.push(tuneName);
		}

	}

	tuneSet = processTuneSet(tuneSet, setNames, bRepeat, nRepeat, bIsVerbose);

	var tuneSetName = setNames.join(' / ');
	
	if (nTunesInSet){

		// Keep track of actions
		sendGoogleAnalytics("action","TuneSetNewTab");

		var result = FindPreTuneHeader(theABC);

		result = result.trim();
		
		if (result.length > 0){
			result += "\n\n";
		}

		tuneSet = tuneSet.trim();
		tuneSet += "\n";

		result += tuneSet;

		var theURL = FillUrlBoxWithAbcInLZW(result,false);

		if (bOpenInNewTabInEditor){

			theURL += "&editor=1";

		}
		else{

			theURL += "&play=1";

		}

		if (theURL.length >= 8100 ){

			DayPilot.Modal.alert('<p style="text-align:center;font-family:helvetica;font-size:12pt;">The Share URL for the tune set is too long to open in a new tab.</p>',{ theme: "modal_flat", top: 230, scrollWithPage: (AllowDialogsToScroll()) });

			return;

		}

		var w = window.open(theURL);

		return;

	}

}

function BuildTuneSetAppend(){

	//debugger;

	var bRepeat = false;
	var nRepeat = 1;
  var bIsVerbose = true;

	var elem = document.querySelector("input[name=repeat_enable]");

	if (elem){
		bRepeat = elem.checked;
	}

	BuildTuneSetRepeat = bRepeat;

	elem = document.querySelector("input[name=repeat_count]");

	if (elem){
		nRepeat = elem.value;
	}

	nRepeat = parseInt(nRepeat);

	if (isNaN(nRepeat)){
		nRepeat = 1;
	}

	if (nRepeat < 1){
		nRepeat = 1;
	}

	BuildTuneSetRepeatCount = nRepeat;

  elem = document.querySelector("input[name=is_verbose]");

  if (elem){
    bIsVerbose = elem.checked;
  }
  
  BuildTuneSetVerbose = bIsVerbose;

	//console.log("bRepeat "+bRepeat+" nRepeat "+nRepeat+ " bIsVerbose "+bIsVerbose);

	// Save the settings for next time
	SaveConfigurationSettings();

	if (nRepeat == 1){
		bRepeat = false;
	}

	// Any tunes in set?
	var nTunesInSet = BuildTuneSetSelectionOrder.length;

	if (nTunesInSet === 0) {

		var thePrompt = "No tunes selected for the set.";
		thePrompt = makeCenteredPromptString(thePrompt);
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });
		return;

	}

	// Process the tune set
	var theABC = gTheABC.value;
	var tuneSet = "";
	var setNames = [];

	// Add selected tunes in order
	for (i = 0; i < BuildTuneSetSelectionOrder.length; ++i) {

		const tuneElement = BuildTuneSetSelectionOrder[i];
		
		const tuneName = tuneElement.textContent.trim().replace(/\s+\d+$/, ''); // Remove number tag
		
		const index = GetTunebookIndexTitles().indexOf(tuneName);
		
		if (index !== -1) {
			const tuneABC = getTuneByIndex(index).trim() + "\n\n";
			tuneSet += tuneABC;
			setNames.push(tuneName);
		}

	}

	tuneSet = processTuneSet(tuneSet, setNames, bRepeat, nRepeat, bIsVerbose);

	var tuneSetName = setNames.join(' / ');
	
	if (nTunesInSet){

		var thePrompt = "Are you sure you want to create a set:<br/><br/>"+tuneSetName+"<br/><br/>"; 

		if (nTunesInSet == 1){

			thePrompt += " from the 1 tune in your tunebook<br/><br/>";

		}
		else{

			thePrompt += " from the "+nTunesInSet+" tunes in your tunebook?<br/><br/>";

		}
		
		thePrompt += "The set will be added to the end of the ABC.";

		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);

		DayPilot.Modal.confirm(thePrompt,{ top:200, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

			if (!args.canceled){

				// Keep track of actions
				sendGoogleAnalytics("action","TuneSetAppend");

				theABC = theABC.trim()+"\n\n"+tuneSet;

	    		// Stuff in the new result
	    		setABCEditorText(theABC);

          const scrollY = window.scrollY || document.documentElement.scrollTop;

	    		RenderAsync(true,null, function(){

          if (AllowDialogsToScroll()){
            window.scrollTo(0, scrollY);
          }

					var theTune = getTuneByIndex(totalTunes);

					var tuneOffset = theABC.length-tuneSet.length;

					if (!gIsMaximized){

						// Scroll the tune ABC into view
					    ScrollABCTextIntoView(gTheABC,tuneOffset,tuneOffset,10);

					    if (isMobileBrowser()){
				    		gTheABC.blur();
					    	return;
					    }
					    
				    	gTheABC.blur();
				    	gTheABC.focus();

				    }

            if (!AllowDialogsToScroll()){
    					// Scroll the tune into view
    					MakeTuneVisible(true);
            }

	    		});

	    		// Set dirty
				gIsDirty = true;
				
			}
		})

	}

}

function BuildTuneSetClearSelection(){

    const childDivs = document.querySelectorAll('#tuneset-tune-list .tuneset_tune');
    Array.from(childDivs).map(div => div.classList.remove('tuneset_selected'));

    BuildTuneSetSelectionOrder = [];
    updateTuneSelectionNumbers();
}

var BuildTuneSetSelectionOrder = [];
var BuildTuneSetRepeat = false;
var BuildTuneSetRepeatCount = 1
var BuildTuneSetVerbose = true;

function BuildTuneSet(){

	var i,j,k;

	// Clear the tune set list
	BuildTuneSetSelectionOrder = [];

	totalTunes = CountTunes();

	var theTitles = GetTunebookIndexTitles();
	var nTitles = theTitles.length;

	if (nTitles == 0){

		var thePrompt = "No tunes to create a set from.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	var theData = {
		repeat_enable:BuildTuneSetRepeat,
		repeat_count:BuildTuneSetRepeatCount,
    is_verbose:BuildTuneSetVerbose
	};

	// MAE 14 Jul 2024 - Make the div fill the screen
	var theHeight = window.innerHeight - 630;

	var theTuneSetDiv = '<div id="tuneset-tune-list" style="overflow:auto;height:'+theHeight+'px;margin-top:12px;margin-bottom:18px;">';

	for (i=0;i<nTitles;++i){

		theTuneSetDiv += '<div class="tuneset_tune" onclick="BuildTuneSetToggleSelection(this)">'+theTitles[i]+'</div>';
	}
	
	theTuneSetDiv += '</div>';

	var form = [

		{html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Create Tune Set&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#hamburger_create_tune_set" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
		{html: '<p style="margin-top:8px;margin-bottom:12px;font-size:12pt;line-height:18pt;font-family:helvetica">Select the tunes you want in a tune set, then choose one of the three actions below:</p>'},  
		{html: '<p style="text-align:center;margin-top:14px;"><input id="tuneset_select_all" class="advancedcontrols btn btn-injectcontrols-headers" onclick="BuildTuneSetSelectAll();" type="button" value="Select All" title="Selects all the tunes for set creation"><input id="tuneset_clear_selection" class="advancedcontrols btn btn-injectcontrols-headers" onclick="BuildTuneSetClearSelection();" type="button" value="Clear Selection" title="Unselects all the tunes for set creation"></p>'},
		{html: theTuneSetDiv},
      {name: "          Include verbose annotation descriptions", id: "is_verbose", type:"checkbox", cssClass:"create_tune_set_text_checkbox"},
	  	{name: "          Repeat each tune in the set when played", id: "repeat_enable", type:"checkbox", cssClass:"create_tune_set_text_checkbox"},
	    {name: "Repeat count:", id: "repeat_count", type:"number", cssClass:"create_tune_set_text"},
		{html: '<p style="text-align:center;margin-top:18px;margin-bottom:20px"><input id="tuneset_open_in_player" style="margin-right:18px;" class="advancedcontrols btn btn-tuneset-inject" onclick="BuildTuneSetOpen(false);" type="button" value="Open in New Tab in Player" title="Opens the tune set in a new tab in the Player"><input id="tuneset_open_in_editor" style="margin-right:18px;" class="advancedcontrols btn btn-tuneset-inject" onclick="BuildTuneSetOpen(true);" type="button" value="Open in New Tab in Editor" title="Opens the tune set in a new tab in the Editor"><input id="tuneset_append_to_abc" class="advancedcontrols btn btn-tuneset-inject" onclick="BuildTuneSetAppend();" type="button" value="Append to ABC" title="Appends the tune set to the current ABC"></p>'}
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 25, width: 700, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){

    	if (!args.canceled){

    		var bRepeat = args.result.repeat_enable;
    		BuildTuneSetRepeat = bRepeat;

        var bIsVerbose = args.result.is_verbose;
        BuildTuneSetVerbose = bIsVerbose;

    		var nRepeat = args.result.repeat_count;

    		nRepeat = parseInt(nRepeat);

    		if (isNaN(nRepeat)){
    			nRepeat = 1;
    		}

    		if (nRepeat < 1){
    			nRepeat = 1;
    		}

    		BuildTuneSetRepeatCount = nRepeat;

    		//console.log("bRepeat "+bRepeat+" nRepeat "+nRepeat);

    		// Save the settings for next time
   			SaveConfigurationSettings();

   			return;

   		}

 
    });
}

//
// Add an ABC file, sample tune, or template
//
var gAddABCOKButton = null;

function Configure_AddABC_UI(){

	//console.log("Configure_AddABC_UI");

	var old_gFeaturesShowSearch = gFeaturesShowSearch;
	var old_gFeaturesShowExamples = gFeaturesShowExamples;
	var old_gFeaturesShowTemplates = gFeaturesShowTemplates;

	// Setup initial values
	const theData = {
	  showsearch: gFeaturesShowSearch,
	  showexampletunes: gFeaturesShowExamples,
	  showexampletemplates: gFeaturesShowTemplates,

	};

	var form = [
	  {html: '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-left:15px;">Select Add ABC Feature Options</p>'},  
	  {name: "          Show Search and Add Tunes", id: "showsearch", type:"checkbox", cssClass:"configure_ui_options_form_text"},
	  {name: "          Show Example Tunes", id: "showexampletunes", type:"checkbox", cssClass:"configure_ui_options_form_text"},
	  {name: "          Show Example Templates", id: "showexampletemplates", type:"checkbox", cssClass:"configure_ui_options_form_text"},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 100, width: 500, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){
		
		if (!args.canceled){

			gFeaturesShowSearch = args.result.showsearch;
			gFeaturesShowExamples = args.result.showexampletunes;
			gFeaturesShowTemplates = args.result.showexampletemplates;

			// No change, just return;
			if ((gFeaturesShowSearch == old_gFeaturesShowSearch) && 
				(gFeaturesShowExamples == old_gFeaturesShowExamples) && 
				(gFeaturesShowTemplates == old_gFeaturesShowTemplates)){

				//console.log("Configure_AddABC_UI - No change in settings");

				return;

			}

			// Save the settings
			SaveConfigurationSettings();

			// Close the Add ABC dialog
			gAddABCOKButton.click();

			// And relaunch it after a short delay
			setTimeout(function(){

				AddABC();

			},250);
		}

	});
}

//
// Close the Add dialog after adding tunes to the workarea
//
function AddABCCallback(){

	// Close the Add ABC dialog
	if (gAddABCOKButton){
		gAddABCOKButton.click();
	}

}

function AddABC(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","AddABC");

	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Add ABC Tunes, Templates, and PDF Features&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#add_templates_dialog" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span><img id="moreaddabcsettings" class="moreaddabcsettings moresettingsbutton" src="img/settings.png" title="Add ABC Settings" onclick="Configure_AddABC_UI()"></img></p>';
	modal_msg += '<div id="add-new-tune-dialog">';
	modal_msg += '<p style="text-align:center;margin-top:28px;font-size:18px;">Add Your Own Tunes from ABC, MusicXML, BWW, or MIDI Files</p>';
	modal_msg += '<p style="text-align:center;margin-top:16px;">';
	//modal_msg += '';
	modal_msg += '<label class="abcuploaddialog btn btn-top" for="addabcfilebutton" title="Adds tunes from an existing ABC, MusicXML, BWW, or MIDI file to the end of the ABC">Choose Files to Add <input type="file" id="addabcfilebutton" accept=".abc,.txt,.ABC,.TXT,.xml,.XML,.musicxml,.mxl,.MXL,.mid,.MID,.midi,.MIDI,.bww,.BWW" hidden multiple/></label>';
	modal_msg += '<input class="dialogrestorebutton btn btn-restorebutton" id="dialogrestorebutton" onclick="RestoreSnapshot(event,false,true);" type="button" value="Restore from Snapshot" title="Replaces the contents of the ABC editor with a Snapshot saved in browser storage.&nbsp;&nbsp;Click for Snapshot #1, Shift-click for Snapshot #2, Alt-click for Snapshot #3, Shift-Alt-click for Snapshot #4." style="display:none;">';
	modal_msg += '<input class="dialogrestoreautobutton btn btn-restorebutton" id="dialogrestoreautobutton" onclick="RestoreSnapshot(event,true,true);" type="button" value="Restore from Auto-Snapshot" title="Replaces the contents of the ABC editor with an Auto-Snapshot saved in browser storage" style="display:none;">';
	modal_msg += '</p>';

	// Showing search?
	if (gFeaturesShowSearch){

		modal_msg += '<p style="text-align:center;font-size:18px;margin-top:24px;">Search and Add Tunes (Over 65,000 Tunes Available)</p>';
		modal_msg += '<p style="text-align:center;margin-top:16px;">';
		modal_msg  += '<input id="searchandaddtunes" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AddFromSearch(null,AddABCCallback);" type="button" value="Tune Search Engine" title="Search for tunes to add to your tunebook.&nbsp;&nbsp;Over 65,000 tunes available.">';

	}

	modal_msg += '<p style="text-align:center;font-size:18px;margin-top:24px;">Change the Order or Delete Tunes</p>';
	modal_msg += '<p style="text-align:center;margin-top:16px;">';
	
	// Reorder uses drag and drop on desktop
	if (isPureDesktopBrowser()){
		modal_msg  += '<input id="changetuneorder" class="advancedcontrols btn btn-injectcontrols-headers" onclick="ChangeTuneOrder();" type="button" value="Change the Order of the Tunes" title="Change the order of the tunes">';	
	}
	// Reorder uses up / down buttons on mobile
	else{
		modal_msg  += '<input id="changetuneorder" class="advancedcontrols btn btn-injectcontrols-headers" onclick="ChangeTuneOrderMobile();" type="button" value="Change the Order of the Tunes" title="Change the order of the tunes">';	
	}

	modal_msg  += '<input id="culltunes" class="advancedcontrols btn btn-injectcontrols-headers" onclick="CullTunes();" type="button" value="Delete Tunes from the Tunebook" title="Delete selected tunes from the tunebook">';	
	modal_msg += '</p>';		

	// Showing examples?
	if (gFeaturesShowExamples){
		modal_msg += '<p style="text-align:center;font-size:18px;margin-top:24px;">Add an Example ABC Tune</p>';
		modal_msg += '<p style="text-align:center;margin-top:16px;">';
		modal_msg  += '<input id="addnewreel" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AppendSampleReel();" type="button" value="Cooley\'s (reel)" title="Adds an example reel (Cooley\'s) to the end of the ABC">';
		modal_msg  += '<input id="addnewjig" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AppendSampleJig();" type="button" value="The Kesh (jig)" title="Adds an example jig (The Kesh) to the end of the ABC">';
		modal_msg  += '<input id="addnewhornpipe" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AppendSampleHornpipe();" type="button" value="Alexander\'s (hornpipe)" title="Adds an example Hornpipe (Alexander\'s) to the end of the ABC">';
		modal_msg += '</p>';	
	}

	// Showing templates?
	if (gFeaturesShowTemplates){
		modal_msg += '<p style="text-align:center;margin-top:24px;font-size:18px;">Add an ABC Template</p>';
		modal_msg += '<p style="text-align:center;margin-top:16px;">';
		modal_msg  += '<input id="addnewtunetemplate" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AppendTuneTempate();" type="button" value="Add a Tune Template" title="Adds a tune template to the end of the ABC">';
		modal_msg  += '<input id="addsongtemplate" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AppendSongTemplate();" type="button" value="Add a Song Template" title="Adds a minimal song template to the end of the ABC">';
		modal_msg  += '<input id="addnewsong" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AppendSampleSong();" type="button" value="Add an Example Song" title="Adds an example song to the end of the ABC">';
		modal_msg += '</p>';
		modal_msg += '<p style="text-align:center;margin-top:16px;">';
		modal_msg  += '<input id="addbodhrantemplate" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AddBodhranTemplate();" type="button" value="Add Bodhran Backing Track Template" title="Opens a dialog where you can choose a bodhran backing track template of common tune styles to add to the end of the ABC">';
		modal_msg  += '<input id="adddatabasetemplate" class="advancedcontrols btn btn-injectcontrols-headers" style="margin-right:24px;" onclick="AppendDatabaseTemplate();" type="button" value="Add Offline Notes Database Loader Templates" title="Adds a template that makes it easy to load a full set of instrument notes and reverb settings into the database">';
		modal_msg += '</p>';
	}

	modal_msg += '<p style="text-align:center;margin-top:24px;font-size:18px;">Inject PDF Tunebook Features</p>';
	modal_msg += '<p style="text-align:center;margin-top:24px;"><input id="tunebookbuilder-add-play" class="advancedcontrols btn btn-injectcontrols-tunebookbuilder-play" onclick="PDFTunebookBuilderPlayOnly();" type="button" value="Inject Only PDF Tunebook Play Features" title="Inject only minimal playback-related instrument and volume commands at the top of your tunebook ABC"><input id="tunebookbuilder_add" class="advancedcontrols btn btn-injectcontrols-tunebookbuilder" onclick="PDFTunebookBuilder();" type="button" value="Inject All PDF Tunebook Features" title="Inject commands at the top of your tunebook ABC for adding a Title Page, Table of Contents, Index, Page Headers, Page Footers, instruments and volumes for Playback Links, and Custom QR Code"></p>';

	modal_msg += '<p style="text-align:center;margin-top:24px;">';
	modal_msg += '</p>';
	modal_msg += '</div>';

	setTimeout(function(){

		idleAddABC();

	}, 25);

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 25, width: 730,  scrollWithPage: false }).then(function(){

			
	});

}

//
// Bodhran templates
//
function AddBodhranTemplate(){

	var modal_msg  = '<p style="text-align:center;margin-bottom:36px;font-size:16pt;font-family:helvetica;margin-left:15px;">Add Bodhran Backing Track Tune Template&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#bodhran_map" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>';
	modal_msg += '<p style="text-align:center;">';
	modal_msg  += '<input id="bodhranreel" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AddBodhranReelTemplate()" type="button" value="Add Reel Template" title="Adds a reel bodhran template to the end of the ABC">';
	modal_msg  += '<input id="bodhranjig" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AddBodhranJigTemplate()" type="button" value="Add Jig Template" title="Adds a jig bodhran template to the end of the ABC">';
	modal_msg += '</p>';

	modal_msg += '<p style="text-align:center;margin-top:24px;">';
	modal_msg  += '<input id="bodhranslipjig" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AddBodhranSlipJigTemplate()" type="button" value="Add Slip Jig Template" title="Adds a slip jig bodhran template to the end of the ABC">';
	modal_msg  += '<input id="bodhranslide" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AddBodhranSlideTemplate()" type="button" value="Add Slide Template" title="Adds a slide bodhran template to the end of the ABC">';
	modal_msg += '</p>';

	modal_msg += '<p style="text-align:center;margin-top:24px;">';
	modal_msg  += '<input id="bodhranhornpipe" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AddBodhranHornpipeTemplate()" type="button" value="Add Hornpipe Template" title="Adds a hornpipe bodhran template to the end of the ABC">';
	modal_msg  += '<input id="bodhranpolka" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AddBodhranPolkaTemplate()" type="button" value="Add Polka Template" title="Adds a polka bodhran template to the end of the ABC">';
	modal_msg += '</p>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 200, width: 650,  scrollWithPage: (AllowDialogsToScroll()) });

}

function AddBodhranReelTemplate(){
	// Keep track of actions
	sendGoogleAnalytics("action","AddBodhranReelTemplate");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();

	if (nTunes > 0){
		theValue += "\n";
	}

	theValue += "X:1\n";
	theValue += "T:Reel Bodhran Template\n";
	theValue += "R:Reel\n";
	theValue += "M:4/4\n";
	theValue += "L:1/8\n";
	theValue += "Q:1/2=90\n";	
	theValue += "% Change this to match the key of the tune:\n";
	theValue += "K:C\n";
	theValue += "%%staffsep 50\n";
	theValue += "%soundfont fatboy\n";
	theValue += "%swing 0.15\n";
	theValue += "%\n";
	theValue += "% This template uses two voices:\n";
	theValue += "% Voice 1 - Melody\n";
	theValue += "% Voice 2 - Bodhran backing track\n";
	theValue += "%\n";
	theValue += "% Melody voice definition:\n";
	theValue += "%\n";
	theValue += "V:1\n";
	theValue += "%%MIDI program 0\n";
	theValue += "%\n";
	theValue += "% Bodhran voice definition:\n";
	theValue += "%\n";
	theValue += "V:2 transpose=-24\n";
	theValue += "%%MIDI program 117\n";
	theValue += "%\n";
	theValue += "% Set the Bodhran tuning\n";
	theValue += "% Valid values are:\n";
	theValue += "% C, C#, Db, D, D#, Eb, E, F, F#, Gb, G, G#, Ab, A, A#, Bb, or B.\n";
	theValue += "%\n";
	theValue += "%bodhran_tuning A\n";
	theValue += "%\n";
	theValue += "% Voice 1 - Replace this with your Reel melody:\n";
	theValue += "%\n";
	theValue += "V:1\n";
	theValue += "|: z8 | z8 | z8 | z8 |\n";
	theValue += "   z8 | z8 | z8 | z8 :|\n";
	theValue += "|: z8 | z8 | z8 | z8 |\n";
	theValue += "   z8 | z8 | z8 | z8 :|\n";
	theValue += "|: z8 | z8 | z8 | z8 |\n";
	theValue += "   z8 | z8 | z8 | z8 :|\n";
	theValue += "|: z8 | z8 | z8 | z8 |\n";
	theValue += "   z8 | z8 | z8 | z8 :|\n";
	theValue += "%\n";
	theValue += "% Voice 2 - Bodhran backing patterns:\n";
	theValue += "%\n";
	theValue += "V:2\n";
	theValue += "|: =C,C,=F,C,  C,C,F,C, | =C,C,=F,C, C,C,F,C, | =C,C,=F,C, C,C,F,C, | =C,C,=F,C, C,C,F,C, |\n";
	theValue += "   =C,C,=F,C,  C,C,F,C, | =C,C,=F,C, C,C,F,C, | =C,C,=F,C, C,C,F,C, | =C,C,!>!=F,/E,/D, !>!F,4 :|\n";
	theValue += "|: ^d2AA ^F=G^GA | ^A2=AA ^A2=AA | ^A=CCC CCA2 | ^A=CCC ^A2=AA |\n";
	theValue += "   ^d2AA ^F=G^GA | ^A2=AA ^A2=AA | ^A=CCC CCA2 | ^A=CCC ^A2=AA :|\n";
	theValue += "|: ^d2AA B2AA | ^A=C=FC ACFC | =G/G/G GA ^G2^AA | ^d^A=AA =G2AA |\n";
	theValue += "   ^d2AA B2AA | ^A=C=FC ACFC | =G/G/G GA ^G2^AA | ^d^A=AA =G2AA :| \n";
	theValue += "|: ^d=CCe DD=f^D | ^A=C=FC ^A2=AA | A3d =c2AA | =G^GAA e2GG |\n";
	theValue += "   ^d=CCe DD=f^D | ^A=C=FC ^A2=AA | A3d =c2AA | =G^GAA e2GG :|\n";

	// Do common tune addition processing
	ProcessAddTune(theValue);

}

function AddBodhranJigTemplate(){
	// Keep track of actions
	sendGoogleAnalytics("action","AddBodhranJigTemplate");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();

	if (nTunes > 0){
		theValue += "\n";
	}

	theValue += "X:1\n";
	theValue += "T:Jig Bodhran Template\n";
	theValue += "R:Jig\n";
	theValue += "M:6/8\n";
	theValue += "L:1/8\n";
	theValue += "Q:3/8=120\n";
	theValue += "% Change this to match the key of the tune:\n";
	theValue += "K:C\n";
	theValue += "%%staffsep 50\n";
	theValue += "%soundfont fatboy\n";
	theValue += "%swing 0.25\n";
	theValue += "%\n";
	theValue += "% This template uses two voices:\n";
	theValue += "% Voice 1 - Melody\n";
	theValue += "% Voice 2 - Bodhran backing track\n";
	theValue += "%\n";
	theValue += "% Melody voice definition:\n";
	theValue += "%\n";
	theValue += "V:1\n";
	theValue += "%%MIDI program 0\n";
	theValue += "%\n";
	theValue += "% Bodhran voice definition:\n";
	theValue += "%\n";
	theValue += "V:2 transpose=-24\n";
	theValue += "%%MIDI program 117\n";
	theValue += "%\n";
	theValue += "% Set the Bodhran tuning\n";
	theValue += "% Valid values are:\n";
	theValue += "% C, C#, Db, D, D#, Eb, E, F, F#, Gb, G, G#, Ab, A, A#, Bb, or B.\n";
	theValue += "%\n";
	theValue += "%bodhran_tuning A\n";
	theValue += "%\n";
	theValue += "% Voice 1 - Replace this with your Jig melody:\n";
	theValue += "%\n";
	theValue += "V:1\n";
	theValue += "|: z6 | z6 | z6 | z6 |\n";
	theValue += "   z6 | z6 | z6 | z6 :|\n";
	theValue += "|: z6 | z6 | z6 | z6 |\n";
	theValue += "   z6 | z6 | z6 | z6 :|\n";
	theValue += "|: z6 | z6 | z6 | z6 |\n";
	theValue += "   z6 | z6 | z6 | z6 :|\n";
	theValue += "%\n";
	theValue += "% Voice 2 - Bodhran backing patterns:\n";
	theValue += "%\n";
	theValue += "V:2\n";
	theValue += "|: =F,zD, F,=C,C, | =F,zD, F,=C,C, | =F,zD, F,=C,C, | =F,zD, F,=C,C, |\n";
	theValue += "   =F,zD, F,=C,C, | =F,zD, F,=C,C, | =F,zD, F,=C,C, | =F,=C,C, !>!F,3 :|\n";
	theValue += "|: ^d=CC =FCC | ^d2=C AEA | ^A2=C =FCC|^d=CC AEA |\n";
	theValue += "   ^d=CC =FCC | ^d2=C AEA | ^A2=C =FCC|^d=CC AEA :|\n";
	theValue += "|: ^d=CC =F/F/FC | ^A2d =F=C=A | d=c/=B/^A ^d=C=F | AEE d3 |\n";
	theValue += "   ^d=CC =F/F/FC | ^A2d =F=C=A | d=c/=B/^A ^d=C=F | AEE d3 :| \n";

	// Do common tune addition processing
	ProcessAddTune(theValue);

}

function AddBodhranSlipJigTemplate(){
	// Keep track of actions
	sendGoogleAnalytics("action","AddBodhranSlipJigTemplate");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();

	if (nTunes > 0){
		theValue += "\n";
	}

	theValue += "X:1\n";
	theValue += "T:Slip Jig Bodhran Template\n";
	theValue += "R:Slip Jig\n";
	theValue += "M:9/8\n";
	theValue += "L:1/8\n";
	theValue += "Q:3/8=120\n";
	theValue += "% Change this to match the key of the tune:\n";
	theValue += "K:C\n";
	theValue += "%%staffsep 50\n";
	theValue += "%soundfont fatboy\n";
	theValue += "%swing 0.25\n";
	theValue += "%\n";
	theValue += "% This template uses two voices:\n";
	theValue += "% Voice 1 - Melody\n";
	theValue += "% Voice 2 - Bodhran backing track\n";
	theValue += "%\n";
	theValue += "% Melody voice definition:\n";
	theValue += "%\n";
	theValue += "V:1\n";
	theValue += "%%MIDI program 0\n";
	theValue += "%\n";
	theValue += "% Bodhran voice definition:\n";
	theValue += "%\n";
	theValue += "V:2 transpose=-24\n";
	theValue += "%%MIDI program 117\n";
	theValue += "%\n";
	theValue += "% Set the Bodhran tuning\n";
	theValue += "% Valid values are:\n";
	theValue += "% C, C#, Db, D, D#, Eb, E, F, F#, Gb, G, G#, Ab, A, A#, Bb, or B.\n";
	theValue += "%\n";
	theValue += "%bodhran_tuning A\n";
	theValue += "%\n";
	theValue += "% Voice 1 - Replace this with your Slip Jig melody:\n";
	theValue += "%\n";
	theValue += "V:1\n";
	theValue += "|: z9 | z9 | z9 | z9 |\n";
	theValue += "   z9 | z9 | z9 | z9 :|\n";
	theValue += "|: z9 | z9 | z9 | z9 |\n";
	theValue += "   z9 | z9 | z9 | z9 :|\n";
	theValue += "%\n";
	theValue += "% Voice 2 - Bodhran backing patterns:\n";
	theValue += "%\n";
	theValue += "V:2\n";
	theValue += "|: =F,zD, F,=C,C, !>!=F,3 | =F,zD, F,=C,C, F,C,C, | =F,zD, F,=C,C, !>!F,3 | =F,zD, F,=C,C, F,C,C, |\n";
	theValue += "   =F,zD, F,=C,C, !>!=F,3 | =F,zD, F,=C,C, F,C,C, | =F,zD, F,=C,C, !>!F,3 | =F,zD, F,=C,C, F,C,C, :|\n";
	theValue += "|: ^d=CC =FCC FCC | ^d2=C =FCC AEA | ^A2=C =FCC A2A | ^d=CC =FCF A3 |\n";
	theValue += "   ^d=CC =FCC FCC | ^d2=C =FCC AEA | ^A2=C =FCC A2A | ^d=CC =FCF A3 :|\n";

	// Do common tune addition processing
	ProcessAddTune(theValue);

}

function AddBodhranSlideTemplate(){
	// Keep track of actions
	sendGoogleAnalytics("action","AddBodhranSlideTemplate");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();

	if (nTunes > 0){
		theValue += "\n";
	}

	theValue += "X:1\n";
	theValue += "T:Slide Bodhran Template\n";
	theValue += "R:Slide\n";
	theValue += "M:12/8\n";
	theValue += "L:1/8\n";
	theValue += "Q:3/8=130\n";
	theValue += "% Change this to match the key of the tune:\n";
	theValue += "K:C\n";
	theValue += "%%staffsep 50\n";
	theValue += "%soundfont fatboy\n";
	theValue += "%swing 0.25\n";
	theValue += "%\n";
	theValue += "% This template uses two voices:\n";
	theValue += "% Voice 1 - Melody\n";
	theValue += "% Voice 2 - Bodhran backing track\n";
	theValue += "%\n";
	theValue += "% Melody voice definition:\n";
	theValue += "%\n";
	theValue += "V:1\n";
	theValue += "%%MIDI program 0\n";
	theValue += "%\n";
	theValue += "% Bodhran voice definition:\n";
	theValue += "%\n";
	theValue += "V:2 transpose=-24\n";
	theValue += "%%MIDI program 117\n";
	theValue += "%\n";
	theValue += "% Set the Bodhran tuning\n";
	theValue += "% Valid values are:\n";
	theValue += "% C, C#, Db, D, D#, Eb, E, F, F#, Gb, G, G#, Ab, A, A#, Bb, or B.\n";
	theValue += "%\n";
	theValue += "%bodhran_tuning A\n";
	theValue += "%\n";
	theValue += "% Voice 1 - Replace this with your Slide melody:\n";
	theValue += "%\n";
	theValue += "V:1\n";
	theValue += "|: z12 | z12 |\n";
	theValue += "   z12 | z12 :|\n";
	theValue += "|: z12 | z12 |\n";
	theValue += "   z12 | z12 :|\n";
	theValue += "%\n";
	theValue += "% Voice 2 - Bodhran backing patterns:\n";
	theValue += "%\n";
	theValue += "V:2\n";
	theValue += "|: =F,zD, F,=C,C, F,C,C, !>!F,3 | =F,zD, F,=C,C, F,C,C, !>!F,3 |\n";
	theValue += "   =F,zD, F,=C,C, F,C,C, !>!F,3 | =F,zD, F,=C,C, F,C,C, !>!F,3 :|\n";
	theValue += "|: ^A2=F ^dF^A =d2=A ^c2^G | ^A2=F ^dF^A =B3 B2^F |\n";
	theValue += "   ^A2=F ^dF^A =d2=A ^c2^G | ^A=C=F ^dF^A F3 ^A3 :|\n";

	// Do common tune addition processing
	ProcessAddTune(theValue);

}

function AddBodhranPolkaTemplate(){
	// Keep track of actions
	sendGoogleAnalytics("action","AddBodhranPolkaTemplate");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();

	if (nTunes > 0){
		theValue += "\n";
	}

	theValue += "X:1\n";
	theValue += "T:Polka Bodhran Template\n";
	theValue += "R:Polka\n";
	theValue += "M:2/4\n";
	theValue += "L:1/8\n";
	theValue += "Q:1/4=130\n";
	theValue += "% Change this to match the key of the tune:\n";
	theValue += "K:C\n";
	theValue += "%%staffsep 50\n";
	theValue += "%soundfont fatboy\n";
	theValue += "%\n";
	theValue += "% This template uses two voices:\n";
	theValue += "% Voice 1 - Melody\n";
	theValue += "% Voice 2 - Bodhran backing track\n";
	theValue += "%\n";
	theValue += "% Melody voice definition:\n";
	theValue += "%\n";
	theValue += "V:1\n";
	theValue += "%%MIDI program 0\n";
	theValue += "%\n";
	theValue += "% Bodhran voice definition:\n";
	theValue += "%\n";
	theValue += "V:2 transpose=-24\n";
	theValue += "%%MIDI program 117\n";
	theValue += "%\n";
	theValue += "% Set the Bodhran tuning\n";
	theValue += "% Valid values are:\n";
	theValue += "% C, C#, Db, D, D#, Eb, E, F, F#, Gb, G, G#, Ab, A, A#, Bb, or B.\n";
	theValue += "%\n";
	theValue += "%bodhran_tuning A\n";
	theValue += "%\n";
	theValue += "% Voice 1 - Replace this with your Polka melody:\n";
	theValue += "%\n";
	theValue += "V:1\n";
	theValue += "|: z4 | z4 | z4 | z4 |\n";
	theValue += "   z4 | z4 | z4 | z4 :|\n";
	theValue += "|: z4 | z4 | z4 | z4 |\n";
	theValue += "   z4 | z4 | z4 | z4 :|\n";
	theValue += "%\n";
	theValue += "% Voice 2 - Bodhran backing patterns:\n";
	theValue += "%\n";
	theValue += "V:2\n";
	theValue += "|: =C,2 C,=F, | =C,=F, C,F, | =C,=F, C,F, | =C,2 =F,2 |\n";
	theValue += "   =C,2 C,=F, | =C,=F, C,F, | =C,=F, C,F, | =C,2 =F,2 :|\n";
	theValue += "|: ^A/A/A =C^A | ^F^A =CA | ^A=A/A/ =FA | ^A2E^c |\n";
	theValue += "   ^A/A/A =C^A | ^F^A =CA | ^A=A/A/ =FA | ^A2E^c :|\n";

	// Do common tune addition processing
	ProcessAddTune(theValue);

}

function AddBodhranHornpipeTemplate(){
	// Keep track of actions
	sendGoogleAnalytics("action","AddBodhranHornpipeTemplate");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();

	if (nTunes > 0){
		theValue += "\n";
	}

	theValue += "X:1\n";
	theValue += "T:Hornpipe Bodhran Template\n";
	theValue += "R:Hornpipe\n";
	theValue += "M:4/4\n";
	theValue += "L:1/8\n";
	theValue += "Q:1/2=80\n";
	theValue += "% Change this to match the key of the tune:\n";
	theValue += "K:C\n";
	theValue += "%%staffsep 50\n";
	theValue += "%soundfont fatboy\n";
	theValue += "%swing 0.25\n";
	theValue += "%\n";
	theValue += "% This template uses two voices:\n";
	theValue += "% Voice 1 - Melody\n";
	theValue += "% Voice 2 - Bodhran backing track\n";
	theValue += "%\n";
	theValue += "% Melody voice definition:\n";
	theValue += "%\n";
	theValue += "V:1\n";
	theValue += "%%MIDI program 0\n";
	theValue += "%\n";
	theValue += "% Bodhran voice definition:\n";
	theValue += "%\n";
	theValue += "V:2 transpose=-24\n";
	theValue += "%%MIDI program 117\n";
	theValue += "%\n";
	theValue += "% Set the Bodhran tuning\n";
	theValue += "% Valid values are:\n";
	theValue += "% C, C#, Db, D, D#, Eb, E, F, F#, Gb, G, G#, Ab, A, A#, Bb, or B.\n";
	theValue += "%\n";
	theValue += "%bodhran_tuning A\n";
	theValue += "%\n";
	theValue += "% Voice 1 - Replace this with your Hornpipe melody:\n";
	theValue += "%\n";
	theValue += "V:1\n";
	theValue += "|: z8 | z8 | z8 | z8 |\n";
	theValue += "   z8 | z8 | z8 | z8 :|\n";
	theValue += "|: z8 | z8 | z8 | z8 |\n";
	theValue += "   z8 | z8 | z8 | z8 :|\n";
	theValue += "%\n";
	theValue += "% Voice 2 - Bodhran backing patterns:\n";
	theValue += "%\n";
	theValue += "V:2\n";
	theValue += "|: =F,=C, F,C, F,C, F,C, | =F,=C, (3!>!F,C,C, !>!F,z F,C, | =F,=C, F,C, F,C, F,C, |=F,=C, (3F,C,C, !>!F,z F,C, |\n";
	theValue += "   =F,=C, F,C, F,C, F,C, | =F,=C, (3!>!F,C,C, !>!F,z F,C, | =F,=C, F,C, F,C, F,C, | =F,=C, (3F,C,C, !>!F,z F,C, :|\n";
	theValue += "|: =F,=C, F,C, F,C, F,C, | =F,=C, F,C, F,C, F,C, | =F,=C, F,C, F,C, F,C, | =F,=C, (3!>!F,C,C, !>!F,z F,C, |\n"; 
	theValue += "   =F,=C, F,C, F,C, F,C, | =F,=C, F,C, F,C, F,C, | =F,=C, F,C, F,C, F,C, | =F,=C, (3!>!F,C,C, !>!F,z F,C, :|\n";

	// Do common tune addition processing
	ProcessAddTune(theValue);

}

function AppendSampleReel(){	

	// Keep track of actions
	sendGoogleAnalytics("action","AppendSampleReel");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();

	if (nTunes > 0){
		theValue += "\n";
	}
	
	theValue += "X: 1\n";
	theValue += "T: Cooley's\n";
	theValue += "C: Traditional\n";
	theValue += "R: Reel\n";
	theValue += "M: 4/4\n";
	theValue += "L: 1/8\n";
	theValue += "Q: 1/2=90\n";
	theValue += "K: Edor\n";
	theValue += "%\n";
	theValue += "% Use the fluid soundfont:\n";
	theValue += '%soundfont fluid\n';	
	theValue += "%\n";
	theValue += "% Use an Acoustic Grand Piano sound for the melody:\n";
	theValue += "%%MIDI program 0\n";
	theValue += "%\n";
	theValue += "% Use an Acoustic Grand Piano sound for the chords:\n";
	theValue += "%%MIDI chordprog 0\n";
	theValue += "%\n";
	theValue += "% Use an Synth Bass sound for the bass:\n";
	theValue += "%%MIDI bassprog 38\n";
	theValue += "%\n";
	theValue += "% Set a specific amount of swing:\n";
	theValue += '%swing 0.15\n';
	theValue += "%\n";
	theValue += '|:"Em"EBBA B2 EB|B2 AB dBAG|"D"F/E/D AD BDAD|F/E/D AD BAGF|\n';
	theValue += '"Em"EBBA B2 EB|B2 AB defg|"D"afge dBAF|1 DEFD "Em"E3D:|2 DEFD "Em"E2gf||\n';
	theValue += '|:"Em"eB (3BBB eBgf|eBB2 gedB|"D"A/A/A FA DAFA|A/A/A FA defg|\n';
	theValue += '"Em"eB (3BBB eBgf|eBBB defg|"D"afge dBAF|1 DEFD "Em"E2gf:|2 DEFD "Em"E4|]\n';

	// Do common tune addition processing
	ProcessAddTune(theValue);

}

function AppendSampleJig(){	

	// Keep track of actions
	sendGoogleAnalytics("action","AppendSampleJig");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();

	if (nTunes > 0){
		theValue += "\n";
	}
	
	theValue += "X: 1\n";
	theValue += "T: The Kesh\n";
	theValue += "C: Traditional\n";
	theValue += "R: Jig\n";
	theValue += "M: 6/8\n";
	theValue += "L: 1/8\n";
	theValue += "Q: 3/8=120\n";
	theValue += "K: Gmaj\n";
	theValue += "%\n";
	theValue += "% Use the fluid soundfont:\n";
	theValue += '%soundfont fluid\n';	
	theValue += "%\n";
	theValue += "% Use an Acoustic Grand Piano sound for the melody:\n";
	theValue += "%%MIDI program 0\n";
	theValue += "%\n";
	theValue += "% Use an Acoustic Grand Piano for the chords:\n";
	theValue += "%%MIDI chordprog 0\n";
	theValue += "%\n";
	theValue += "% Use an Synth Bass sound for the bass:\n";
	theValue += "%%MIDI bassprog 38\n";
	theValue += "%\n";
	theValue += "% Set a specific amount of swing:\n";
	theValue += '%swing 0.25\n';
	theValue += "%\n";
	theValue += '|:"G"GAG GAB|"D"ABA ABd|"G"edd gdd|"C"edB "D"dBA|\n';
	theValue += '"G"GAG GAB|"D"ABA ABd|"G"edd gdB|"D"AGF "G"G3:|\n';
	theValue += '|:"G"BAB dBd|"C"ege "D"dBA|"G"BAB dBG|"D"ABA AGA|\n';
	theValue += '"G"BAB dBd|"C"ege "G"dBd|"C"gfg "D"aga|"G"bgf g3:|\n';

	// Do common tune addition processing
	ProcessAddTune(theValue);

}

function AppendSampleHornpipe(){	

	// Keep track of actions
	sendGoogleAnalytics("action","AppendSampleHornpipe");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();

	if (nTunes > 0){
		theValue += "\n";
	}
	
	theValue += 'X: 1\n';
	theValue += 'T: Alexander\'s\n';
	theValue += "C: Traditional\n";
	theValue += 'R: Hornpipe\n';
	theValue += 'M: 4/4\n';
	theValue += 'L: 1/8\n';
	theValue += 'Q: 1/2=80\n';
	theValue += 'K: Dmaj\n';
	theValue += "%\n";
	theValue += "% Use the fluid soundfont:\n";
	theValue += '%soundfont fluid\n';
	theValue += "%\n";
	theValue += "% Use an Acoustic Grand Piano sound for the melody:\n";
	theValue += "%%MIDI program 0\n";
	theValue += "%\n";
	theValue += "% Use an Acoustic Grand Piano for the chords:\n";
	theValue += "%%MIDI chordprog 0\n";
	theValue += "%\n";
	theValue += "% Use an Synth Bass sound for the bass:\n";
	theValue += "%%MIDI bassprog 38\n";
	theValue += "%\n";
	theValue += "% Set a specific amount of swing:\n";
	theValue += '%swing 0.25\n';
	theValue += "%\n";
	theValue += '|:(3gfe|"D"dAFA DFAd|fdcd Adef|"G"g2 ge "D"fdcd|"A"(3efe (3dcB A2 (3gfe|\n';
	theValue += '"D"dAFA DFAd|fdcd Adef|"G"g2 ge "D"fdcd|"A"(3efe dc"D"d2:|\n';
	theValue += '|:AG|"D"FAdA FAdA|"G"GBdB GBdB|"A"Acec Acec|"D"dfaf "A"(3gfe (3dAG|\n';
	theValue += '"D"FAdA FAdA|"G"GBdB GBdB|"A"Acef gecd|(3efe dc"D"d2:|\n';

	// Do common tune addition processing
	ProcessAddTune(theValue);

}

//
// Add a new tune template to the ABC
//
function AppendTuneTempate(){	

	// Keep track of actions
	sendGoogleAnalytics("action","AppendTuneTemplate");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();
	
	if (nTunes > 0){
		theValue += "\n";
	}

	theValue += 'X: 1\n';
	theValue += 'T: Tune Title\n';
	theValue += 'C: Composer\n';
	theValue += 'R: Tune style (Reel, Jig, Hornpipe, etc.)\n';
	theValue += '%\n';
	theValue += '% Meter:\n';
	theValue += 'M: 4/4\n';
	theValue += '%\n';
	theValue += '% Beat unit:\n';
	theValue += 'L: 1/8\n';
	theValue += '%\n';
	theValue += '% Tempo:\n';
	theValue += 'Q: 1/4=120\n';
	theValue += '%\n';
	theValue += '% Key:\n';
	theValue += 'K: C\n';
	theValue += '%\n';
	theValue += '% Soundfont\n';
	theValue += '% Available soundfonts are:\n';
	theValue += '% fluid, fluidhq, musyng, fatboy, canvas, mscore, arachno:\n';
	theValue += '%soundfont fluid\n';
	theValue += '%\n';
	theValue += '% Use an Acoustic Grand Piano sound for the melody:\n';
	theValue += '%%MIDI program 0\n';
	theValue += '%\n';
	theValue += '% Use an Acoustic Grand Piano for the chords:\n';
	theValue += '%%MIDI chordprog 0\n';
	theValue += '%\n';
	theValue += '% Use an Synth Bass sound for the bass:\n';
	theValue += '%%MIDI bassprog 38\n';
	theValue += '%\n';
	theValue += "% Add your tune's ABC below:\n";
	theValue += '"C"C2 D2 E2 F2| G2 A2 B2 c2|]\n';

	// Do common tune addition processing
	ProcessAddTune(theValue);

}

//
// Add a new song template to the ABC
//
function AppendSongTemplate(){	

	// Keep track of actions
	sendGoogleAnalytics("action","AppendSongTemplate");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();
	
	if (nTunes > 0){
		theValue += "\n";
	}

	theValue += "% Stripped-down self-documenting song in ABC, by Linda Eskin\n";
	theValue += "% Replace the WORDS IN UPPER-CASE with your own information.\n";
	theValue += "% You can remove all these comments with single % signs.\n";
	theValue += "%\n";
	theValue += "X: 1\n"; 
	theValue += "%\n";
	theValue += "% *** THIS HEADER CONVEYS INFORMATION ABOUT THE SONG ***\n";
	theValue += "%\n";
	theValue += "% These text elements appear above the music:\n";
	theValue += "T: TITLE OF THE SONG\n";
	theValue += "T: ALTERNATE TITLE\n";
	theValue += "C: COMPOSER/SONGWRITER\n";
	theValue += "O: ORIGIN/GEOGRAPHIC\n";
	theValue += "%%text GENERAL PURPOSE TEXT\n";
	theValue += "%\n";
	theValue += "% These appear below the music and lyrics:\n";
	theValue += "S: SOURCE OF THE SONG\n";
	theValue += "D: DISCOGRAPHY - CD, LP, ETC.\n";
	theValue += "N: NOTES (TEXT)\n";
	theValue += "Z: TRANSCRIBER, COPYRIGHT, PERMISSIONS\n";
	theValue += "H: HISTORY OF THE SONG\n";
	theValue += "H: This self-documenting ABC song template was created by Linda Eskin.\n";
	theValue += "%\n";
	theValue += "% This appears in your ABC file only, for reference.\n";
	theValue += "F: FILE URL - WHERE TO FIND THIS ONLINE\n";
	theValue += "%\n";
	theValue += "% These appear above the music AND control how it is played:\n";
	theValue += "R: RHYTHM, E.G. JIG, WALTZ\n";
	theValue += "M: 4/4\n";
	theValue += "L: 1/4\n";
	theValue += "Q: 1/4=120\n";
	theValue += "K: C\n";
	theValue += "% The K (key) tag should be the last thing in the header.\n";
	theValue += "%\n";
	theValue += "% *** THE SONG ITSELF STARTS HERE - REPLACE THIS WITH YOUR SONG ***\n";
	theValue += "%\n";
	theValue += "P: PART - VERSE, CHORUS, ETC.\n";
	theValue += '"C"C D2 E|"F"F G3|"Am"A B2 c|"E7"d e3|\n';
	theValue += "w: The words to the act-u-al tune go here\n";
	theValue += "w: You can put more ver-ses here is you like\n";
	theValue += "%\n";
	theValue += '"C"C D2 E|"F"F G3|"Am"A B2 c|"E7"d e3|]\n';
	theValue += "w: This tune is a scale. See how the notes work!\n";
	theValue += "w: This line is for the se-cond verse. Ta-da!\n";
	theValue += "%\n";
	theValue += "% *** YOU CAN PUT MORE LYRICS AFTER THE TUNE, TOO. ***\n";
	theValue += "%\n";
	theValue += "W: Write your extra verses here, verses here, verses here.\n";
	theValue += "W: Write your extra verses here, or the whole song if you like.\n";
	theValue += "W:\n";
	theValue += "W: --- This is where the chorus goes, chorus goes, chorus goes.\n";
	theValue += "W: --- Indent it with dashes if you like, but spaces will not work.\n";
	theValue += "W:\n";
	theValue += "W: Here we have another verse, another verse, another verse.\n";
	theValue += "W: Now we have reached the end - this is the last verse of this song.\n"; 
	theValue += "%\n";
	theValue += "% That should get you started. Go play!\n";


	// Do common tune addition processing
	ProcessAddTune(theValue);

}

//
// Add a new song template to the ABC
//
function AppendSampleSong(){	

	// Keep track of actions
	sendGoogleAnalytics("action","AppendSampleSong");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();
	
	if (nTunes > 0){
		theValue += "\n";
	}

	theValue += "% A simple, self-documenting song in ABC, by Linda Eskin\n";
	theValue += "%\n";
	theValue += "% ABC is a plain-text format for conveying musical information.\n";
	theValue += "% Use this as an example to learn how ABC is written.\n";
	theValue += "% You can use it as a template to create your own ABC song.\n";
	theValue += "% Examples are in UPPER-CASE so you can see and replace them easily.\n";
	theValue += "%\n";
	theValue += "% Comments (like this one) start with a single percent symbol.\n";
	theValue += "%\n";
	theValue += "X: 1 \n";
	theValue += "% Each tune must start with an X: tag, and a number.\n";
	theValue += "%\n";
	theValue += "% *** THIS IS THE HEADER - INFO ABOUT THE TUNE/SONG ***\n";
	theValue += "%\n";
	theValue += "% These text elements appear above the music:\n";
	theValue += "%\n";
	theValue += "T: TITLE OF THE SONG\n"; 
	theValue += "T: ALTERNATE TITLE\n";
	theValue += "%\n"; 
	theValue += "C: COMPOSER\n"; 
	theValue += '% Songwriter, source, "Traditional", "Child Ballad," etc.\n';
	theValue += "%\n";
	theValue += "O: ORIGIN\n";
	theValue += "% Where is the tune from? Country, culture, ...\n";
	theValue += "%\n";
	theValue += "%%text GENERAL PURPOSE TEXT\n";
	theValue += "% There are many more options that use the double percentage symbols.\n";
	theValue += "% Note that lines starting with %% are *not* comments.\n";
	theValue += "%\n";
	theValue += "% These text elements appear below the music and lyrics:\n";
	theValue += "%\n";
	theValue += "% For S:, D:, H:, N:, and Z: the first line with the tag adds a label.\n";
	theValue += "% Additional lines with the same tag do not.\n";
	theValue += "%\n";
	theValue += "% S:, D:, H:, N:, and Z: lines do not word wrap.\n";
	theValue += "% Add more lines if you have more than will fit across the page.\n";
	theValue += "%\n";
	theValue += "S: SOURCE\n";
	theValue += '% "Learned from Morgan at Folk Festival," "Child Ballad," etc.\n';
	theValue += "%\n";
	theValue += "D: DISCOGRAPHY\n";
	theValue += "% On which CD/LP? Appears at the bottom of the page.\n";
	theValue += "%\n";
	theValue += "N: THESE NOTES APPEAR NEAR THE BOTTOM OF THE PAGE.\n";
	theValue += "%\n";
	theValue += "Z: TRANSCRIBER, COPYRIGHT, PERMISSIONS.\n";
	theValue += "% Transcriber info appears at the bottom, right below the Notes.\n";
	theValue += "%\n";
	theValue += "H: HISTORY OF THE SONG\n";
	theValue += "H: This self-documenting ABC example song was created by Linda Eskin.\n";
	theValue += "% Real-life event? Written for a movie? Appears at the bottom of the page.\n";
	theValue += "%\n";
	theValue += "F: FILE URL\n";
	theValue += "% If you want people to find your file online, put the URL here.\n";
	theValue += "%\n";
	theValue += "% These appear above the music AND control how it is played:\n";
	theValue += "%\n";
	theValue += "R: RHYTHM\n";
	theValue += "% Reel, Waltz, Jig, Hornpipe, etc.\n";
	theValue += "%\n";
	theValue += "M: 4/4\n";
	theValue += "% Meter, such as 3/4, 4/4, 9/8. Appears in the key signature.\n";
	theValue += "%\n";
	theValue += "L: 1/4\n";
	theValue += "% Length of base note unit. Here a 1/4 note = 1.\n";
	theValue += "% Use multiplier numbers to get longer notes: C2, a3, F4\n";
	theValue += "%\n";
	theValue += "Q: 1/4=120\n";
	theValue += "% Tempo. e.g. 120 beats per minute (BPM). (Mnemonic: Q=Quickness.)\n";
	theValue += "%\n";
	theValue += "%%staffsep 80\n";
	theValue += "% Sets the spacing between the staffs. Bigger numbers = more space.\n";
	theValue += "%\n";
	theValue += "K: C\n";
	theValue += "% Key signature - G, D, Edor, Amix, etc.\n";
	theValue += "% The K (key) tag should be the last thing in the header.\n";
	theValue += "%\n";
	theValue += "% *** THE TUNE ITSELF STARTS HERE ***\n";
	theValue += "%\n";
	theValue += "P: PART GOES HERE\n";
	theValue += "% Intro, Verse, Chorus, Refrain, etc.\n";
	theValue += "%\n";
	theValue += "% This is the actual music and words.\n";
	theValue += "% ABC apps *play* the music you write. Don't just make stuff up!\n";
	theValue += "% Follow the ABC standard so your tune and chords play correctly:\n";
	theValue += "% http://abcnotation.com/wiki/abc:standard:v2.1\n";
	theValue += "%\n";
	theValue += '"C"C D2 E|"F"F G3|"Am"A B2 c|"E7"d e3|\n';
	theValue += "w: The words to the act-u-al tune go here\n";
	theValue += "w: You can put more ver-ses here is you like\n";
	theValue += "%\n";
	theValue += '"C"C D2 E|"F"F G3|"Am"A B2 c|"E7"d e3|]\n';
	theValue += "w: This tune is a scale. See how the notes work!\n";
	theValue += "w: This line is for the se-cond verse. Ta-da!\n";
	theValue += "%\n";
	theValue += "% Chord names, in quotes, appear above the black-dots notation.\n";
	theValue += "%\n";
	theValue += "% The other letters are the notes. Lower-case for higher octave.\n";
	theValue += '% The base unit note length ("L", above) is assumed to equal 1.\n';
	theValue += "% For longer notes use a multiplier: G3, e2, C4 etc.\n";
	theValue += "%\n";
	theValue += '% w (lower-case "w") = words, or inline lyrics - the lyrics that appear right in the sheet music, below the black-dots notation.\n';
	theValue += "%\n";
	theValue += "% *** YOU CAN PUT MORE LYRICS AFTER THE TUNE, TOO. ***\n";
	theValue += "%\n";
	theValue += "% W = Words. More lyrics, if you want them.\n";
	theValue += '% Note upper-case "W:" used below:\n';
	theValue += "%\n";
	theValue += "W: Write your extra verses here, verses here, verses here.\n";
	theValue += "W: Write your extra verses here, or the whole song if you like.\n";
	theValue += "W:\n";
	theValue += '% You can leave a "W" line blank, to leave some space.\n';
	theValue += "W: --- This is where the chorus goes, chorus goes, chorus goes.\n";
	theValue += "W: --- Indent it with dashes if you like, but spaces won't work.\n";
	theValue += "W:\n";
	theValue += "W: Here we have another verse, another verse, another verse.\n";
	theValue += "W: Now we have reached the end - this is the last verse of this song.\n";
	theValue += "%\n";
	theValue += "% That should get you started. Go play!\n";

	// Do common tune addition processing
	ProcessAddTune(theValue);

}

//
// Add the J.S. Bach 2-Part Invention #1
//
function AppendDatabaseTemplate(){

	// Keep track of actions
	sendGoogleAnalytics("action","AppendDatabaseTemplate");

	// Stuff in some default ABC with additional options explained
	var theValue = ""

	var nTunes = CountTunes();

	if (nTunes > 0){
		theValue += "\n";
	}

	// Tempate 1 - Offline Single Instrument Notes + Reverb Database Loader

	theValue += 'X:1\n';
	theValue += 'T: Single Soundfont Instrument Notes + Reverb Setting Database Loader\n';
	theValue += 'M: 4/4\n';
	theValue += 'L: 1/8\n';
	theValue += 'K: C\n';
	theValue += 'Q: 1/4=400\n';
	theValue += '%\n';
	theValue += '% 1) Select the soundfont:\n';
	theValue += '%\n';	
	theValue += '% Available soundfonts are:\n';
	theValue += '% fluid, musyng, fatboy, canvas, mscore, arachno, and fluidhq\n';
	theValue += '%\n';
	theValue += '%soundfont fluid\n';
	theValue += '%\n';
	theValue += '% 2) Select the MIDI instrument program you want to use\n';
	theValue += '% in the soundfont and have all the notes stored in the database:\n';
	theValue += '%\n';
	theValue += '% Example: Acoustic Grand Piano\n';
	theValue += '%%MIDI program 0\n';
	theValue += '%\n';
	theValue += '% 3) Select the reverb environment you want to have stored in the database\n';
	theValue += '%\n';	
	theValue += '% Available reverb environments are:\n';
	theValue += '% off, room1, room2, room3, chamber1, chamber2, chamber3,\n';
	theValue += '% hall1, hall2, hall3, church1,\n';
	theValue += '% room (same as room3), chamber (same as chamber2),\n';
	theValue += '% hall (same as hall2), and church (same as church1)\n';
	theValue += '%\n';
	theValue += '% chamber is the default reverb, so probably already stored:\n';
	theValue += '%\n';
	theValue += '%reverb chamber 0.9 0.1\n';
	theValue += '%\n';
	theValue += '% 4) While online, click "Play" to load the ABC into the player.\n';
	theValue += '%\n';	
	theValue += "% You do not need to actually play the tune, just loading the template\n";
	theValue += "% into the player is enough to save the notes and reverb setting in\n";
	theValue += "% the instrument notes and reverb database.\n";
	theValue += '%\n';
	theValue += '[|C,,,4 ^C,,,4 D,,,4 ^D,,,4 E,,,4 F,,,4 ^F,,,4 G,,,4 ^G,,,4 A,,,4 ^A,,,4 B,,,4 |\n';
	theValue += 'C,,4 ^C,,4 D,,4 ^D,,4 E,,4 F,,4 ^F,,4 G,,4 ^G,,4 A,,4 ^A,,4 B,,4 |\n';
	theValue += 'C,4 ^C,4 D,4, ^D,4 E,4 F,4 ^F,4 G,4 ^G,4 A,4 ^A,4 B,4 |\n';
	theValue += 'C4 ^C4 D4 ^D4 E4 F4 ^F4 G4 ^G4 A4 ^A4 B4 |\n';
	theValue += 'c4 ^c4 d4 ^d4 e4 f4 ^f4 g4 ^g4 a4 ^a4 b4 |\n';
	theValue += "c'4 ^c'4 d'4 ^d'4 e'4 f'4 ^f'4 g'4 ^g'4 a'4 ^a'4 b'4|\n";
	theValue += "c''4 ^c''4 d''4 ^d''4 e''4 f''4 ^f''4 g''4 ^g''4 a''4 ^a''4 b''4|]\n\n";

	// Template 2 - Complete Soundfont Instrument Notes Database Loader Primer
	
	theValue += "X: 2\n";
	theValue += "T: All Soundfont Instruments Notes Database Primer Loader\n";
	theValue += "M: 4/4\n";
	theValue += "L: 1/8\n";
	theValue += "K: C\n";
	theValue += "Q: 1/8=400\n";
	theValue += "%\n";
	theValue += "% Loads one note for each MIDI instrument in an entire soundfont\n";
	theValue += "% into the instrument notes database to allow you to easily\n";
	theValue += "% load the rest of the notes for all the instruments.\n";
	theValue += "%\n";
	theValue += "% 1) Select the soundfont you want to load:\n";
	theValue += "%\n";
	theValue += "% Available soundfonts are:\n"; 
	theValue += "% fluid, musyng, fatboy, canvas, mscore, arachno, and fluidhq\n";
	theValue += "%\n";
	theValue += "%soundfont fluid\n";
	theValue += "%\n";
	theValue += '% 2) While online, click "Play" to load the ABC into the player.\n';
	theValue += "%\n";
	theValue += "% You don't need to actually play the file, just loading the template\n";
	theValue += "% into the player is enough to create single note placeholder\n";
	theValue += "% entries in the instrument notes database.\n";
	theValue += "%\n";
	theValue += "% 3) Once the player load is complete, you can close the player.\n";
	theValue += "%\n";
	theValue += '% 4) Open "Settings"/"Manage Notes, Reverb, and Tune Search Databases"\n';
	theValue += "%\n";
	theValue += '% 5) Click "Instrument Notes Database"\n';
	theValue += "%\n";
	theValue += '% 6) Click "Load All Notes for All Instruments"\n';
	theValue += "%\n";
	theValue += "% 7) The tool will download all the notes for all the instruments.\n";
	theValue += "%\n";
	theValue += "% This is a very aggressive use of the database loader feature.\n";
	theValue += "%\n";
	theValue += "% While I do not expect there to be any issues, use at your own risk.\n";
	theValue += "%\n";
	theValue += '[I:MIDI= program 0] "_0" G4 |[I:MIDI= program 1] "_1" G4 |[I:MIDI= program 2] "_2" G4 |[I:MIDI= program 3] "_3" G4 |[I:MIDI= program 4] "_4" G4 |[I:MIDI= program 5] "_5" G4 |[I:MIDI= program 6] "_6" G4 |[I:MIDI= program 7] "_7" G4 |\n';
	theValue += '[I:MIDI= program 8] "_8" G4 |[I:MIDI= program 9] "_9" G4 |[I:MIDI= program 10] "_10" G4 |[I:MIDI= program 11] "_11" G4 |[I:MIDI= program 12] "_12" G4 |[I:MIDI= program 13] "_13" G4 |[I:MIDI= program 14] "_14" G4 |[I:MIDI= program 15] "_15" G4 |\n';
	theValue += '[I:MIDI= program 16] "_16" G4 |[I:MIDI= program 17] "_17" G4 |[I:MIDI= program 18] "_18" G4 |[I:MIDI= program 19] "_19" G4 |[I:MIDI= program 20] "_20" G4 |[I:MIDI= program 21] "_21" G4 |[I:MIDI= program 22] "_22" G4 |[I:MIDI= program 23] "_23" G4 |\n';
	theValue += '[I:MIDI= program 24] "_24" G4 |[I:MIDI= program 25] "_25" G4 |[I:MIDI= program 26] "_26" G4 |[I:MIDI= program 27] "_27" G4 |[I:MIDI= program 28] "_28" G4 |[I:MIDI= program 29] "_29" G4 |[I:MIDI= program 30] "_30" G4 |[I:MIDI= program 31] "_31" G4 |\n';
	theValue += '[I:MIDI= program 32] "_32" G4 |[I:MIDI= program 33] "_33" G4 |[I:MIDI= program 34] "_34" G4 |[I:MIDI= program 35] "_35" G4 |[I:MIDI= program 36] "_36" G4 |[I:MIDI= program 37] "_37" G4 |[I:MIDI= program 38] "_38" G4 |[I:MIDI= program 39] "_39" G4 |\n';
	theValue += '[I:MIDI= program 40] "_40" G4 |[I:MIDI= program 41] "_41" G4 |[I:MIDI= program 42] "_42" G4 |[I:MIDI= program 43] "_43" G4 |[I:MIDI= program 44] "_44" G4 |[I:MIDI= program 45] "_45" G4 |[I:MIDI= program 46] "_46" G4 |[I:MIDI= program 47] "_47" G4 |\n';
	theValue += '[I:MIDI= program 48] "_48" G4 |[I:MIDI= program 49] "_49" G4 |[I:MIDI= program 50] "_50" G4 |[I:MIDI= program 51] "_51" G4 |[I:MIDI= program 52] "_52" G4 |[I:MIDI= program 53] "_53" G4 |[I:MIDI= program 54] "_54" G4 |[I:MIDI= program 55] "_55" G4 |\n';
	theValue += '[I:MIDI= program 56] "_56" G4 |[I:MIDI= program 57] "_57" G4 |[I:MIDI= program 58] "_58" G4 |[I:MIDI= program 59] "_59" G4 |[I:MIDI= program 60] "_60" G4 |[I:MIDI= program 61] "_61" G4 |[I:MIDI= program 62] "_62" G4 |[I:MIDI= program 63] "_63" G4 |\n';
	theValue += '[I:MIDI= program 64] "_64" G4 |[I:MIDI= program 65] "_65" G4 |[I:MIDI= program 66] "_66" G4 |[I:MIDI= program 67] "_67" G4 |[I:MIDI= program 68] "_68" G4 |[I:MIDI= program 69] "_69" G4 |[I:MIDI= program 70] "_70" G4 |[I:MIDI= program 71] "_71" G4 |\n';
	theValue += '[I:MIDI= program 72] "_72" G4 |[I:MIDI= program 73] "_73" G4 |[I:MIDI= program 74] "_74" G4 |[I:MIDI= program 75] "_75" G4 |[I:MIDI= program 76] "_76" G4 |[I:MIDI= program 77] "_77" G4 |[I:MIDI= program 78] "_78" G4 |[I:MIDI= program 79] "_79" G4 |\n';
	theValue += '[I:MIDI= program 80] "_80" G4 |[I:MIDI= program 81] "_81" G4 |[I:MIDI= program 82] "_82" G4 |[I:MIDI= program 83] "_83" G4 |[I:MIDI= program 84] "_84" G4 |[I:MIDI= program 85] "_85" G4 |[I:MIDI= program 86] "_86" G4 |[I:MIDI= program 87] "_87" G4 |\n';
	theValue += '[I:MIDI= program 88] "_88" G4 |[I:MIDI= program 89] "_89" G4 |[I:MIDI= program 90] "_90" G4 |[I:MIDI= program 91] "_91" G4 |[I:MIDI= program 92] "_92" G4 |[I:MIDI= program 93] "_93" G4 |[I:MIDI= program 94] "_94" G4 |[I:MIDI= program 95] "_95" G4 |\n';
	theValue += '[I:MIDI= program 96] "_96" G4 |[I:MIDI= program 97] "_97" G4 |[I:MIDI= program 98] "_98" G4 |[I:MIDI= program 99] "_99" G4 |[I:MIDI= program 100] "_100" G4 |[I:MIDI= program 101] "_101" G4 |[I:MIDI= program 102] "_102" G4 |[I:MIDI= program 103] "_103" G4 |\n';
	theValue += '[I:MIDI= program 104] "_104" G4 |[I:MIDI= program 105] "_105" G4 |[I:MIDI= program 106] "_106" G4 |[I:MIDI= program 107] "_107" G4 |[I:MIDI= program 108] "_108" G4 |[I:MIDI= program 109] "_109" G4 |[I:MIDI= program 110] "_110" G4 |[I:MIDI= program 111] "_111" G4 |\n';
	theValue += '[I:MIDI= program 112] "_112" G4 |[I:MIDI= program 113] "_113" G4 |[I:MIDI= program 114] "_114" G4 |[I:MIDI= program 115] "_115" G4 |[I:MIDI= program 116] "_116" G4 |[I:MIDI= program 117] "_117" G4 |[I:MIDI= program 118] "_118" G4 |[I:MIDI= program 119] "_119" G4 |\n';
	theValue += '[I:MIDI= program 120] "_120" G4 |[I:MIDI= program 121] "_121" G4 |[I:MIDI= program 122] "_122" G4 |[I:MIDI= program 123] "_123" G4 |[I:MIDI= program 124] "_124" G4 |[I:MIDI= program 125] "_125" G4 |[I:MIDI= program 126] "_126" G4 |[I:MIDI= program 127] "_127" G4 |\n';
	theValue += '[I:MIDI= program 128] "_128" G4 |[I:MIDI= program 129] "_129" G4 |[I:MIDI= program 130] "_130" G4 |[I:MIDI= program 131] "_131" G4 |[I:MIDI= program 132] "_132" G4 |[I:MIDI= program 133] "_133" G4 |[I:MIDI= program 134] "_134" G4 |[I:MIDI= program 135] "_135" G4 |\n';
	theValue += '[I:MIDI= program 136] "_136" G4 |[I:MIDI= program 137] "_137" G4 |[I:MIDI= program 138] "_138" G4 |[I:MIDI= program 139] "_139" G4 |[I:MIDI= program 140] "_140" G4 |[I:MIDI= program 141] "_141" G4 |[I:MIDI= program 142] "_142" G4 |[I:MIDI= program 143] "_143" G4 |[I:MIDI= program 144] "_144" G4 |\n';
	theValue += '[I:MIDI= program 145] "_145" G4 |[I:MIDI= program 146] "_146" G4 |[I:MIDI= program 147] "_147" G4 |[I:MIDI= program 148] "_148" G4 |[I:MIDI= program 149] "_149" G4 | [I:MIDI= program 150] "_150" G4 |]\n';

	// Do common tune addition processing
	ProcessAddTune(theValue);

}

// 
// Common code after template add
//
function ProcessAddTune(theValue){

	// Force scroll into view
	var theOriginalLength = gTheABC.value.length; 

	// Add the tune to the ABC
	setABCEditorText(gTheABC.value+theValue);

	// Set dirty
	gIsDirty = true;

	// Reset the displayed name base
	if (gDisplayedName != "No ABC file selected"){

		if (gDisplayedName.indexOf("+ added tunes") == -1){

			gDisplayedName = gDisplayedName + " + added tunes";

		}
	}

	RenderAsync(true,null,function(){

		UpdateNotationTopPosition();

		var nTunes = CountTunes();

		if (gIsQuickEditor){
			
			gCurrentTune = nTunes-1;

		}

		// No autoscroll on mobile
		if (isMobileBrowser()){

			gCurrentTune = nTunes-1;

		}

		var theTune = getTuneByIndex(nTunes-1);

		var tuneOffset = gTheABC.value.length-theTune.length;

		if (!gIsMaximized){

			// Scroll the tune ABC into view
		    ScrollABCTextIntoView(gTheABC,tuneOffset,tuneOffset,10);

		    if (isMobileBrowser()){
	    		gTheABC.blur();
		    	return;
		    }
		    
	    	gTheABC.blur();
	    	gTheABC.focus();

	    }

		// Scroll the tune into view
		MakeTuneVisible(true);
		
	});
}

//
// To scroll text into view
// Fraction sets how far down to put the scrolled text as a fraction of the text area height
//

function getTextAreaContentHeight(textarea,offset) {

  // Create a hidden div to measure the position of the offset
  const div = document.createElement('div');
  const style = getComputedStyle(textarea);

  // Copy textarea styles
  Object.assign(div.style, {
    position: 'absolute',
    whiteSpace: 'pre-wrap',
    visibility: 'hidden',
    overflowWrap: 'break-word',
    top: '0',
    left: '0',
    width: textarea.offsetWidth + 'px',
    font: style.font,
    padding: style.padding,
    border: style.border,
    lineHeight: style.lineHeight,
  });

  // Text before and after offset
  const textBefore = textarea.value.slice(0, offset);
  const textAtOffset = textarea.value[offset] || ' ';
  const textAfter = textarea.value.slice(offset + 1);

  // Wrap offset character in a span to get its position
  div.innerHTML = textBefore + `<span id="caret-marker">${textAtOffset}</span>` + textAfter;

  document.body.appendChild(div);

  const marker = div.querySelector('#caret-marker');

  var res = marker.offsetTop;

  // Clean up
  document.body.removeChild(div);

  return res;
}


function ScrollABCTextIntoView(textarea, selectionStart, selectionEnd, fraction) {

    // First scroll selection region to view
    const fullText = textarea.value;
    
    textarea.value = fullText.substring(0, selectionEnd);

    // For some unknown reason, you must store the scollHeight to a variable
    // before setting the textarea value. Otherwise it won't work for long strings
    
    const scrollHeight = textarea.scrollHeight;
    //console.log("scrollHeight: "+scrollHeight);
    
    textarea.value = fullText;
    
    let scrollTop = scrollHeight;
    
    const textareaHeight = textarea.clientHeight;
    //console.log("textareaHeight: "+textareaHeight);

    // Special handling when the text doesn't fill the text area, gives bad scrollTop results
    if (scrollTop == textareaHeight){
    	scrollTop = getTextAreaContentHeight(textarea,selectionEnd);
    	//console.log("matching heights, calculated scrollTop: "+scrollTop)
    }

    // scroll selection to specific fraction of textarea
    scrollTop -= textareaHeight / fraction;

    if (scrollTop<0){
    	scrollTop = 0;
    }

    //console.log("scrollTop: "+scrollTop);

    textarea.scrollTop = scrollTop;

    // Continue to set selection range
    // MAE 21 Aug 2024 - Avoiding onscreen keyboard lift on iPad
    if (!giPadTwoColumn){ 
    	textarea.setSelectionRange(selectionStart, selectionEnd);
    }

}

//
// Click handler for render divs
// Finds the tune by notation div id and then scrolls the ABC into view
//

function RenderDivClickHandler(e){

	if (gRenderingPDF){
		return;
	}

	if (gDisableNotationRendering){
		return;
	}

	if (gUIHidden && gUIHiddenAllowPlay) {

		if (gUIHiddenClickTimeout) {

			clearTimeout(gUIHiddenClickTimeout);

			gUIHiddenClickTimeout = null;

			if (!gUIHiddenPlayerEnabled) {

				gUIHiddenPlayerEnabled = true;

				PlayABC();

				setTimeout(function() {

					const button = document.querySelector('button.abcjs-midi-start');

					if (button) {

						button.click();

					}

				}, 250);

			} else {

				// Otherwise just play/pause
				const button = document.querySelector('button.abcjs-midi-start');

				if (button) {

					button.click();

				}
				
			}
		} else {

			var thisID = this.id;

			if (thisID && (thisID != "") && (thisID.indexOf("notation")==0)){

				var clickedTune = this.id.replace("notation","");

				if (clickedTune != ""){

					var clickedTuneIndex = parseInt(clickedTune);
					
					//console.log("clickedTuneIndex = "+clickedTuneIndex+" gLastClickedTune = "+gLastClickedTune);

					if (clickedTuneIndex != gUIHiddenTuneIndex){

						//console.log("clickedTuneIndex = "+clickedTuneIndex+" gUIHiddenTuneIndex = "+gUIHiddenTuneIndex);

						gUIHiddenTuneIndex = clickedTuneIndex;

						gPlayABCTuneIndex = gUIHiddenTuneIndex;

						// Setup values to allow player to launch the correct tune

						var offset = findTuneOffsetByIndex(gUIHiddenTuneIndex);

						//console.log("offset = "+offset);

						gTheABC.selectionStart = offset;

						// If the player is up, close it
						if (gUIHiddenPlayerEnabled){

							var theOKButtons = document.getElementsByClassName("modal_flat_ok");

							// Find the button that says "Close" and hook its click handler to make sure music stops on close
							// Need to search through the modals since there may be a first time share dialog also present
							// the first time someone plays a linked PDF tune

							var theOKButton = null;

							for (var i=0;i<theOKButtons.length;++i){

								theOKButton = theOKButtons[i];

								if (theOKButton.innerText == "Close"){

									var originalOnClick = theOKButton.onclick;

									theOKButton.onclick = function(){

										originalOnClick(); 
									
										if (gSynthControl){
												
											gSynthControl.destroy();

											gSynthControl = null;

										}

										// If on iOS and the muting controller installed, dispose it now
										if (gIsIOS){

											if (gTheMuteHandle){
											 	gTheMuteHandle.dispose();
					  							gTheMuteHandle = null;
					  						}
										}

									};

									break;

								}
							}

							theOKButton.click();

							gUIHiddenPlayerEnabled = false;	

						}

					}

				}
				
			}

			gUIHiddenClickTimeout = setTimeout(() => {

				if (isPureDesktopBrowser()){

					// Shift click rewinds
					if (e.shiftKey) {

						const button = document.querySelector('button.abcjs-midi-reset');

						if (button) {

							button.click();

						}

					}
				}

				gUIHiddenClickTimeout = null;

			},UIHiddenTimerDelay);
		}

		return;
	}

	var thisID = this.id;

	if (thisID && (thisID != "") && (thisID.indexOf("notation")==0)){

		var clickedTune = this.id.replace("notation","");

		if (clickedTune != ""){

			var clickedTuneIndex = parseInt(clickedTune);
			
			//console.log("clickedTuneIndex = "+clickedTuneIndex+" gLastClickedTune = "+gLastClickedTune);

			if (clickedTuneIndex == gLastClickedTune){
				return;
			}

			gLastClickedTune = clickedTuneIndex;

			var tuneOffset = findTuneOffsetByIndex(clickedTuneIndex);

			if (!gIsMaximized){

				if (!gIsQuickEditor){
					// Scroll the tune ABC into view
				    ScrollABCTextIntoView(gTheABC,tuneOffset,tuneOffset,10);
				}

			    if (isMobileBrowser()){
		    		gTheABC.blur();
			    	return;
			    }

		    	gTheABC.blur();
		    	gTheABC.focus();

		    }
		    else{

		    	// Save the click info for later minimize
		    	gGotRenderDivClick = true;
		    	gRenderDivClickOffset = tuneOffset;

		    }
		}
	}
}

// 
// Generate the rendering divs
//
function GenerateRenderingDivs(nTunes) {

	//console.log("GenerateRenderingDivs");

	if (gDisableNotationRendering){

		//console.log("GenerateRenderingDivs - Rendering disabled");

		return;

	}

	// Clear the div
	var notationHolder = gTheNotation;
	notationHolder.innerHTML = "";

	for (var i = 0; i < nTunes; ++i) {

		var el = document.createElement('div');

		el.id = "notation" + i;

		// Space the tunes out a bit
		el.classList.add("tunespacer");

		// Force page break between tunes when printing from the browser
		el.classList.add("pagebreak");

		// Set up the click handler
		el.onclick = RenderDivClickHandler;


		// Tool tip for hidden UI case
		if (gUIHidden && gUIHiddenAllowPlay){
			if (isPureDesktopBrowser()){
				el.title = "Double-click to play/pause. Shift-click to rewind playback.";
			}
			else{
				SetupEmbeddedMobileEventHanders(el);
			}
		}

		notationHolder.appendChild(el);

	}

}

//
// Share URL related code provided by Philip McGarvey
//
function getUrlWithoutParams() {

	return "https://michaeleskin.com/abctools/abctools.html";

}

//
// Generate a share link for either all the tunes or just what's passed in
//
function FillUrlBoxWithAbcInLZW(ABCtoEncode,bUpdateUI) {

	// Encode all the tunes or just what's passed in?
	var abcText = "";

	if (!ABCtoEncode){
		abcText = gTheABC.value;
	}
	else{
		abcText = ABCtoEncode;		
	}

	var abcInLZW = LZString.compressToEncodedURIComponent(abcText);

	var format = GetRadioValue("notenodertab");

	var capo = gCapo;

	var ssp = gStaffSpacing-STAFFSPACEOFFSET;

	var url = getUrlWithoutParams() + "?lzw=" + abcInLZW + "&format=" + format + "&ssp=" + ssp;

	// Add a capo parameter for mandolin and guitar
	var postfix = "";

	switch (format){

		case "noten":
		case "notenames":
		case "whistle":
		case "recorder":
			break;

		case "mandolin":
		case "gdad":
		case "cgda":
		case "cgdae":
		case "dgdae":
		case "guitare":
		case "guitard":
		case "uke":

			postfix = "&capo=" + capo;

			// Convey show tab names status
			if (gShowTabNames){

				postfix += "&stn=true";

			}
			else{

				postfix += "&stn=false";
				
			}

			break;
	}

	url += postfix;

	// If using Comhaltas or share link forced override
	if (gUseComhaltasABC || gForceComhaltasABC){
		url += "&cce=1"	
	}

	// If just encoding some ABC, return it now
	if (ABCtoEncode){
		return url;
	}

	// Add the tune set name
	var theTuneCount = CountTunes();

	var theName = getDescriptiveFileName(theTuneCount,false);

	// Replace hashes
	theName = theName.replaceAll("#","^");

	url += "&name=" + theName;

	// Hide the QR code
	document.getElementById("qrcode").style.display = "none";

	// First disallow all sharing until valid URL validated
	gAllowURLSave = false;
	gAllowQRCodeSave = false;

	// GoDaddy web servers have a maximum URL length
	if (url.length < 8100) {

		gAllowURLSave = true;

		// If fits in a QR code, show the QR code button
		var maxURLLength = MAXQRCODEURLLENGTH;
		
		if (url.length < maxURLLength) {
			gAllowQRCodeSave = true;
		}

	}

	if (bUpdateUI){

		var urltextbox = document.getElementById("urltextbox");

		if (!gAllowURLSave) {

			url = " *** The URL link would be too long to share. Please try sharing fewer tunes. ***";

			document.getElementById("generateqrcode").classList.remove("urlcontrols");
			document.getElementById("generateqrcode").classList.add("urlcontrolsdisabled");

			document.getElementById("shortenurl").classList.remove("urlcontrols");
			document.getElementById("shortenurl").classList.add("urlcontrolsdisabled");

			document.getElementById("testurl").classList.remove("urlcontrols");
			document.getElementById("testurl").classList.add("urlcontrolsdisabled");

			document.getElementById("copyurl").classList.remove("urlcontrols");
			document.getElementById("copyurl").classList.add("urlcontrolsdisabled");

			document.getElementById("saveurl").classList.remove("urlcontrols");
			document.getElementById("saveurl").classList.add("urlcontrolsdisabled");


		} else {

			document.getElementById("testurl").classList.remove("urlcontrolsdisabled");
			document.getElementById("testurl").classList.add("urlcontrols");

			document.getElementById("saveurl").classList.remove("urlcontrolsdisabled");
			document.getElementById("saveurl").classList.add("urlcontrols");

			document.getElementById("copyurl").classList.remove("urlcontrolsdisabled");
			document.getElementById("copyurl").classList.add("urlcontrols");

			document.getElementById("shortenurl").classList.remove("urlcontrolsdisabled");
			document.getElementById("shortenurl").classList.add("urlcontrols");
		
			if (gAllowQRCodeSave) {

				document.getElementById("generateqrcode").classList.remove("urlcontrolsdisabled");
				document.getElementById("generateqrcode").classList.add("urlcontrols");

			} else {

				document.getElementById("generateqrcode").classList.remove("urlcontrols");
				document.getElementById("generateqrcode").classList.add("urlcontrolsdisabled");

			}
		}

		urltextbox.value = url;

	}

	return url;
}

function CreateURLfromHTML() {

	FillUrlBoxWithAbcInLZW(null,true);

	urltextbox = document.getElementById("urltextbox");
	urltextbox.focus();
	urltextbox.setSelectionRange(0, 0);

	// Clear the QR code
	clearQRCode();

}

//
// Generate a QR code from the share URL
//
// Shift-click allows generic creation of QR codes, as long as the value is not too long to fit 
//

function clearQRCode() {

	if (gTheQRCode) {
		gTheQRCode.clear();
	}

}

function GenerateQRCode(e) {

	// Keep track of dialogs
	sendGoogleAnalytics("sharing","generate_qr_code");

	var isShiftOverride = false;

	var theURL = document.getElementById("urltextbox").value;

	// Shift-click allows generic QR code generation
	if (e.shiftKey){

		var maxURLLength = MAXQRCODEURLLENGTH;
	
		if (theURL.length > maxURLLength) {

			DayPilot.Modal.alert('<p style="text-align:center;font-family:helvetica;font-size:14pt;">Share URL is too long to generate a QR Code</p>',{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;

		}

		isShiftOverride = true;

	}
	else{

		// Normal QR code generation

		if (!gAllowQRCodeSave){

			return;
		}

	}


	if (gTheQRCode == null) {

		gTheQRCode = new QRCode(document.getElementById("qrcode"), {
			text: theURL,
			width: 548,
			height: 548,
			colorDark: "#000000",
			colorLight: "#ffffff",
			border: 16,
    		correctLevel : QRCode.CorrectLevel.M 
		});

	} else {

		gTheQRCode.clear();

		gTheQRCode.makeCode(theURL);

	}

	document.getElementById("qrcode").style.display = "inline-block";

	// Find the image
	theQRCodeImage = document.querySelectorAll('div[id="qrcode"] > img');

	var theTitles = "Custom QR Code";
	var theImageName = "custom_qr_code";

	if (theQRCodeImage && (theQRCodeImage.length > 0)) {

		if (!isShiftOverride){

			// Get all the titles of the tunes in the text area
			theTitles = GetAllTuneTitles();

			// Get the current instrument setting
			var theTab = GetRadioValue("notenodertab");

			var postfix = "";

			switch (theTab){
				case "noten":
					postfix = "<br/><br/>(Standard Notation)";
					break;
				case "notenames":
					postfix = "<br/><br/>(Note Names Tab)";
					break;
				case "mandolin":
					postfix = "<br/><br/>(Mandolin Tab";
					if (gCapo != 0){
						postfix += " - Capo on "+gCapo;
					}
					postfix += ")";
					break;
				case "gdad":
					postfix = "<br/><br/>(Bouzouki GDAD Tab";
					if (gCapo != 0){
						postfix += " - Capo on "+gCapo;
					}
					postfix += ")";
					break;
				case "cgda":
					postfix = "<br/><br/>(Mandola CGDA Tab";
					if (gCapo != 0){
						postfix += " - Capo on "+gCapo;
					}
					postfix += ")";
					break;
				case "cgdae":
					postfix = "<br/><br/>(CGDAE Tab";
					if (gCapo != 0){
						postfix += " - Capo on "+gCapo;
					}
					postfix += ")";
					break;
				case "dgdae":
					postfix = "<br/><br/>(DGDAE Tab";
					if (gCapo != 0){
						postfix += " - Capo on "+gCapo;
					}
					postfix += ")";
					break;
				case "guitare":
					postfix = "<br/><br/>(Standard Guitar Tab";
					if (gCapo != 0){
						postfix += " - Capo on "+gCapo;
					}
					postfix += ")";
					break;
				case "guitard":
					postfix = "<br/><br/>(DADGAD Guitar Tab";
					if (gCapo != 0){
						postfix += " - Capo on "+gCapo;
					}
					postfix += ")";
					break;
				case "uke":
					postfix = "<br/><br/>(Ukulele Tab";
					if (gCapo != 0){
						postfix += " - Capo on "+gCapo;
					}
					postfix += ")";
					break;
				case "whistle":
					postfix = "<br/><br/>(Whistle Tab)";
					break;
				case "recorder":
					postfix = "<br/><br/>(Recorder Tab)";
					break;
			}

			theTitles += postfix;

			var theTuneCount = CountTunes();

			// Derive a suggested name from the ABC
			theImageName = getDescriptiveFileName(theTuneCount,true);

		}
		
		// Get the QR code image
		theQRCodeImage = theQRCodeImage[0];

		var w = window.open("");

		setTimeout(function() {

			var theImageSource = theQRCodeImage.src;

			var theImageHTML = theQRCodeImage.outerHTML.replace("display: block;","");

			var theOutputHTML = '<div style="text-align:center;padding:24px;margin-top:0px;margin-bottom:0px;">';
			theOutputHTML +=    theImageHTML;
			theOutputHTML +=    '<p style="font-family:times;font-size:15pt;margin-top:18px;margin-bottom:0px;">' + theTitles + '</p>';			
			theOutputHTML +=    '<p style="font-family:times;font-size:16pt;margin-top:32px;margin-bottom:0px;"><strong>Get Your QR Code</strong></p>';
			theOutputHTML +=    '<p style="font-family:times;font-size:16pt;margin-top:32px;margin-bottom:0px;"><a href="'+theImageSource+'" download="'+theImageName+'.png" style="text-decoration:none;color:darkblue">Click here to download&nbsp;' + theImageName +'.png&nbsp;to your system.</a></p>';
			theOutputHTML +=    '<p style="font-family:times;font-size:16pt;margin-top:32px;margin-bottom:0px;"><strong>Use Your QR Code</strong></p>';
			theOutputHTML +=    '<p style="font-family:times;font-size:15pt;margin-top:30px;margin-bottom:0px;">Share QR Codes on social media or email them to friends like any other photo.</p>';
			theOutputHTML +=    '<p style="font-family:times;font-size:15pt;margin-top:24px;margin-bottom:0px;">Scanning the code with the Camera app on any iOS or Android phone will load the</p>';
			theOutputHTML +=    '<p style="font-family:times;font-size:15pt;margin-top:6px;margin-bottom:0px;">ABC Transcription Tool with your tune set into the browser on the device.</p>';
			theOutputHTML +=    '</div>';

			w.document.write(theOutputHTML);

			setTimeout(function(){

	        	w.document.title = "ABC Tools Tune Sharing QR Code";

	        }, 100);

		}, 1000);

	}

}

//
// Round trip the ABC through MusicXML and back to ABC
//
function RoundTripMusicXML(){

	// Don't allow MusicXML round trip while offline
	if (!navigator.onLine){

		var thePrompt = "Reformat Using MusicXML not available while offline.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	// Any tunes to reformat?
	if (CountTunes() == 0){

		var thePrompt = "No ABC tunes to reformat.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	var theHeader =	FindPreTuneHeader(gTheABC.value);

	var theTune = getTuneByIndex(0);
	
	var theTitle = GetFirstTuneTitle(true);

	showTheSpinner();

	try{
		fetch(`https://seisiuneer.pythonanywhere.com/abc2xml`, {
		    method: 'POST',
		    body: theTune
		  })
		.then(response => {
		    return response.text();
		})
		.then(data => {

			setABCEditorText(theHeader + importMusicXML(data,theTitle));

			RenderAsync(true,null,function(){
				hideTheSpinner();
			});
		});
	}
	catch(err){
		hideTheSpinner();
	}
}

//
// Save the ABC file converted to XML
//
function SaveABCAsMusicXML(theTune, fname){

	//debugger;
	
	// Don't allow shortening while offline
	if (!navigator.onLine){

		var thePrompt = "Save as MusicXML not available while offline.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	fetch(`https://seisiuneer.pythonanywhere.com/abc2xml`, {
	    method: 'POST',
	    body: theTune
	  })
	.then(response => {

	    return response.text();

	  })
	  .then(data => {;

		var a = document.createElement("a");

		document.body.appendChild(a);

		a.style = "display: none";

		var blob = new Blob([data], {type: "text/plain"}),

		url = window.URL.createObjectURL(blob);
		a.href = url;
		a.download = fname;
		a.click();

		document.body.removeChild(a);

		setTimeout(function() {
		  window.URL.revokeObjectURL(url);
		}, 1000);		

		// Update the displayed name
		gDisplayedName = fname;

		// Mark ABC as from a file
		gABCFromFile = true;

		// Update the displayed filename
		var fileSelected = document.getElementById('abc-selected');
		fileSelected.innerText = fname;

		// Clear the dirty count
		gIsDirty = false;

	  })
	  .catch(
	  	error => {

			var thePrompt = "There was an issue converting the ABC to MusicXML.";

			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;


	  });
}

//
// Save the ABC file
//
function doSaveABCFile(fname,theData){

	// Keep this around
	if ((fname.endsWith(".xml")) || (fname.endsWith(".XML"))){

		// Keep track of exports
		sendGoogleAnalytics("export","SaveXML");

		var thisTune = getTuneByIndex(0);

		SaveABCAsMusicXML(thisTune, fname);

		return;

	}

	// Keep track of exports
	sendGoogleAnalytics("export","SaveABC");

	// Give it a good extension
	if (isPureDesktopBrowser()){

		if ((!fname.endsWith(".abc")) && (!fname.endsWith(".txt")) && (!fname.endsWith(".ABC")) && (!fname.endsWith(".TXT"))){

			// Give it a good extension
			fname = fname.replace(/\..+$/, '');
			fname = fname + ".abc";

		}
	}
	else{
		// iOS and Android have odd rules about text file saving
		// Give it a good extension
		fname = fname.replace(/\..+$/, '');
		fname = fname + ".txt";

	}

	var a = document.createElement("a");

	document.body.appendChild(a);

	a.style = "display: none";

	var blob = new Blob([theData], {type: "text/plain"}),

	url = window.URL.createObjectURL(blob);
	a.href = url;
	a.download = fname;
	a.click();

	document.body.removeChild(a);

	setTimeout(function() {
	  window.URL.revokeObjectURL(url);
	}, 1000);		

	// Update the displayed name
	gDisplayedName = fname;

	// Mark ABC as from a file
	gABCFromFile = true;

	// Update the displayed filename
	var fileSelected = document.getElementById('abc-selected');
	fileSelected.innerText = fname;

	// Clear the dirty count
	gIsDirty = false;
}

function saveABCFile(thePrompt, thePlaceholder, theData){

	DayPilot.Modal.prompt(thePrompt, thePlaceholder,{ theme: "modal_flat", top: 200, autoFocus: false, scrollWithPage: (AllowDialogsToScroll()) }).then(function(args) {

		var fname = args.result;

		// If the user pressed Cancel, exit
		if (fname == null){
		  return null;
		}

		// Strip out any naughty HTML tag characters
		fname = cleanFileName(fname);

		if (fname.length == 0){
		  return null;
		}  

		// Do the save
		doSaveABCFile(fname,theData); 

	});
}

//
// Save a text file
//
function saveTextFile(thePrompt, thePlaceholder, theData){

	DayPilot.Modal.prompt(thePrompt, thePlaceholder,{ theme: "modal_flat", top: 200, autoFocus: false, scrollWithPage: (AllowDialogsToScroll()) }).then(function(args) {

		var fname = args.result;

		// If the user pressed Cancel, exit
		if (fname == null){
		  return null;
		}

		// Strip out any naughty HTML tag characters
		fname = cleanFileName(fname);

		if (fname.length == 0){
		  return null;
		}      

		// Give it a good extension
		if (isPureDesktopBrowser()){

			if ((!fname.endsWith(".txt")) && (!fname.endsWith(".TXT"))){

				// Give it a good extension
				fname = fname.replace(/\..+$/, '');
				fname = fname + ".txt";

			}
		}
		else{
			// iOS and Android have odd rules about text file saving
			// Give it a good extension
			fname = fname.replace(/\..+$/, '');
			fname = fname + ".txt";
		}

		var a = document.createElement("a");

		document.body.appendChild(a);

		a.style = "display: none";

		var blob = new Blob([theData], {type: "text/plain"}),

		url = window.URL.createObjectURL(blob);
		a.href = url;
		a.download = fname;
		a.click();

		document.body.removeChild(a);

		setTimeout(function() {
		  window.URL.revokeObjectURL(url);
		}, 1000);

	});

}

//
// Save a text file with an arbitrary extension
//
function saveTextFileDeveloper(thePrompt, thePlaceholder, theData){

	DayPilot.Modal.prompt(thePrompt, thePlaceholder,{ theme: "modal_flat", top: 200, autoFocus: false, scrollWithPage: (AllowDialogsToScroll()) }).then(function(args) {

		var fname = args.result;

		// If the user pressed Cancel, exit
		if (fname == null){
		  return null;
		}

		// Strip out any naughty HTML tag characters
		fname = cleanFileName(fname);

		if (fname.length == 0){
		  return null;
		}      

		// Give it a good extension
		if (!isPureDesktopBrowser()){

			// iOS and Android have odd rules about text file saving
			// Give it a good extension
			fname = fname.replace(/\..+$/, '');
			fname = fname + ".txt";
		}

		var a = document.createElement("a");

		document.body.appendChild(a);

		a.style = "display: none";

		var blob = new Blob([theData], {type: "text/plain"}),

		url = window.URL.createObjectURL(blob);
		a.href = url;
		a.download = fname;
		a.click();

		document.body.removeChild(a);

		setTimeout(function() {
		  window.URL.revokeObjectURL(url);
		}, 1000);

	});

}

//
// Save a text file with an arbitrary extension
//
function saveCSVFile(thePrompt, thePlaceholder, theData){

	DayPilot.Modal.prompt(thePrompt, thePlaceholder,{ theme: "modal_flat", top: 200, autoFocus: false, scrollWithPage: (AllowDialogsToScroll()) }).then(function(args) {

		var fname = args.result;

		// If the user pressed Cancel, exit
		if (fname == null){
		  return null;
		}

		// Strip out any naughty HTML tag characters
		fname = cleanFileName(fname);

		if (fname.length == 0){
		  return null;
		}      

		// Give it a CSV extension
		fname = fname.replace(/\..+$/, '');
		fname = fname + ".csv";

		var a = document.createElement("a");

		document.body.appendChild(a);

		a.style = "display: none";

		var blob = new Blob([theData], {type: "text/csv"}),

		url = window.URL.createObjectURL(blob);
		a.href = url;
		a.download = fname;
		a.click();

		document.body.removeChild(a);

		setTimeout(function() {
		  window.URL.revokeObjectURL(url);
		}, 1000);

	});

}

//
// Copy to Clipboard Polyfill
//
function CopyToClipboard(textToCopy) {

	//
	// Put this in a try/catch just to be safe
	//
	try {

	    // navigator clipboard api needs a secure context (https)
	    if (navigator.clipboard && window.isSecureContext) {
	    
	        // navigator clipboard api method'
	        return navigator.clipboard.writeText(textToCopy);
	    
	    } else {
	    
	        // text area method
	    
	        let textArea = document.createElement("textarea");
	    
	        textArea.value = textToCopy;
	    
	        // make the textarea out of viewport
	        textArea.style.position = "fixed";
	        textArea.style.left = "-999999px";
	        textArea.style.top = "-999999px";
	    
	        document.body.appendChild(textArea);
	    
	        textArea.focus();
	        textArea.select();
	    
	        return new Promise((res, rej) => {
	            // here the magic happens
	            document.execCommand('copy') ? res() : rej();
	            textArea.remove();
	        });
	    }
	} 
	catch (error){

		console.log("CopyToClipboard error: "+error);

	}
}


//
// Override MIDI program number directive 
//
function OverrideOneTuneMIDIParams(theTune, soundFont, melodyProg, bassProg, chordProg, bassVol, chordVol){

	var theOutput = theTune;

	// Replace soundfont 

	var theOldSoundFont = gTheActiveSoundFont;

	var gotSoundFont = false;
	var commandToReplace = "%abcjs_soundfont ";

	var searchRegExp = /%abcjs_soundfont .+\s*/gm

	var soundfontRequested = theTune.match(searchRegExp);

	if ((soundfontRequested) && (soundfontRequested.length > 0)){

		gotSoundFont = true;

	}
	else{

		searchRegExp = /%soundfont .+\s*/gm

		soundfontRequested = theTune.match(searchRegExp);

		if ((soundfontRequested) && (soundfontRequested.length > 0)){

			gotSoundFont = true;

			commandToReplace = "%soundfont ";

		}
	}

	if (gotSoundFont){

		// Map sound font to ABC name
		var theSoundFont = "fluid";

		if (soundFont.indexOf("FluidR3_GM")!=-1){
			theSoundFont = "fluid";
		}else
		if (soundFont.indexOf("Musyng")!=-1){
			theSoundFont = "musyng";
		}else
		if (soundFont.indexOf("fatboy")!=-1){
			theSoundFont = "fatboy";
		}else
		if (soundFont.indexOf("canvas")!=-1){
			theSoundFont = "canvas";
		}else
		if (soundFont.indexOf("mscore")!=-1){
			theSoundFont = "mscore";
		}else
		if (soundFont.indexOf("arachno")!=-1){
			theSoundFont = "arachno";
		}else
		if (soundFont.indexOf("fluidhq")!=-1){
			theSoundFont = "fluidhq";
		}

		for (var i=0;i<soundfontRequested.length;++i){

			theOutput = theOutput.replace(soundfontRequested[i].trim(),commandToReplace+theSoundFont);

			if (theOldSoundFont != soundFont){

				// Reset the current soundfont to the selected font
				gTheActiveSoundFont = soundFont;

				// Reset the abcjs sounds cache
				gSoundsCacheABCJS = {};

			}

		}

	}

	// Replace melody programs
	var searchRegExp = /%%MIDI program \d+\s*/gm

	var melodyProgramRequested = theTune.match(searchRegExp);

	if ((melodyProgramRequested) && (melodyProgramRequested.length > 0)){

		for (var i=0;i<melodyProgramRequested.length;++i){

			theOutput = theOutput.replace(melodyProgramRequested[i].trim(),"%%MIDI program "+melodyProg);

		}

	}

	// Replace bass programs
	searchRegExp = /%%MIDI bassprog \d+\s*/gm

	var bassProgramRequested = theTune.match(searchRegExp);

	if ((bassProgramRequested) && (bassProgramRequested.length > 0)){

		for (var i=0;i<bassProgramRequested.length;++i){

			theOutput = theOutput.replace(bassProgramRequested[i].trim(),"%%MIDI bassprog "+bassProg);
		}

	}

	// Replace chord programs
	searchRegExp = /%%MIDI chordprog \d+\s*/gm

	var chordProgramRequested = theTune.match(searchRegExp);

	if ((chordProgramRequested) && (chordProgramRequested.length > 0)){

		for (var i=0;i<chordProgramRequested.length;++i){

			theOutput = theOutput.replace(chordProgramRequested[i].trim(),"%%MIDI chordprog "+chordProg);
		}

	}

	// Replace bass volume
	searchRegExp = /%%MIDI bassvol \d+\s*/gm

	var bassVolumeRequested = theTune.match(searchRegExp);

	if ((bassVolumeRequested) && (bassVolumeRequested.length > 0)){

		for (var i=0;i<bassVolumeRequested.length;++i){

			theOutput = theOutput.replace(bassVolumeRequested[i].trim(),"%%MIDI bassvol "+bassVol);
		}

	}

	// Replace chord volume
	searchRegExp = /%%MIDI chordvol \d+\s*/gm

	var chordVolumeRequested = theTune.match(searchRegExp);

	if ((chordVolumeRequested) && (chordVolumeRequested.length > 0)){

		for (var i=0;i<chordVolumeRequested.length;++i){

			theOutput = theOutput.replace(chordVolumeRequested[i].trim(),"%%MIDI chordvol "+chordVol);
		}

	}

	//console.log(theOutput);

	return theOutput;
	
}


//
// Find all text before the first tune 
//
function FindPreTuneHeader(theABC){

	var theResult;

	var searchRegExp = /^X:.*[\r\n]*/m 

	var firstTuneIndex = theABC.search(searchRegExp);

	// No tunes, or first string is a tune so no header
	if ((firstTuneIndex == -1) || (firstTuneIndex == 0)){

		return "";

	}
	else{

		theResult = theABC.substring(0,firstTuneIndex);

	} 

	return theResult;
}



//
// Inject two bar intro click tracks into all the tunes
//
function InjectRepeatsAndClickTrackAll(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","InjectRepeatsAndClickTrackAll");

	var nTunes = CountTunes();

	if (nTunes == 0){
		return;
	}

	const before_tune_actions = [
	    { name: "Do nothing", id: 0 },
	    { name: "Inject two bars of silence", id: 1 },
	    { name: "Inject a two-bar style-appropriate click intro", id: 2 },
	    { name: "Inject both two bars of silence and click intro", id: 3 }
  	];

	// Setup initial values
	const theData = {
	  configure_repeats:1,
	  configure_before_each_tune: 0
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject Repeats and Two-Bar Silence and/or Click Intros&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#injectrepeatsandtwobarclickintros" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:24px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject repeats into each tune in the ABC area by  appending the entire ABC for each tune to itself multiple times.</p>'},	  
	  {html: '<p style="margin-top:24px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica">You may also optionally inject two bars of silence and/or a click intro before each tune.</p>'},	  
	  {name: "How many times through each tune:", id: "configure_repeats", type:"number", cssClass:"configure_repeats_form_text"}, 
	  {name: "Before each tune:", id: "configure_before_each_tune", type:"select", options:before_tune_actions, cssClass:"configure_mp3_before_tune_select"},
	  {html: '<p style="margin-top:16px;font-size:12pt;line-height:18pt;font-family:helvetica"><strong>To append two-bars of silence and/or a click intro before each tune:</strong></p>'},	  
	  {html: '<p style="margin-top:16px;font-size:12pt;line-height:18pt;font-family:helvetica">1) Set <strong>How many times through each tune:</strong> to 1</p>'},	  
	  {html: '<p style="margin-top:16px;font-size:12pt;line-height:18pt;font-family:helvetica">2) Select your option for silence and/or click intro from the <strong>Before each tune:</strong> dropdown.</p>'},	  
	  {html: '<p style="margin-top:16px;font-size:12pt;line-height:18pt;font-family:helvetica">3) Click <strong>OK</strong>.</p>'},	  
	  {html: '<p style="margin-top:16px;font-size:12pt;line-height:18pt;font-family:helvetica"><strong>For best results when repeating tunes:<strong></p>'},	  
	  {html: '<p style="margin-top:16px;font-size:12pt;line-height:18pt;font-family:helvetica">For clean repeats, your tunes must not have extraneous pickup or trailing notes and must have proper and complete timing.</p>'},	  
	  {html: '<p style="margin-top:16px;font-size:12pt;line-height:18pt;font-family:helvetica">If there is a repeat at the end of the first part of a tune, either standalone or in a first ending, there must be a matching |: bar at the start of the tune for the tune repeats to work properly.</p>'},	  
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 100, width: 760, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject",autoFocus: false } ).then(function(args){
		
		if (!args.canceled){
		
			var repeatCountStr = args.result.configure_repeats;

			if (repeatCountStr == null){
				return;
			}

			repeatCount = parseInt(repeatCountStr);

			if ((isNaN(repeatCount)) || (repeatCount == undefined)){
				return;
			}

			if (repeatCount < 1){
				return;
			}

			var beforeTuneAction = args.result.configure_before_each_tune;

			var doClickTrack = false;
			var doInjectSilence = false;

			switch (beforeTuneAction){

				case 0: // Do nothing
					doClickTrack = false;
					doInjectSilence = false;
					break;

				case 1: // Inject silence
					doClickTrack = false;
					doInjectSilence = true;
					break;

				case 2: // Inject click intro
					doClickTrack = true;
					doInjectSilence = false;
					break;

				case 3: // Inject both silence and click intro
					doClickTrack = true;
					doInjectSilence = true;
					break;

			}

			var theNotes = gTheABC.value;

			var output = FindPreTuneHeader(theNotes);

			clearGetTuneByIndexCache();

			for (var i=0;i<nTunes;++i){

				var thisTune = getTuneByIndex(i);

				var rhythmType = getTuneRhythmType(thisTune);

				thisTune = AddDuplicatesForMp3(thisTune, rhythmType, repeatCount, doClickTrack, doInjectSilence);

				output += thisTune;

				output += "\n\n";

			}

			// Stuff in the output
			setABCEditorText(output);

			// Set dirty
			gIsDirty = true;

			// Force a redraw
			RenderAsync(true,null,function(){

				// Set the select point
				gTheABC.selectionStart = 0;
			    gTheABC.selectionEnd = 0;
				
			    // Focus after operation
			    FocusAfterOperation();

			});
		}
	});
}


//
// Conditionally injects a string above the tune header if it doesn't already exist in the tune
//
function InjectStringAboveTuneHeaderConditional(theTune, theDirective){

	if (theTune.indexOf(theDirective) == -1){

		return InjectStringAboveTuneHeader(theTune, theDirective);

	}
	else{

		return theTune;

	}

}

//
// Inject a string below the X: and above the rest of the header
//
function InjectStringAboveTuneHeader(theTune, theDirective) {

    var theLines = theTune.split("\n");

    var theOutput = "";

    var thisLine = "";

    for (i = 0; i < theLines.length; ++i) {

        thisLine = theLines[i];

        var theChars = thisLine.split("");

        // It's a normal ABC : directive, copy it as is
        if (((theChars[0] != "|") && (theChars[0] != "[")) && (theChars[1] == ":")) {

            theOutput += thisLine + "\n";

            // Inject the font directive to save people time
            if (theChars[0] == "X") {

                theOutput += theDirective + "\n";
            }

        } else {
            theOutput += thisLine;

            if (i != (theLines.length - 1)) {
                theOutput += "\n";
            }

        }
    }

    return theOutput;

}

//
// Conditionally injects a string above the tune header if it doesn't already exist in the tune
//
function InjectStringBelowTuneHeaderConditional(theTune, theDirective){

	if (theTune.indexOf(theDirective) == -1){

		return InjectStringBelowTuneHeader(theTune, theDirective);

	}
	else{

		return theTune;
		
	}
}

//
// Inject anything just below the header
//
function InjectStringBelowTuneHeader(theTune, theString) {

	// Don't inject section header tune fragments
	if (isSectionHeader(theTune)) {
		return theTune;
	}

	var theOriginalTune = theTune;
	theTune = theTune.trim();

	// Remove the ABC headers
	var theNotes = removeABCTuneHeaders(theTune);
	theNotes = theNotes.trim();

	var theLines = theNotes.split("\n");
	var nLines = theLines.length;

	var firstLine;
	var bGotNotes = false;
	var insideTextBlock = false;
  var insideCSSBlock = false;

	for (var i = 0; i < nLines; ++i) {

		firstLine = theLines[i].trim();

    // Handle %%begintext ... %%endtext
		if (firstLine.startsWith("%%begintext")) {
			insideTextBlock = true;
			continue;
		}

		if (firstLine.startsWith("%%endtext")) {
			insideTextBlock = false;
			continue;
		}

     // Handle %%begincss ... %%endcss
    if (firstLine.startsWith("%%begincss")) {
      insideCSSBlock = true;
      continue;
    }

    if (firstLine.startsWith("%%endtext")) {
      insideCSSBlock = false;
      continue;
    }

    if (insideTextBlock || insideCSSBlock || firstLine.startsWith("%") || firstLine === "" || firstLine.startsWith("X:")) {
      continue;
    }

		// Found the first valid line of notes
		bGotNotes = true;
		var theFirstLineIndex = theNotes.indexOf(theLines[i]);
		theNotes = theNotes.substring(theFirstLineIndex);
		break;

	}

	// Didn't find anything below the header, exit early
	if (!bGotNotes) {
		return theOriginalTune;
	}

	// Find the offset into the original tune
	var theNotesIndex = theTune.indexOf(firstLine);
	theTune = theTune.substring(0, theNotesIndex);
	theTune += theString;
	theTune += "\n" + theNotes + "\n\n";

	return theTune;
}

//
// Inject MIDI staff width 
//
function InjectOneTuneStaffWidth(theTune, staffwidth){

	var theOutput = InjectStringBelowTuneHeader(theTune, "%%staffwidth "+staffwidth);
	
	return theOutput;
	
}

//
// Inject MIDI Large Print headers 
//
function InjectOneTuneLargePrint(theTune, staffwidth){

	var theOutput = InjectStringBelowTuneHeader(theTune, "%\n% Adjust these values to produce the desired results:\n%\n%%noexpandtowidest\n%%leftmargin 0\n%%rightmargin 0\n%%staffwidth "+staffwidth+"\n%");
	
	return theOutput;
	
}

//
// Inject MIDI soundfont 
//
function InjectOneTuneSoundfont(theTune, theSoundfont){

	var theOutput = InjectStringBelowTuneHeader(theTune, "% Soundfont: "+theSoundfont+"\n"+"%soundfont "+theSoundfont);
	
	return theOutput;
	
}

//
// Inject a section header placeholder tune
//

function InjectSectionHeader(){

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","InjectSectionHeader");

	// Setup initial values
	const theData = {
	  configure_sectionheader:"Section Name",
	};

	var form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject PDF Tunebook Section Header&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#pdf_section_headers" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject a PDF section header placeholder tune into the ABC.</p>'},  
	  {html: '<p style="font-size:12pt;line-height:18pt;font-family:helvetica">The section header will be displayed on its own line in the PDF Table of Contents and Index.</p>'}, 
	  {html: '<p style="font-size:12pt;line-height:18pt;font-family:helvetica">Clicking on the section header in the PDF Table of Contents or Index will jump to the section.</p>'}, 
	  {html: '<p style="margin-bottom:36px;font-size:12pt;line-height:18pt;font-family:helvetica">The * at the start of the injected tune title marks the tune as a PDF section header.</p>'}, 
	  {name: "Section name to inject", id: "configure_sectionheader", type:"text", cssClass:"configure_sectionheader_form_text"}, 
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 100, width: 760, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject", autoFocus: true } ).then(function(args){
		
		if (!args.canceled){

			var sectionHeader = args.result.configure_sectionheader;

			if (sectionHeader == null){
				return;
			}

			var theSelectionStart = gTheABC.selectionStart;

			var leftSide = gTheABC.value.substring(0,theSelectionStart);
			
			var rightSide = gTheABC.value.substring(theSelectionStart);

			setABCEditorText(leftSide + "\nX:1\nT:*" + sectionHeader + "\n" + rightSide);

			// Set dirty
			gIsDirty = true;

			// Force a redraw
			RenderAsync(true,null,function(){

				// Set the select point
				gTheABC.selectionStart = theSelectionStart;
			    gTheABC.selectionEnd = theSelectionStart;

			    // Focus after operation
			    FocusAfterOperation();

			});

		}
	});
}

//
// Inject a string into the top or bottom of the tune header
//

var gIdleHeaderInjectValue = "";

var gFileHeaderDirectives = "";

function idleHeaderInject(){
	gIdleHeaderInjectValue = document.getElementById("headers_to_inject").value;
}

function keydownHeaderInject(e){
	e.stopPropagation();
}

function GetABCFileHeader() {

    var theHeader = FindPreTuneHeader(gTheABC.value);

    if (theHeader.length == 0) {
        //console.log("No header present");
        return "";
    }

    var directives = "";

    var arrDir = theHeader.split('\n');

    const patterns = [
        /^%%\S+font.*$/,
        /^%%\S+margin.*$/,
        /^%%staffwidth.*$/,
        /^%%stretchlast.*$/,
        /^%%barnumbers.*$/,
        /^%%barsperstaff.*$/,
        /^%%\S+space.*$/,
        /^%%\S+sep.*$/,
        /^%%measure\S+.*$/,
        /^%%printtempo.*$/,
        /^%%titleleft.*$/,
        /^%%keywarn.*$/,
        /^%%titlecaps.*$/,
        /^%%visualtranspose.*$/,
        /^%%maxstaves.*$/,
        /^%hide_first_title_on_play.*$/,
        /^%hide_vskip_on_play.*$/,
        /^%left_justify_titles.*$/,
        /^%abcjs_render_params.*$/,
        /^%hide_information_labels.*$/,
        /^%hide_rhythm_tag.*$/,
        /^%hide_composer_tag.*$/,
        /^%hide_parts_tag.*$/,
        /^%hide_part_tags.*$/,
        /^%hide_player_part_tags.*$/,
        /^%hide_dynamics.*$/,
        /^%whistle_tab_key.*$/,
        /^%whistle_tab_octave.*$/,
        /^%recorder_tab_key.*$/,
        /^%recorder_tab_octave.*$/,
        /^%enable_hyperlinks.*$/,
        /^%disable_hyperlinks.*$/,
        /^%play_alternate_chords.*$/,
        /^%hide_cautionary_ks.*$/,
        /^%no_title_reverser.*$/,
        /^%force_power_chords.*$/,
        /^[ABCDFGHILMmNORrSUZ]:/,
    ];

    let inCSSBlock = false;

    arrDir.forEach(function (line) {

        if (line.trim() === "%%begincss") {
            inCSSBlock = true;
        }

        if (inCSSBlock) {
            directives += line + '\n';
            if (line.trim() === "%%endcss") {
                inCSSBlock = false;
            }
            return; // Skip further processing while in CSS block
        }

        for (const pattern of patterns) {
            if (pattern.test(line)) {
                //console.log("Adding directive line: " + line);
                directives += line + '\n';
                break; // No need to check further patterns once matched
            }
        }
    });

    // Put some space between the injected directives and the tune ABC
    if (directives != "") {
        directives += "\n";
    }

    return directives;
}

function IdleFileHeaderInject(){

	gFileHeaderDirectives = "";
    
    var elem = document.getElementById("injectheaderstringfh_holder");

    if (elem){
    	elem.style.display = "none";
    }
    else{
    	// Element not present
    	return;
    }

    var directives = GetABCFileHeader();

    if (directives != ""){

    	gFileHeaderDirectives = directives;

    	elem = document.getElementById("injectheaderstringfh_holder");;

    	if (elem){
    		elem.style.display = "block";
    	}
    }

}

function InjectABCFileHeaderDirectives(){

	//console.log("InjectABCFileHeaderDirectives");

	var elem = document.getElementById("headers_to_inject");

	if (elem){

    	elem.value += gFileHeaderDirectives;

    	gIdleHeaderInjectValue = elem.value;
   }

}

function InjectHeaderString(){

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	var theSelectedTuneIndex = findSelectedTuneIndex();

    const inject_location_list = [
	    { name: "  Top", id: 0 },
	    { name: "  Bottom", id: 1 }
  	];

	// Setup initial values
	const theData = {
	  injectlocation:1,
	  injectalltunes: true
	};

	var form = [
	  {html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Inject ABC Header Text&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#advanced_injectabcheader" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},  
	  {html: '<p style="margin-top:24px;margin-bottom:36px;font-size:12pt;line-height:18pt;font-family:helvetica;text-align:center">Clicking "Inject" will inject the text into the header of your ABC tune(s).</p>'},  
	  {name: "Header inject location:", id: "injectlocation", type:"select", options:inject_location_list, cssClass:"configure_injectheaderstring_select"},
	  {html: '<p style="font-size:12pt;line-height:18pt;font-family:helvetica;">Header text to inject:</p><textarea id="headers_to_inject" style="font-family:Courier;font-size:13pt;line-height:16pt;width:578px;height:340px;padding:6px" placeholder="Enter header text to inject here" spellcheck="false" autocorrect="off" autocapitalize="none" oninput="idleHeaderInject()" onkeydown="keydownHeaderInject(event)"></textarea>'},
	  {name: "          Inject all tunes", id: "injectalltunes", type:"checkbox", cssClass:"configure_injectheaderstring_form_text"},
	  {html: '<p id="injectheaderstringfh_holder" style="text-align:center;margin-top:24px;display:none;"><input id="injectheaderstringfh" class="advancedcontrols btn btn-injectcontrols-headers" onclick="InjectABCFileHeaderDirectives();" type="button" value="Add ABC File Header Directives" title="Adds any ABC directives found in the file header to the text area above"></p>'}
	];

	gIdleHeaderInjectValue = "";
	gFileHeaderDirectives = "";

	// Idle the file header inject button and text
	setTimeout(function(){

		IdleFileHeaderInject();

	},200);

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 100, width: 650, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject", autoFocus: false } ).then(function(args){
		
		// Keep track of dialogs
		sendGoogleAnalytics("action","InjectHeaderString");
	
		if (!args.canceled){

			var theLocation = args.result.injectlocation;
			var injectAllTunes = args.result.injectalltunes;
			var stringToInject = gIdleHeaderInjectValue;

			stringToInject = stringToInject.trim();

			if (stringToInject != ""){

				// Injecting all tunes?
				if (injectAllTunes){

					var nTunes = CountTunes();

					var theNotes = gTheABC.value;

					// Find the tunes
					var theTunes = theNotes.split(/^X:/gm);

					var output = FindPreTuneHeader(theNotes);

					for (var i=1;i<=nTunes;++i){

						var theTune = "X:"+theTunes[i];

						if (theLocation == 0){

							output += InjectStringAboveTuneHeader(theTune,stringToInject);

						}
						else{

							output += InjectStringBelowTuneHeader(theTune,stringToInject);

						}

					}

					// Stuff in the output
					setABCEditorText(output);

					// Set dirty
					gIsDirty = true;

					// Force a redraw
					RenderAsync(true,null,function(){

						// Set the select point
						gTheABC.selectionStart = 0;
					    gTheABC.selectionEnd = 0;

					    // Focus after operation
					    FocusAfterOperation();

					});
				}
				else{

					// Try to find the current tune
					var theSelectedABC = findSelectedTune();

					if (theSelectedABC == ""){
						// This should never happen
						return;
					}

					var theInjectedTune = theSelectedABC;

					if (theLocation == 0){

						theInjectedTune = InjectStringAboveTuneHeader(theInjectedTune,stringToInject);

					}
					else{

						theInjectedTune = InjectStringBelowTuneHeader(theInjectedTune,stringToInject);

					}

					// Seeing extra line breaks after the inject
					theInjectedTune = theInjectedTune.replace("\n\n","");

					// Try and keep the same tune after the redraw for immediate play
					var theSelectionStart = gTheABC.selectionStart;

					// Stuff in the injected ABC
					var theABC = gTheABC.value;
					theABC = theABC.replace(theSelectedABC,theInjectedTune);

					setABCEditorText(theABC);

					// Set dirty
					gIsDirty = true;

					// Force a redraw of the tune
					RenderAsync(false,theSelectedTuneIndex,function(){

						// Set the select point
						gTheABC.selectionStart = theSelectionStart;
					    gTheABC.selectionEnd = theSelectionStart;

					    // Focus after operation
					    FocusAfterOperation();

					});


				}
			}
		}
	});
}


//
// Inject a custom stringed instrument tab annotation
//

function abcPitchToRank(note) {
  const baseNotes = { 'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11 };

  // Match optional accidentals, the note letter, and any octave markers
  const match = note.match(/^([_=^]*|_+)([a-gA-G])([,']*)$/);
  if (!match) return -1; // Invalid format

  let [, accidental, letter, octave] = match;
  let base = baseNotes[letter.toUpperCase()];
  if (base === undefined) return -1;

  // Accidental adjustment
  let accidentalOffset = 0;
  if (accidental) {
    const sharps = (accidental.match(/\^/g) || []).length;
    const flats = (accidental.match(/_/g) || []).length;
    // '=' neutralizes accidentals, no offset
    accidentalOffset = sharps - flats;
  }

  // Octave adjustment
  let octaveOffset = 0;
  if (octave.includes(",")) {
    octaveOffset = -12 * octave.split(",").length;
  } else if (octave.includes("'")) {
    octaveOffset = 12 * octave.split("'").length;
  }

  // Lowercase letter means one octave higher
  if (letter >= 'a' && letter <= 'g') {
    octaveOffset += 12;
  }

  return 60 + base + accidentalOffset + octaveOffset;
}

function isStrictlyIncreasingABCNotes(notes) {
  const ranks = notes.map(abcPitchToRank);

  // Check for invalid notes
  if (ranks.includes(-1)) return false;

  // Check for duplicates using a Set
  const uniqueRanks = new Set(ranks);
  if (uniqueRanks.size !== ranks.length) return false;

  // Check strictly increasing
  for (let i = 1; i < ranks.length; i++) {
    if (ranks[i] <= ranks[i - 1]) {
      return false;
    }
  }

  return true;
}

var gCustomStringedCount = 6;
var gCustomStringedCapo = 0;
var gCustomStringedString1 = "D,";
var gCustomStringedString2 = "A,";
var gCustomStringedString3 = "D";
var gCustomStringedString4 = "G";
var gCustomStringedString5 = "B";
var gCustomStringedString6 = "e";
var gCustomStringedLabel = "Guitar - Drop D"

function InjectCustomStringedInstrumentTab(){

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","InjectCustomStringedInstrumentTab");

	// Setup initial values
	const theData = {
	  custom_string_count:gCustomStringedCount,
	  custom_string_capo:gCustomStringedCapo,
	  custom_string1:gCustomStringedString1,
	  custom_string2:gCustomStringedString2,
	  custom_string3:gCustomStringedString3,
	  custom_string4:gCustomStringedString4,
	  custom_string5:gCustomStringedString5,
	  custom_string6:gCustomStringedString6,
	  custom_string_label:gCustomStringedLabel,
	  configure_inject_all:true
	};

	var form = [
	  {html: '<p style="text-align:center;margin-bottom:32px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject Custom Stringed Instrument Tab Annotation&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#custom_string_tab" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:20px;margin-bottom:20px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject an %abcjs_rendering_params annotation into the ABC tune(s) to generate custom stringed instrument tablature. </p>'}, 
	  {html: '<p style="margin-top:20px;margin-bottom:20px;font-size:12pt;line-height:18pt;font-family:helvetica">Strings are numbered from low to high and use ABC pitch names.</p>'}, 
	  {html: '<p style="margin-top:20px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica">Each string must have a different pitch and be higher than the previous one.</p>'}, 
	  {name: "Label:", id: "custom_string_label", type:"text", cssClass:"configure_customstring_form_text_wide"}, 
	  {name: "# of strings: (4, 5, or 6)", id: "custom_string_count", type:"number", cssClass:"configure_customstring_form_text"}, 
	  {name: "String 1 pitch:", id: "custom_string1", type:"text", cssClass:"configure_customstring_form_text"}, 
	  {name: "String 2 pitch:", id: "custom_string2", type:"text", cssClass:"configure_customstring_form_text"}, 
	  {name: "String 3 pitch:", id: "custom_string3", type:"text", cssClass:"configure_customstring_form_text"}, 
	  {name: "String 4 pitch:", id: "custom_string4", type:"text", cssClass:"configure_customstring_form_text"}, 
	  {name: "String 5 pitch:", id: "custom_string5", type:"text", cssClass:"configure_customstring_form_text"}, 
	  {name: "String 6 pitch:", id: "custom_string6", type:"text", cssClass:"configure_customstring_form_text"}, 
	  {name: "Capo position", id: "custom_string_capo", type:"number", cssClass:"configure_customstring_form_text"}, 
	  {name: "            Inject all tunes", id: "configure_inject_all", type:"checkbox", cssClass:"configure_customstring_form_text_checkbox"},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 50, width: 650, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject",autoFocus: false } ).then(function(args){
		
		if (!args.canceled){

			var theCustomStringedCount = args.result.custom_string_count;

			theCustomStringedCount = parseInt(theCustomStringedCount);

			if (isNaN(theCustomStringedCount)){

				var thePrompt = "String count must be a number.";
		
				// Center the string in the prompt
				thePrompt = makeCenteredPromptString(thePrompt);
				
				DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

				return;

			}

			var theCustomStringedCapo = args.result.custom_string_capo;

			theCustomStringedCapo = parseInt(theCustomStringedCapo);

			if (isNaN(theCustomStringedCapo)){

				var thePrompt = "Capo position must be a number.";
		
				// Center the string in the prompt
				thePrompt = makeCenteredPromptString(thePrompt);
				
				DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

				return;

			}

			if (theCustomStringedCapo < 0){

				var thePrompt = "Capo position must be a positive integer.";
		
				// Center the string in the prompt
				thePrompt = makeCenteredPromptString(thePrompt);
				
				DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

				return;

			}

			var tabStyle = "violin";

			if (theCustomStringedCount == 4){
				tabStyle = "violin";
			}
			else
			if (theCustomStringedCount == 5){
				tabStyle = "fivestring";
			}
			else
			if (theCustomStringedCount == 6){
				tabStyle = "guitar";
			}
			else{
				var thePrompt = "Only 4, 5, or 6 string custom instrument tablature supported.";
		
				// Center the string in the prompt
				thePrompt = makeCenteredPromptString(thePrompt);
				
				DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

				return;
			}

			var testArray = [];

			switch (theCustomStringedCount){
				case 4:
					testArray = [args.result.custom_string1, args.result.custom_string2, args.result.custom_string3, args.result.custom_string4];
					break;

				case 5:
					testArray = [args.result.custom_string1, args.result.custom_string2, args.result.custom_string3, args.result.custom_string4, args.result.custom_string5];
					break;

				case 6:
					testArray = [args.result.custom_string1, args.result.custom_string2, args.result.custom_string3, args.result.custom_string4, args.result.custom_string5, args.result.custom_string6];
					break;
			}

			if (!isStrictlyIncreasingABCNotes(testArray)){

				var thePrompt = "Strings must be in increasing pitch with no duplicates.";
		
				// Center the string in the prompt
				thePrompt = makeCenteredPromptString(thePrompt);
				
				DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

				return;

			}

			gCustomStringedLabel = args.result.custom_string_label;

			gCustomStringedCount = theCustomStringedCount;

			gCustomStringedCapo = theCustomStringedCapo;

			gCustomStringedString1 = args.result.custom_string1;
			gCustomStringedString2 = args.result.custom_string2;
			gCustomStringedString3 = args.result.custom_string3;
			gCustomStringedString4 = args.result.custom_string4;
			gCustomStringedString5 = args.result.custom_string5;
			gCustomStringedString6 = args.result.custom_string6;

			// Save all the custom tab values
			SaveConfigurationSettings();

			var theCommandString = "%\n% Custom stringed instrument tablature definition:\n%\n";
			var theLabel = gCustomStringedLabel;

			switch (gCustomStringedCount){

				case 4:
					theCommandString += '%abcjs_render_params {"tablature":[{"instrument":"violin","label":"'+theLabel+'","tuning":["'+gCustomStringedString1+'","'+gCustomStringedString2+'","'+gCustomStringedString3+'","'+gCustomStringedString4+'"],"highestNote":"f\'","capo":'+gCustomStringedCapo+'}]}\n%'
					break;

				case 5:
					theCommandString += '%abcjs_render_params {"tablature":[{"instrument":"fivestring","label":"'+theLabel+'","tuning":["'+gCustomStringedString1+'","'+gCustomStringedString2+'","'+gCustomStringedString3+'","'+gCustomStringedString4+'","'+gCustomStringedString5+'"],"highestNote":"f\'","capo":'+gCustomStringedCapo+'}]}\n%'
					break;

				case 6:
					theCommandString += '%abcjs_render_params {"tablature":[{"instrument":"guitar","label":"'+theLabel+'","tuning":["'+gCustomStringedString1+'","'+gCustomStringedString2+'","'+gCustomStringedString3+'","'+gCustomStringedString4+'","'+gCustomStringedString5+'","'+gCustomStringedString6+'"],"highestNote":"f\'","capo":'+gCustomStringedCapo+'}]}\n%'
					break;

			}

			// Injecting all tunes
			if (args.result.configure_inject_all){

				var nTunes = CountTunes();

				var theNotes = gTheABC.value;

				// Find the tunes
				var theTunes = theNotes.split(/^X:/gm);

				var output = FindPreTuneHeader(theNotes);

				for (var i=1;i<=nTunes;++i){

					theTunes[i] = "X:"+theTunes[i];

					// Strip any old custom stringed instrument annotation
					theTunes[i] = theTunes[i].replace(
					  /^%\s*\n^%\s*Custom stringed instrument tablature definition:[\s\S]*?^%abcjs_render_params[^\n]*\n?(^%\s*\n)?/gm,
					  ''
					);

					// In case the user has modified the injected text, at least strip the annotation
					theTunes[i] = theTunes[i].replace(
					  /^%abcjs_render_params[^\n]*\n?/gm,
					  ''
					);

					output += InjectStringBelowTuneHeader(theTunes[i],theCommandString);

				}

				// Stuff in the output
				setABCEditorText(output);

				// Set dirty
				gIsDirty = true;

				// Force a redraw
				RenderAsync(true,null,function(){

					// Set the select point
					gTheABC.selectionStart = 0;
				    gTheABC.selectionEnd = 0;

				    // Focus after operation
				    FocusAfterOperation();

				});
			}
			else{
				// Try to find the current tune
				var theSelectedABC = findSelectedTune();

				var theSelectedTuneIndex = findSelectedTuneIndex();

				if (theSelectedABC == ""){
					// This should never happen
					return;
				}

				var theInjectedTune = theSelectedABC;

				// Strip any old custom stringed instrument annotation
				theInjectedTune = theInjectedTune.replace(
				  /^%\s*\n^%\s*Custom stringed instrument tablature definition:[\s\S]*?^%abcjs_render_params[^\n]*\n?(^%\s*\n)?/gm,
				  ''
				);

				// In case the user has modified the injected text, at least strip the annotation
				theInjectedTune = theInjectedTune.replace(
				  /^%abcjs_render_params[^\n]*\n?/gm,
				  ''
				);

				theInjectedTune = InjectStringBelowTuneHeader(theInjectedTune,theCommandString);

				// Seeing extra line breaks after the inject
				theInjectedTune = theInjectedTune.replace("\n\n","");

				// Try and keep the same tune after the redraw for immediate play
				var theSelectionStart = gTheABC.selectionStart;

				// Stuff in the injected ABC
				var theABC = gTheABC.value;
				theABC = theABC.replace(theSelectedABC,theInjectedTune);

				setABCEditorText(theABC);

				// Set dirty
				gIsDirty = true;

				// Force a redraw of the tune
				RenderAsync(false,theSelectedTuneIndex,function(){

					// Set the select point
					gTheABC.selectionStart = theSelectionStart;
				    gTheABC.selectionEnd = theSelectionStart;

				    // Focus after operation
				    FocusAfterOperation();

				});

			}
		}
	});
}

//
// Inject all the fonts at the top of one or all tunes
//

// Setup initial values
const gTheFontInjectData = {
	configure_injectall:true,
	configure_titlefont:false,
	configure_subtitlefont:false,
	configure_infofont:false,
	configure_partsfont:false,
	configure_tempofont:false,
	configure_textfont:false,
	configure_composerfont:false,
	configure_annotationfont:false,
	configure_gchordfont:false,
	configure_vocalfont:false,
	configure_wordsfont:false,
	configure_tablabelfont:false,
	configure_tabnumberfont:false,
	configure_tabgracefont:false,
	configure_historyfont:false,
	configure_voicefont:false
};

function InjectFontSettings(){

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	var theSelectedTuneIndex = findSelectedTuneIndex();

	var form = [
	  {html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Inject Font Settings&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#advanced_inject_font_settings" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},  
	  {html: '<p style="margin-top:24px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica;text-align:center">Click "Inject" to inject the checked fonts below from your Font Settings into the tunes.</p>'},  
	  {name: "Title font: "+gRenderingFonts.titlefont, id: "configure_titlefont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Subtitle font: "+gRenderingFonts.subtitlefont, id: "configure_subtitlefont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Info font: "+gRenderingFonts.infofont, id: "configure_infofont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Parts font: "+gRenderingFonts.partsfont, id: "configure_partsfont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Tempo font: "+gRenderingFonts.tempofont, id: "configure_tempofont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Text font: "+gRenderingFonts.textfont, id: "configure_textfont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Composer font: "+gRenderingFonts.composerfont, id: "configure_composerfont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Annotation font: "+gRenderingFonts.annotationfont, id: "configure_annotationfont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Guitar chord font: "+gRenderingFonts.gchordfont, id: "configure_gchordfont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Vocal font: "+gRenderingFonts.vocalfont, id: "configure_vocalfont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Words font: "+gRenderingFonts.wordsfont, id: "configure_wordsfont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Tab label font: "+gRenderingFonts.tablabelfont, id: "configure_tablabelfont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Tab number font: "+gRenderingFonts.tabnumberfont, id: "configure_tabnumberfont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Tab grace font: "+gRenderingFonts.tabgracefont, id: "configure_tabgracefont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "History font: "+gRenderingFonts.historyfont, id: "configure_historyfont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {name: "Voice font: "+gRenderingFonts.voicefont, id: "configure_voicefont", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	  {html: '<p style="margin-top:0px;font-size:12pt;line-height:18pt;font-family:helvetica;text-align:center">&nbsp;</p>'},  
	  {name: "Inject all tunes ", id: "configure_injectall", type:"checkbox", cssClass:"configure_injectfontstring_form_text"},
	];

	const modal = DayPilot.Modal.form(form, gTheFontInjectData, { theme: "modal_flat", top: 75, width: 675, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject", autoFocus: false } ).then(function(args){
		
		// Keep track of dialogs
		sendGoogleAnalytics("action","InjectFontSettings");
	
		if (!args.canceled){

			//debugger;

			// Keep checkbox state for next time
			gTheFontInjectData.configure_injectall=false;
			gTheFontInjectData.configure_titlefont=false;
			gTheFontInjectData.configure_subtitlefont=false;
			gTheFontInjectData.configure_infofont=false;
			gTheFontInjectData.configure_partsfont=false;
			gTheFontInjectData.configure_tempofont=false;
			gTheFontInjectData.configure_textfont=false;
			gTheFontInjectData.configure_composerfont=false;
			gTheFontInjectData.configure_annotationfont=false;
			gTheFontInjectData.configure_gchordfont=false;
			gTheFontInjectData.configure_vocalfont=false;
			gTheFontInjectData.configure_wordsfont=false;
			gTheFontInjectData.configure_tablabelfont=false;
			gTheFontInjectData.configure_tabnumberfont=false;
			gTheFontInjectData.configure_tabgracefont=false;
			gTheFontInjectData.configure_historyfont=false;
			gTheFontInjectData.configure_voicefont=false;

			var injectAllTunes = args.result.configure_injectall;

			if (injectAllTunes){
				gTheFontInjectData.configure_injectall = true;
			}

			var stringToInject = "";

			if ( args.result.configure_titlefont){
				gTheFontInjectData.configure_titlefont = true;
				stringToInject += "%%titlefont "+gRenderingFonts.titlefont+"\n";
			}
			if ( args.result.configure_subtitlefont){
				gTheFontInjectData.configure_subtitlefont = true;
				stringToInject += "%%subtitlefont "+gRenderingFonts.subtitlefont+"\n";
			}
			if ( args.result.configure_infofont){
				gTheFontInjectData.configure_infofont = true;
				stringToInject += "%%infofont "+gRenderingFonts.infofont+"\n";
			}
			if ( args.result.configure_partsfont){
				gTheFontInjectData.configure_partsfont = true;
				stringToInject += "%%partsfont "+gRenderingFonts.partsfont+"\n";
			}
			if ( args.result.configure_tempofont){
				gTheFontInjectData.configure_tempofont = true;
				stringToInject += "%%tempofont "+gRenderingFonts.tempofont+"\n";
			}
			if ( args.result.configure_textfont){
				gTheFontInjectData.configure_textfont = true;
				stringToInject += "%%textfont "+gRenderingFonts.textfont+"\n";
			}
			if ( args.result.configure_composerfont){
				gTheFontInjectData.configure_composerfont = true;
				stringToInject += "%%composerfont "+gRenderingFonts.composerfont+"\n";
			}
			if ( args.result.configure_annotationfont){
				gTheFontInjectData.configure_annotationfont = true;
				stringToInject += "%%annotationfont "+gRenderingFonts.annotationfont+"\n";
			}
			if ( args.result.configure_gchordfont){
				gTheFontInjectData.configure_gchordfont = true;
				stringToInject += "%%gchordfont "+gRenderingFonts.gchordfont+"\n";
			}
			if ( args.result.configure_vocalfont){
				gTheFontInjectData.configure_vocalfont = true;
				stringToInject += "%%vocalfont "+gRenderingFonts.vocalfont+"\n";
			}
			if ( args.result.configure_wordsfont){
				gTheFontInjectData.configure_wordsfont = true;
				stringToInject += "%%wordsfont "+gRenderingFonts.wordsfont+"\n";
			}
			if ( args.result.configure_tablabelfont){
				gTheFontInjectData.configure_tablabelfont = true;
				stringToInject += "%%tablabelfont "+gRenderingFonts.tablabelfont+"\n";
			}
			if ( args.result.configure_tabnumberfont){
				gTheFontInjectData.configure_tabnumberfont = true;
				stringToInject += "%%tabnumberfont "+gRenderingFonts.tabnumberfont+"\n";
			}
			if ( args.result.configure_tabgracefont){
				gTheFontInjectData.configure_tabgracefont = true;
				stringToInject += "%%tabgracefont "+gRenderingFonts.tabgracefont+"\n";
			}
			if ( args.result.configure_historyfont){
				gTheFontInjectData.configure_historyfont = true;
				stringToInject += "%%historyfont "+gRenderingFonts.historyfont+"\n";
			}
			if ( args.result.configure_voicefont){
				gTheFontInjectData.configure_voicefont = true;
				stringToInject += "%%voicefont "+gRenderingFonts.voicefont+"\n";
			}

			if (stringToInject != ""){

				// Injecting all tunes?
				if (injectAllTunes){

					stringToInject += "\n";

					var nTunes = CountTunes();

					var theNotes = gTheABC.value;

					// Find the tunes
					var theTunes = theNotes.split(/^X:/gm);

					var output = FindPreTuneHeader(theNotes);

					for (var i=1;i<=nTunes;++i){

						var theTune = "X:"+theTunes[i];

						theTune = InjectStringAboveTuneHeader(theTune,stringToInject);

						// Seeing extra line breaks after the inject
						theTune = theTune.replace("\n\n","");

						output += theTune;

					}

					// Stuff in the output
					setABCEditorText(output);
					
					// Set dirty
					gIsDirty = true;

					// Force a redraw
					RenderAsync(true,null,function(){

						// Set the select point
						gTheABC.selectionStart = 0;
					    gTheABC.selectionEnd = 0;

					    // Focus after operation
					    FocusAfterOperation();

					});
				}
				else{

					// Try to find the current tune
					var theSelectedABC = findSelectedTune();

					if (theSelectedABC == ""){
						// This should never happen
						return;
					}

					stringToInject += "\n";

					var theInjectedTune = theSelectedABC;

					theInjectedTune = InjectStringAboveTuneHeader(theInjectedTune,stringToInject);

					// Seeing extra line breaks after the inject
					theInjectedTune = theInjectedTune.replace("\n\n","");

					// Try and keep the same tune after the redraw for immediate play
					var theSelectionStart = gTheABC.selectionStart;

					// Stuff in the injected ABC
					var theABC = gTheABC.value;
					theABC = theABC.replace(theSelectedABC,theInjectedTune);

					setABCEditorText(theABC);

					// Set dirty
					gIsDirty = true;

					// Force a redraw of the tune
					RenderAsync(false,theSelectedTuneIndex,function(){

						// Set the select point
						gTheABC.selectionStart = theSelectionStart;
					    gTheABC.selectionEnd = theSelectionStart;

					    // Focus after operation
					    FocusAfterOperation();

					});


				}
			}
		}

	});
}

//
// Notation Spacing Explorer
// Test and inject notation spacing values 
//

var gNotationSpacingLeftMargin = 15;
var gNotationSpacingRightMargin = 15;
var gNotationSpacingStaffWidth = 556;
var gNotationSpacingStaffSep = 0;
var gNotationSpacingNoExpand = false;
var gNotationCallback = null;

function testSpacingChange(){

	//console.log("Got testSpacingChange");
	
	var testVal;

	testVal = document.getElementById("layout_left_margin").value;
	if (!isNaN(testVal)){
		gNotationSpacingLeftMargin = testVal;
	}

	testVal =  document.getElementById("layout_right_margin").value;
	if (!isNaN(testVal)){
		gNotationSpacingRightMargin = testVal;
	}

	testVal = document.getElementById("layout_staff_width").value;
	if (!isNaN(testVal)){
		gNotationSpacingStaffWidth = testVal;
	}

	testVal = document.getElementById("layout_staff_sep").value;
	if (!isNaN(testVal)){
		gNotationSpacingStaffSep = testVal;
	}

	gNotationSpacingNoExpand = document.getElementById("layout_inject_noexpand").checked;

	if (gNotationCallback){
		gNotationCallback();
	}
}

function NotationSpacingInject(){

	//console.log("Got NotationSpacingInject");

	var injectAll = document.getElementById("layout_inject_all").checked;

	if (injectAll){

		var nTunes = CountTunes();

		var theNotes = gTheABC.value;

		// Find the tunes
		var theTunes = theNotes.split(/^X:/gm);

		var output = FindPreTuneHeader(theNotes);

		for (var i=1;i<=nTunes;++i){

			var theTune = "X:"+theTunes[i];

			output += InjectOneTuneSpacingHeader(theTune,gNotationSpacingStaffSep, gNotationSpacingLeftMargin,gNotationSpacingRightMargin,gNotationSpacingStaffWidth,gNotationSpacingNoExpand);

		}

		// Stuff in the output
		setABCEditorText(output);
		
		// Set dirty
		gIsDirty = true;

		// Force a redraw
		RenderAsync(true,null,function(){

			var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Spacing Injection Complete!</p>';

			DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

				// Set the select point
				gTheABC.selectionStart = 0;
			    gTheABC.selectionEnd = 0;

			    // Focus after operation
			    FocusAfterOperation();
			});

		});

	}
	else{

		// Try to find the current tune
		var theSelectedABC = findSelectedTune();

		if (theSelectedABC == ""){
			// This should never happen
			return;
		}

		var theSelectedTuneIndex = findSelectedTuneIndex();

		var theInjectedTune = theSelectedABC;

		theInjectedTune = InjectOneTuneSpacingHeader(theInjectedTune,gNotationSpacingStaffSep, gNotationSpacingLeftMargin,gNotationSpacingRightMargin,gNotationSpacingStaffWidth,gNotationSpacingNoExpand);

		// Seeing extra line breaks after the inject
		theInjectedTune = theInjectedTune.replace("\n\n","");

		// Try and keep the same tune after the redraw for immediate play
		var theSelectionStart = gTheABC.selectionStart;

		// Stuff in the injected ABC
		var theABC = gTheABC.value;
		theABC = theABC.replace(theSelectedABC,theInjectedTune);

		setABCEditorText(theABC);

		// Set dirty
		gIsDirty = true;

		// Force a redraw of the tune
		RenderAsync(false,theSelectedTuneIndex,function(){

		    var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Spacing Injection Complete!</p>';

			DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

				// Set the select point
				gTheABC.selectionStart = theSelectionStart;
			    gTheABC.selectionEnd = theSelectionStart;

			    // Focus after operation
			    FocusAfterOperation();
			});


		});

	}
}

function InjectOneTuneSpacingHeader(theTune, staffSep, leftMargin, rightMargin, staffWidth, noExpand){

	var theHeaders = "%%staffsep "+staffSep+"\n%%leftmargin "+leftMargin+"\n%%rightmargin "+rightMargin+"\n%%staffwidth "+staffWidth+"\n%";

	if (noExpand){
		theHeaders = "%%noexpandtowidest\n"+theHeaders;
	}

	theHeaders = "%\n% Spacing values injected by the Notation Spacing Explorer:\n%\n"+theHeaders;

	var theOutput = InjectStringBelowTuneHeader(theTune, theHeaders);
	
	return theOutput;

}

function NotationSpacingExplorer(){

	if (!gAllowCopy){

		return;

	}

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","NotationSpacingExplorer");

	// Try to find the current tune
	var theABC = findSelectedTune();

	if (theABC == ""){
		// This should never happen
		return;
	}

	var instrument = GetRadioValue("notenodertab");

	var abcOptions = GetABCJSParams(instrument);

	abcOptions.oneSvgPerLine = false;

	// Adapt the top based on the player control size
	var theTop = 40;

	var theHeight = window.innerHeight - 340;

   	modal_msg = '<div id="notationspacingexplorerholder" style="height:'+theHeight+'px;overflow-y:auto;margin-bottom:15px;padding:4px;">';

   	modal_msg += '<div id="notationspacingexplorer-paper"></div>';

   	modal_msg += '</div>';

	modal_msg += '<p class="configure_layout_text" style="text-align:center;margin:0px;margin-top:20px">';
	modal_msg += '<span>Staff Separation:</span> <input style="width:70px;margin-right:14px;" id="layout_staff_sep" type="number" min="-100" step="1" max="1000" title="Staff separation" autocomplete="off" onchange="testSpacingChange();"/>';
	modal_msg += '<span>Left Margin:</span> <input style="width:70px;margin-right:14px;" id="layout_left_margin" type="number" min="0" step="1" max="1000" title="Left margin" autocomplete="off" onchange="testSpacingChange();"/>';
	modal_msg += '<span>Right Margin:</span> <input style="width:70px;margin-right:14px;" id="layout_right_margin" type="number" min="0" step="1" max="1000" title="Right margin" autocomplete="off" onchange="testSpacingChange();"/>';
	modal_msg += '<span>Staff Width:</span> <input style="width:80px;margin-right:0px;" id="layout_staff_width" type="number" min="0" step="1" max="2000" title="Staff width" autocomplete="off" onchange="testSpacingChange();"/>';
	modal_msg += '</p>';
	modal_msg += '<p class="configure_layout_text" style="text-align:center;margin:0px;margin-top:20px">';
   	modal_msg += '<span style="font-size:12pt;font-family:helvetica;">Add %%noexpandtowidest:</span><input style="width:16px;margin-left:8px;margin-right:24px;" id="layout_inject_noexpand" type="checkbox" onchange="testSpacingChange();"/>';
	modal_msg += '<input id="notationspacingexplorertest" style="margin-right:36px;" class="notationspacingexplorerinject button btn btn-notationspacingexplorertest" onclick="testSpacingChange();" type="button" value="Test Values" title="Tests the spacing changes ABC">';
  	modal_msg += '<span style="font-size:12pt;font-family:helvetica;">Inject all tunes:</span><input style="width:16px;margin-left:8px;margin-right:24px;" id="layout_inject_all" type="checkbox"/>';
   	modal_msg += '<input id="notationspacingexplorerinject" class="notationspacingexplorerinject button btn btn-notationspacingexplorerinject" onclick="NotationSpacingInject();" type="button" style="margin-right:0px;" value="Inject Spacing into the ABC" title="Injects the spacing values into the ABC">';
 	modal_msg += '</p>';  	
 	modal_msg += '<a id="notationspacingexplorer_help" href="https://michaeleskin.com/abctools/userguide.html#advanced_notationspacingexplorer" target="_blank" style="text-decoration:none;" title="Learn more about the Notation Spacing Explorer" class="dialogcornerbutton">?</a>';
	
   	// Scale the player for larger screens
	var windowWidth = window.innerWidth;

	var theWidth;

	if (isDesktopBrowser()){

		if (giPadTwoColumn){
			if (isLandscapeOrientation()){
				theWidth = windowWidth * (gPlayerScaling / 100);
			}
			else{
				theWidth = windowWidth * 0.9;	
			}
		}
		else{
			theWidth = windowWidth * (gPlayerScaling / 100);
		}

		if (theWidth < 850){
			theWidth = 850;
		}

	}
	else{

		theWidth = 800;  
		
	}

	// Make initial spacing identical to standard viewer

	// Inject %%staffsep 
	var searchRegExp = /^X:.*$/gm

	theABC = theABC.replace(searchRegExp, "X:1\n%%staffsep " + gStaffSpacing);

	var originalABC = theABC;

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: theTop, width:theWidth, okText:"Close", scrollWithPage: (isMobileBrowser()) });

	// Get the default
	gNotationSpacingLeftMargin = 15;

	// See if there are already values injected
	var searchRegExp = /^%%leftmargin.*$/m

	var testMatch = theABC.match(searchRegExp);

	if ((testMatch) && (testMatch.length > 0)){

		var theVal = testMatch[0].replace("%%leftmargin","");

		theVal = theVal.trim();
		
		var theValParsed = parseInt(theVal);
		
		if (!isNaN(theValParsed)){

			gNotationSpacingLeftMargin = theValParsed;

		}
	}

	// Get the default
	gNotationSpacingRightMargin = 15;

	searchRegExp = /^%%rightmargin.*$/gm

	testMatch = theABC.match(searchRegExp);

	if ((testMatch) && (testMatch.length > 0)){

		var theVal = testMatch[testMatch.length-1].replace("%%rightmargin","");

		theVal = theVal.trim();
		
		var theValParsed = parseInt(theVal);
		
		if (!isNaN(theValParsed)){

			gNotationSpacingRightMargin = theValParsed;

		}
	}

	// Get the default
	gNotationSpacingStaffWidth = 556;

	searchRegExp = /^%%staffwidth.*$/gm

	testMatch = theABC.match(searchRegExp);

	if ((testMatch) && (testMatch.length > 0)){

		var theVal = testMatch[testMatch.length-1].replace("%%staffwidth","");

		theVal = theVal.trim();
		
		var theValParsed = parseInt(theVal);
		
		if (!isNaN(theValParsed)){

			gNotationSpacingStaffWidth = theValParsed;

		}
	}

	// Get the default
	gNotationSpacingStaffSep = gStaffSpacing;

	searchRegExp = /^%%staffsep.*$/gm

	testMatch = theABC.match(searchRegExp);

	if ((testMatch) && (testMatch.length > 0)){

		var theVal = testMatch[testMatch.length-1].replace("%%staffsep","");

		theVal = theVal.trim();
		
		var theValParsed = parseInt(theVal);
		
		if (!isNaN(theValParsed)){

			gNotationSpacingStaffSep = theValParsed;

		}
	}
	

	// Get the default
	gNotationSpacingNoExpand = false;

	searchRegExp = /^%%noexpandtowidest.*$/m

	testMatch = theABC.match(searchRegExp);

	if ((testMatch) && (testMatch.length > 0)){
		gNotationSpacingNoExpand = true;
	}

	document.getElementById("layout_left_margin").value = gNotationSpacingLeftMargin;
	document.getElementById("layout_right_margin").value = gNotationSpacingRightMargin;
	document.getElementById("layout_staff_width").value = gNotationSpacingStaffWidth;
	document.getElementById("layout_staff_sep").value = gNotationSpacingStaffSep;
	document.getElementById("layout_inject_noexpand").checked = gNotationSpacingNoExpand;

	// Setup the redraw callback
	gNotationCallback = function(){

		//console.log("notation callback called");

		theABC = InjectOneTuneSpacingHeader(originalABC,gNotationSpacingStaffSep, gNotationSpacingLeftMargin,gNotationSpacingRightMargin,gNotationSpacingStaffWidth,gNotationSpacingNoExpand);

		// Strip titlespace
		theABC = theABC.replace(/%%titlespace\s.*\r?\n/g, '');

		theABC = GetABCFileHeader() + theABC;

		var visualObj = ABCJS.renderAbc("notationspacingexplorer-paper", theABC, abcOptions)[0];

		// Post process whistle or note name tab
		postProcessTab([visualObj], "notationspacingexplorer-paper",instrument, true);

		// Put a light reference border around the notation
		var theSVG =  document.querySelectorAll('div[id="notationspacingexplorer-paper"] > svg');
		theSVG[0].style.boxShadow = "inset 0px 0px 0px 1px #b8b8b8";

	}

	// Strip titlespace
	theABC = theABC.replace(/%%titlespace\s.*\r?\n/g, '');

	theABC = GetABCFileHeader() + theABC;
	
	var visualObj = ABCJS.renderAbc("notationspacingexplorer-paper", theABC, abcOptions)[0];

	// Post process whistle or note name tab
	postProcessTab([visualObj], "notationspacingexplorer-paper",instrument, true);

	// Put a light reference border around the notation
	var theSVG =  document.querySelectorAll('div[id="notationspacingexplorer-paper"] > svg');
	theSVG[0].style.boxShadow = "inset 0px 0px 0px 1px #b8b8b8";


}

//
// Inject MIDI program number directive below the tune header
//
function InjectOneTuneMIDIProgram(theTune, progNum){

	var thePatchName;

	var toInject = "";

	if (progNum == "mute"){

		thePatchName = "Mute";

	} 
	else{

		thePatchName = generalMIDISoundNames[progNum+1];

	}
	
	toInject = "% Melody program: "+thePatchName+"\n"+"%%MIDI program " + progNum;
	
	var theOutput; 

	theOutput = InjectStringBelowTuneHeader(theTune,toInject);

	return theOutput;
	
}

//
// Inject MIDI bass number and optional volume directives below the tune header
//
function InjectOneTuneMIDIBassProgramAndVolumes(theTune, progNum, bassVol){

	var thePatchName;

	var toInject = "";

	if (progNum == "mute"){

		thePatchName = "Mute";

	} 
	else{

		thePatchName = generalMIDISoundNames[progNum+1];

	}

	toInject = "% Bass program: "+thePatchName+"\n"+"%%MIDI bassprog " + progNum;

	toInject += "\n%%MIDI bassvol " + bassVol;

	var theOutput = InjectStringBelowTuneHeader(theTune,toInject);

	return theOutput;
	
}

//
// Inject MIDI chord number and optional volume directives below the tune header
//
function InjectOneTuneMIDIChordProgramAndVolumes(theTune, progNum, chordVol){

	var thePatchName;

	var toInject = "";

	if (progNum == "mute"){

		thePatchName = "Mute";

	} 
	else{

		thePatchName = generalMIDISoundNames[progNum+1];

	}

	toInject = "% Chords program: "+thePatchName+"\n"+"%%MIDI chordprog " + progNum;

	toInject += "\n%%MIDI chordvol " + chordVol;


	var theOutput = InjectStringBelowTuneHeader(theTune,toInject);

	return theOutput;
	
}

//
// Inject MIDI program number directive above the tune header
//
function InjectOneTuneMIDIProgramAboveTune(theTune, progNum, bIsBass, bIsChords){

	var theOutput;

	if (bIsBass){

		theOutput = InjectStringAboveTuneHeader(theTune,"%%MIDI bassprog "+progNum);

	}
	else
	if (bIsChords){

		theOutput = InjectStringAboveTuneHeader(theTune,"%%MIDI chordprog "+progNum);

	}
	else{

		theOutput = InjectStringAboveTuneHeader(theTune,"%%MIDI program "+progNum);

	}
	
	return theOutput;
	
}

//
// Inject MIDI volume directive below the tune header
//
function InjectOneTuneMIDIVolume(theTune, theVolume, bIsChords){

	var theOutput;

	if (bIsChords){

		theOutput = InjectStringBelowTuneHeader(theTune,"%%MIDI chordvol "+theVolume);

	}
	else{

		theOutput = InjectStringBelowTuneHeader(theTune,"%%MIDI bassvol "+theVolume);

	}
	
	return theOutput;
	
}

//
// Inject MIDI volume directive above the tune header
//
function InjectOneTuneMIDIVolumeAboveTune(theTune, theVolume, bIsChords){

	var theOutput;

	if (bIsChords){

		theOutput = InjectStringAboveTuneHeader(theTune,"%%MIDI chordvol "+theVolume);

	}
	else{

		theOutput = InjectStringAboveTuneHeader(theTune,"%%MIDI bassvol "+theVolume);

	}
	
	return theOutput;
	
}

//
// Inject reverb directivetune header
//
function InjectReverbAboveTune(theTune, theReverbString){

	var theOutput;

	theOutput = InjectStringAboveTuneHeader(theTune,"%reverb "+theReverbString);

	return theOutput
	
}

//
// Inject MIDI soundfont and instrument related directives
//

const soundfontNames = [
	"Fluid",
	"Musyng Kite",
	"FatBoy",
	"Canvas",
	"MScore",
	"Arachno",
	"FluidHQ"
];

const generalMIDISoundNames = [
  "Mute",
  "Acoustic Grand Piano",
  "Bright Acoustic Piano",
  "Electric Grand Piano",
  "Honky-tonk Piano",
  "Electric Piano 1",
  "Electric Piano 2",
  "Harpsichord",
  "Clavi",
  "Celesta",
  "Glockenspiel",
  "Music Box",
  "Vibraphone",
  "Marimba",
  "Xylophone",
  "Tubular Bells",
  "Dulcimer",
  "Drawbar Organ",
  "Percussive Organ",
  "Rock Organ",
  "Church Organ",
  "Reed Organ",
  "Accordion",
  "Harmonica",
  "Tango Accordion",
  "Acoustic Guitar (nylon)",
  "Acoustic Guitar (steel)",
  "Electric Guitar (jazz)",
  "Electric Guitar (clean)",
  "Electric Guitar (muted)",
  "Overdriven Guitar",
  "Distortion Guitar",
  "Guitar Harmonics",
  "Acoustic Bass",
  "Electric Bass (finger)",
  "Electric Bass (pick)",
  "Fretless Bass",
  "Slap Bass 1",
  "Slap Bass 2",
  "Synth Bass 1",
  "Synth Bass 2",
  "Violin",
  "Viola",
  "Cello",
  "Contrabass",
  "Tremolo Strings",
  "Pizzicato Strings",
  "Orchestral Harp",
  "Timpani",
  "String Ensemble 1",
  "String Ensemble 2",
  "SynthStrings 1",
  "SynthStrings 2",
  "Choir Aahs",
  "Voice Oohs",
  "Synth Voice",
  "Orchestra Hit",
  "Trumpet",
  "Trombone",
  "Tuba",
  "Muted Trumpet",
  "French Horn",
  "Brass Section",
  "SynthBrass 1",
  "SynthBrass 2",
  "Soprano Sax",
  "Alto Sax",
  "Tenor Sax",
  "Baritone Sax",
  "Oboe",
  "English Horn",
  "Bassoon",
  "Clarinet",
  "Piccolo",
  "Flute",
  "Recorder",
  "Pan Flute",
  "Blown Bottle",
  "Shakuhachi",
  "Whistle",
  "Ocarina",
  "Lead 1 (square)",
  "Lead 2 (sawtooth)",
  "Lead 3 (calliope)",
  "Lead 4 (chiff)",
  "Lead 5 (charang)",
  "Lead 6 (voice)",
  "Lead 7 (fifths)",
  "Lead 8 (bass + lead)",
  "Pad 1 (new age)",
  "Pad 2 (warm)",
  "Pad 3 (polysynth)",
  "Pad 4 (choir)",
  "Pad 5 (bowed)",
  "Pad 6 (metallic)",
  "Pad 7 (halo)",
  "Pad 8 (sweep)",
  "FX 1 (rain)",
  "FX 2 (soundtrack)",
  "FX 3 (crystal)",
  "FX 4 (atmosphere)",
  "FX 5 (brightness)",
  "FX 6 (goblins)",
  "FX 7 (echoes)",
  "FX 8 (sci-fi)",
  "Sitar",
  "Banjo",
  "Shamisen",
  "Koto",
  "Kalimba",
  "Bagpipe",
  "Fiddle",
  "Shanai",
  "Tinkle Bell",
  "Agogo",
  "Steel Drums",
  "Woodblock",
  "Taiko Drum",
  "Bodhran",
  "Synth Drum",
  "Reverse Cymbal",
  "Guitar Fret Noise",
  "Breath Noise",
  "Seashore",
  "Bird Tweet",
  "Telephone Ring",
  "Helicopter",
  "Applause",
  "Gunshot",
  //
  // Expanded GM sounds, specific to this tool
  //
  "abcjs Percussion",	// 128
  "Uilleann Pipes",    	// 129
  "Smallpipes (D)", 	// 130
  "Smallpipes (A)",  	// 131
  "Säckpipa",    		// 132
  "Concertina",  		// 133
  "Melodica",   		// 134
  "Cajun Accordion",    // 135
  "Solfège",			// 136
  "Chorused Guitar (nylon)", // 137
  "Chorused Guitar (steel)", // 138
  "Irish Bouzouki", 	// 139
  "Irish Bouzouki 2", 	// 140
  "Mandolin",			// 141
  "Marching Drums",		// 142
  "Border Pipes",		// 143
  "Soprano Recorder",	// 144
  "Alto Recorder",		// 145
  "Tenor Recorder",		// 146
  "Bass Recorder",		// 147
  "Mountain Dulcimer (Solo)", // 148
  "Mountain Dulcimer (DAD)", // 149
  "Silence"				// 150
];

var MIDI_PATCH_COUNT = 150;

var gLastInjectedSoundfont = null;
var gLastInjectedProgram = 1;
var gLastInjectedBassProgram = 1;
var gLastInjectedChordsProgram = 1;
var gLastInjectedChordVolume = 64;
var gLastInjectedBassVolume = 64;

function InjectAllMIDIParams(){

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","InjectAllMIDIParams");

    var midi_program_list = [];

  	for (var i=0;i<=MIDI_PATCH_COUNT;++i){
  		midi_program_list.push({name: "  "+ generalMIDISoundNames[i], id: i });
  	}

	// Set the injector initially based on the default chosen in the settings
	if (gLastInjectedSoundfont == null){
		if (gDefaultSoundFont.indexOf("FluidR3_GM")!=-1){
			gLastInjectedSoundfont = "0";
		}else
		if (gDefaultSoundFont.indexOf("Musyng")!=-1){
			gLastInjectedSoundfont = "1";
		}else
		if (gDefaultSoundFont.indexOf("fatboy")!=-1){
			gLastInjectedSoundfont = "2";
		}else
		if (gDefaultSoundFont.indexOf("canvas")!=-1){
			gLastInjectedSoundfont = "3";
		}else
		if (gDefaultSoundFont.indexOf("mscore")!=-1){
			gLastInjectedSoundfont = "4";
		}else
		if (gDefaultSoundFont.indexOf("arachno")!=-1){
			gLastInjectedSoundfont = "5";
		}else
		if (gDefaultSoundFont.indexOf("fluidhq")!=-1){
			gLastInjectedSoundfont = "6";
		}	
	}

    const sound_fonts_list = [
	    { name: "  Fluid", id: "0" },
	    { name: "  Musyng Kite", id: "1" },
	    { name: "  FatBoy", id: "2" },
	    { name: "  Canvas", id: "3" },
	    { name: "  MScore", id: "4" },
	    { name: "  Arachno", id: "5" },
	    { name: "  FluidHQ", id: "6" },
  	];

	// Setup initial values
	const theData = {
	  configure_soundfont:gLastInjectedSoundfont,
	  configure_inject_soundfont: false,
	  configure_program:gLastInjectedProgram,
	  configure_inject_melody_program: false,
	  configure_bassprogram:gLastInjectedBassProgram,
	  configure_chordprogram:gLastInjectedChordsProgram,
	  configure_bassvolume:gLastInjectedBassVolume,
	  configure_chordvolume:gLastInjectedChordVolume,
	  configure_inject_chord_program: false,
	  configure_inject_bass_program: false,
	  configure_inject_all:true
	};

	var form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject MIDI Soundfont, Melody, Bass, and Chords&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#selecting_the_instruments_for_playback" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:24px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject a %soundfont directive into the ABC:</p>'},  
	  {name: "            Inject MIDI Soundfont", id: "configure_inject_soundfont", type:"checkbox", cssClass:"configure_midi_program_form_text"},
	  {name: "%soundfont value to inject:", id: "configure_soundfont", type:"select", options:sound_fonts_list, cssClass:"configure_soundfont_select"},
	  {html: '<p style="margin-top:24px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject a %%MIDI program directive into the ABC:</p>'},  
	  {name: "            Inject MIDI Melody program", id: "configure_inject_melody_program", type:"checkbox", cssClass:"configure_midi_program_form_text"},
	  {name: "MIDI Melody program to inject:", id: "configure_program", type:"select", options:midi_program_list, cssClass:"configure_midi_program_select"},
	  {html: '<p style="margin-top:24px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject %%MIDI bassprog and %%MIDI bassvol directives into the ABC:</p>'},  
	  {name: "            Inject MIDI Bass program and volumes", id: "configure_inject_bass_program", type:"checkbox", cssClass:"configure_midi_program_form_text"},
  	  {name: "MIDI Bass program to inject:", id: "configure_bassprogram", type:"select", options:midi_program_list, cssClass:"configure_midi_program_select"},
	  {name: "MIDI Bass volume (0-127):", id: "configure_bassvolume", type:"text", cssClass:"configure_midi_program_form_number_input"},
	  {html: '<p style="margin-top:24px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject %%MIDI chordprog and %%MIDI chordvol directives into the ABC:</p>'},  
	  {name: "            Inject MIDI Chord program and volumes", id: "configure_inject_chord_program", type:"checkbox", cssClass:"configure_midi_program_form_text"},
  	  {name: "MIDI Chord program to inject:", id: "configure_chordprogram", type:"select", options:midi_program_list, cssClass:"configure_midi_program_select"},
	  {name: "MIDI Chord volume (0-127):", id: "configure_chordvolume", type:"text", cssClass:"configure_midi_program_form_number_input"},
	  {html: '<p style="font-size:14pt;line-height:19pt;font-family:helvetica;margin-bottom:30px;text-align:center;"><a href="https://michaeleskin.com/documents/general_midi_extended_v9.pdf" target="_blank">General MIDI Instrument Program Numbers</a></p>'},
	  {name: "            Inject all tunes", id: "configure_inject_all", type:"checkbox", cssClass:"configure_midi_program_form_text"},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 20, width: 760, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject",autoFocus: false } ).then(function(args){
		
		if (!args.canceled){

			var bDoSoundFont = args.result.configure_inject_soundfont;
			var bDoMelodyProgram = args.result.configure_inject_melody_program;
			var bDoBassProgram = args.result.configure_inject_bass_program;
			var bDoChordProgram = args.result.configure_inject_chord_program;

			// Nothing requested
			if (!(bDoSoundFont || bDoMelodyProgram || bDoBassProgram || bDoChordProgram)){
				//console.log("No MIDI injection requested");
				return;
			}

			var theSoundfont = args.result.configure_soundfont;

			gLastInjectedSoundfont = theSoundfont;

			var soundFontToInject = "fluid";

			switch (theSoundfont){
				case "0":
					soundFontToInject = "fluid";
					break;
				case "1":
					soundFontToInject = "musyng";
					break;
				case "2":
					soundFontToInject = "fatboy";
					break;
				case "3":
					soundFontToInject = "canvas";
					break;
				case "4":
					soundFontToInject = "mscore";
					break;
				case "5":
					soundFontToInject = "arachno";
					break;
				case "6":
					soundFontToInject = "fluidhq";
					break;
			}

			var progNum = args.result.configure_program;

			// Time saver - Save the last injected program for next use of the dialog
			gLastInjectedProgram = progNum;
		
			// Special case for muting voices
			if (progNum == 0){

				progNum = "mute";

			}
			else{

				progNum = progNum - 1;

				if ((progNum < 0) || (progNum > MIDI_PATCH_COUNT)){
					progNum = 0;
				}

			}

			var progNumBass = args.result.configure_bassprogram;
			var progNumChord = args.result.configure_chordprogram;

			// Time saver - Save the last injected values for next time
			gLastInjectedBassProgram = progNumBass;
			gLastInjectedChordsProgram = progNumChord;
			gLastInjectedBassVolume = args.result.configure_bassvolume;
			gLastInjectedChordVolume = args.result.configure_chordvolume;

			if (isNaN(parseInt(gLastInjectedBassVolume))){
				gLastInjectedBassVolume = 0;
			}

			if (gLastInjectedBassVolume < 0){
				gLastInjectedBassVolume = 0;
			}

			if (gLastInjectedBassVolume > 127){
				gLastInjectedBassVolume = 127;
			}

			if (isNaN(parseInt(gLastInjectedChordVolume))){
				gLastInjectedChordVolume = 0;
			}

			if (gLastInjectedChordVolume < 0){
				gLastInjectedChordVolume = 0;
			}

			if (gLastInjectedChordVolume > 127){
				gLastInjectedChordVolume = 127;
			}

			// Special case for muting voices
			if (progNumBass == 0){

				progNumBass = "mute";

			}
			else{

				progNumBass = progNumBass - 1;

				if ((progNumBass < 0) || (progNumBass > MIDI_PATCH_COUNT)){
					progNumBass = 0;
				}

			}

			// Special case for muting voices
			if (progNumChord == 0){

				progNumChord = "mute";

			}
			else{

				progNumChord = progNumChord - 1;

				if ((progNumChord < 0) || (progNumChord > MIDI_PATCH_COUNT)){
					progNumChord = 0;
				}

			}
			
			// Injecting all tunes
			var bDoAll = args.result.configure_inject_all;

			var theSelectionStart = gTheABC.selectionStart;
			var theCurrentTune = findTuneByOffset(theSelectionStart);

			if (!bDoAll){

				if (theCurrentTune == -1){
					return;
				}
			}

			var nTunes = CountTunes();

			var theNotes = gTheABC.value;

			// Find the tunes
			var theTunes = theNotes.split(/^X:/gm);

			var output = FindPreTuneHeader(theNotes);

			for (var i=1;i<=nTunes;++i){

				thisTune = "X:"+theTunes[i];

				if (bDoAll){
					if (bDoSoundFont){
						thisTune = InjectOneTuneSoundfont(thisTune,soundFontToInject);
					}
					if (bDoMelodyProgram){
						thisTune = InjectOneTuneMIDIProgram(thisTune,progNum);
					}
					if (bDoBassProgram){
						thisTune = InjectOneTuneMIDIBassProgramAndVolumes(thisTune, progNumBass, gLastInjectedBassVolume);
					}
					if (bDoChordProgram){
						thisTune = InjectOneTuneMIDIChordProgramAndVolumes(thisTune, progNumChord, gLastInjectedChordVolume);
					}
					output += thisTune;
				}
				else{
					if ((i-1) == theCurrentTune){
						if (bDoSoundFont){
							thisTune = InjectOneTuneSoundfont(thisTune,soundFontToInject);
						}
						if (bDoMelodyProgram){
							thisTune = InjectOneTuneMIDIProgram(thisTune,progNum);
						}
						if (bDoBassProgram){
							thisTune = InjectOneTuneMIDIBassProgramAndVolumes(thisTune, progNumBass, gLastInjectedBassVolume);
						}
						if (bDoChordProgram){
							thisTune = InjectOneTuneMIDIChordProgramAndVolumes(thisTune, progNumChord, gLastInjectedChordVolume);
						}
						output += thisTune;
					}
					else{
						output += thisTune;
					}
				}
			}

			// Stuff in the output
			setABCEditorText(output);

			// Set dirty
			gIsDirty = true;

			// Have to redraw if in raw mode
		    if (gRawMode){

				RenderAsync(true,null,function(){
					
					var theOffset = findTuneOffsetByIndex(theCurrentTune);
					
				   	// Scroll the tune ABC into view
		    		ScrollABCTextIntoView(gTheABC,theOffset,theOffset,10);

		    		// Set the select point
					gTheABC.selectionStart = theOffset;
				    gTheABC.selectionEnd = theOffset;

				    // Focus after operation
				    FocusAfterOperation();

				});

		    }
		    else{

				var theOffset = findTuneOffsetByIndex(theCurrentTune);

			   	// Scroll the tune ABC into view
	    		ScrollABCTextIntoView(gTheABC,theOffset,theOffset,10);

				// Set the select point
				gTheABC.selectionStart = theOffset;
			    gTheABC.selectionEnd = theOffset;

			    // Focus after operation
			    FocusAfterOperation();

		    }
	
		}
	});
}


//
// Inject metronome MIDI drum annotation into the current tune
//
const metronome_list = [
    { name:"C|",  pattern:"dd A B C D"}, 
    { name:"C",   pattern:"dddd A B B B C D D D"}, 
   	{ name:"2/2", pattern:"dd A B C D"},
   	{ name:"3/2", pattern:"ddd A B B C D D"},
    { name:"2/4", pattern:"dd A B C D"}, 
    { name:"3/4", pattern:"ddd A B B C D D"}, 
    { name:"4/4", pattern:"dddd A B B B C D D D"}, 
    { name:"5/4", pattern:"ddddd A B B B B C D D D D"}, 
    { name:"6/4", pattern:"dddddd A B B B B B C D D D D"}, 
    { name:"7/4", pattern:"ddddddd A B B B B B B C D D D D D"}, 
    { name:"2/8", pattern:"dz A C"}, 
    { name:"3/8", pattern:"dzz A C"}, 
    { name:"5/8", pattern:"dzzdz A B C D"},
    { name:"6/8", pattern:"dzzdzz A B C D"}, 
    { name:"7/8", pattern:"dzdzdzz A B B C D D"}, 
    { name:"9/8", pattern:"dzzdzzdzz A B B C D D"},
    { name:"10/8", pattern:"dzzdzzdzdz A B B B C D D D"},
    { name:"11/8", pattern:"dzzdzzdzdzz A B B B C D D D"},
    { name:"12/8", pattern:"dzzdzzdzzdzz A B B B C D D D"}
];

//
// Inject metronome ABC into a single tune
//

// Metronome volume
var gMetronomeHighSound = 76;
var gMetronomeLowSound = 77;
var gMetronomeHighVolume = 64;
var gMetronomeLowVolume = 48;

function inject_one_metronome(tuneABC, showWarnings){

	var i;

    var theLines = tuneABC.split("\n");

    var thisLine = "";

    var theMeter = "";

    for (i = 0; i < theLines.length; ++i) {

        thisLine = theLines[i];

		// Find the meter
		searchRegExp = /^M:.*[\r\n]*/m

		var thisMeter = thisLine.match(searchRegExp);

		if ((thisMeter) && (thisMeter.length > 0)){

			if (theMeter == ""){

				theMeter = thisMeter[0].replace("M:","");
				theMeter = theMeter.trim();

			}
		}
	}

	// Do we have a meter?
	if (theMeter == ""){

		if (showWarnings){

			// Nope, exit
			var thePrompt = "No meter found in the ABC.";
			
			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });
		}

		return null;

	}

	var theMetronomePattern = "";

	// Lets see if we have a supported meter
	for (i=0;i<metronome_list.length;++i){

		if (theMeter == metronome_list[i].name){

      var theFinalMetronome = metronome_list[i].pattern.replaceAll("A",gMetronomeHighSound);
      theFinalMetronome = theFinalMetronome.replaceAll("B",gMetronomeLowSound);
      theFinalMetronome = theFinalMetronome.replaceAll("C",gMetronomeHighVolume);
      theFinalMetronome = theFinalMetronome.replaceAll("D",gMetronomeLowVolume);
			
			theMetronomePattern = "%\n% Metronome sounds and volumes\n%\n%%MIDI drum "+theFinalMetronome+'\n%%MIDI drumon\n%';
			
			break;
		}

	}

	// Meter not supported
	if (theMetronomePattern == ""){

		if (showWarnings){

			var thePrompt = "No metronome pattern available for meter: "+theMeter;
			
			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			// Nope, exit
			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });
		}

		return null;

	}

	tuneABC = InjectStringBelowTuneHeader(tuneABC,theMetronomePattern);

	tuneABC = tuneABC.trim();

	return tuneABC;

}


function InjectMetronome(){

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","InjectMetronome");

	var theSelectedTuneIndex = findSelectedTuneIndex();

	// Setup initial values
	const theData = {
	  configure_inject_all:false
	};

	var form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject Metronome&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#adding_a_metronome" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;margin-bottom:36px;font-size:12pt;line-height:18pt;font-family:helvetica">This injects a metronome into the ABC using %%MIDI drum and %%MIDI drumon directives.</p>'},  
	  {name: "            Inject metronome into all tunes", id: "configure_inject_all", type:"checkbox", cssClass:"configure_metronome_form_text"},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 200, width: 760, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject",autoFocus: false } ).then(function(args){
		
		if (!args.canceled){

			if (args.result.configure_inject_all){

				var nTunes = CountTunes();

				var isOneTune = (nTunes == 1);

				var output = "";

				clearGetTuneByIndexCache();

				for (var i=0;i<nTunes;++i){

					var thisTune = getTuneByIndex(i);

					var injectedTune = inject_one_metronome(thisTune,isOneTune);

					// Wasn't able to inject this tune, just keep the original
					if (!injectedTune){
						output += thisTune;
					}
					else{
						output += injectedTune;
						output += "\n\n";
					}

				}

				// Stuff in the output
				setABCEditorText(output);

				// Set dirty
				gIsDirty = true;

				RenderAsync(true,null,function(){

					// Set the select point
					gTheABC.selectionStart = 0;
				    gTheABC.selectionEnd = 0;

				    // Focus after operation
				    FocusAfterOperation();

				});

			}
			else{

				// Try to find the current tune
				var theSelectedABC = findSelectedTune();

				if (theSelectedABC == ""){
					// This should never happen
					return;
				}

				var theStrippedABC = inject_one_metronome(theSelectedABC,true);

				if (!theStrippedABC){
					return;
				}

				// Try and keep the same tune after the redraw for immediate play
				var theSelectionStart = gTheABC.selectionStart;

				// Stuff in the injected ABC
				var theABC = gTheABC.value;
				theABC = theABC.replace(theSelectedABC,theStrippedABC);

				setABCEditorText(theABC);

				// Set dirty
				gIsDirty = true;

				// Force a redraw of the tune
				RenderAsync(false,theSelectedTuneIndex,function(){

					// Set the select point
					gTheABC.selectionStart = theSelectionStart;
				    gTheABC.selectionEnd = theSelectionStart;

				    // Focus after operation
				    FocusAfterOperation();

				});

			}
			
		}
	});
}

//
// Copy the ABC to the clipboard
//
// If shift key is pressed, copy the text and open the ABC in editor.drawthedots.com
//
function CopyABC(){

	if (gAllowCopy){

		var theData = gTheABC.value;
		
		// Copy the abc to the clipboard
		CopyToClipboard(theData);

  		// Give some feedback
  		document.getElementById("copybutton").value = "Copied!";

  		setTimeout(function(){

  			document.getElementById("copybutton").value = "Copy All";

  		},500);

  	}
}

//
// Copy the ShareURL to the clipboard and then launch TinyURL
//
function ShortenURLFallback(){

	if (!gAllowURLSave){
		return;
	}

	var theURL = document.getElementById("urltextbox");

	var theData = theURL.value;
	
	// Copy the abc to the clipboard
	CopyToClipboard(theData);

	// Give some feedback
	document.getElementById("shortenurl").value = "Share URL Copied!";

	setTimeout(function(){

		document.getElementById("shortenurl").value = "Launching TinyURL";

		setTimeout(function(){

			var w = window.open("https://tinyurl.com");

			document.getElementById("shortenurl").value = "Shorten URL";
			
		},500);

	},250);

}

//
// Try calling the TinyURL API directly first
//
// If it fails, fall back to the old manual assist system
//

function ShortenURL(e){

	if (!gAllowURLSave){
		return;
	}

	// Don't allow shortening while offline
	if (!navigator.onLine){

		var thePrompt = "URL shortening not available while offline.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	if (!gDoTinyURLAPIKeyOverride){

		var thePrompt = '<p style="text-align:center;font-size:12pt;line-height:18pt;font-family:helvetica">I get a very few number of free TinyURL shortening sessions per month that are shared across all users of the tool.</p><p style="text-align:center;font-size:12pt;line-height:18pt;font-family:helvetica">Do you absolutely need a shortened URL?</p><p style="text-align:center;font-size:12pt;line-height:18pt;font-family:helvetica">If not, please consider just copy and pasting the full Share URL instead.</p><p style="text-align:center;font-size:12pt;line-height:18pt;font-family:helvetica">If you need to create many shortened URLs, please get your own TinyURL key and enter it in the <strong>Advanced Settings</strong> dialog to avoid this alert.</p><p style="text-align:center;font-size:12pt;line-height:18pt;font-family:helvetica">The process for getting your own TinyURL API key is described here:</p><p style="text-align:center;font-size:12pt;line-height:18pt;font-family:helvetica"><a href="https://michaeleskin.com/abctools/userguide.html#private_tinyurl_token" target="_blank">Private TinyURL API Token</a></p><p style="text-align:center;font-size:12pt;line-height:18pt;font-family:helvetica">Warning: Do not post TinyURL links from this tool on Facebook!</p><p style="text-align:center;font-size:12pt;line-height:18pt;font-family:helvetica">Facebook considers shortened URLs as intellectual property theft since they strip away Facebook\'s added URL tracking parameters and have been known to temporarily suspend the accounts of those using them in posts.</p>';

		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);

		DayPilot.Modal.confirm(thePrompt,{ top:100, theme: "modal_flat", okText:"Proceed", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

			if (!args.canceled){

				doShortenURL();
			}
		});

	}
	else{
		doShortenURL();
	}

	function doShortenURL(){

		// If you hold down the Shift and Alt key when clicking the shorten button, it will inject a %hyperlink annotation into the tune
		var autoInject = false;

		if (e && e.shiftKey && e.altKey){
			autoInject = true;
		}

		// Keep track of URL shortening
		sendGoogleAnalytics("sharing","shorten_share_url");

		var theURL = document.getElementById("urltextbox");

		var theData = theURL.value;

		let body = {

		  url: theData
		
		}

		// Either use my own or the user's TinyURL key
		var theAPIKey = gTinyURLAPIKey;

		if (gDoTinyURLAPIKeyOverride){

			theAPIKey = "Bearer "+gTinyURLAPIKeyOverride;

		}

		fetch(`https://api.tinyurl.com/create`, {
		    method: `POST`,
		    headers: {
		      accept: `application/json`,
		      authorization: theAPIKey,
		      'content-type': `application/json`,
		    },
		    body: JSON.stringify(body)
		  })
		  .then(response => {

		  	// If it fails, go back to the old way
		    if (response.status != 200){

		    	ShortenURLFallback();

		    	return;

		    };

		    return response.json()

		  })
		  .then(data => {

		  	// Copy the shortened
			CopyToClipboard(data.data.tiny_url);

			var modal_msg  = '<p style="text-align:center;font-size:16pt;font-family:helvetica">Shortened URL Copied to the Clipboard</p>';
		   	modal_msg += '<p style="text-align:center;font-size:14pt;line-height:19pt;font-family:helvetica">Short URL:</p>';
		   	modal_msg += '<p style="text-align:center;font-size:14pt;line-height:19pt;font-family:helvetica"><a href="'+data.data.tiny_url+'" target="_blank">'+data.data.tiny_url+'</a></p>';

			DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			// Auto-injecting the shortened URL as a hyperlink?
			if (autoInject){

				var nTunes = CountTunes();

				var theNotes = gTheABC.value;

				// Find the tunes
				var theTunes = theNotes.split(/^X:/gm);

				var output = FindPreTuneHeader(theNotes);

				for (var i=1;i<=nTunes;++i){

					var theTune = "X:"+theTunes[i];

					output += InjectStringBelowTuneHeader(theTune,"%hyperlink "+data.data.tiny_url);

				}

				// Stuff in the output
				setABCEditorText(output);
				
				// Set dirty
				gIsDirty = true;

				// Force a redraw
				RenderAsync(true,null,function(){

					// Set the select point
					gTheABC.selectionStart = 0;
				    gTheABC.selectionEnd = 0;

				    // Focus after operation
				    FocusAfterOperation();

				});
			}
				
			if (!gDoTinyURLAPIKeyOverride){

				// Keep track of default TinyURL token use
				gTinyURLCount++;

				if (gLocalStorageAvailable){
					localStorage.TinyURLCount = gTinyURLCount;
				}

				// Remind them on 5th use about custom TinyURL tokens
				if ((gTinyURLCount == 5) || (gTinyURLCount == 10)){

					TinyURLReminderDialog();

				}
			}

		  })
		  .catch(
		  	error => {

		  		ShortenURLFallback();

		    	return;

		  });
	}
}

//
// Copy the ShareURL to the clipboard
//
function CopyShareURL(){

	if (!gAllowURLSave){
		return;
	}

	// Keep track of URL copy
	sendGoogleAnalytics("sharing","copy_share_url");

	var theURL = document.getElementById("urltextbox");

	var theData = theURL.value;
	
	// Copy the abc to the clipboard
	CopyToClipboard(theData);

	// Give some feedback
	document.getElementById("copyurl").value = "Share URL Copied!";

	setTimeout(function(){

		document.getElementById("copyurl").value = "Copy Share URL";
		
	},500);

}


//
// Save the ABC
//
function SaveABC(){

	if (gAllowSave){

		var theData = gTheABC.value;

		if (theData.length != 0){

			var theTuneCount = CountTunes();

			// Derive a suggested name from the ABC
			var theName = getDescriptiveFileName(theTuneCount,true);

			var thePrompt = "Please enter a filename for your ABC file:  ";

			if (isPureDesktopBrowser()){

				theName += ".abc";

				saveABCFile(thePrompt,theName,theData);
			}
			else{

				theName += ".txt";

				saveABCFile(thePrompt,theName,theData);
			}

		}
	}
}

//
// Keyboard equivalent, only prompts if there isn't already a filename
//
function SaveABC_KB(){

	if (gAllowSave){

		// If already saved, just resave
		if (gABCFromFile){
			
			var theData = gTheABC.value;

			if (theData.length != 0){

				var theTuneCount = CountTunes();

				var theName = getDescriptiveFileName(theTuneCount,true);

				doSaveABCFile(theName,theData);

				var elem = document.getElementById("saveabcfile");
				if (elem){
					elem.value = "Saved!";
				}
			
				setTimeout(function(){

					var elem = document.getElementById("saveabcfile");
					if (elem){
						elem.value = "Save";
					}

				},1000);

			}
		}
		else{

			// Otherwise, prompt for filename
			SaveABC();

		}
	}
}

//
// Save the ShareURL
//
function SaveShareURL(){

	if (gAllowURLSave){

		// Keep track of URL save
		sendGoogleAnalytics("sharing","save_share_url");

		var theData = urltextbox.value;

		if (theData.length != 0){

			var theTuneCount = CountTunes();

			// Derive a suggested name from the ABC
			var theName = getDescriptiveFileName(theTuneCount,true);

			// MAE 13 Sep 2024 - Allow spaces in filenames
			saveTextFile("Please enter a filename for your Share URL file:",theName+" Share URL.txt",theData);
		}
	}
}

//
// Test the share URL
// 
function TestShareURL(){

	if (!gAllowURLSave){
		return;
	}

	// Keep track of URL test
	sendGoogleAnalytics("sharing","test_share_url");

	var theURL = document.getElementById("urltextbox").value;

	var w = window.open(theURL);

}

//
// Set the ABC text and re-render
//
function SetAbcText(txt) {

	setABCEditorText(txt);

}

//
// Toggle the control display
//

function ShowAllControls(){

	document.getElementById("notenrechts").style.display = "inline-block";

	gShowAllControls = true;

	// Recalculate the notation top position
	UpdateNotationTopPosition();

	// Force a rescroll for one column view
	if (gIsOneColumn){

		MakeTuneVisible(true);
		
	}

}

function HideAllControls(){

	document.getElementById("notenrechts").style.display = "none";

	gShowAllControls = false;

	// Recalculate the notation top position
	UpdateNotationTopPosition();

	// Force a rescroll for one column view
	if (gIsOneColumn){

		MakeTuneVisible(true);
		
	}

}

//
// Handle the minimize/maximize button
//

function ShowMaximizeButton(){

  document.getElementById("zoombutton").style.display = "block";

  if (!gInPresentationMode){

     document.getElementById("zoombutton").style.opacity = 1.0;

  }
  else{

     document.getElementById("zoombutton").style.opacity = 0.005;

  }

}

function HideMaximizeButton(){

	document.getElementById("zoombutton").style.display = "none";

}

//
// Handle the help button
//


function HideHelpButton(){

	document.getElementById("helpbutton").style.display = "none";

}

function ShowHelpButton(){

  document.getElementById("helpbutton").style.display = "block";
  
  if (!gInPresentationMode){

     document.getElementById("helpbutton").style.opacity = 1.0;

  }
  else{

     document.getElementById("helpbutton").style.opacity = 0.005;

  }


}

//
// Handle the play button
//
function QE_PlayButton_Handler(){
	const button = document.querySelector('button.abcjs-midi-start');
	button.click();
}

function ShowPlayButton(){
  
  document.getElementById("playbuttonicon").style.display = "block";

  if (!gInPresentationMode){

     document.getElementById("playbuttonicon").style.opacity = 1.0;

  }
  else{

     document.getElementById("playbuttonicon").style.opacity = 0.005;

  }

}

function HidePlayButton(){

	document.getElementById("playbuttonicon").style.display = "none";

}

//
// Handle the PDF button
//

function ShowPDFButton(){

	if (!gIsQuickEditor){

    document.getElementById("pdfbuttonicon").style.display = "block";

    if (!gInPresentationMode){

       document.getElementById("pdfbuttonicon").style.opacity = 1.0;

    }
    else{

       document.getElementById("pdfbuttonicon").style.opacity = 0.005;

  	}
  }

}

function HidePDFButton(){

	if (!gIsQuickEditor){
		document.getElementById("pdfbuttonicon").style.display = "none";
	}

}

//
// Hide/show the corner buttons on an Alt-Shift click of the Zoom button
//
function togglePresentationMode(){

  if (!gInPresentationMode){
    
    gInPresentationMode = true;

    document.getElementById("zoombutton").style.opacity = 0.005;
    document.getElementById("helpbutton").style.opacity = 0.005;
    document.getElementById("playbuttonicon").style.opacity = 0.005;
    document.getElementById("pdfbuttonicon").style.opacity = 0.005;
  }
  else{

    gInPresentationMode = false;

    document.getElementById("zoombutton").style.opacity = 1.0;
    document.getElementById("helpbutton").style.opacity = 1.0;
    document.getElementById("playbuttonicon").style.opacity = 1.0;

    if (!gIsQuickEditor){

      document.getElementById("pdfbuttonicon").style.opacity = 1.0;

    }

  }

}

function DoMaximize(){

	document.getElementById("noscroller").style.display = "none";
	document.getElementById("notation-spacer").style.display = "none";
	gTheNotation.style.display = "flex";
	gTheNotation.style.float = "none";

	gIsMaximized = true;

	gPlayABCGotMaximizedPlay = false;

	// Fix the display margins
	HandleWindowResize();

	if (isDesktopBrowser()){

		if (isPureDesktopBrowser()){
			// Defer any notation clicks
			gGotRenderDivClick = false;
			gRenderDivClickOffset = -1;
		}

		//debugger;

		// Reset the notation margin
		gNotationLeftMarginBeforeMaximize = gTheNotation.style.marginLeft;

		gTheNotation.style.marginLeft = "auto";

	}
	else{

		if (!gIsQuickEditor){
			ShowPDFButton();
			ShowPlayButton();
		}
		else{
			ShowPlayButton();			
		}

	}

}

function DoMinimize(){

	document.getElementById("noscroller").style.display = "block";
	document.getElementById("notation-spacer").style.display = "block";

	document.getElementById("zoombutton").src = "img/zoomout.png"

	if (giPadTwoColumn){
		var elem = document.getElementById("notation-holder").style.width = "850px";
	}

	if (!gIsQuickEditor){
		
		// Hide the play button
		if (!isDesktopBrowser()){

			HidePlayButton();

			// Hide the PDF button
			HidePDFButton();
			
		}
	}
	else{

		// Hide the play button
		if (!isDesktopBrowser()){

			HidePlayButton();

		}

	}


	if (isDesktopBrowser()){
		gTheNotation.style.display = "inline";
		gTheNotation.style.float = "left";
		gTheNotation.style.marginLeft = gNotationLeftMarginBeforeMaximize;

	}

	gIsMaximized = false;

	gPlayABCGotMaximizedPlay = false;

	// Fix the display margins
	HandleWindowResize();

	// Handle any deferred notation clicks
	if (isDesktopBrowser()){

		// First time we minimize from a full screen share link or after a window resize while maximized, we need to grab the text box location params
		// Since they are not valid before the UI has been displayed
		if (gForceInitialTextBoxRecalc){

			if (giPadTwoColumn){

				// Reset text box symmetrical resize 
				gTheABC.style.marginLeft = "0px";
				gTheABC.style.width = "832px";

				gInitialTextBoxWidth = 832;
				gInitialTextBoxContainerWidth = 832;
				gInitialTextBoxContainerLeft = 0;

			}
			else{

				var elem = document.getElementById("notenlinks");
				gInitialTextBoxContainerWidth = elem.offsetWidth;

				elem = document.getElementById("noscroller");
				gInitialTextBoxContainerLeft = elem.offsetLeft;

				// Grab the text box positions and offsets
				// Setup text box symmetrical resize 
				gInitialTextBoxWidth = gTheABC.offsetWidth;
			}

			ResizeTextBox();

			gForceInitialTextBoxRecalc = false;


		}

		// If we minimize from a window resize while maximized, we need to reset the text box location params
		if (gGotWindowResizeWhileMaximized){

			gTheABC.style.width = gInitialTextBoxWidth+"px";

			gTheABC.style.marginLeft = "0px";

			var elem = document.getElementById("notenlinks");
			gInitialTextBoxContainerWidth = elem.offsetWidth;

			elem = document.getElementById("noscroller");
			gInitialTextBoxContainerLeft = elem.offsetLeft;

			gTheNotation.style.marginLeft = "auto";

			gGotWindowResizeWhileMaximized = false;

		}

		if (gGotRenderDivClick){

			if (gRenderDivClickOffset != -1){

				// Scroll the tune ABC into view
			    gTheABC.selectionEnd = gTheABC.selectionStart = gRenderDivClickOffset;

			    if (isMobileBrowser()){
			    	return;
			    }

		    	gTheABC.blur();
		    	gTheABC.focus();

		    }

	    	gGotRenderDivClick = false;
	    	gRenderDivClickOffset = -1;

		}
	}

}


function ToggleMaximize(){

	if (gIsMaximized){

		DoMinimize();

		if (isDesktopBrowser()){

			gTheNotation.style.width = "850px";


		}
		else{

			gTheNotation.style.width = "820px";

		}

	}
	else{

		DoMaximize();

		// 2 Jul 2024 - Moved this here to avoid binding error on Firefox at start
		document.getElementById("zoombutton").src = "img/zoomin.png"


		if (isDesktopBrowser()){

			if (giPadTwoColumn){
				document.getElementById("notation-holder").style.width = "80%";
			}
			else{

				// Scale the full screen up a bit if it makes sense
				var windowWidth = window.innerWidth;

				if (((windowWidth * gFullScreenScaling)/100.0) > 850){

					gTheNotation.style.width = gFullScreenScaling+"%";

				}
			}
		}
		else{

			// Scale the full screen up a bit if it makes sense
			var windowWidth = window.innerWidth;

			if (((windowWidth * gFullScreenScaling)/100.0) > 820){

				gTheNotation.style.width = gFullScreenScaling+"%";

			}

		}
		
	}

}

//
// Idle the show tab names allow state
//
function IdleAllowShowTabNames(){

	var format = GetRadioValue("notenodertab");

	var allowShowTabs = false;

	switch (format){

		case "noten":
		case "notenames":
		case "whistle":
		case "recorder":
			break;

		case "mandolin":
		case "gdad":
		case "cgda":
		case "cgdae":
		case "dgdae":
		case "guitare":
		case "guitard":
		case "uke":
			allowShowTabs = true;
			break;

	}

	if (allowShowTabs){

		gAllowShowTabNames = true;

	}
	else{

		gAllowShowTabNames = false;
	}

}


// 
// Utility function for convertering UTF-8 to Base64
//
function utf8tob64(str) {
	var retval;

	try {
		retval = btoa(escape(str));
	} catch (error) {
		retval = "";
	}
	return retval;
};

// 
// Utility function for convertering Base64 to UTF-8
//
function b64toutf8(str) {

	var retval;

	try {
		retval = unescape(atob(str));
	} catch (error) {
		retval = "";
	}
	return retval;
};

// 
// For detecting playback orientation on mobile
//
function isLandscapeOrientation() {
  if (window.matchMedia("(orientation: portrait)").matches) {
    return false
  } else if (window.matchMedia("(orientation: landscape)").matches) {
    return true;
  }
  return false;
}

// 
// Check for a share link and process it
//
function processShareLink() {

	var doRender = false;

	// If edit disabled, hide the zoom arrows
	gDisableEditFromPlayLink = false;

	// MAE 12 Feb 2025 - For browser print-to-PDF injected share links
	var theSearchURL = window.location.search;
	theSearchURL = theSearchURL.replaceAll("&amp;","&");

	const urlParams = new URLSearchParams(theSearchURL);

	// Process URL params

	// Handler for lzw ABC data parameter
	if (urlParams.has("lzw")) {

		var originalAbcInLZW = urlParams.get("lzw");

		abcInLZW = LZString.decompressFromEncodedURIComponent(originalAbcInLZW);

		const abcText = abcInLZW;

		if (abcText.length > 0) {
			SetAbcText(abcText);
			RestoreDefaults();
			doRender = true;
			gIsDirty = true;
		}
		else{
			// If it's a long LZW, most likely an Acrobat truncation issue
			if (originalAbcInLZW.length > 2000){
				// Bad decode, possibly from a truncated Adobe Acrobat link
				ShowAcrobatHyperlinkLengthWarning();
			}
			else{
				// Bad decode
				ShowHyperlinkBadDecodeAlert();

			}
		}
	}

	// Handler for format parameter
	if (urlParams.has("format")) {

		var format = urlParams.get("format");

		// No longer supporting bc or cd tablature, bass, or mandola, reset to notes
		if ((format == "bc") || (format == "cd") || (format == "bass") || (format == "mandola")){

			format = "noten";
			
		}

		if (format == "cgda"){
			setupCGDA();
		}

		if (format == "gdad"){
			setupGDAD();
		}

		if (format == "dgdae"){
			setupDGDAE();
		}

		if (format == "cgdae"){
			setupCGDAE();
		}

		if (format == "whistle"){

			// If first time using the whistle tab, prep the tin whistle font for embedded SVG styles
			setupWhistleTab();

			PrepareWhistleFont();
			
		}

		var warnRecorder = false;

		if (format == "recorder"){

			// If first time using the recorder tab, prep the recorder font for embedded SVG styles
			setupRecorderTab();
			PrepareRecorderFont();
			
		}

		SetRadioValue("notenodertab", format);

		gCurrentTab = format;

	}

	// Handler for capo parameter
	if (urlParams.has("capo")) {
		var capo = urlParams.get("capo");
		var testCapo = parseInt(capo);
		if (!isNaN(testCapo)){
			gCapo = testCapo;
		}
		else{
			gCapo = 0;
		}
	}

	// Handler for staffspacing ssp parameter
	if (urlParams.has("ssp")) {
		var ssp = urlParams.get("ssp");
		var testssp = parseInt(ssp);
		if (!isNaN(testssp)){
			gStaffSpacing = STAFFSPACEOFFSET + testssp;
		}
		else{
			gStaffSpacing = STAFFSPACEOFFSET + STAFFSPACEDEFAULT;
		}
	}
	else{
		gStaffSpacing = STAFFSPACEOFFSET + STAFFSPACEDEFAULT;
	}

	// Handler for newer showtabnames stn parameter
	if (urlParams.has("stn")) {

		var showtabnames = urlParams.get("stn");

		if (showtabnames == "true"){

			gShowTabNames = true;

		}
		else{

			gShowTabNames = false;

		}

	}

	// Force Comhaltas note name tablature?
	gForceComhaltasABC = false;

	if (urlParams.has("cce")) {
		var theCCE = urlParams.get("cce");
		if (theCCE == "1"){
			gForceComhaltasABC = true;
		}
	}

	// Is editing disabled?
	var disableEdit = false;

	// Disable editing?
	if (urlParams.has("dx")) {
		var theNoEdit = urlParams.get("dx");
		if (theNoEdit == "1"){
			disableEdit = true;;
		}
	}

	// If edit disabled, hide the zoom arrows
	if (disableEdit){
		gDisableEditFromPlayLink = true;
	}

	// Open for playback?
	// By default play the first tune
	gPlayABCTuneIndex = 0;
	var doPlay = false;
	if (urlParams.has("play")) {
		var thePlay = urlParams.get("play");
		if (thePlay == "1"){
			doPlay = true;
		}
	}

	// Open in editor?
	var openInEditor = false;

	if (!disableEdit){

		if (urlParams.has("editor")) {
			var theOpenInEditor = urlParams.get("editor");
			if (theOpenInEditor == "1"){
				openInEditor = true;
				doPlay = false;
			}
		}
	}

	// Open with GUI disabled
	gUIHidden = false;
	gUIHiddenPlayerEnabled = false;
	gUIHiddenAllowPlay = true;

	if (urlParams.has("noui")) {

		const body = document.querySelector('body');

		if (body.classList.contains("noui")) return;

		body.classList.add("noui");

		gUIHidden = true;

	}

	// Allow opting out of noui play on click
	if (urlParams.has("noui-noclick")) {
	
		gUIHiddenAllowPlay = false;

	}

	// Forcing flex?
	if (urlParams.has("flex")) {

		const body = document.querySelector('body');

		if (body){

			body.style.display = "flex";
			body.style.justifyContent = "center";

		}

	}

	// If multiple tunes in the link, which one to open in the player?
	var gotIndex = false;
	if (doPlay){
		if (urlParams.has("index")) {

			var theIndex = urlParams.get("index");
			tuneIndex = parseInt(theIndex);
			gPlayABCTuneIndex = tuneIndex;
			gotIndex = true;
		}
	}

	if (doRender) {

		// Set the title
		var theName = "";
		
		if (urlParams.has("name")) {

			theName = urlParams.get("name");

			// Inject spaces back into the name
			theName = theName.replaceAll("_"," ");

			// Inject hashes back into the name
			theName = theName.replaceAll("^","#");

		}
		else{

			var theTuneCount = CountTunes();

			// Derive the name from the ABC
			theName = getDescriptiveFileName(theTuneCount,true);
			
		}

		// We can use this name for PDF naming and sharing name param
		gABCFromFile = true;

		// Save the displayed name
		gDisplayedName = theName;

		// Hide the controls if coming in from a share link
		document.getElementById("notenrechts").style.display = "none";

		// Recalculate the notation top position
		UpdateNotationTopPosition();

		gShowAllControls = false;

		// Set the inital focus back to the ABC
		FocusABC();

		// Render the tune
		RenderAsync(true,null,function(){

			// Playback requested?
			if (doPlay){

				// Open in player
				if (!gOpenLinksInTrainer){

					// Keep track of share play presentation
					sendGoogleAnalytics("show_player","from_share");

					// Get the current tune index and tune count
					gPlayABCTuneCount = CountTunes();

					gPlayABCGotMaximizedPlay = true;

					var theABCToPlay = gTheABC.value;

					// If index specified, 
					if (gotIndex){
						theABCToPlay = getTuneByIndex(gPlayABCTuneIndex)
					}
					else{
						// Added 27 Feb 2024 for share links with multiple tunes and GM override bug
						theABCToPlay = getTuneByIndex(0);					
					}

					// Pre-process the ABC to inject any requested programs or volumes
					var theProcessedABC = PreProcessPlayABC(theABCToPlay);

					// Play back locally in-tool	
					PlayABCDialog(theProcessedABC, null, null, gPlayMetronome);

				}else{

					// Open in Tune Trainer
					// Keep track of share play presentation
					sendGoogleAnalytics("show_trainer","from_share");

					TuneTrainer(false);

				}
			}
			else{
				if (openInEditor){

					// Keep track of share presentation
					sendGoogleAnalytics("action","open_in_editor");

					// Open in the editor
					ToggleMaximize();
				}
			}

			if (warnRecorder){
				
				var modal_msg  = '<p style="text-align:center;font-size:16pt;line-height:24pt;font-family:helvetica">Recorder tablature is not available in Safari or on iOS</p>';
		 	   	modal_msg += '<p style="font-size:14pt;line-height:14pt;margin-top:32px;font-family:helvetica;">Recorder tablature is supported on desktop Chrome and Firefox</p>';
		 	   	modal_msg += '<p style="font-size:14pt;line-height:14pt;margin-top:24px;font-family:helvetica;">Whistle tablature will be used instead on Safari and iOS</p>';
		 	   	modal_msg += '<p style="font-size:14pt;line-height:14pt;margin-top:12px;font-family:helvetica;">&nbsp;</p>';
			
				DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });
			}

		});

		if (isDesktopBrowser()){

			// Scale the full screen up a bit if it makes sense
			var windowWidth = window.innerWidth;

			if (((windowWidth * gFullScreenScaling)/100.0) > 850){

				gTheNotation.style.width = gFullScreenScaling+"%";

			}
		}
		else{

			// Scale the full screen up a bit if it makes sense
			var windowWidth = window.innerWidth;

			if (((windowWidth * gFullScreenScaling)/100.0) > 820){

				gTheNotation.style.width = gFullScreenScaling+"%";

			}

		}

		return true;

	}

	return false;
}

// 
// Handle changes to the text box size
//
function TextBoxResizeHandler(){

	// Resize the notation spacer
	UpdateNotationTopPosition();

	// Force a rescroll for one column view
	if (gIsOneColumn){

		MakeTuneVisible(true);

	}

}

//
// Returns the tune index for the current start of selection
//

//
// Find the tune index around the selection point
//
function findSelectedTuneIndex(){

	var theNotes = gTheABC.value;

	// Now find all the X: items
    var theTunes = theNotes.split(/^X:/gm);

    var nTunes = CountTunes();

    // Never autoscroll the single tune case
    if (nTunes < 2){

    	//console.log("No autoscroll on single tunes");
    	
    	return 0;

    }

    // Obtain the index of the first selected character
    var start = gTheABC.selectionStart;

    if (start == 0) {

	    // Common case where a set was just loaded and the cursor is at the start, go find the first position after an X:
		start = theNotes.indexOf("X:")+2;

	}

	// Odd case where there isn't an X:, no tunes
	if (start == 0){

		return -1;

	}

    // First chunk is whatever is before the first X:
    var theOffset = 0;

    theOffset = theTunes[0].length;

    for (var i=1;i<=nTunes;++i){

    	// Account for the X: stripped in the length
    	theOffset += theTunes[i].length+2;

    	// Is the offset in the last chunk?
    	if (start < theOffset){

    		return (i-1);

    	}

    }

    // Didn't find a tune, no autoscroll
    return -1;

}

//
// Scrolls the tune into view if it not visible
//
// Called on every click into the work area, with some debounce
//
// Set forceUpdate true to force a scroll even if the same tune is still visible
// This is for global render cases, like a tablature style change
//

function MakeTuneVisible(forceUpdate){

	if (gIsQuickEditor){

		if (gAllowCopy){

			var tuneIndex = findSelectedTuneIndex();
			
			if (tuneIndex != gCurrentTune){

				if (!gDisableNotationRendering){
					Render(false,tuneIndex);
				}

				//console.log("MakeTuneVisible - gCurrentTune before = "+gCurrentTune);
				gCurrentTune = tuneIndex;
				//console.log("MakeTuneVisible - gCurrentTune after = "+gCurrentTune);

				setTimeout(function(){
					// Force scroll to the top
					window.scrollTo(0,0);
				},100);

			}		
		}

		return;

	}

	// Follows same enable semantics as copy
	if (gAllowCopy){

		var tuneIndex = findSelectedTuneIndex();

		// console.log("------------------------------------");
		// console.log("------------------------------------");

		//console.log("MakeTuneVisible tuneIndex = "+tuneIndex+" forceUpdate = "+forceUpdate+" gCurrentTune before = "+gCurrentTune);

		// Save the current tune index
		gCurrentTune = tuneIndex;

		// Only do the rest on desktop, except in the force case after a global change
		if (!forceUpdate){
			if (isMobileBrowser()){
				return;
			}
		}

		// Rendering disabled.
		if (gDisableNotationRendering){

			//console.log("MakeTuneVisible - Rendering disabled");

			return;
			
		}

		//console.log("Selected tune index = " + tuneIndex);

		if (tuneIndex != -1){

			// Find the location of the corresponding rendering div
			var theDivID = "notation"+tuneIndex;

			var theTuneDiv = document.getElementById(theDivID);

			var theTuneTop = theTuneDiv.offsetTop;
			var theTuneHeight = theTuneDiv.offsetHeight;

			var theNotationSpacer = document.getElementById("notation-spacer");
			var theNotationSpacerHeight = theNotationSpacer.offsetHeight;

			// No noscroller to be taken into account if in dual column mode
			if (!gIsOneColumn){
				//console.log("two colume case");
				theNotationSpacerHeight = 0;
			}
			else{
				//console.log("one column case");
				theTuneTop += theNotationSpacerHeight;
			}

			var theWindowHeight = window.innerHeight;

			var theWindowScrollY = window.scrollY;

			var theVisibleHeight = theWindowHeight - theNotationSpacerHeight;

			// Find the position of the tune relative to the bottom of the UI
			// 18 appears to be a margin offset
			var theTuneOffsetFromSpacer = ((theTuneTop - theWindowScrollY) - theNotationSpacerHeight);

			// console.log("------------------------------------");

			// console.log("tune top= "+theTuneTop+ " tune height= "+theTuneHeight+" notation spacer height = "+theNotationSpacerHeight);
			// console.log("window height = "+theWindowHeight+" window scrolly= "+theWindowScrollY);
			// console.log("theVisibleHeight= "+theVisibleHeight);
			// console.log("theTuneOffsetFromSpacer = "+theTuneOffsetFromSpacer);
			// console.log("------------------------------------");

			// Is the top of the tune visible?

			var tuneTopVisible = (theTuneOffsetFromSpacer >= 0) && (theTuneOffsetFromSpacer < theVisibleHeight);

			//console.log("tuneTopVisible = "+tuneTopVisible);

			var tuneBottomOffset = theTuneOffsetFromSpacer + theTuneHeight;

			//console.log("tuneBottomOffset = "+tuneBottomOffset)

			var tuneBottomVisible = (tuneBottomOffset > 0) && (tuneBottomOffset < theVisibleHeight);

			// console.log("tuneBottomVisible = "+tuneBottomVisible);

			var tuneOverflowsVisible = (theTuneOffsetFromSpacer < 0) && ((theTuneOffsetFromSpacer + theTuneHeight) > theVisibleHeight);

			// console.log("tuneOverflowsVisible = "+tuneOverflowsVisible);

			// console.log("------------------------------------");

			// Handle case where the tune changed since an autoscroll, force a rescroll
			if ((tuneIndex != gLastAutoScrolledTune) || forceUpdate){

				//console.log("Trigger autoscroll case #1 - selected a different tune or forceUpdate = "+forceUpdate); 

				var newScrollPos = theTuneTop-theNotationSpacerHeight;

				window.scrollTo(0,newScrollPos);

				gLastAutoScrolledTune = tuneIndex;

			}
			else{

				if (!(tuneTopVisible || tuneBottomVisible || tuneOverflowsVisible)){

					//console.log("Trigger autoscroll case #2, tune completely invisible whether current or newly selected tune"); 

					var newScrollPos = theTuneTop-theNotationSpacerHeight;

					window.scrollTo(0,newScrollPos);

					// Save this as the last autoscrolled tune
					gLastAutoScrolledTune = tuneIndex;

				}
			}
		}
	}
}

//
// Text change handler
//

//
// General purpose repeated event debouncer
// Used here to avoid flooding the renderer with requests
//
function debounce(callback, wait) {
  let timeout;
  return (...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(function () { callback.apply(this, args); }, wait);
  };
}

function OnABCTextChange(){

	// If the total number of tunes has changed, render all the tunes
	// Otherwise, just render the tune being worked on

	var oldTuneCount = gTotalTunes;

	var newTuneCount = CountTunes();

	var renderAllTunes = (oldTuneCount != newTuneCount);

	// Tune count changed, need to render all tunes
	if (renderAllTunes){

		if (gIsQuickEditor){
			gCurrentTune = 0;
		}

		RenderAsync(true,null);

	}
	else{

		if (gRawMode){

			// Maintain the scroll position if possible
			var theScroll = window.scrollY;

			RenderAsync(true,null,function(){

				// Highlight the notes in the notation
				fireSelectionChanged();

				// Restore scroll position
				window.scrollTo(0,theScroll);
				
			});

		}
		else{

			// Otherwise, just render the tune being worked on
			Render(false,gCurrentTune);

		}

	}

}

//
// Custom tin whistle font
//

const gWhistleFont = "@font-face { font-family: 'TinWhistleFingering'; src: url(data:font/truetype;charset=utf-8;base64,) format('truetype'); font-weight: normal; font-style: normal; }";
//
// Prepare the whistle font 
//
function PrepareWhistleFont(){

	if (!gWhistleFontPrepared){

		var theFontHolderSVG = document.querySelectorAll('div[id="fontholder"] > svg > style');

		//
		// Interesting hack/fix on 9 Mar 2023
		// Apparently it is sufficient to just have the font embedded in the first SVG notation div and it will work for all the rest
		// and works for the PDF generation.
		//

		theFontHolderSVG[0].innerHTML += gWhistleFont;
		
		// Only do this the first time
		gWhistleFontPrepared = true;

	}

}

//
// Custom recorder font that supports both Baroque and German fingerings
//  

const gRecorderFont = "@font-face { font-family: 'RecorderFingering'; src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2')}";  

//
// Prepare the recorder font 
//
function PrepareRecorderFont(){

	if (!gRecorderFontPrepared){

		var theFontHolderSVG = document.querySelectorAll('div[id="fontholder"] > svg > style');

		//
		// Interesting hack/fix on 9 Mar 2023
		// Apparently it is sufficient to just have the font embedded in the first SVG notation div and it will work for all the rest
		// and works for the PDF generation.
		//
		theFontHolderSVG[0].innerHTML += gRecorderFont;
		
		// Only do this the first time
		gRecorderFontPrepared = true;

	}

}

// 
// Inject custom CSS for image export
//

//
// Inject required CSS into SVG for standard tab styles
//
function injectSVGCSS(src,isJPEG){

  var customCSS =  Array.from(document.querySelectorAll('style[data-aggregate-css="true"]'))
  .map(style => style.textContent)
  .join('\n');

  if (isJPEG){
    src = src.replace("<style/>","<style/><style>"+customCSS+"</style>");
  }
  else{
    src = src.replace("<style></style>","<style>"+customCSS+"</style>");
  }
  return src;
}

//
// Inject required CSS into SVG for tin whistle image export
//
function injectWhistleSVGCSS(src,isJPEG){

  var customCSS =  Array.from(document.querySelectorAll('style[data-aggregate-css="true"]'))
  .map(style => style.textContent)
  .join('\n');

  if (isJPEG){
    src = src.replace("<style/>","<style/><style>"+gWhistleFont+".whistle {font-family: 'TinWhistleFingering';font-size: 50px;}.hiddentabline {display:none;}"+customCSS+"</style>");
  }
  else{
    src = src.replace("<style></style>","<style>"+gWhistleFont+".whistle {font-family: 'TinWhistleFingering';font-size: 50px;}.hiddentabline {display:none;}"+customCSS+"</style>");
  }
  return src;
}

//
// Inject required CSS into SVG for recorder image export
//
function injectRecorderSVGCSS(src,isJPEG){

  var customCSS =  Array.from(document.querySelectorAll('style[data-aggregate-css="true"]'))
  .map(style => style.textContent)
  .join('\n');

  if (isJPEG){
    src = src.replace("<style/>","<style/><style>"+gRecorderFont+".recorder {font-family: 'RecorderFingering';font-size: 50px;}.hiddentabline {display:none;}"+customCSS+"</style>");
  }
  else{
    src = src.replace("<style></style>","<style>"+gRecorderFont+".recorder {font-family: 'RecorderFingering';font-size: 50px;}.hiddentabline {display:none;}"+customCSS+"</style>");
  }
  return src;
}

//
// Inject required CSS into SVG for note name SVG export
//
function injectNoteNamesSVGCSS(src,isJPEG){
  
  var customCSS =  Array.from(document.querySelectorAll('style[data-aggregate-css="true"]'))
  .map(style => style.textContent)
  .join('\n');

  if (isJPEG){
    src = src.replace("<style/>","<style/><style>.hiddentabline {display:none;}"+customCSS+"</style>");
  }
  else{
    src = src.replace("<style></style>","<style>.hiddentabline {display:none;}"+customCSS+"</style>");
  }
  return src;
}

//
// Do Ceoltas Transform
//
function DoCeoltasTransform(doInverse){

	// Keep track of tablature injection use
	if (doInverse){
		sendGoogleAnalytics("tablature","DoCeoltasTransform_Inverse");
	}
	else{
		sendGoogleAnalytics("tablature","DoCeoltasTransform");
	}

	setABCEditorText(ceoltasABCTransformer(gTheABC.value,doInverse,false));

	// Set dirty
	gIsDirty = true;

	RenderAsync(true,null);

	// Idle the dialog
	IdleAdvancedControls(true);

	// Idle the show tab names control
	IdleAllowShowTabNames();

}

//
// Inject a second voice of drones for bagpipe scores
//
function InjectOneBagpipeDrones(theTune,droneStyle,hideDroneVoice,foldNotes,injectDrones,droneMatchesTuneKey){


	// Replace a note with another, avoiding chords and text annotations
	function replaceOutsideQuotes(str, target, replacement) {
	    return str.replace(/"[^"]*"|[^"]/g, (match) => {
	        if (match.startsWith('"')) {
	            return match; // If it's inside quotes, return the match as is
	        } else {
	            return match.replace(new RegExp(target, 'g'), replacement); // If it's outside quotes, replace the target
	        }
	    });
	}

	// 
	// Get the drone pitch shift for a tune based on key
	//
	function getDroneShift(theTune){

		// Get the key for the tune
		var theRootKey = getTuneRootKey(theTune);

		//console.log("theRootKey: "+theRootKey)

		switch (theRootKey){
			case "B#":
				return 300;
				break;

			case "C":
				return 300;
				break;

			case "C#":
				return 400;
				break;

			case "Db":
				return 400;
				break;

			case "D":
				return 500;
				break;

			case "D#":
				return 600;
				break;

			case "Eb":
				return 600;
				break;

			case "E":
				return -500;
				break;

			case "Fb":
				return -500;
				break;

			case "E#":
				return -400;
				break;

			case "F":
				return -400;
				break;

			case "F#":
				return -300;
				break;

			case "Gb":
				return -300;
				break;

			case "G":
				return -200;
				break;

			case "G#":
				return -100;
				break;

			case "Ab":
				return -100;
				break;

			case "A":
				return 0;
				break;

			case "A#":
				return 100;
				break;

			case "Bb":
				return 100;
				break;

			case "B":
				return 200;
				break;

			case "Cb":
				return 200;
				break;

			default:
				return 0;
				break;
		}
	}

	//
	// Fold the notes into the chanter range
	//
	function FoldTheNotes(theTune,theKey){

		var theOriginalTune = theTune;

		// Find the notes below the header
		var theNotes = JustTheNotes(theTune);

		var theLines = theNotes.split("\n");

		// Find the first line that doesn't start with a comment
		var nLines = theLines.length;

		var bGotNotes = false;

		var theLine;

		var accum = "";

		for (var i=0;i<nLines;++i){

			theLine = theLines[i];

			// Don't translate characters in comments, annotations, or voice declarations
			if ((theLine.indexOf("%") != 0) && (theLine.indexOf("V:") == -1)){

				bGotNotes = true;

				switch (theKey){

					case "A":
					theLine = theLine.replaceAll("C,,","c");
					theLine = theLine.replaceAll("D,,","d");
					theLine = theLine.replaceAll("E,,","e");
					theLine = theLine.replaceAll("F,,","f");
					theLine = theLine.replaceAll("G,,","G");
					theLine = theLine.replaceAll("A,,","A");
					theLine = theLine.replaceAll("B,,","B");
					theLine = theLine.replaceAll("C,","c");
					theLine = theLine.replaceAll("D,","d");
					theLine = theLine.replaceAll("E,","e");
					theLine = theLine.replaceAll("F,","f");
					theLine = theLine.replaceAll("G,","G");
					theLine = theLine.replaceAll("A,","A");
					theLine = theLine.replaceAll("B,","B");
					theLine = replaceOutsideQuotes(theLine,"C","c");
					theLine = replaceOutsideQuotes(theLine,"D","d");
					theLine = replaceOutsideQuotes(theLine,"E","e");
					theLine = replaceOutsideQuotes(theLine,"F","f");
					theLine = theLine.replaceAll("b","B");
					theLine = theLine.replaceAll("c'","c");
					theLine = theLine.replaceAll("d'","d");
					theLine = theLine.replaceAll("e'","e");
					theLine = theLine.replaceAll("f'","f");
					theLine = theLine.replaceAll("g'","g");
					theLine = theLine.replaceAll("a'","a");
					theLine = theLine.replaceAll("b'","b");

					break;

					case "D":
					theLine = theLine.replaceAll("C,,","C");
					theLine = theLine.replaceAll("D,,","D");
					theLine = theLine.replaceAll("E,,","E");
					theLine = theLine.replaceAll("F,,","F");
					theLine = theLine.replaceAll("G,,","G");
					theLine = theLine.replaceAll("A,,","A");
					theLine = theLine.replaceAll("B,,","B");
					theLine = theLine.replaceAll("C,","C");
					theLine = theLine.replaceAll("D,","D");
					theLine = theLine.replaceAll("E,","E");
					theLine = theLine.replaceAll("F,","F");
					theLine = theLine.replaceAll("G,","G");
					theLine = theLine.replaceAll("A,","A");
					theLine = theLine.replaceAll("B,","B");
					theLine = theLine.replaceAll("e","E");
					theLine = theLine.replaceAll("f","F");
					theLine = theLine.replaceAll("g","G");
					theLine = theLine.replaceAll("a","A");
					theLine = theLine.replaceAll("b","B");
					theLine = theLine.replaceAll("c'","C");
					theLine = theLine.replaceAll("d'","D");

					break;
				}

			} 

			accum += theLine + "\n";

		}

		// Didn't find anything below the header, exit early
		if (!bGotNotes){

			return(theOriginalTune);

		}
		else{
			// Replace the original notes with the folded version
			accum = accum.trim();
			return theOriginalTune.replace(theNotes,accum);
		}

		return accum;
	}

	function StripCommentsOne(abcNotation) {
	  return abcNotation
	    .split('\n')          // Split the input into lines
	    .filter(line => !line.trim().startsWith('%')) // Filter out lines that start with '%'
	    .join('\n');          // Join the remaining lines back into a single string
	}

	function getNumberInNote(str) {
	    // Use a regular expression to find a trailing number
	    const match = str.match(/(\d+)/);
	    
	    // If a match is found, return the number
	    if (match) {
	        return match[0];
	    }

	    // If no trailing number is found, return blank string
	    return "";
	}

	function removeLastHyphen(str) {
	    // Find the last occurrence of the hyphen
	    const lastHyphenIndex = str.lastIndexOf('-');

	    // If there's no hyphen, return the string as is
	    if (lastHyphenIndex === -1) {
	        return str;
	    }

	    // Remove the last hyphen by slicing the string
	    return str.slice(0, lastHyphenIndex) + str.slice(lastHyphenIndex + 1);
	}

	function replaceNotes(abcLine, toInject) {
	    // Regular expression to match notes in ABC notation
	    // This covers A-G notes with optional sharps, flats, and octave indicators (',)
	    // and optional duration (numbers)
	    const noteRegex = /([A-Ga-gzZ][',]?[\d*\/]?[',\/>]?)(\d*)/g;

	    return abcLine.replace(noteRegex, (match, note, duration) => {
	        
	        // Replace note with [A, A] and append the duration with a dash
	        //console.log("match "+match+" note "+note+" duration "+duration);
	        
	        var postFix = getNumberInNote(match);

	        if (match.indexOf("/")!= -1){
	        	postFix += "/";
	        }

	        if (match.indexOf(">")!= -1){
	        	postFix += ">";
	        }

	        var retVal = `${toInject}${duration ? duration : ''}${postFix}-`;

	        //console.log("retVal "+retVal);

	        return retVal;
	    });
	}

	var theInjectedTune;

	var theDroneNotes;

	var postFix = "";

	var doVisibleFolding = false;

	var visibleFoldingKey = "A";

	// Sackpipa and Uilleann are based on the key of D
	if ((droneStyle >= 6) && (droneStyle != 19)){
		visibleFoldingKey = "D";
	}

	var isNotBWW = (theTune.indexOf("% Converted to ABC using bww2abc") == -1);

	// Shifting the drones to match the key of the tune?
	var theDroneShift = 0;
	if (droneMatchesTuneKey){

		theDroneShift = getDroneShift(theTune);

	}

	// Change the transpose and tuning based on the instrument style
	switch (droneStyle){

		case 0: // Great Highland Bagpipe at 480 Hz
			theDroneNotes = "[A,,,, A,,,]";

			if (isNotBWW){

				doVisibleFolding = foldNotes; 

				theDroneShift = 148 + theDroneShift;

				if (foldNotes){
					postFix = " stems=down transpose=0\n%%MIDI program 143\n%voice_tuning_cents 148 "+theDroneShift;
				}
				else{
					postFix = " stems=down transpose=0\n%%MIDI program 109\n%voice_tuning_cents 148 "+theDroneShift;					
				}
			}
			else{
				postFix = " transpose=0\n%%MIDI program 109";
			}	

		 	break;

		case 1: // Great Highland Bagpipe at 473 Hz (Concert Bb)
			theDroneNotes = "[A,,,, A,,,]";

			theDroneShift = 100 + theDroneShift;

			if (isNotBWW){

				doVisibleFolding = foldNotes;

				if (foldNotes){
					postFix = " stems=down transpose=0\n%%MIDI program 143\n%voice_tuning_cents 100 "+theDroneShift;
				}
				else{
					postFix = " stems=down transpose=0\n%%MIDI program 109\n%voice_tuning_cents 100 "+theDroneShift;					
				}
			}
			else{
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents 0 100");
				postFix = " transpose=0\n%%MIDI program 109";
			}	
		 	break;

		case 19: // Great Highland Bagpipe at 454 Hz (Practice chanter)
			theDroneNotes = "[A,,,, A,,,]";

			if (isNotBWW){

				doVisibleFolding = foldNotes; 

				theDroneShift = 54 + theDroneShift;

				if (foldNotes){
					postFix = " stems=down transpose=0\n%%MIDI program 143\n%voice_tuning_cents 54 "+theDroneShift;
				}
				else{
					postFix = " stems=down transpose=0\n%%MIDI program 109\n%voice_tuning_cents 54 "+theDroneShift;					
				}
			}
			else{
				theTune = theTune.replaceAll("transpose=1","transpose=0");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents 54 54");
				postFix = " transpose=0\n%%MIDI program 109";
			}	

		 	break;


		case 2: // Border pipes in A - Highland drones
			theDroneNotes = "[A,,,, A,,,]";

			if (isNotBWW){

				doVisibleFolding = foldNotes;

				if (foldNotes){
					postFix = " stems=down transpose=0\n%%MIDI program 143\n%voice_tuning_cents 0 "+theDroneShift;
				}
				else{
					postFix = " stems=down transpose=0\n%%MIDI program 109\n%voice_tuning_cents 0 "+theDroneShift;					
				}
			}
			else{
				theTune = theTune.replaceAll("transpose=1","transpose=0");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents 0 0");
				postFix = " transpose=0\n%%MIDI program 109";
			}	
		 	break;

		case 3: // Border pipes in D - Highland drones
			theDroneNotes = "[A,,,, A,,,]";

			if (isNotBWW){

				doVisibleFolding = foldNotes;

				theDroneShift = 500 + theDroneShift;

				if (foldNotes){
					postFix = " stems=down transpose=0\n%%MIDI program 143\n%voice_tuning_cents -700 "+theDroneShift;
				}
				else{
					postFix = " stems=down transpose=0\n%%MIDI program 109\n%voice_tuning_cents -700 "+theDroneShift;					
				}
			}
			else{
				theTune = theTune.replaceAll("transpose=1","transpose=0");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents -700 500");
				postFix = " transpose=0\n%%MIDI program 109";
			}	
		 	break;

		case 4: // Smallpipes in A - Smallpipes drones
			theDroneNotes = "D,,";
			if (isNotBWW){

				doVisibleFolding = foldNotes;

				// Higher drones only
				if (theDroneShift < 0){
					theDroneShift += 1200;
				}

				postFix = " stems=down transpose=-7\n%%MIDI program 131\n%voice_tuning_cents 0 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 131");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents 0 0");
			}	
		 	break;

		case 5: // Smallpipes in D - Smallpipes drones
			theDroneNotes = "D,,";
			if (isNotBWW){

				doVisibleFolding = foldNotes;

				// Higher drones only
				if (theDroneShift < 0){
					theDroneShift += 1200;
				}

				postFix = " stems=down transpose=-7\n%%MIDI program 130\n%voice_tuning_cents 0 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 130");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents 0 0");
			}	
		 	break;

		case 6: // Sackpipa - Sackpipa drones
			theDroneNotes = "D,,";

			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}
				
			}

			if (isNotBWW){
				doVisibleFolding = foldNotes;
				postFix = " stems=auto transpose=0\n%%MIDI program 132\n%voice_tuning_cents 0 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 132");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents 0 0");
			}	
		 	break;

		case 7: // Uilleann Pipes in D - Crowley-style drones
			theDroneNotes = "D,";

			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}

			}

			if (isNotBWW){
				postFix = " stems=auto transpose=0\n%%MIDI program 129\n%voice_tuning_cents 0 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 129");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents 0 0");
			}	
		 	break;

		case 8: // Uilleann Pipes in D - Lynch-style drones
			theDroneNotes = "E,";

			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}

			}
			
			if (isNotBWW){
				postFix = " stems=auto transpose=0\n%%MIDI program 129\n%voice_tuning_cents 0 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 129");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents 0 0");
			}	
		 	break;

		case 9: // Uilleann Pipes in C# - Crowley-style drones
			theDroneNotes = "D,";

			theDroneShift = theDroneShift-100;
			
			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}
				
			}
			
			if (isNotBWW){

				postFix = " stems=auto transpose=0\n%%MIDI program 129\n%voice_tuning_cents -100 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 129");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents -100 -100");
			}	
		 	break;

		case 10: // Uilleann Pipes in C# - Lynch-style drones
			theDroneNotes = "E,";

			theDroneShift = theDroneShift-100;

			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}
				
			}
			
			if (isNotBWW){
				postFix = " stems=auto transpose=0\n%%MIDI program 129\n%voice_tuning_cents -100 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 129");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents -100 -100");
			}	
		 	break;

		case 11: // Uilleann Pipes in C - Crowley-style drones
			theDroneNotes = "D,";

			theDroneShift = theDroneShift-200;

			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}
				
			}
			
			if (isNotBWW){
				postFix = " stems=auto transpose=0\n%%MIDI program 129\n%voice_tuning_cents -200 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 129");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents -200 -200");
			}	
		 	break;

		case 12: // Uilleann Pipes in C - Lynch-style drones
			theDroneNotes = "E,";

			theDroneShift = theDroneShift-200;
			
			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}
				
			}
			
			if (isNotBWW){
				postFix = " stems=auto transpose=0\n%%MIDI program 129\n%voice_tuning_cents -200 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 129");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents -200 -200");
			}	
		 	break;

		case 13: // Uilleann Pipes in B - Crowley-style drones
			theDroneNotes = "D,";

			theDroneShift = theDroneShift-300;
			
			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}
				
			}
			
			if (isNotBWW){
				postFix = " stems=auto transpose=0\n%%MIDI program 129\n%voice_tuning_cents -300 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 129");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents -300 -300");
			}	
		 	break;

		case 14: // Uilleann Pipes in B - Lynch-style drones
			theDroneNotes = "E,";

			theDroneShift = theDroneShift-300;
			
			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}
				
			}
			
			if (isNotBWW){
				postFix = " stems=auto transpose=0\n%%MIDI program 129\n%voice_tuning_cents -300 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 129");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents -300 -300");
			}	
		 	break;

		case 15: // Uilleann Pipes in Bb - Crowley-style drones
			theDroneNotes = "D,";

			theDroneShift = theDroneShift-400;
			
			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}
				
			}
			
			if (isNotBWW){
				postFix = " stems=auto transpose=0\n%%MIDI program 129\n%voice_tuning_cents -400 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 129");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents -400 -400");
			}	
		 	break;

		case 16: // Uilleann Pipes in Bb - Lynch-style drones
			theDroneNotes = "E,";

			theDroneShift = theDroneShift-400;
			
			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}
				
			}
			
			if (isNotBWW){
				postFix = " stems=auto transpose=0\n%%MIDI program 129\n%voice_tuning_cents -400 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 129");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents -400 -400");
			}	
		 	break;

		case 17: // Uilleann Pipes in A - Crowley-style drones
			theDroneNotes = "D,";

			theDroneShift = theDroneShift-500;
			
			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}
				
			}
			
			if (isNotBWW){
				postFix = " stems=auto transpose=0\n%%MIDI program 129\n%voice_tuning_cents -500 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 129");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents -500 -500");
			}	
		 	break;

		case 18: // Uilleann Pipes in A - Lynch-style drones
			theDroneNotes = "E,";
			
			theDroneShift = theDroneShift-500;

			if (droneMatchesTuneKey){

				theDroneShift = theDroneShift + 700;

				if (theDroneShift > 500){
					theDroneShift -= 1200;
				}
				
			}

			if (isNotBWW){
				postFix = " stems=auto transpose=0\n%%MIDI program 129\n%voice_tuning_cents -500 "+theDroneShift;
			}
			else{
				theTune = theTune.replaceAll("%%MIDI program 109","%%MIDI program 129");
				theTune = theTune.replaceAll("transpose=1","transpose=-7");
				theTune = theTune.replaceAll("%voice_tuning_cents 48 148","%voice_tuning_cents -500 -500");
			}	
		 	break;

	}

	if (hideDroneVoice){
		theInjectedTune = InjectStringBelowTuneHeader(theTune,"%\n%%score (1 2)\n%\n%play_highlight_v1_only\n%\nV:1"+postFix);
	}
	else{
		theInjectedTune = InjectStringBelowTuneHeader(theTune,"%\n%%score 1 2\n%\n%play_highlight_v1_only\n%\nV:1"+postFix);
	}				

	// Fixes issue with tunes that have comments after them before the next tune
	// Strip all blank lines
	theInjectedTune = theInjectedTune.replace(/^\s*[\r\n]/gm, '');

	theInjectedTune = theInjectedTune.trim();

	// Folding the notation?
	if (doVisibleFolding){
		theInjectedTune = FoldTheNotes(theInjectedTune,visibleFoldingKey);
	}

	// Injecting drones?
	if (injectDrones){

		theInjectedTune += "\n%\n% Injected drones\n%\n";
										
		var theNotes = JustTheNotes(theTune);

		// Strip all extra stuff that's not notes
		theNotes = StripCommentsOne(theNotes);
		theNotes = StripTextAnnotationsOne(theNotes);
		theNotes = StripChordsOne(theNotes);
		theNotes = StripTabOne(theNotes);	
		theNotes = StripOrnamentsOne(theNotes,false);

		var theLines = theNotes.split("\n");

		var nLines = theLines.length;

		var accum = "";

		var theInitialDynamics = "!mf! ";

		switch (droneStyle){

			case 0: // Great Highland Bagpipe at 480 Hz
			case 1: // Great Highland Bagpipe at 473 Hz (Concert Bb)
			case 2: // Border pipes in A - Highland drones
			case 3: // Border pipes in D - Highland drones
			case 19: // Great Highland Bagpipe at 454 Hz
				if (hideDroneVoice){
					accum += "V:2 stems=down octave=4 transpose=-48\n%%MIDI program 109\n%%MIDI transpose -48\n%%voicecolor transparent\n";
				}
				else{
					accum += "V:2 stems=down octave=4 transpose=-48\n%%MIDI program 109\n%%MIDI transpose -48\n";				
				}
			 	break;

			case 4: // Smallpipes in A - Smallpipes drones
				if (hideDroneVoice){
					accum += "V:2 stems=down octave=3 transpose=-36\n%%MIDI program 131\n%%MIDI transpose -36\n%%voicecolor transparent\n";
				}
				else{
					accum += "V:2 stems=down octave=3 transpose=-36\n%%MIDI program 131\n%%MIDI transpose -36\n";				
				}
				theInitialDynamics = "!pp! "
			 	break;

			case 5: // Smallpipes in D - Smallpipes drones
				if (hideDroneVoice){
					accum += "V:2 stems=down octave=3 transpose=-36\n%%MIDI program 130\n%%MIDI transpose -36\n%%voicecolor transparent\n";
				}
				else{
					accum += "V:2 stems=down octave=3 transpose=-36\n%%MIDI program 130\n%%MIDI transpose -36\n";				
				}
				theInitialDynamics = "!pp! "
			 	break;

			case 6: // Sackpipa in D - Sackpipa drones
				if (hideDroneVoice){
					accum += "V:2 stems=down octave=3 transpose=-36\n%%MIDI program 132\n%%MIDI transpose -36\n%%voicecolor transparent\n";
				}
				else{
					accum += "V:2 stems=down octave=3 transpose=-36\n%%MIDI program 132\n%%MIDI transpose -36\n";				
				}
				theInitialDynamics = "!pp! "
				break;

			case 7: // Uilleann Pipes in D - Uilleann Crowley drones
			case 9: // Uilleann Pipes in C# - Uilleann Crowley drones
			case 11: // Uilleann Pipes in C - Uilleann Crowley drones
			case 13: // Uilleann Pipes in B - Uilleann Crowley drones
			case 15: // Uilleann Pipes in Bb - Uilleann Crowley drones
			case 17: // Uilleann Pipes in A - Uilleann Crowley drones
				if (hideDroneVoice){
					accum += "V:2 stems=down octave=2 transpose=-24\n%%MIDI program 129\n%%MIDI transpose -24\n%%voicecolor transparent\n";
				}
				else{
					accum += "V:2 stems=down octave=2 transpose=-24\n%%MIDI program 129\n%%MIDI transpose -24\n";				
				}
				theInitialDynamics = "!p! "
				break;

			case 8: // Uilleann Pipes in D - Uilleann Lynch drones
			case 10: // Uilleann Pipes in C# - Uilleann Lynch drones
			case 12: // Uilleann Pipes in C - Uilleann Lynch drones
			case 14: // Uilleann Pipes in B - Uilleann Lynch drones
			case 16: // Uilleann Pipes in Bb - Uilleann Lynch drones
			case 18: // Uilleann Pipes in Bb - Uilleann Lynch drones
				if (hideDroneVoice){
					accum += "V:2 stems=down octave=2 transpose=-24\n%%MIDI program 129\n%%MIDI transpose -24\n%%voicecolor transparent\n";
				}
				else{
					accum += "V:2 stems=down octave=2 transpose=-24\n%%MIDI program 129\n%%MIDI transpose -24\n";				
				}
				theInitialDynamics = "!mp! "
				break;

		}

		var injected_dynamics = false;

		for (var i=0;i<nLines;++i){

			var thisLine = theLines[i];

			thisLine = replaceNotes(thisLine,theDroneNotes);

			// Inject dynamics into the first line with notes
			if (thisLine != ""){

				if (!injected_dynamics){
				
					thisLine = theInitialDynamics+thisLine;
				
					injected_dynamics = true;
				
				}
			}

			accum += thisLine;

			accum += "\n"

		}

		theInjectedTune += accum;

	}

	return theInjectedTune.trim();
}

//
// Inject bagpipe drone and chanter sounds
//
var gLastInjectedBagpipeSound = 0;

function InjectBagpipeSounds(){
	//console.log("InjectBagpipeSounds");

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	var theSelectedTuneIndex = findSelectedTuneIndex();

   	const drone_style_list = [
	    { name: "  Great Highland Bagpipe - A=480 Hz (Pipe band high pitch)", id: 0 },
	    { name: "  Great Highland Bagpipe - A=466 Hz (Standard B-flat)", id: 1 },
	    { name: "  Great Highland Bagpipe - A=454 Hz (Practice chanter)", id: 19 },
	    { name: "  Border Pipes in A - A=440 Hz", id: 2 },
	    { name: "  Border Pipes in D", id: 3 },
	    { name: "  Smallpipes in A", id: 4 },
	    { name: "  Smallpipes in D", id: 5 },
	    { name: "  Swedish Säckpipa in D", id: 6 },
	    { name: "  Uilleann Pipes in D (Crowley-style drones)", id: 7 },
	    { name: "  Uilleann Pipes in D (Lynch-style drones)", id: 8 },
	    { name: "  Uilleann Pipes Flat Set in C# (Crowley-style drones)", id: 9 },
	    { name: "  Uilleann Pipes Flat Set in C# (Lynch-style drones)", id: 10 },
	    { name: "  Uilleann Pipes Flat Set in C (Crowley-style drones)", id: 11 },
	    { name: "  Uilleann Pipes Flat Set in C (Lynch-style drones)", id: 12 },
	    { name: "  Uilleann Pipes Flat Set in B (Crowley-style drones)", id: 13 },
	    { name: "  Uilleann Pipes Flat Set in B (Lynch-style drones)", id: 14 },
	    { name: "  Uilleann Pipes Flat Set in Bb (Crowley-style drones)", id: 15 },
	    { name: "  Uilleann Pipes Flat Set in Bb (Lynch-style drones)", id: 16 },
	    { name: "  Uilleann Pipes Flat Set in A (Crowley-style drones)", id: 17 },
	    { name: "  Uilleann Pipes Flat Set in A (Lynch-style drones)", id: 18 }
  	];

	// Setup initial values
	const theData = {
		hidedronevoice: true,
	  	injectalltunes: true,
	  	dronestyle: gLastInjectedBagpipeSound,
	  	transposemelody: false,
	  	foldnotes: true,
	  	injectdronevoice:true,
	  	matchtunekey: false
	};

	var form = [
	  {html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Inject Bagpipe Sounds<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#advanced_injectbagpipesounds" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},  
	  {html: '<p style="margin-top:18px;margin-bottom:18px;font-size:12pt;line-height:16pt;font-family:helvetica;">Clicking "Inject" will change the melody sound to the selected bagpipe instrument and optionally inject drones as a second voice of the tune(s).</p>'},  
	  {html: '<p style="margin-top:18px;margin-bottom:18px;font-size:12pt;line-height:16pt;font-family:helvetica;">Bagpipe tunes imported from a BWW files assume the drones are consonant with the note A in the ABC notation for all styles of injected bagpipes.</p>'},
	  {html: '<p style="margin-top:18px;margin-bottom:18px;font-size:12pt;line-height:16pt;font-family:helvetica;">For all other tunes, the Great Highland Bagpipe, Border Pipes, and Smallpipes drones are consonant with the note A in the ABC notation and the Säckpipa, and Uilleann Pipes drones are consonant with the note D in the ABC notation.</p>'},  
	  {html: '<p style="margin-top:18px;margin-bottom:18px;font-size:12pt;line-height:16pt;font-family:helvetica;">In these cases, you may need to transpose your tunes before using this feature to sound best with the drones, for example transposing a D Mixolydian tune to A Mixolydian or the inverse.</p>'},  
	  {html: '<p style="margin-top:18px;margin-bottom:18px;font-size:12pt;line-height:16pt;font-family:helvetica;">Tunes previously injected with drones will be skipped.</p>'},  
	  {name: "Bagpipe style to inject:", id: "dronestyle", type:"select", options:drone_style_list, cssClass:"configure_drones_select"},  
	  {name: "          Fold the displayed and played notes into the chanter range", id: "foldnotes", type:"checkbox", cssClass:"configure_injectdrones_form_text"},
	  {html: '<p style="margin-top:18px;margin-bottom:12px;font-size:12pt;line-height:12pt;font-family:helvetica;">Note: Smallpipes and Säckpipa always fold played notes into the chanter range.</p>'},  
	  {name: "          Inject drones", id: "injectdronevoice", type:"checkbox", cssClass:"configure_injectdrones_form_text"},
	  {name: "          Shift drone pitch to match tune key (non-BWW imported tunes only)", id: "matchtunekey", type:"checkbox", cssClass:"configure_injectdrones_form_text"},
	  {name: "          Hide drone voice", id: "hidedronevoice", type:"checkbox", cssClass:"configure_injectdrones_form_text"},
	  {name: "          Inject all tunes", id: "injectalltunes", type:"checkbox", cssClass:"configure_injectdrones_form_text"},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 75, width: 685, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject",autoFocus: false } ).then(function(args){
		
		// Keep track of dialogs
		sendGoogleAnalytics("action","InjectBagpipeSounds");
	
		if (!args.canceled){

			var injectAllTunes = args.result.injectalltunes;

			// Save the instrument for next time
			gLastInjectedBagpipeSound = args.result.dronestyle;

			var doRenderAfterInject = false;

			var theSelectedTuneIndex = 0;

			// Injecting all tunes?
			if (injectAllTunes){

				var nTunes = CountTunes();

				var theNotes = gTheABC.value;

				var output = FindPreTuneHeader(theNotes);

				clearGetTuneByIndexCache();

				for (var i=0;i<nTunes;++i){

					var theTune = getTuneByIndex(i);

					// Don't re-inject already injected tunes and skip section headers and multi-voice tunes
					if ((theTune.indexOf("% Injected drones") == -1) && ((!isSectionHeader(theTune)) && (!isMultiVoiceTune(theTune)))){

						theTune = InjectOneBagpipeDrones(theTune,args.result.dronestyle,args.result.hidedronevoice,args.result.foldnotes,args.result.injectdronevoice,args.result.matchtunekey);

						doRenderAfterInject = true;

					}

					theTune = theTune.trim();

					output += theTune + "\n\n";

				}

				clearGetTuneByIndexCache();

				if (doRenderAfterInject){

					// Stuff in the output
					setABCEditorText(output);
					
					// Set dirty
					gIsDirty = true;

					// Force a redraw
					RenderAsync(true,null,function(){

						// Force a raw mode visual refresh
					   	gRawLastIndex = -1;

						var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Inject Bagpipe Sounds Complete!</p>';

						DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){
							
							gCurrentTune = 0;

							// Set the select point
							gTheABC.selectionStart = 0;
						    gTheABC.selectionEnd = 0;

						    // Focus after operation
						    FocusAfterOperation();

						});

					});

				}
				else{

					var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Inject Bagpipe Sounds Complete!</p>';

					DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) });
				}
			}
			else{
				
				// Try to find the current tune
				theSelectedTuneIndex = findSelectedTuneIndex();

				var theSelectedABC = findSelectedTune();

				if (theSelectedABC == ""){
					// This should never happen
					return;
				}

				var theInjectedTune = theSelectedABC;

				// Don't re-inject already injected and skip section headers and multi-voice tunes
				if ((theInjectedTune.indexOf("% Injected drones") == -1) && ((!isSectionHeader(theInjectedTune)) && (!isMultiVoiceTune(theInjectedTune)))){

					theInjectedTune = InjectOneBagpipeDrones(theInjectedTune,args.result.dronestyle,args.result.hidedronevoice,args.result.foldnotes,args.result.injectdronevoice,args.result.matchtunekey);
					
					doRenderAfterInject = true;

				}

				if (doRenderAfterInject){

					// Seeing extra line breaks after the inject
					theInjectedTune = theInjectedTune.trim();

					// Stuff in the injected ABC
					var theABC = gTheABC.value;
					theABC = theABC.replace(theSelectedABC,theInjectedTune);

					setABCEditorText(theABC);

					// Set dirty
					gIsDirty = true;

					// Force a redraw of the tune
					RenderAsync(true,theSelectedTuneIndex,function(){

					   	// Force a raw mode visual refresh
					   	gRawLastIndex = -1;

						var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Inject Bagpipe Sounds Complete!</p>';

						DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

							// Try and keep the same tune after the redraw for immediate play
							var theSelectionStart = gTheABC.selectionStart;

							gCurrentTune = theSelectedTuneIndex;

							// Set the select point
							gTheABC.selectionStart = theSelectionStart;
						    gTheABC.selectionEnd = theSelectionStart;
								
							// Focus after operation
					    	FocusAfterOperation();

					    });

					});

				}
				else{

					var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Inject Bagpipe Sounds Complete!</p>';

					DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) });
				}
			}
		}
	});
}

//
// Ceoltas transform dialog
//
function DoCeoltasTransformDialog(){

	var modal_msg  = '<p style="text-align:center;margin-bottom:36px;font-size:16pt;font-family:helvetica;margin-left:15px;">Comhaltas ABC Transform&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#advanced_comhaltas" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>';

	modal_msg  += '<p style="text-align:center;"><input id="ceoltasdialog" class="advancedcontrols btn btn-injectcontrols" onclick="DoCeoltasTransform(false)" type="button" value="Standard ABC to Comhaltas ABC" title="Transforms the standard ABC format to Comhaltas format">';

	modal_msg  += '<input id="ceoltasdialoginverse" class="advancedcontrols btn btn-injectcontrols" onclick="DoCeoltasTransform(true)" type="button" value="Comhaltas ABC to Standard ABC" title="Transforms the Comhaltas format to standard ABC format"></p>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 150, width: 650,  scrollWithPage: (AllowDialogsToScroll()) });

}

//
// Inject/remove Tune title numbers
//
function TuneTitlesNumbersDialog(){
	var modal_msg  = '<p style="text-align:center;margin-bottom:36px;font-size:16pt;font-family:helvetica;margin-left:15px;">Add/Remove Tune Title Numbers&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#advanced_injecttunetitlenumbers" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>';

	modal_msg  += '<p style="text-align:center;"><input id="addtunetitlenumbers" class="advancedcontrols btn btn-injectcontrols-headers" onclick="AddTuneTitleNumbers()" type="button" value="Add Numbers to Tune Titles" title="Adds incrementing numbers to the tune titles">';

	modal_msg  += '<input id="removetunetitlenumbers" class="advancedcontrols btn btn-injectcontrols" onclick="RemoveTuneTitleNumbers(true)" type="button" value="Remove Tune Title Numbers" title="Removes any tune title numbers that were added"></p>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 200, width: 650,  scrollWithPage: (AllowDialogsToScroll()) });

}

//
// Incipits builder dialog
//

var gIncipitsBuilderBars = 3;
var gIncipitsBuilderWidth = 400;
var gIncipitsBuilderLeftJustify = true;
var gIncipitsBuilderInjectNumbers = true;
var gIncipitsBuilderStripText = true;
var gIncipitsTagsToStrip = "ABCDINOSWwZ";

function IncipitsBuilderDialog(){

	// Setup initial values
	const theData = {
  		IncipitsBuilderBars: gIncipitsBuilderBars,
 		IncipitsBuilderWidth: gIncipitsBuilderWidth,
 		IncipitsBuilderLeftJustify: gIncipitsBuilderLeftJustify,
 		IncipitsBuilderInjectNumbers: gIncipitsBuilderInjectNumbers,
 		IncipitsBuilderStripText: gIncipitsBuilderStripText,
 		IncipitsBuilderStripTags: gIncipitsTagsToStrip,
	};

	var form = [
		{html: '<p style="text-align:center;font-size:16pt;font-family:helvetica;margin-bottom:24px;margin-left:15px;">Notes Incipits Builder&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#incipits_builder_pdf" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
		{html: '<p style="font-size:12pt;line-height:18pt;font-family:helvetica;">Clicking "Build" will extensively reformat the ABC, so you may want to grab a Snapshot or save the ABC before using this feature.</p>'},
		{html: '<p style="font-size:12pt;line-height:18pt;font-family:helvetica;margin-bottom:24px;">The reformatted ABC can be exported as first-line Notes Incipits from the Export PDF dialog.</p>'},
  		{name: "Number of bars: (Default is 3)", id: "IncipitsBuilderBars", type:"number", cssClass:"incipits_builder_form_text"},
  		{name: "Staff width: (Default is 400, full width is 556)", id: "IncipitsBuilderWidth", type:"number", cssClass:"incipits_builder_form_text"},
		{name: "    Left justify incipits titles.", id: "IncipitsBuilderLeftJustify", type:"checkbox", cssClass:"incipits_builder_form_text_checkbox"},
		{name: "    Add numbers before titles", id: "IncipitsBuilderInjectNumbers", type:"checkbox", cssClass:"incipits_builder_form_text_checkbox"},
		{name: "    Strip all %%text, %%center, %%right, and %%begintext blocks", id: "IncipitsBuilderStripText", type:"checkbox", cssClass:"incipits_builder_form_text_checkbox"},
	  	{name: "          Tags to strip (Default is ABCDINOSWwZ):", id: "IncipitsBuilderStripTags", type:"text", cssClass:"incipits_striptags_text"},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 100, width: 600, scrollWithPage: (AllowDialogsToScroll()), okText: "Build",autoFocus: false } ).then(function(args){

		if (!args.canceled){

			sendGoogleAnalytics("action","IncipitsBuilder");

			gIncipitsBuilderBars = args.result.IncipitsBuilderBars; 
			var nBars = parseInt(gIncipitsBuilderBars);

			if (isNaN(nBars)){
				nBars = 3;
				gIncipitsBuilderBars = 3;
			}
			
			gIncipitsBuilderWidth = args.result.IncipitsBuilderWidth; 
			var theWidth = parseInt(gIncipitsBuilderWidth);

			if (isNaN(theWidth)){
				theWidth = 400;
				gIncipitsBuilderWidth = 400;
			}
			
			gIncipitsBuilderLeftJustify = args.result.IncipitsBuilderLeftJustify; 

			gIncipitsBuilderInjectNumbers = args.result.IncipitsBuilderInjectNumbers; 
			
			gIncipitsBuilderStripText = args.result.IncipitsBuilderStripText;

			gIncipitsTagsToStrip = args.result.IncipitsBuilderStripTags;

    		var nTunes = CountTunes();

		    // Should never get here, but just to be safe...
		 	if (nTunes == 0){

				var thePrompt = "No tunes for incipits building.";
				
				// Center the string in the prompt
				thePrompt = makeCenteredPromptString(thePrompt);
				
				DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

				return;
			}

			var theNotes = gTheABC.value;

			// Find the tunes
			var theTunes = theNotes.split(/^X:/gm);

			var output = FindPreTuneHeader(theNotes);

			for (var i=1;i<=nTunes;++i){

				var theTune = "X:"+theTunes[i];

				// Inject an easily identified block of annotations
				var stringToInject = stringToInject = "%incipits_inject_start\n%%maxstaves 1\n%%noexpandtowidest\n%%barsperstaff "+(nBars+1)+"\n%%staffwidth "+theWidth+"\n%%printtempo 0\n%hide_rhythm_tag\n";

				if (gIncipitsBuilderLeftJustify){
					stringToInject += "%left_justify_titles\n%incipits_inject_end";
				}
				else{
					stringToInject += "%incipits_inject_end";					
				}

				// Remove any existing incipits annotation
  			theTune = theTune.replace(/^%incipits_inject_start[\s\S]*?^%incipits_inject_end.*(\r?\n)?/gm, '');

				theTune = InjectStringAboveTuneHeader(theTune,stringToInject);

				// Loop through each character in the control string
		    	for (let char of gIncipitsTagsToStrip) {

		    		theTune = removeAllTags(theTune,char)
		    	}

		    	if (gIncipitsBuilderStripText){

		    		theTune = StripTextAnnotationsOne(theTune);

		    	}

				output += theTune + "\n\n";

			}

			setABCEditorText(output);

			if (gIncipitsBuilderInjectNumbers){
				
				// First remove any existing tune title numers
				var theNotes = RemoveTuneTitleNumbers(false);

				// Stuff it back in the work area so getTuneByIndex() returns correct value
			    setABCEditorText(theNotes);

			    var result = processTuneTitleNumbers(nTunes,theNotes);

			    // Stuff the final result back in the editor
			    setABCEditorText(result);

			}

			SaveConfigurationSettings();

      const scrollY = window.scrollY || document.documentElement.scrollTop;

			 RenderAsync(true,null,function(){
          window.scrollTo(0, scrollY);
       });

		}

	});

}


// 
// Clean a title number from the start of a string
//
function cleanTitleNumber(str){

	// Use a regular expression to match the number or period at the start of the string
	// ^ asserts the start of the string
	// [0-9.] matches any digit or period
	// + matches one or more occurrences
	var theregex = /^[0-9.]+/;

	// Use the replace method to replace the matched pattern with an empty string
	return str.replace(theregex, '');

}
//
// Add tune title numbers
//
function processTuneTitleNumbers(nTunes,theNotes){
	
	var result = FindPreTuneHeader(theNotes);

    // Add a blank line after the header and before the tunes
    if (result != ""){
    	result += "\n";
    }

    var tuneCount = 0;

    var i, j;

    for (i = 0; i < nTunes; ++i) {

        var thisTune = getTuneByIndex(i);

        // Don't inject section header tune fragments
        if (isSectionHeader(thisTune)){
            result += "\n";
            result += thisTune;
            result += "\n";
            continue;
        }

        tuneCount++;

        // Split the ABC notation into lines
	    const lines = thisTune.split('\n');

	    // Process each line
	    var bGotName = false;
	    var modifiedTune = "";

	    for (let j = 0; j < lines.length; j++) {

	        let line = lines[j];

	        // Only do this for the first title tag in the tune
	        if (!bGotName){

		        // Check if the line starts with "T: " (indicating a tune name)
		        if (line.startsWith('T: ')) {

		        	line = line.replace("T:","");
		        	line = line.trim();
		        	line = "T: "+tuneCount+". "+line
		            bGotName = true;
		        }

		        if (!bGotName){

		        	// Check if the line starts with "T:" (indicating a tune name)
			        if (line.startsWith('T:')) {

			        	line = line.replace("T:","");
			        	line = line.trim();
			        	line = "T:"+tuneCount+". "+line
			            bGotName = true;

			        }
		        }

		    }

		    modifiedTune += line;
		    modifiedTune += "\n";
	   	}

        result += modifiedTune;
        result += "\n";


    }

    result = result.replaceAll("\n\n\n","\n\n"); 

    return result;
}

function AddTuneTitleNumbers(){

    var nTunes = CountTunes();

    // Should never get here, but just to be safe...
 	if (nTunes == 0){

		var thePrompt = "No tunes to add tune title numbers.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	// Keep track of add number use
	sendGoogleAnalytics("action","AddTuneTitleNumbers");

	// First remove any existing tune title numers
	var theNotes = RemoveTuneTitleNumbers(false);

	// Stuff it back in the work area so getTuneByIndex() returns st
	setABCEditorText(theNotes);

    result = processTuneTitleNumbers(nTunes,theNotes);

    // Stuff the final result back in the editor
	setABCEditorText(result);

	// Set dirty
	gIsDirty = true;

	var elem = document.getElementById("addtunetitlenumbers");

	if (elem){
		elem.value = "Adding Tune Title Numbers";
	}

	// Redraw
	RenderAsync(true,null, function (){

		var elem = document.getElementById("addtunetitlenumbers");

		if (elem){

			// Give some feedback
			elem.value = "Tune Title Numbers Added";

			setTimeout(function(){

				var elem = document.getElementById("addtunetitlenumbers");

				if (elem){

					elem.value = "Add Numbers to Tune Titles";
				}
				
			},500);
		}

	});

}

//
// Remove tune title numbers
// 
function RemoveTuneTitleNumbers(bDoRedraw){

	var theNotes = gTheABC.value;

    var nTunes = CountTunes();

	if (bDoRedraw){

	    // Should never get here, but just to be safe...
	 	if (nTunes == 0){

			var thePrompt = "No tunes with title numbers to remove.";
			
			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);
			
			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;
		}

		sendGoogleAnalytics("action","RemoveTuneTitleNumbers");

	}

    var result = FindPreTuneHeader(theNotes);
    
    // Add a blank line after the header and before the tunes
    if (result != ""){
    	result += "\n";
    }

    var i, j;

    var bDoRender = false;

    for (i = 0; i < nTunes; ++i) {

        var thisTune = getTuneByIndex(i);

        // Don't inject section header tune fragments
        if (isSectionHeader(thisTune)){
            result += "\n";
            result += thisTune;
            result += "\n";
            continue;
        }

        // Split the ABC notation into lines
	    const lines = thisTune.split('\n');

	    // Process each line
	    var bGotName = false;
	    var modifiedTune = "";

	    for (let j = 0; j < lines.length; j++) {

	        let line = lines[j];

	        // Only do this for the first title tag in the tune
	        if (!bGotName){

		        // Check if the line starts with "T: " (indicating a tune name)
		        if (line.startsWith('T: ')) {

		        	var originalLine = line;
		        	line = line.replace("T:","");
		        	line = line.trim();
		        	line = cleanTitleNumber(line);
		        	line = line.trim();
		        	line = "T: "+line
		            bGotName = true;

		            if (originalLine != line){
		            	bDoRender = true;
		            }

		        }

		        if (!bGotName){

		        	// Check if the line starts with "T:" (indicating a tune name)
			        if (line.startsWith('T:')) {

		        		var originalLine = line;

			        	line = line.replace("T:","");
			        	line = line.trim();
		        		line = cleanTitleNumber(line);
		        		line = line.trim();
			        	line = "T:"+line
			            bGotName = true;

			            if (originalLine != line){
			            	bDoRender = true;
			            }

			        }
		        }
		    }

		    modifiedTune += line;
		    modifiedTune += "\n";
	   	}

        result += modifiedTune;
        result += "\n";

    }

    result = result.replaceAll("\n\n\n","\n\n");

    // Are we just stripping numbers to inject them?
    // Yes, just return the stripped version
    if (!bDoRedraw){
    	return result;
    }

    // If any changes made, redraw and mark the work area as dirty
    if (bDoRender){

    	//console.log("RemoveTuneTitleNumbers render");

	    // Stuff the final result back in the editor
		setABCEditorText(result);

		// Set dirty
		gIsDirty = true;

		// Give some feedback
		var elem = document.getElementById("removetunetitlenumbers");

		if (elem){
			elem.value = "Removing Tune Title Numbers";
		}

		// Redraw
		RenderAsync(true,null, function (){

			var elem = document.getElementById("removetunetitlenumbers");

			if (elem){
				
				// Give some feedback
				elem.value = "Tune Title Numbers Removed";

				setTimeout(function(){

					var elem = document.getElementById("removetunetitlenumbers");

					if (elem){

						elem.value = "Remove Added Tune Title Numbers";
					}
					
				},500);
			}

		});

	}

}

//
// Harmonica Tablature Injection
//

//
// Save the custom harmonica settings to a file
//
function saveCustomHarmonica(){

	// Keep track of actions
	sendGoogleAnalytics("action","saveCustomHarmonica");

	var theCustomHarmonicaJSON = JSON.stringify(gHarmonicaCustom);

	saveTextFile("Please enter a filename for your custom harmonica tuning:", gHarmonicaCustom.name+".txt", theCustomHarmonicaJSON);
	
}

//
// Load the custom harmonica tuning
//
function loadCustomHarmonicaClickHandler(){

	var elem = document.getElementById("load_custom_harmonica_tuning_fs");

	elem.click();

}

function loadCustomHarmonica(file){

	// Keep track of actions
	sendGoogleAnalytics("action","loadCustomHarmonica");

	const reader = new FileReader();

	reader.addEventListener('load', (event) => {

		var theText = event.target.result;

		try{

			var theParsedHarmonicaTuning = JSON.parse(theText);

			// Sanity check a couple of fields
			if ((!theParsedHarmonicaTuning.type) || (theParsedHarmonicaTuning.type != "CustomHarmonica" )){

				var thePrompt = "This is not a valid custom harmonica tuning file.";

				// Center the string in the prompt
				thePrompt = makeCenteredPromptString(thePrompt);

				DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

				return;

			}

			// Save the new tuning
			gHarmonicaCustom = theParsedHarmonicaTuning;

			if (gHarmonicaCustom.version == 1){

				// Upgrade any older custom tuning maps
				gHarmonicaCustom.version = 3;
				
				for (var i=0;i<22;++i){
					gHarmonicaCustom.noteMap.push("x");
				}
			}
			else
			if (gHarmonicaCustom.version == 2){

				// Upgrade any older custom tuning maps
				gHarmonicaCustom.version = 3;
				
				for (var i=0;i<12;++i){
					gHarmonicaCustom.noteMap.push("x");
				}
			}

			// Idle the custom harmonica dialog with the new values
			initCustomHarmonicaSettings();

		}
		catch(error){

			var thePrompt = "This is not a valid custom harmonica tuning file.";

			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;

		}
	});

	reader.readAsText(file);
}
//
// Initialize the custom harmonica setting
//
function resetHarmonicaCustom(){

 	gHarmonicaCustom = JSON.parse(JSON.stringify(gHarmonicaCustomDefault));

}

//
//
// Reset the custom harmonica settings to the default with confirmation
//
function defaultCustomHarmonica(){

	// Keep track of actions
	sendGoogleAnalytics("action","defaultCustomHarmonica");

	var thePrompt = "Are you sure you want to reset the custom harmonica tuning?";

	// Center the string in the prompt
	thePrompt = makeCenteredPromptString(thePrompt);

	DayPilot.Modal.confirm(thePrompt ,{ top:180, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

		if (!args.canceled){

			var i;

		    resetHarmonicaCustom();

		    var id = "r0c1";
		    document.getElementById(id).value = gHarmonicaCustom.name;

		    for (i=0;i<12;++i){
		        var id = "r1c"+(i+1);
		        document.getElementById(id).value = gHarmonicaCustom.noteMap[i];
		    }
		    
		    for (i=0;i<12;++i){
		        var id = "r2c"+(i+1);
		        document.getElementById(id).value = gHarmonicaCustom.noteMap[i+12];
		    }

		    for (i=0;i<12;++i){
		        var id = "r3c"+(i+1);
		        document.getElementById(id).value = gHarmonicaCustom.noteMap[i+24];
		    }

		    for (i=0;i<12;++i){
		        var id = "r4c"+(i+1);
		        document.getElementById(id).value = gHarmonicaCustom.noteMap[i+36];
		    }	

		    for (i=0;i<12;++i){
		        var id = "r5c"+(i+1);
		        document.getElementById(id).value = gHarmonicaCustom.noteMap[i+48];
		    }		    
		}

	});
}

//
// Change handler for custom harmonica input fields
//
function customHarmonicaChangeHandler(){

	// Walk the current map and inject the requested note names
    var i;

    var id = "r0c1";
    gHarmonicaCustom.name = document.getElementById(id).value;

    for (i=0;i<12;++i){
        var id = "r1c"+(i+1);
        gHarmonicaCustom.noteMap[i] = document.getElementById(id).value;
    }
    
    for (i=0;i<12;++i){
        var id = "r2c"+(i+1);
        gHarmonicaCustom.noteMap[i+12] = document.getElementById(id).value;
    }

    for (i=0;i<12;++i){
        var id = "r3c"+(i+1);
        gHarmonicaCustom.noteMap[i+24] = document.getElementById(id).value;
    }

    for (i=0;i<12;++i){
        var id = "r4c"+(i+1);
        gHarmonicaCustom.noteMap[i+36] = document.getElementById(id).value;
    }

    for (i=0;i<12;++i){
        var id = "r5c"+(i+1);
        gHarmonicaCustom.noteMap[i+48] = document.getElementById(id).value;
    }

}

//
// Init the harmonica settings matrix
//
function initCustomHarmonicaSettings(){

    var i;

    var id = "r0c1";
    document.getElementById(id).value = gHarmonicaCustom.name;

    for (i=0;i<12;++i){
        var id = "r1c"+(i+1);
        document.getElementById(id).value = gHarmonicaCustom.noteMap[i];
    }
    
    for (i=0;i<12;++i){
        var id = "r2c"+(i+1);
        document.getElementById(id).value = gHarmonicaCustom.noteMap[i+12];
    }

    for (i=0;i<12;++i){
        var id = "r3c"+(i+1);
        document.getElementById(id).value = gHarmonicaCustom.noteMap[i+24];
    }

    for (i=0;i<12;++i){
        var id = "r4c"+(i+1);
        document.getElementById(id).value = gHarmonicaCustom.noteMap[i+36];
    }

    for (i=0;i<12;++i){
        var id = "r5c"+(i+1);
        document.getElementById(id).value = gHarmonicaCustom.noteMap[i+48];
    }

}

//
// Handler for the custom harmonica tunings file open control
//
function idleOpenCustomHarmonica(){

	//
	// Setup the custom harmonica tunings file import control
	//
	document.getElementById("load_custom_harmonica_tuning_fs").onchange = () => {

		let fileElement = document.getElementById("load_custom_harmonica_tuning_fs");

		// check if user had selected a file
		if (fileElement.files.length === 0) {

			var thePrompt = "Please select a custom harmonica tuning file";

			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;

		}

		let file = fileElement.files[0];

		// Read the custom tuning file
		loadCustomHarmonica(file);

		// Reset file selectors
		fileElement.value = "";

	}
}

//
// Edit the custom harmonica settings
//
function EditCustomHarmonica(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","EditCustomHarmonica");

	const theData = {};

	// Save off the original setting
	var gHarmonicaCustomOriginal = JSON.parse(JSON.stringify(gHarmonicaCustom));

	var modal_msg  = '<p style="text-align:center;font-size:16pt;font-family:helvetica;margin-left:15px;margin-bottom:32px">Edit Custom Harmonica Tuning Tab&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#tab_harmonica_custom" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>';
	modal_msg += '<div id="harmonica-custom-dialog">';
	modal_msg += '<p style="font-size:12pt;font-family:helvetica;"">Custom tuning name:<input class="harmonicacustomlabel" type="text" id="r0c1" onchange="customHarmonicaChangeHandler()"><p>\n';
	modal_msg += '<table style="margin-bottom:24px;text-align:center;">\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td colspan="3" style="text-align: left; font-size:12pt;font-family:helvetica;">Octave 1:</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:2pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
 	modal_msg += '<tr>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C#/Db</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D#/Eb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">E</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F#/Gb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G#/Ab</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A#/Bb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">B</td>\n';
	modal_msg += '</tr>\n';
  	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r1c1" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r1c2" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r1c3" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r1c4" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r1c5" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r1c6" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r1c7" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r1c8" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r1c9" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r1c10" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r1c11" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r1c12" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td colspan="3" style="text-align: left; font-size:12pt;font-family:helvetica;">Octave 2:</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:2pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
  	modal_msg += '<tr>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C#/Db</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D#/Eb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">E</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F#/Gb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G#/Ab</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A#/Bb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">B</td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r2c1" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r2c2" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r2c3" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r2c4" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r2c5" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r2c6" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r2c7" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r2c8" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r2c9" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r2c10" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r2c11" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r2c12" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
    modal_msg += '<td colspan="3" style="text-align: left; font-size:12pt;font-family:helvetica;">Octave 3:</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:2pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
  	modal_msg += '<tr>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C#/Db</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D#/Eb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">E</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F#/Gb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G#/Ab</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A#/Bb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">B</td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r3c1" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r3c2" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r3c3" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r3c4" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r3c5" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r3c6" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r3c7" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r3c8" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r3c9" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r3c10" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r3c11" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r3c12" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td colspan="3" style="text-align: left; font-size:12pt;font-family:helvetica;">Octave 4:</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:2pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
  	modal_msg += '<tr>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C#/Db</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D#/Eb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">E</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F#/Gb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G#/Ab</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A#/Bb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">B</td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r4c1" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r4c2" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r4c3" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r4c4" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r4c5" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r4c6" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r4c7" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r4c8" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r4c9" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r4c10" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r4c11" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r4c12" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td colspan="3" style="text-align: left; font-size:12pt;font-family:helvetica;">Octave 5:</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:2pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
  	modal_msg += '<tr>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C#/Db</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D#/Eb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">E</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F#/Gb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G#/Ab</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A#/Bb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">B</td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r5c1" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r5c2" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r5c3" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r5c4" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r5c5" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r5c6" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r5c7" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r5c8" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r5c9" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r5c10" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r5c11" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '<td><input class="harmonicacustomnames" type="text" id="r5c12" onchange="customHarmonicaChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';	modal_msg += '</table>\n';
	modal_msg += '</div>\n';
	modal_msg += '<p style="text-align:center;margin-top:22px;"><input type="file" id="load_custom_harmonica_tuning_fs" accept=".txt,.TXT" hidden/><input id="save_custom_harmonica_tuning" class="btn btn-subdialog save_custom_harmonica_tuning" onclick="saveCustomHarmonica()" type="button" value="Save Custom Harmonica Tuning" title="Save a custom harmonica tuning file"><input id="load_custom_harmonica_tuning" class="btn btn-subdialog load_custom_harmonica_tuning" onclick="loadCustomHarmonicaClickHandler()" type="button" value="Load Custom Harmonica Tuning" title="Load a custom harmonica tuning file"></p>\n';
	modal_msg += '<p style="text-align:center;margin-top:22px;"><input id="default_anglo_fingerings" class="btn btn-clearbutton default_anglo_fingerings" onclick="defaultCustomHarmonica()" type="button" value="Reset to Default (Standard Richter)" title="Resets the custom tuning to Standard Richter"></p>\n';

	const form = [
	  {html: modal_msg}
	];


	setTimeout(function(){

		initCustomHarmonicaSettings();

		idleOpenCustomHarmonica();

	}, 150);


	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 50, width: 800, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){
		
		// Get the results and store them in the global configuration
		if (!args.canceled){

			// Sanity check the entries
		    if (gHarmonicaCustom.name == ""){
		        gHarmonicaCustom.name = "Custom";
		    }

		    for (var i=0;i<60;++i){

		    	// No blank items
		        if (gHarmonicaCustom.noteMap[i] == ""){
		            gHarmonicaCustom.noteMap[i] = " ";
		        }

		        // Turn any double quotes into two single quotes
		        gHarmonicaCustom.noteMap[i] = gHarmonicaCustom.noteMap[i].replaceAll('"',"''")

		    	// No blank items
		        if (gHarmonicaCustom.noteMap[i] == ""){
		            gHarmonicaCustom.noteMap[i] = " ";
		        }
		    }


		    // Save the custom button naming map
		    if (gLocalStorageAvailable){

		        localStorage.HarmonicaCustom = JSON.stringify(gHarmonicaCustom);

		    }

		    // Reset the dropdown item
			let selectElements = document.getElementsByName('configure_harmonica_tuning');

			if (selectElements){

				let selectElement = selectElements[0]; 		    

				if (selectElement){

					const option = selectElement.querySelector(`option[value="6"]`);
		    
				    if (option) {
				      option.text = gHarmonicaCustom.name; // Update the displayed text
				    }
				}
			}
		}
		else{

			// Cancelled, reset the original values
			gHarmonicaCustom = JSON.parse(JSON.stringify(gHarmonicaCustomOriginal));

		}

	});
}

//
// Inject Diatonic harmonica tablature
//
function DoInjectHarmonicaTab(){

	// Keep track of tablature injection use
	sendGoogleAnalytics("tablature","Inject_Harmonica");

 	const harmonica_keys = [
	    { name: "  G", id: "G" },
	    { name: "  G#", id: "G#" },
	    { name: "  A", id: "A" },
	    { name: "  Bb", id: "Bb" },
	    { name: "  B", id: "B" },
	    { name: "  C", id: "C" },
	    { name: "  C#", id: "C#" },
	    { name: "  D", id: "D" },
	    { name: "  Eb", id: "Eb" },
	    { name: "  E", id: "E" },
	    { name: "  F", id: "F" },
	    { name: "  F#", id: "F#" }
  	];

  	const harmonica_octaves = [
	    { name: "  -3", id: "-3" },
	    { name: "  -2", id: "-2" },
	    { name: "  -1", id: "-1" },
	    { name: "  0", id: "0" },
	    { name: "  1", id: "1" },
	    { name: "  2", id: "2" },
	    { name: "  3", id: "3" },
  	];

  	const harmonica_tunings = [
	    { name: "  Standard Richter", id: "0" },
	    { name: "  Paddy Richter", id: "1" },
	    { name: "  Easy Thirds", id: "2" },
	    { name: "  Melody Maker", id: "3" },
	    { name: "  Country (Major 7th)", id: "4" },
	    { name: "  Natural Minor", id: "5" },
	    { name: gHarmonicaCustom.name, id: "6" }
  	];


	// Setup initial values
	const theData = {
	  configure_harmonica_tuning:gHarmonicaTuning,
	  configure_harmonica_key:gHarmonicaKey,
	  configure_harmonica_octave:gHarmonicaOctave,
	  configure_harmonica_plussign:gHarmonicaPlusSign,
	  configure_harmonica_stacking:gHarmonicaStacking,
    configure_harmonica_tab_colors:gHarmonicaTabColors

	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject Diatonic Harmonica Tablature&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#tab_harmonica" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;margin-bottom:36px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject tablature for a 10-hole diatonic harmonica in the harmonica tuning and key selected below into all of the tunes in the ABC text area:</p>'},	  
	  {name: "Harmonica tuning:", id: "configure_harmonica_tuning", type:"select", options:harmonica_tunings, cssClass:"configure_harmonica_tuning_select"}, 
	  {name: "Harmonica key:", id: "configure_harmonica_key", type:"select", options:harmonica_keys, cssClass:"configure_harmonica_select"}, 
	  {name: "Octave shift:", id: "configure_harmonica_octave", type:"select", options:harmonica_octaves, cssClass:"configure_harmonica_select"}, 
	  {name: "    Include + for blow notes in the tablature", id: "configure_harmonica_plussign", type:"checkbox", cssClass:"configure_harmonica_settings_form_text"},
	  {name: "    Blow/Draw indications under the hole number (unchecked is before hole number)", id: "configure_harmonica_stacking", type:"checkbox", cssClass:"configure_harmonica_settings_form_text2"},
    {name: "    Color-code Blow and Draw", id: "configure_harmonica_tab_colors", type:"checkbox", cssClass:"configure_harmonica_settings_form_text2"},
    {html: '<p style="text-align: center; font-size:4pt;font-family:helvetica;">&nbsp;</p>'},
	  {html: '<p style="text-align:center;margin-top:18px;"><input id="configure_harmonica_custom" class="btn btn-subdialog configure_harmonica_custom" onclick="EditCustomHarmonica()" type="button" value="Edit Custom Harmonica Tuning Tab" title="Edit the custom harmonica tuning tab symbols for each scale note"></p>'},
	  {html: '<p style="text-align:center;margin-top:18px;"><input id="configure_anglo_fonts" class="btn btn-subdialog configure_anglo_fonts" onclick="ConfigureTablatureSettings()" type="button" value="Tablature Injection Settings" title="Configure the tablature injection settings"></p>'},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 50, width: 700, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject",autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			gHarmonicaTuning = args.result.configure_harmonica_tuning;
			gHarmonicaKey = args.result.configure_harmonica_key; 
			gHarmonicaOctave = args.result.configure_harmonica_octave; 
			gHarmonicaPlusSign = args.result.configure_harmonica_plussign;
			gHarmonicaStacking = args.result.configure_harmonica_stacking;
      gHarmonicaTabColors = args.result.configure_harmonica_tab_colors;

			SaveConfigurationSettings();

			SetRadioValue("notenodertab","noten");

			gCurrentTab = "noten";

      var val = gTheABC.value;

      // Strip any existing tab color css
      val = val.replace(/^% Begin tab color CSS[\s\S]*?^% End tab color CSS.*(\r?\n)+/gm, '');

      // Remove old push and draw decorations
      val = val.replaceAll("!push!","");
      val = val.replaceAll("!draw!","");

      setABCEditorText(val);

      val = HarmonicaTabGenerator(val);
      
      // Injecting tab colors?
      if (gHarmonicaTabColors){
        val = InjectHarmonicaTabColors(val);
      }
      else{
        // Otherwise, clean up formatting
        val = CleanHarmonicaTab(val);
      }
      
			setABCEditorText(val);

			// Set dirty
			gIsDirty = true;
			
			RenderAsync(true,null);

			// Idle the dialog
			IdleAdvancedControls(true);

		}

	});

}

//
// Custom Tablature Injection
//

//
// Save the custom tab settings to a file
//
function saveCustomTab(){

	// Keep track of actions
	sendGoogleAnalytics("action","saveCustomTab");

	var theCustomTabJSON = JSON.stringify(gCustomTab);

	saveTextFile("Please enter a filename for your custom tab:", gCustomTab.name+".txt", theCustomTabJSON);
	
}

//
// Load the custom tab
//
function loadCustomTabClickHandler(){

	var elem = document.getElementById("load_custom_tab_fs");

	elem.click();

}

function loadCustomTab(file){

	// Keep track of actions
	sendGoogleAnalytics("action","loadCustomTab");

	const reader = new FileReader();

	reader.addEventListener('load', (event) => {

		var theText = event.target.result;

		try{

			var theParsedTab = JSON.parse(theText);

			// Sanity check a couple of fields
			if ((!theParsedTab.type) || (theParsedTab.type != "CustomTab" )){

				var thePrompt = "This is not a valid custom tab definition file.";

				// Center the string in the prompt
				thePrompt = makeCenteredPromptString(thePrompt);

				DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

				return;

			}

			// Save the new tuning
			gCustomTab = theParsedTab;

			if (gCustomTab.version == 1){

				// Upgrade any older custom tuning maps
				gCustomTab.version = 2;
				
				for (var i=0;i<12;++i){
					gCustomTab.noteMap.push("x");
				}

			}

			// Idle the custom tab dialog with the new values
			initCustomTabSettings();

		}
		catch(error){

			var thePrompt = "This is not a valid custom tab definition file.";

			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;

		}
	});

	reader.readAsText(file);
}

//
// Initialize the custom tab setting
//
function resetCustomTab(){

 	gCustomTab = JSON.parse(JSON.stringify(gCustomTabDefault));

}

//
//
// Reset the custom tab settings to the default with confirmation
//
function defaultCustomTab(){

	// Keep track of actions
	sendGoogleAnalytics("action","defaultCustomTab");

	var thePrompt = "Are you sure you want to reset the custom tab settings?";

	// Center the string in the prompt
	thePrompt = makeCenteredPromptString(thePrompt);

	DayPilot.Modal.confirm(thePrompt ,{ top:180, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

		if (!args.canceled){

			var i;

		    resetCustomTab();

		    var id = "r0c1";
		    document.getElementById(id).value = gCustomTab.name;

		    for (i=0;i<12;++i){
		        var id = "r1c"+(i+1);
		        document.getElementById(id).value = gCustomTab.noteMap[i];
		    }
		    
		    for (i=0;i<12;++i){
		        var id = "r2c"+(i+1);
		        document.getElementById(id).value = gCustomTab.noteMap[i+12];
		    }

		    for (i=0;i<12;++i){
		        var id = "r3c"+(i+1);
		        document.getElementById(id).value = gCustomTab.noteMap[i+24];
		    }

		    for (i=0;i<12;++i){
		        var id = "r4c"+(i+1);
		        document.getElementById(id).value = gCustomTab.noteMap[i+36];
		    }	

		    for (i=0;i<12;++i){
		        var id = "r5c"+(i+1);
		        document.getElementById(id).value = gCustomTab.noteMap[i+48];
		    }		    
		}

	});
}

//
// Change handler for custom tab input fields
//
function customTabChangeHandler(){

	// Walk the current map and inject the requested note names
    var i;

    var id = "r0c1";
    gCustomTab.name = document.getElementById(id).value;

    for (i=0;i<12;++i){
        var id = "r1c"+(i+1);
        gCustomTab.noteMap[i] = document.getElementById(id).value;
    }
    
    for (i=0;i<12;++i){
        var id = "r2c"+(i+1);
        gCustomTab.noteMap[i+12] = document.getElementById(id).value;
    }

    for (i=0;i<12;++i){
        var id = "r3c"+(i+1);
        gCustomTab.noteMap[i+24] = document.getElementById(id).value;
    }

    for (i=0;i<12;++i){
        var id = "r4c"+(i+1);
        gCustomTab.noteMap[i+36] = document.getElementById(id).value;
    }

    for (i=0;i<12;++i){
        var id = "r5c"+(i+1);
        gCustomTab.noteMap[i+48] = document.getElementById(id).value;
    }
}

//
// Init the tab settings matrix
//
function initCustomTabSettings(){

    var i;

    var id = "r0c1";
    document.getElementById(id).value = gCustomTab.name;

    for (i=0;i<12;++i){
        var id = "r1c"+(i+1);
        document.getElementById(id).value = gCustomTab.noteMap[i];
    }
    
    for (i=0;i<12;++i){
        var id = "r2c"+(i+1);
        document.getElementById(id).value = gCustomTab.noteMap[i+12];
    }

    for (i=0;i<12;++i){
        var id = "r3c"+(i+1);
        document.getElementById(id).value = gCustomTab.noteMap[i+24];
    }

    for (i=0;i<12;++i){
        var id = "r4c"+(i+1);
        document.getElementById(id).value = gCustomTab.noteMap[i+36];
    }

    for (i=0;i<12;++i){
        var id = "r5c"+(i+1);
        document.getElementById(id).value = gCustomTab.noteMap[i+48];
    }
}

//
// Handler for the custom tab tunings file open control
//
function idleOpenCustomTab(){

	//
	// Setup the custom tab file import control
	//
	document.getElementById("load_custom_tab_fs").onchange = () => {

		let fileElement = document.getElementById("load_custom_tab_fs");

		// check if user had selected a file
		if (fileElement.files.length === 0) {

			var thePrompt = "Please select a custom tab settings file";

			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;

		}

		let file = fileElement.files[0];

		// Read the custom tab file
		loadCustomTab(file);

		// Reset file selectors
		fileElement.value = "";

	}
}

//
// Edit the custom tab settings
//
function EditCustomTab(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","EditCustomTab");

	const theData = {};

	// Save off the original setting
	var gCustomTabOriginal = JSON.parse(JSON.stringify(gCustomTab));

	var modal_msg  = '<p style="text-align:center;font-size:16pt;font-family:helvetica;margin-left:15px;margin-bottom:32px">Edit Custom Tablature Note Names&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#tab_custom_edit" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>';
	modal_msg += '<div id="tab-custom-dialog">';
	modal_msg += '<p style="font-size:12pt;font-family:helvetica;"">Custom tab name:<input class="customtablabel" type="text" id="r0c1" onchange="customTabChangeHandler()"><p>\n';
	modal_msg += '<table style="margin-bottom:24px;text-align:center;">\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td colspan="3" style="text-align: left; font-size:12pt;font-family:helvetica;">Octave 1:</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:2pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
 	modal_msg += '<tr>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C#/Db</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D#/Eb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">E</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F#/Gb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G#/Ab</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A#/Bb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">B</td>\n';
	modal_msg += '</tr>\n';
  	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r1c1" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r1c2" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r1c3" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r1c4" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r1c5" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r1c6" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r1c7" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r1c8" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r1c9" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r1c10" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r1c11" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r1c12" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td colspan="3" style="text-align: left; font-size:12pt;font-family:helvetica;">Octave 2:</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:2pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
  	modal_msg += '<tr>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C#/Db</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D#/Eb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">E</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F#/Gb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G#/Ab</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A#/Bb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">B</td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r2c1" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r2c2" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r2c3" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r2c4" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r2c5" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r2c6" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r2c7" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r2c8" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r2c9" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r2c10" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r2c11" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r2c12" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
    modal_msg += '<td colspan="3" style="text-align: left; font-size:12pt;font-family:helvetica;">Octave 3:</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:2pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
  	modal_msg += '<tr>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C#/Db</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D#/Eb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">E</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F#/Gb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G#/Ab</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A#/Bb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">B</td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r3c1" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r3c2" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r3c3" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r3c4" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r3c5" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r3c6" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r3c7" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r3c8" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r3c9" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r3c10" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r3c11" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r3c12" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td colspan="3" style="text-align: left; font-size:12pt;font-family:helvetica;">Octave 4:</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:2pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
  	modal_msg += '<tr>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C#/Db</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D#/Eb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">E</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F#/Gb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G#/Ab</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A#/Bb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">B</td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r4c1" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r4c2" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r4c3" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r4c4" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r4c5" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r4c6" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r4c7" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r4c8" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r4c9" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r4c10" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r4c11" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r4c12" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td colspan="3" style="text-align: left; font-size:12pt;font-family:helvetica;">Octave 5:</td>\n';
  	modal_msg += '</tr>\n';	
	modal_msg += '<tr>\n'
    modal_msg += '<td style="text-align: center; font-size:2pt;font-family:helvetica;">&nbsp;</td>\n';
  	modal_msg += '</tr>\n';	
  	modal_msg += '<tr>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">C#/Db</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">D#/Eb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">E</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">F#/Gb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">G#/Ab</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">A#/Bb</td>\n';
	modal_msg += '<td style="text-align: center; font-size:11pt;font-family:helvetica;">B</td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r5c1" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r5c2" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r5c3" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r5c4" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r5c5" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r5c6" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r5c7" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r5c8" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r5c9" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r5c10" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r5c11" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '<td><input class="customtabnames" type="text" id="r5c12" onchange="customTabChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';	modal_msg += '</table>\n';
	modal_msg += '</div>\n';
	modal_msg += '<p style="text-align:center;margin-top:22px;"><input type="file" id="load_custom_tab_fs" accept=".txt,.TXT" hidden/><input id="save_custom_tab" class="btn btn-subdialog save_custom_tab" onclick="saveCustomTab()" type="button" value="Save Custom Tab Settings" title="Save a custom tab settings file"><input id="load_custom_tab" class="btn btn-subdialog load_custom_tab" onclick="loadCustomTabClickHandler()" type="button" value="Load Custom Tab Settings" title="Load a custom tab settings file"></p>\n';
	modal_msg += '<p style="text-align:center;margin-top:22px;"><input id="default_anglo_fingerings" class="btn btn-clearbutton default_anglo_fingerings" onclick="defaultCustomTab()" type="button" value="Reset to Default (Scale Semitone Numbers)" title="Resets the custom tab setting to scale semitone numbers"></p>\n';

	const form = [
	  {html: modal_msg}
	];


	setTimeout(function(){

		initCustomTabSettings();

		idleOpenCustomTab();

	}, 150);


	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 50, width: 800, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){
		
		// Get the results and store them in the global configuration
		if (!args.canceled){

			// Sanity check the entries
		    if (gCustomTab.name == ""){
		        gCustomTab.name = "Custom";
		    }

		    for (var i=0;i<60;++i){

		    	// No blank items
		        if (gCustomTab.noteMap[i] == ""){
		            gCustomTab.noteMap[i] = " ";
		        }

		        // Turn any double quotes into two single quotes
		        gCustomTab.noteMap[i] = gCustomTab.noteMap[i].replaceAll('"',"''");

		        if (gCustomTab.noteMap[i] == ""){
		            gCustomTab.noteMap[i] = " ";
		        }
		    }


		    // Save the custom button naming map
		    if (gLocalStorageAvailable){

		        localStorage.CustomTab = JSON.stringify(gCustomTab);

		    }

		    // Reset the displayed custom tab name in the dialog
		    var elem = document.getElementById("currentCustomTab");
		    if (elem){
		    	elem.innerText = gCustomTab.name;
		    }

		}
		else{

			// Cancelled, reset the original values
			gCustomTab = JSON.parse(JSON.stringify(gCustomTabOriginal));

		}

	});
}

//
// Inject custom tablature
//
function DoInjectCustomTab(){

	// Keep track of tablature injection use
	sendGoogleAnalytics("tablature","Inject_Custom_Tab");

 	const custom_tab_keys = [
	    { name: "  -11", id: "-11" },
	    { name: "  -10", id: "-10" },
	    { name: "  -9", id: "-9" },
	    { name: "  -8", id: "-8" },
	    { name: "  -7", id: "-7" },
	    { name: "  -6", id: "-6" },
	    { name: "  -5", id: "-5" },
	    { name: "  -4", id: "-4" },
	    { name: "  -3", id: "-3" },
	    { name: "  -2", id: "-2" },
	    { name: "  -1", id: "-1" },
	    { name: "  0", id: "0" },
	    { name: "  1", id: "1" },
	    { name: "  2", id: "2" },
	    { name: "  3", id: "3" },
	    { name: "  4", id: "4" },
	    { name: "  5", id: "5" },
	    { name: "  6", id: "6" },
	    { name: "  7", id: "7" },
	    { name: "  8", id: "8" },
	    { name: "  9", id: "9" },
	    { name: "  10", id: "10" },
	    { name: "  11", id: "11" }
  	];

  	const custom_tab_octaves = [
	    { name: "  -3", id: "-3" },
	    { name: "  -2", id: "-2" },
	    { name: "  -1", id: "-1" },
	    { name: "  0", id: "0" },
	    { name: "  1", id: "1" },
	    { name: "  2", id: "2" },
	    { name: "  3", id: "3" }
  	];

	// Setup initial values
	const theData = {
	  configure_custom_tab_key:gCustomTabKey,
	  configure_custom_tab_octave:gCustomTabOctave,
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject Custom Tablature&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#tab_custom" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;margin-bottom:36px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject custom tablature offset by the octave and semitone values selected below into all of the tunes in the ABC text area:</p>'},	  
	  {html: '<p style="margin-top:24px;margin-bottom:42px;font-size:12pt;line-height:18pt;font-family:helvetica">Currently loaded custom tab:&nbsp;&nbsp;<span id="currentCustomTab">'+gCustomTab.name+'</span></p>'},	  
	  {name: "Octave shift:", id: "configure_custom_tab_octave", type:"select", options:custom_tab_octaves, cssClass:"configure_custom_tab_select"}, 
	  {name: "Semitone offset:", id: "configure_custom_tab_key", type:"select", options:custom_tab_keys, cssClass:"configure_custom_tab_select"}, 
      {html: '<p style="text-align: center; font-size:4pt;font-family:helvetica;">&nbsp;</p>'},
	  {html: '<p style="text-align:center;margin-top:18px;"><input id="configure_custom_tab" class="btn btn-subdialog configure_custom_tab" onclick="EditCustomTab()" type="button" value="Edit Custom Tablature Note Names" title="Edit the custom tab symbols for each scale note"></p>'},
	  {html: '<p style="text-align:center;margin-top:18px;"><input id="configure_anglo_fonts" class="btn btn-subdialog configure_anglo_fonts" onclick="ConfigureTablatureSettings()" type="button" value="Tablature Injection Settings" title="Configure the tablature injection settings"></p>'},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 100, width: 700, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject",autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			gCustomTabKey = args.result.configure_custom_tab_key; 
			gCustomTabOctave = args.result.configure_custom_tab_octave; 

			SaveConfigurationSettings();

			SetRadioValue("notenodertab","noten");

			gCurrentTab = "noten";

			setABCEditorText(CustomTabGenerator(gTheABC.value));

			// Set dirty
			gIsDirty = true;
			
			RenderAsync(true,null);

			// Idle the dialog
			IdleAdvancedControls(true);

		}

	});

}

//
// Inject Box Tablature
//
function DoInjectBoxTablature(){

	var modal_msg  = '<p style="text-align:center;margin-bottom:36px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject Irish Button Box Tablature&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#tab_irish_box" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>';

	modal_msg  += '<p style="text-align:center;"><input id="injectbcbox" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectTablature_BC()" type="button" value="Inject B/C Box Tab" title="Injects B/C box tablature into the ABC">';

	modal_msg  += '<input id="injectcsdbox" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectTablature_CsD()" type="button" value="Inject C#/D Box Tab" title="Injects C#/D box tablature into the ABC"></p>';

	modal_msg  += '<p style="text-align:center;margin-top:18px;"><input id="configure_anglo_fonts" class="btn btn-subdialog configure_anglo_fonts" onclick="ConfigureTablatureSettings()" type="button" value="Tablature Injection Settings" title="Configure the tablature injection settings"></p>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 150, width: 650,  scrollWithPage: (AllowDialogsToScroll()) });

}

//
// Do B/C Box Tab Injection
//
function DoInjectTablature_BC(){

	// Keep track of tablature injection use
	sendGoogleAnalytics("tablature","Inject_BC");

	SetRadioValue("notenodertab","noten");

	gCurrentTab = "noten";

	gInjectTab_BoxStyle = "0";

  var val = gTheABC.value;

  // Strip any existing tab color css
  val = val.replace(/^% Begin tab color CSS[\s\S]*?^% End tab color CSS.*(\r?\n)+/gm, '');

  // Remove old push and draw decorations
  val = val.replaceAll("!push!","");
  val = val.replaceAll("!draw!","");

  setABCEditorText(val);

  val = boxTabGenerator(val);

  if (gInjectTab_Colors){
    val = InjectTabColors(val,1);
  }

  setABCEditorText(val);

	// Set dirty
	gIsDirty = true;

	// Show the tab after an inject
	gStripTab = false;
	
	RenderAsync(true,null);

	// Idle the dialog
	IdleAdvancedControls(true);

	// Idle the show tab names control
	IdleAllowShowTabNames();


}

//
// Do ABC C#/D Box Tab Injection
//
function DoInjectTablature_CsD(){

	// Keep track of tablature injection use
	sendGoogleAnalytics("tablature","Inject_CsD");

	SetRadioValue("notenodertab","noten");

	gCurrentTab = "noten";

	gInjectTab_BoxStyle = "1";

  var val = gTheABC.value;

  // Strip any existing tab color css
  val = val.replace(/^% Begin tab color CSS[\s\S]*?^% End tab color CSS.*(\r?\n)+/gm, '');

  // Remove old push and draw decorations
  val = val.replaceAll("!push!","");
  val = val.replaceAll("!draw!","");

  setABCEditorText(val);

  val = boxTabGenerator(val);

  if (gInjectTab_Colors){
    val = InjectTabColors(val,1);
  }

	setABCEditorText(val);

	// Set dirty
	gIsDirty = true;

	// Show the tab after an inject
	gStripTab = false;
	
	RenderAsync(true,null);

	// Idle the dialog
	IdleAdvancedControls(true);

	// Idle the show tab names control
	IdleAllowShowTabNames();


}

//
// Do Anglo Concertina Tab Injection
//
function DoInjectTablature_Anglo(){

	// Keep track of tablature injection use
	sendGoogleAnalytics("tablature","Inject_Anglo");

  	const concertina_fingerings = [
	    { name: "  On-Row", id: "0" },
	    { name: "  Cross-Row", id: "1" },
  	];

  	const concertina_styles = [
	    { name: "  Jeffries", id: "0" },
	    { name: "  Wheatstone", id: "1" },
  	];

    const concertina_tunings = [
	    { name: "  C/G", id: "0" },
	    { name: "  Bb/F", id: "1" },
	    { name: "  A/E", id: "2" },
	    { name: "  G/D", id: "3" },
  	];

	// Setup initial values
	const theData = {
	  configure_concertina_style:parseInt(gInjectTab_ConcertinaStyle),
	  configure_concertina_tuning:parseInt(gInjectTab_ConcertinaTuning),
	  configure_concertina_fingering:parseInt(gInjectTab_ConcertinaFingering),
	  configure_gary_coover:gInjectTab_GaryCoover,
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:36px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject Anglo Concertina Tablature&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#tab_concertina" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {name: "Concertina tuning:", id: "configure_concertina_tuning", type:"select", options:concertina_tunings, cssClass:"configure_concertina_tunings_select"}, 
	  {name: "Concertina style:", id: "configure_concertina_style", type:"select", options:concertina_styles, cssClass:"configure_tab_settings_select"}, 
	  {name: "Preferred fingering solution:", id: "configure_concertina_fingering", type:"select", options:concertina_fingerings, cssClass:"configure_tab_settings_select"},
	  {html: '<p style="margin-top:24px;font-size:12pt;line-height:12pt;font-family:helvetica">Fingering solutions referenced to C/G tuning:</p>'},	  
	  {html: '<p style="margin-top:12px;font-size:12pt;line-height:12pt;font-family:helvetica">On-Row: Favors D5 and E5 on right-side C-row.</p>'},	  
	  {html: '<p style="margin-top:12px;font-size:12pt;line-height:12pt;font-family:helvetica">Cross-Row: Favors D5 and E5 on the left-side G-row.</p>'},	  
	  {html: '<p style="margin-top:12px;margin-bottom:24px;font-size:12pt;line-height:12pt;font-family:helvetica">Favors C5 on the left-side G-row draw, B4 on the right-side C-row draw.</p>'},	  
	  {name: "    Gary Coover style tab (single notes only, overrides button name and direction settings)", id: "configure_gary_coover", type:"checkbox", cssClass:"configure_tab_settings_form_text"},
	  {html: '<p style="text-align:center;margin-top:18px;"><input id="configure_anglo_fingerings" class="btn btn-subdialog configure_anglo_fingerings" onclick="ConfigureAngloFingerings()" type="button" value="Configure Anglo Concertina Tablature Button Names" title="Configure the Anglo Concertina tablature button names"></p>'},
	  {html: '<p style="text-align:center;margin-top:18px;"><input id="configure_anglo_fonts" class="btn btn-subdialog configure_anglo_fonts" onclick="ConfigureTablatureSettings()" type="button" value="Tablature Injection Settings" title="Configure the tablature injection settings"></p>'},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 100, width: 720, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject",autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			gInjectTab_ConcertinaStyle = args.result.configure_concertina_style;
			gInjectTab_ConcertinaTuning = args.result.configure_concertina_tuning;
			gInjectTab_ConcertinaFingering = args.result.configure_concertina_fingering;
			gInjectTab_GaryCoover = args.result.configure_gary_coover;

			// Save the settings, in case they were initialized
			SaveConfigurationSettings();

			var concertina_transpose = 0;
			var visual_transpose = 0;
			var tuning_string = "C/G";

			switch (gInjectTab_ConcertinaTuning){
				case "0": // C/G
					//console.log("C/G");
					tuning_string = "C/G";
					break;
				case "1": // Bb/F
					//console.log("Bb/F");
					concertina_transpose = 2;
					visual_transpose = -2;
					tuning_string = "Bb/F";
					break;
				case "2": // A/E
					//console.log("A/E");
					concertina_transpose = 3;
					visual_transpose = -3;
					tuning_string = "A/E";
					break;
				case "3": // G/D
					//console.log("G/D");
					concertina_transpose = 5;
					visual_transpose = -5;
					tuning_string = "G/D";
					break;
				default: // C/G
					//console.log("Default - C/G");
					break;
			}

			//console.log("concertina_transpose = "+concertina_transpose);

			SetRadioValue("notenodertab","noten");

			gCurrentTab = "noten";

			var nTunes = CountTunes();

			// Only show the spinner for a large number of tunes
			if (nTunes > 5){
				showTheSpinner();
			}

			// To allow spinner to appear
			setTimeout(function(){

				//
				// Do we need to transpose the tunes before injection?
				//
				if (concertina_transpose != 0){

					var theNotes = gTheABC.value;

					// Get the rendering params
					var params = GetABCJSParams();

					// Find the tunes
					var theTunes = theNotes.split(/^X:/gm);

					var output = FindPreTuneHeader(theNotes);

					for (var i=1;i<=nTunes;++i){

						var thisTune = "X:"+theTunes[i];

						var theTitle = getTuneTitle(theTunes[i]);

						// Wrap this in a try-catch since sometimes the transposer fails catastrophically
						try {

							//console.log("Transposing tune index: "+i+" title: "+theTitle+" amount: "+concertina_transpose+" semitones");

							thisTune = transposeSingleTune(thisTune,concertina_transpose,params);

							thisTune = InjectStringBelowTuneHeader(thisTune,'%\n% '+tuning_string+' Anglo Concertina transpose\n%\n%abcjs_render_params {"visualTranspose":' + visual_transpose+'}\n%%MIDI transpose 0\n%');

							output += thisTune;

						}
						catch (error){

							//console.log("Transpose failed: "+theTitle);
							
							if (gShowABCJSRenderProgress){
								console.log("Transpose failed: "+theTitle);
							}

							output += thisTune;

						}

					}

					// Stuff in the transposed output
					setABCEditorText(output);

					// Set dirty
					gIsDirty = true;	

				}

        var val = gTheABC.value;

        // Strip any existing tab color css
        val = val.replace(/^% Begin tab color CSS[\s\S]*?^% End tab color CSS.*(\r?\n)+/gm, '');

        // Remove old push and draw decorations
        val = val.replaceAll("!push!","");
        val = val.replaceAll("!draw!","");

        setABCEditorText(val);

				angloFingeringsGenerator(val,callback);

				function callback(injectedABC, wasError, errorReport){
					
					if (!wasError){

            if (gInjectTab_Colors){
              injectedABC = InjectTabColors(injectedABC,0);
            }
						
						setABCEditorText(injectedABC);

						// Set dirty
						gIsDirty = true;

						// Show the tab after an inject
						gStripTab = false;
						
						RenderAsync(true,null,function(){
							hideTheSpinner();
						});

						// Idle the dialog
						IdleAdvancedControls(true);

						// Idle the show tab names control
						IdleAllowShowTabNames();

					}
					else{

			       DayPilot.Modal.alert(errorReport,{ theme: "modal_flat", top: 100, scrollWithPage: true }).then(function(){

              if (gInjectTab_Colors){
                injectedABC = InjectTabColors(injectedABC,0);
              }

							setABCEditorText(injectedABC);

							// Set dirty
							gIsDirty = true;

							// Show the tab after an inject
							gStripTab = false;
							
							RenderAsync(true,null,function(){
								hideTheSpinner();
							});

							// Idle the dialog
							IdleAdvancedControls(true);

							// Idle the show tab names control
							IdleAllowShowTabNames();
			         	
			       });
					}
				}

			},gSpinnerDelay);
		}
	});
}

//
// Do Bamboo Flute Tab Injection
//
// Prompt first for the key
//
function DoInjectTablature_Bamboo_Flute(){

	// Keep track of tablature injection use
	sendGoogleAnalytics("tablature","Inject_Bamboo_Flute");

 	const bamboo_flute_keys = [
	    { name: "  C", id: "0" },
	    { name: "  D", id: "1" },
	    { name: "  G", id: "2" },
	    { name: "  A", id: "3" },
  	];

	// Setup initial values
	const theData = {
	  configure_bamboo_flute_key:gBambooFluteKey,
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject Bamboo Flute Tablature&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://en.m.wikipedia.org/wiki/Numbered_musical_notation" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;margin-bottom:36px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject numeric notation tablature for a bamboo flute in the key selected below into all of the tunes in the ABC text area:</p>'},	  
	  {name: "Bamboo flute key:", id: "configure_bamboo_flute_key", type:"select", options:bamboo_flute_keys, cssClass:"configure_box_settings_select"}, 
	  {html: '<p style="text-align:center;margin-top:18px;"><input id="configure_anglo_fonts" class="btn btn-subdialog configure_anglo_fonts" onclick="ConfigureTablatureSettings()" type="button" value="Tablature Injection Settings" title="Configure the tablature injection settings"></p>'},

	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 150, width: 500, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject",autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			gBambooFluteKey = args.result.configure_bamboo_flute_key; 

			// Save the settings, in case they were initialized
			SaveConfigurationSettings();

			SetRadioValue("notenodertab","noten");

			gCurrentTab = "noten";

			setABCEditorText(bambooFluteTabGenerator(gTheABC.value));

			// Set dirty
			gIsDirty = true;

			// Show the tab after an inject
			gStripTab = false;
			
			RenderAsync(true,null);

			// Idle the dialog
			IdleAdvancedControls(true);

			// Idle the show tab names control
			IdleAllowShowTabNames();

		}

	});

}

//
// Fiddle Fingerings Tab Injection dialog
//
function DoInjectTablature_Fiddle_Fingerings_Dialog(){

	var modal_msg  = '<p style="text-align:center;margin-bottom:36px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject Fiddle Fingerings&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#tab_fiddle" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>';

	modal_msg  += '<p style="text-align:center;"><input id="fiddlefingeringsdialog" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectTablature_Fiddle_Fingerings(0)" type="button" value="Finger Number Only" title="Injects finger number (0, 1, 2, 3, 4) only.&nbsp;&nbsp;0 is an open string."></p>';

	modal_msg  += '<p style="text-align:center;"><input id="fiddlefingeringsdialog2" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectTablature_Fiddle_Fingerings(1)" type="button" value="String Name + Finger Number (Inline)" title="Injects string name (G, D, A, E) + finger number (0, 1, 2, 3, 4) together on one line.&nbsp;&nbsp;0 is an open string."></p>';
	
	modal_msg  += '<p style="text-align:center;"><input id="fiddlefingeringsdialog3" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectTablature_Fiddle_Fingerings(2)" type="button" value="String Name + Finger Number (Name over Number)" title="Injects string name (G, D, A, E) + finger number (0, 1, 2, 3, 4) stacked vertically Name over Number.&nbsp;&nbsp;0 is an open string."></p>';

	modal_msg  += '<p style="text-align:center;"><input id="fiddlefingeringsdialog4" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectTablature_Fiddle_Fingerings(3)" type="button" value="String Name + Finger Number (Number over Name)" title="Injects string name (G, D, A, E) + finger number (0, 1, 2, 3, 4) stacked vertically Number over Name.&nbsp;&nbsp;0 is an open string."></p>';
	
	modal_msg  += '<p style="text-align:center;margin-top:18px;"><input id="configure_anglo_fonts" class="btn btn-subdialog configure_anglo_fonts" onclick="ConfigureTablatureSettings()" type="button" value="Tablature Injection Settings" title="Configure the tablature injection settings"></p>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 100, width: 650, scrollWithPage: (AllowDialogsToScroll()) });

}

//
// Fiddle Fingerings Tab Injection
//
function DoInjectTablature_Fiddle_Fingerings(tab_style){

	// Keep track of tablature injection use
	sendGoogleAnalytics("tablature","Inject_Fiddle_Fingerings");

	SetRadioValue("notenodertab","noten");

	gCurrentTab = "noten";

	setABCEditorText(fiddleFingeringsGenerator(gTheABC.value,tab_style));

	// Set dirty
	gIsDirty = true;

	// Show the tab after an inject
	gStripTab = false;
	
	RenderAsync(true,null);

	// Idle the dialog
	IdleAdvancedControls(true);

	// Idle the show tab names control
	IdleAllowShowTabNames();

}

// 
// Warn if there were any tunes excluded
//
function ShowMDTabWarningDialog(){

    // Keep track of dialogs
    sendGoogleAnalytics("dialog","ShowMDTabWarningDialog");

    var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;">Some Tunes Did Not Have Complete Tab Solutions</p>';

    modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:36px;">During the tablature generation the following tunes did not have complete tablature solutions and as requested were excluded from the result:</p>';

    var nBadTunes = gExcludedFromMDSolution.length;

	modal_msg += '<p style="font-size:12pt;line-height:18pt;">'

    for (var i=0;i<nBadTunes-1;++i){
        modal_msg += gExcludedFromMDSolution[i]+', ';
    }

    modal_msg += gExcludedFromMDSolution[nBadTunes-1];
	modal_msg += '</p>'

    DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 75, width: 630,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

    	gExcludedFromMDSolution = [];
            
    });
}

//
// Do Mountain Dulcimer Tab Injection
//
var gExcludedFromMDSolution = [];

function DoInjectTablature_MD(){

	// Keep track of tablature injection use
	sendGoogleAnalytics("tablature","Inject_MD");

 	const mountain_dulcimer_styles = [
	    { name: "  DAD - Along High-D String", id: "0" },
	    { name: "  DAD - Cross-String", id: "1" },
	    { name: "  DGD - Along High-D String", id: "2" },
	    { name: "  DGD - Cross-String", id: "3" },
	    { name: "  DAA - Along A String", id: "4" },
	    { name: "  Blank Tablature", id: "5" },
  	];

	// Setup initial values
	const theData = {
	  configure_dulcimer_style:gMDulcimerStyle,
	  open_string_symbol:gMDulcimerUseDashForOpenString,
	  strip_bad_tunes:gMDulcimerStripBadTunes
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject Mountain Dulcimer Tablature&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#tab_dulcimer" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;margin-bottom:36px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject tablature for a DAD, DGD, or DAA-tuned Mountain Dulcimer in the style selected below into all of the tunes in the ABC text area:</p>'},	  
	  {name: "Style:", id: "configure_dulcimer_style", type:"select", options:mountain_dulcimer_styles, cssClass:"configure_md_settings_select"}, 
	  {name: "          Use - for open strings (default is leave blank using a space)", id: "open_string_symbol", type:"checkbox", cssClass:"configure_md_settings_form_text"},
	  {name: "          Strip tunes from the result that have no complete tablature solution", id: "strip_bad_tunes", type:"checkbox", cssClass:"configure_md_settings_form_text"},
	  {html: '<p style="text-align:center;margin-top:36px;"><input id="configure_anglo_fonts" class="btn btn-subdialog configure_anglo_fonts" onclick="ConfigureTablatureSettings()" type="button" value="Tablature Injection Settings" title="Configure the tablature injection settings"></p>'},

	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 100, width: 600, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject",autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			gMDulcimerStyle = args.result.configure_dulcimer_style; 

			gMDulcimerUseDashForOpenString = args.result.open_string_symbol;

			gMDulcimerStripBadTunes = args.result.strip_bad_tunes;

			// Save the settings, in case they were initialized
			SaveConfigurationSettings();

			SetRadioValue("notenodertab","noten");

			gCurrentTab = "noten";

			// Clear the excluded list
			gExcludedFromMDSolution = [];

			setABCEditorText(MDTablatureGenerator(gTheABC.value));

			// Set dirty
			gIsDirty = true;

			// Show the tab after an inject
			gStripTab = false;
			
			// Render the tunes
			RenderAsync(true,null,function(){

				if (gExcludedFromMDSolution.length > 0){

					ShowMDTabWarningDialog();

				}

				// Idle the dialog
				IdleAdvancedControls(true);

				// Idle the show tab names control
				IdleAllowShowTabNames();

			});
		}
	});
}

//
// Do Shape Note Injection
//
var gShapeNoteStyle = 0;

function DoInjectTablature_ShapeNotes(){

 	const shape_styles = [
	    { name: "  Pitch Names (No octave indication)", id: "6" },
	    { name: "  ABC Note Names", id: "11" },
	    { name: "  ABC Note Names (Comhaltas ABC)", id: "12" },
	    { name: "  4-Shape", id: "0" },
	    { name: "  4-Shape - Include fa/sol/la note names below", id: "1" },
	    { name: "  4-Shape - No shapes, only fa/sol/la note names below", id: "2" },
	    { name: "  7-Shape", id: "3" },
	    { name: "  7-Shape - Include do/re/mi note names below", id: "4" },
	    { name: "  7-Shape - No shapes, only do/re/mi note names below", id: "5" },
	    { name: "  Fixed (Do=C) Solfège - No chromatics", id: "7" },
	    { name: "  Fixed (Do=C) Solfège - Include chromatics", id: "8" },
	    { name: "  Movable Solfège Do-based Minor", id: "9" },
	    { name: "  Movable Solfège La-based Minor", id: "10" },
  	];

	// Setup initial values
	const theData = {
	  shape_note_style:gShapeNoteStyle,
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject Note Names&nbsp;/&nbsp;Shape Note&nbsp;/&nbsp;Solfège<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#advanced_shapenoteshapes" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject Pitch Names, ABC Note Names (Standard ABC or Comhaltas ABC), Shape Note shapes, or Solfège note names into all the tunes in the ABC text area.</p>'},	  
	  {name: "Style to inject:", id: "shape_note_style", type:"select", options:shape_styles, cssClass:"configure_sn_settings_select"}, 
	  {html: '<p style="text-align:center;margin-top:36px;"><input id="configure_anglo_fonts" class="btn btn-subdialog configure_anglo_fonts" onclick="ConfigureTablatureSettings()" type="button" value="Tablature Injection Settings" title="Configure the tablature injection settings"></p>'},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 150, width: 680, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject",autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			gShapeNoteStyle = parseInt(args.result.shape_note_style); 

			// Keep track of tablature injection use
			sendGoogleAnalytics("tablature","Inject_ShapeNotes_"+gShapeNoteStyle);

			// Save the settings, in case they were initialized
			SaveConfigurationSettings();

			SetRadioValue("notenodertab","noten");

			gCurrentTab = "noten";

			if (gShapeNoteStyle <= 10){

				setABCEditorText(shapeNoteGenerator(gTheABC.value));

			}
			else{

				setABCEditorText(injectABCNoteNames(gTheABC.value));

			}

			// Set dirty
			gIsDirty = true;

			// Show the tab after an inject
			gStripTab = false;
			
			// Render the tunes
			RenderAsync(true,null,function(){

				// Idle the dialog
				IdleAdvancedControls(true);

				// Idle the show tab names control
				IdleAllowShowTabNames();

			});
		}
	});
}
//
// Change the tab display
//
function ChangeTab(){

	var theTab = GetRadioValue("notenodertab");

	// If first time using the whistle tab, prep the tin whistle font for embedded SVG styles
	if (theTab == "whistle"){

		PrepareWhistleFont();

	}

	if (theTab == "recorder"){

		// If first time using the recorder tab, prep the recorder font for embedded SVG styles
		PrepareRecorderFont();
		
	}

	// Don't allow tab change after a Play reset on the Quick Player
	if (gIsQuickEditor && (gCurrentTune == -1)){
		return;
	}

	// If the tab changes, render all
	if (theTab != gCurrentTab){

		// Force local storage update of the tab selection
		//console.log("ChangeTab setting gForceTabSave")
		gForceTabSave = true;

		// Keep track of tab use
		sendGoogleAnalytics("ChangeTab",theTab);

		RenderAsync(true,null);

	}

	gCurrentTab = theTab;

}

//
// Focus after operation handler
// On iOS and Android, does a blur to avoid extra on-screen keyboard popups
//
function FocusAfterOperation(){

	if(isPureDesktopBrowser()){

		// And reset the focus
	    gTheABC.focus();	

	}
	else{

	    // And clear the focus
	    gTheABC.blur();

	}

}

//
// Reset the focus back to the ABC and set an initial selection
//
function FocusABC(){

	// Refocus back on the ABC
	gTheABC.focus();

	// Set the selection to the start of the tune
	gTheABC.selectionStart = 0;
	gTheABC.selectionEnd = 0;

	// Scroll it to the top
	gTheABC.scrollTo(0,0);
}

//
// Fade out and hide an element
//
function fadeOutAndHide(fadeTarget,callback) {
	var fadeEffect = setInterval(function() {
		if (!fadeTarget.style.opacity) {
			fadeTarget.style.opacity = 1;
		}
		if (fadeTarget.style.opacity > 0) {
			fadeTarget.style.opacity -= 0.1;
		} else {
			clearInterval(fadeEffect);
			fadeTarget.style.display = "none";
			callback();
		}
	}, 100);
}

//
// Remove the player highlight and cursor before image export
//
function PreProcessSVGImageForDownload(){

	var lastSelection = document.querySelectorAll("#playback-paper svg .highlight");
	for (var k = 0; k < lastSelection.length; k++)
		lastSelection[k].classList.remove("highlight");

	var cursor = document.querySelector("#playback-paper svg .abcjs-cursor");

	if (cursor){

		cursor.style.display = "none";

	}

}

//
// Restore the player cursor
//
function PostProcessSVGImageAfterDownload(){

	var cursor = document.querySelector("#playback-paper svg .abcjs-cursor");

	if (cursor){

		cursor.style.display = "inline";

	}

}

//
// Convert DataURL to Blob
//
function dataURLtoBlob(dataurl) {
    var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
        bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
    while(n--){
        u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], {type:mime});
}

//
// Generate and download the SVG file for the current tune
//
var gInDownloadSVG = false;

function DownloadSVG(callback,val){

	// Avoid re-entry
	if (gInDownloadSVG){
		return false;
	}

	// Keep track of export
	if (!callback){
		sendGoogleAnalytics("export","DownloadSVG");
	}

   var isWebsiteExport = false;

	var elem = document.getElementById("export_width");

	if (!elem){
		isWebsiteExport = true;
	}

	if (!isWebsiteExport){

		theWidth = document.getElementById("export_width").value;

		theWidth = parseInt(theWidth);

		if (isNaN(theWidth)){
			theWidth = 2400;
		}
	}
	else{

		// Render website images at high resolution
		if (!gWebsiteImageWidthIsPercentage){

			theWidth = parseInt(gWebsiteImageWidth);
			
			if (!isNaN(theWidth)){
				theWidth = theWidth*2;
			}
			else{
				theWidth = 2400;
			}

		}
		else{
			// For responsive sites, render at a fixed size of 2400
			theWidth = 2400;
		}
	}
	
	if (!callback){
		
		gExportWidth = theWidth;

		// Save off the last entered width for next time
		if (gLocalStorageAvailable){
			localStorage.ExportWidth = theWidth;
		}

	}

	gInDownloadSVG = true;

	PreProcessSVGImageForDownload();

	var svg = document.querySelector("#playback-paper svg");

	if (!svg){

		gInDownloadSVG = false;
		
		if (callback){
			callback(val);
		}
		else{
			return;
		}
	}

	var svgSize = svg.getBoundingClientRect();

	// Make a clone of the SVG
	svg = svg.cloneNode(true);

	var originalSVGWidth = svgSize.width;
	var originalSVGHeight = svgSize.height;

	var outputWidth = theWidth;
	var outputHeight = (theWidth * originalSVGHeight)/originalSVGWidth;

  svg.setAttribute('width', outputWidth+'px');
  svg.setAttribute('height', outputHeight+'px');

  svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
  var svgData = svg.outerHTML;

  // MAE 5 August 2025 - Inject additional required CSS for whistle, recorder, or note names SVG
  if (gCurrentTab == 'whistle'){
    svgData = injectWhistleSVGCSS(svgData,false);
  }
  else
  if (gCurrentTab == 'recorder'){
    svgData = injectRecorderSVGCSS(svgData,false);
  }
  else
  if (gCurrentTab == 'notenames'){
    svgData = injectNoteNamesSVGCSS(svgData,false);
  }
  else{
    svgData = injectSVGCSS(svgData,false);
  }

  var preface = '<?xml version="1.0" standalone="no"?>\r\n';
  var svgBlob = new Blob([preface, svgData], {type:"image/svg+xml;charset=utf-8"});
  var svgUrl = URL.createObjectURL(svgBlob);

  var downloadLink = document.createElement("a");
  downloadLink.href = svgUrl;
  downloadLink.download = GetTuneAudioDownloadName(gPlayerABC,".svg");
  document.body.appendChild(downloadLink);
  downloadLink.click();

	window.URL.revokeObjectURL(svgUrl);
 	
  document.body.removeChild(downloadLink);

 	PostProcessSVGImageAfterDownload();

  gInDownloadSVG = false;

  svg = null;

 	if (callback){
 		callback(val);
 	}
 	else{
 		document.getElementById("abcplayer_svgbutton").value = "SVG File Saved!"

 		setTimeout(function(){
 			document.getElementById("abcplayer_svgbutton").value = "Save as SVG File";
 		},500);

 	}

}

//
// Generate and download the JPEG file for the current tune
//
var gInDownloadJPEG = false;

function DownloadJPEG(callback, val){

	// Avoid re-entry
	if (gInDownloadJPEG){
		return false;
	}

	// Keep track of export
	if (!callback){
		sendGoogleAnalytics("export","DownloadJPEG");
	}

	var isWebsiteExport = false;

	var elem = document.getElementById("export_width");

	if (!elem){
		isWebsiteExport = true;
	}

	var theWidth;

	if (!isWebsiteExport){

		theWidth = document.getElementById("export_width").value;

		theWidth = parseInt(theWidth);

		if (isNaN(theWidth)){
			theWidth = 2400;
		}
	}
	else{

		// Render website images at high resolution
		if (!gWebsiteImageWidthIsPercentage){

			theWidth = parseInt(gWebsiteImageWidth);
			
			if (!isNaN(theWidth)){
				theWidth = theWidth*2;
			}
			else{
				theWidth = 2400;
			}

		}
		else{
			// For responsive sites, render at a fixed size of 2400
			theWidth = 2400;
		}
	}

	if (!callback){

		if (!isWebsiteExport){

			gExportWidth = theWidth;

			// Save off the last entered width for next time
			if (gLocalStorageAvailable){
				localStorage.ExportWidth = theWidth;
			}

		}

	}

	gInDownloadJPEG = true;

	PreProcessSVGImageForDownload();

	var svg = document.querySelector("#playback-paper svg");

	if (!svg){

		gInDownloadJPEG = false;

		if (callback){
			callback(val);
		}
		else{
			return;
		}
	}

	var canvas = document.createElement("canvas");
	var svgSize = svg.getBoundingClientRect();

	// Make a clone of the SVG
	svg = svg.cloneNode(true);

	var originalSVGWidth = svgSize.width;
	var originalSVGHeight = svgSize.height;

	var outputWidth = theWidth;
	var outputHeight = (theWidth * originalSVGHeight)/originalSVGWidth;

	canvas.width = outputWidth;
	canvas.height = outputHeight;

	canvas.style.width = outputWidth;
	canvas.style.height = outputHeight;

  svg.setAttribute('width', outputWidth+'px');
  svg.setAttribute('height', outputHeight+'px');
	
	var ctx = canvas.getContext( "2d" );

	ctx.fillStyle = "#ffffff"; 
	ctx.fillRect(0, 0, canvas.width, canvas.height); 

	var img = document.createElement( "img" );

	var svgData = new XMLSerializer().serializeToString( svg );

  // MAE 5 August 2025 - Inject additional required CSS for whistle or recorder SVG
  if (gCurrentTab == 'whistle'){
    svgData = injectWhistleSVGCSS(svgData,true);
  }
  else
  if (gCurrentTab == 'recorder'){
    svgData = injectRecorderSVGCSS(svgData,true);
  }
  else
  if (gCurrentTab == 'notenames'){
    svgData = injectNoteNamesSVGCSS(svgData,true);
  }
  else{
    svgData = injectSVGCSS(svgData,true);
  }

	img.setAttribute( "src", "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(svgData))) );

	img.onload = function() {

		ctx.drawImage( img, 0, 0 );

		var canvasdata = canvas.toDataURL("image/jpeg",0.75);

		if (isPureDesktopBrowser()){

			var downloadLink = document.createElement("a");

			downloadLink.download = GetTuneAudioDownloadName(gPlayerABC,".jpg");

			downloadLink.href = canvasdata;

			document.body.appendChild(downloadLink);

			downloadLink.click();

		 	window.URL.revokeObjectURL(canvasdata);
		   	
		   	document.body.removeChild(downloadLink);

		}
		else{

		   	var imageBlob = dataURLtoBlob(canvasdata);

		    var imageUrl = URL.createObjectURL(imageBlob);
		    
		    var downloadLink = document.createElement("a");
		    
		    downloadLink.href = imageUrl;
			
			downloadLink.download = GetTuneAudioDownloadName(gPlayerABC,".jpg");
		    
		    document.body.appendChild(downloadLink);
		    
		    downloadLink.click();

		 	window.URL.revokeObjectURL(imageUrl);
		   	
		   	document.body.removeChild(downloadLink);

		}

	   	PostProcessSVGImageAfterDownload();
		
		gInDownloadJPEG = false;

		svg = null;

	   	if (callback){
	   		callback(val);
	   	}
	   	else{
	   		document.getElementById("abcplayer_jpgbutton").value = "JPG File Saved!"

	   		setTimeout(function(){
	   			document.getElementById("abcplayer_jpgbutton").value = "Save as JPG File";
	   		},500);

	   	}

	};
}

//
// Generate and download the PNG file for the current tune
//
var gInDownloadPNG = false;

function DownloadPNG(callback, val){

	// Avoid re-entry
	if (gInDownloadPNG){
		return false;
	}

	// Keep track of export
	if (!callback){
		sendGoogleAnalytics("export","DownloadPNG");

	}

	var theWidth = document.getElementById("export_width").value;

	theWidth = parseInt(theWidth);

	if (isNaN(theWidth)){
		theWidth = 2400;
	}

	if (!callback){

		gExportWidth = theWidth;

		// Save off the last entered width for next time
		if (gLocalStorageAvailable){
			localStorage.ExportWidth = theWidth;
		}
		
	}

	gInDownloadPNG = true;

	PreProcessSVGImageForDownload();

	var svg = document.querySelector("#playback-paper svg");

	if (!svg){

		gInDownloadPNG = false;

		if (callback){
			callback(val);
		}
		else{
			return;
		}
	}

	var canvas = document.createElement("canvas");
	var svgSize = svg.getBoundingClientRect();

	// Make a clone of the SVG
	svg = svg.cloneNode(true);

	var originalSVGWidth = svgSize.width;
	var originalSVGHeight = svgSize.height;

	var outputWidth = theWidth;
	var outputHeight = (theWidth * originalSVGHeight)/originalSVGWidth;

	canvas.width = outputWidth;
	canvas.height = outputHeight;

	canvas.style.width = outputWidth;
	canvas.style.height = outputHeight;

    svg.setAttribute('width', outputWidth+'px');
    svg.setAttribute('height', outputHeight+'px');
	
	var ctx = canvas.getContext( "2d" );

	ctx.fillStyle = "#ffffff"; 
	ctx.fillRect(0, 0, canvas.width, canvas.height); 

	var img = document.createElement( "img" );

	var svgData = new XMLSerializer().serializeToString( svg );

  // MAE 5 August 2025 - Inject additional required CSS for whistle or recorder SVG
  if (gCurrentTab == 'whistle'){
    svgData = injectWhistleSVGCSS(svgData,true);
  }
  else
  if (gCurrentTab == 'recorder'){
    svgData = injectRecorderSVGCSS(svgData,true);
  }
  else
  if (gCurrentTab == 'notenames'){
    svgData = injectNoteNamesSVGCSS(svgData,true);
  }
  else{
    svgData = injectSVGCSS(svgData,true);
  }

	img.setAttribute( "src", "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(svgData))) );

	img.onload = function() {

		ctx.drawImage( img, 0, 0 );

		var canvasdata = canvas.toDataURL("image/png",1);

		if (isPureDesktopBrowser()){

			var downloadLink = document.createElement("a");

			downloadLink.download = GetTuneAudioDownloadName(gPlayerABC,".png");

			downloadLink.href = canvasdata;

			document.body.appendChild(downloadLink);

			downloadLink.click();

		 	window.URL.revokeObjectURL(canvasdata);

		   	document.body.removeChild(downloadLink);

		}
		else{

		   	var imageBlob = dataURLtoBlob(canvasdata);

		    var imageUrl = URL.createObjectURL(imageBlob);
		    
		    var downloadLink = document.createElement("a");
		    
		    downloadLink.href = imageUrl;
			
			downloadLink.download = GetTuneAudioDownloadName(gPlayerABC,".png");
		    
		    document.body.appendChild(downloadLink);
		    
		    downloadLink.click();
		
		 	window.URL.revokeObjectURL(imageUrl);
		   	
		   	document.body.removeChild(downloadLink);

		}

	   	PostProcessSVGImageAfterDownload();

		gInDownloadPNG = false;

		svg = null;

	   	if (callback){
	   		callback(val);
	   	}
	   	else{
	   		document.getElementById("abcplayer_pngbutton").value = "PNG File Saved!"

	   		setTimeout(function(){
	   			document.getElementById("abcplayer_pngbutton").value = "Save as PNG File";
	   		},500);

	   	}
	};
}

//
// Launch the CSV tag extractor
//
function LaunchCSVTagExtractor(){
	
	//console.log("LaunchCSVTagExtractor");

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","LaunchCSVTagExtractor");

	window.open("https://michaeleskin.com/tools/abc2csv.html");

}

//
// Export All Audio and Images
//
function ExportAll(){

	// Apparently doesn't work on mobile
	if (isMobileBrowser()){

		var thePrompt = "Batch export is not supported on iOS or Android at this time.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);

		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 400, scrollWithPage: (AllowDialogsToScroll()), okText:"Ok" });
	
		return;

	}

	// Clear the split tunes cache
	clearGetTuneByIndexCache();

	var format = GetRadioValue("notenodertab");
	
	var modal_msg = '<p style="text-align:center;font-size:20pt;font-family:helvetica">Export All Tunes</p>';

	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:28px;">Export All Tunes as Audio/MIDI</p>';
	modal_msg  += '<p style="text-align:center;font-size:18pt;font-family:helvetica;">';
	modal_msg += '<input id="exportall_mp3button" class="exportall_mp3button btn btn-allmp3download" onclick="BatchMP3Export();" type="button" value="Export all as MP3 Audio" title="Saves the audio for all the tunes as .MP3 files">'
	modal_msg += '<input id="exportall_midibutton" class="exportall_midibutton btn btn-allmididownload" onclick="BatchMIDIExport();" type="button" value="Export all as MIDI" title="Saves the MIDI file for all the tunes">'
	modal_msg  += '</p>';

	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:28px;">Export All Tunes as Images</p>';
	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;">';
	modal_msg += '<input id="exportall_jpegbutton" class="exportall_jpegbutton btn btn-alljpegdownload" onclick="BatchJPEGExport();" type="button" value="Export all as JPEG" title="Saves the images for all the tunes as bitmap JPEG files">'
	modal_msg += '<input id="exportall_pngbutton" class="exportall_pngbutton btn btn-allpngdownload" onclick="BatchPNGExport();" type="button" value="Export all as PNG" title="Saves the images for all the tunes as bitmap PNG files">'
	modal_msg += '<input id="exportall_svgbutton" class="exportall_svgbutton btn btn-allsvgdownload" onclick="BatchSVGExport();" type="button" value="Export all as SVG" title="Saves the images for all the tunes as vector format SVG files">'
	modal_msg += '</p>';
	modal_msg += '<p class="export_all_text">';
	modal_msg += 'Image width to export: <input id="export_width" type="number" min="0" step="1" max="4096" title="Image width to export" autocomplete="off"/>';
	modal_msg += '</p>';
	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:28px;">Export All Tunes as ABC or MusicXML</p>';
	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;">';
	modal_msg += '<input id="exportall_abcbutton" class="exportall_abcbutton btn btn-allabcdownload" onclick="BatchABCExport();" type="button" value="Export all Tunes as ABC" title="Saves each tune in its own ABC file">'
	modal_msg += '<input id="exportall_musicxmlbutton" class="exportall_musicxmlbutton btn btn-allmusicxmldownload" onclick="BatchMusicXMLExport();" type="button" value="Export all Tunes as MusicXML" title="Saves each tune in its own MusicXML file">'
	modal_msg += '</p>';
	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:28px;">Export All Tunes Titles</p>';
	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;">';
	modal_msg += '<input id="export_tunetitlesbutton" class="export_tunetitlesbutton btn btn-exporttunetitles" onclick="ExportAllTuneTitles();" type="button" value="Export All Tune Titles" title="Saves a text file with all the tune titles">'
	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:28px;">Developer Share URL Batch Export Tools</p>';
	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;">';
	modal_msg += '<input id="exportall_jsonbutton" class="exportall_jsonbutton btn btn-alljsondownload" onclick="BatchJSONExport();" type="button" value="Export all Share URLs as JSON" title="Saves the Share URLs for all the tunes as a JSON file">'
	modal_msg += '<input id="exportall_csvbutton" class="exportall_csvbutton btn btn-allcsvdownload" onclick="BatchCSVExport();" type="button" value="Export all Share URLs as CSV" title="Saves the Share URLs for all the tunes as a CSV file">'
	modal_msg += '</p>';
	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;">';
	modal_msg += '<input id="launchcsvextractor" class="launchcsvextractor btn btn-launchcsvextractor" onclick="LaunchCSVTagExtractor();");" type="button" value="Launch the ABC Tags to CSV Extractor Utility" title="Extract all ABC tags from one or more ABC files to a CSV file">';
	modal_msg += '</p>';
	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:28px;">SmartDraw Set List Builder</p>';
	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;">';
	modal_msg += '<input id="export_smartdrawbutton" class="export_smartdrawbutton btn btn-smartdraw" onclick="SmartDrawExport();" type="button" value="SmartDraw Set List Builder" title="Build a SmartDraw set list using drag and drop">'
	modal_msg += '</p>';

	modal_msg += '<a id="exportall_help" href="https://michaeleskin.com/abctools/userguide.html#export_all" target="_blank" style="text-decoration:none;" title="Learn more about the audio and image exporter" class="dialogcornerbutton">?</a>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 37, width: 670, scrollWithPage: (AllowDialogsToScroll()) })

	document.getElementById("export_width").value = gExportWidthAll;

}

// 
// Batch image exporters
//

var gBatchImageExportCancelRequested = false;
var gTheBatchImageExportOKButton = null;
var gTheBatchImageExportStatusText = null;
var gExportWidth = 2400;
var gExportWidthAll = 2400;

// Milliseconds between exports
var gBatchExportDelayMS = 200; 

function BatchJPEGExport(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","BatchJPEGExport");

	DoBatchImageExport("JPEG",null);
}

function BatchPNGExport(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","BatchPNGExport");

	DoBatchImageExport("PNG",null);
}

function BatchSVGExport(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","BatchSVGExport");

	DoBatchImageExport("SVG",null);
}

function BatchMIDIExport(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","BatchMIDIExport");

	DoBatchImageExport("MIDI",null);
}

function DoBatchImageExport(imageFormat,website_callback){

	var totalTunesToExport;

	var isWebsiteExport = false;

	if (!website_callback){

		if (imageFormat != "MIDI"){

			gExportWidthAll = document.getElementById("export_width").value;
			gExportWidthAll = parseInt(gExportWidthAll);

			if (isNaN(gExportWidthAll)){
				gExportWidthAll = 2400;
			}

			// Save off the last entered width for next time
			if (gLocalStorageAvailable){
				localStorage.ExportWidthAll = gExportWidthAll;
			}

		}
	}

	function callback2(theOKButton){

		//console.log("callback2 called");

		nTunes--;

		// Dismiss the player
		theOKButton.click();

		if (!gBatchImageExportCancelRequested){

			if (nTunes != 0){

				setTimeout(function(){

					currentTune++;

					var thisTune = getTuneByIndex(currentTune);

					var title = getTuneTitle(thisTune);

					gTheBatchImageExportStatusText.innerHTML = "<p>Exporting "+imageFormat+" for tune "+ (currentTune+1) + " of "+totalTunesToExport+"<br/><br/>"+title+"</p>";

					ExportImageDialog(thisTune,callback,currentTune,false);

				}, gBatchExportDelayMS);

			}
			else{

				// We're done, close the status dialog
				gTheBatchImageExportOKButton.click();

				gBatchImageExportCancelRequested = false;

				clearGetTuneByIndexCache();

				if (website_callback){

					website_callback(false);

				}

			}
		}
		else{

			clearGetTuneByIndexCache();

			if (website_callback){

				website_callback(true);

			}
		}
	}

	function callback(result,theOKButton){

		switch (imageFormat){
			case "MIDI":
			DownloadMIDI(callback2,theOKButton);
			break;

			case "JPEG":
			DownloadJPEG(callback2,theOKButton);
			break;
			
			case "PNG":
			DownloadPNG(callback2,theOKButton);
			break;

			case "SVG":
			DownloadSVG(callback2,theOKButton);
			break;

		}

	}

	// Make sure there are tunes to convert
	var nTunes = CountTunes();

	if (nTunes == 0){
		return;
	}

	totalTunesToExport = nTunes;

	var currentTune = 0;

	gBatchImageExportCancelRequested = false;
	gTheBatchImageExportOKButton = null;
	gTheBatchImageExportStatusText = null;

	var thePrompt = "Exporting "+imageFormat+" for tune "+ (currentTune+1) + " of "+totalTunesToExport;
	
	// Center the string in the prompt
	thePrompt = makeCenteredPromptString(thePrompt);

	// Put up batch running dialog
	DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 290, scrollWithPage: (AllowDialogsToScroll()), okText:"Cancel" }).then(function(args){
		
		//console.log("Got cancel");
		
		gBatchImageExportCancelRequested = true;
		
	});	

	var modals = document.getElementsByClassName("modal_flat_main");

	var nmodals = modals.length;

	modals[nmodals-1].style.zIndex = 100001;

	// Find the OK button

	var theOKButtons = document.getElementsByClassName("modal_flat_ok");

	// Find the button that says "Cancel" to use to close the dialog when the cascade is complete
	var theOKButton = null;

	for (var i=0;i<theOKButtons.length;++i){

		theOKButton = theOKButtons[i];

		if (theOKButton.innerText == "Cancel"){

			//console.log("Found conversion cancel button");
			gTheBatchImageExportOKButton = theOKButton;

			break;

		}
	}

	// Find the status text 

	var theStatusElems = document.getElementsByClassName("modal_flat_content");
	var nStatus = theStatusElems.length;

	gTheBatchImageExportStatusText = theStatusElems[nStatus-1];
	gTheBatchImageExportStatusText.style.textAlign = "center";

	var thisTune = getTuneByIndex(currentTune);

	var title = getTuneTitle(thisTune);
	
	gTheBatchImageExportStatusText.innerHTML = "<p>Exporting "+imageFormat+" for tune "+ (currentTune+1) + " of "+totalTunesToExport+"<br/><br/>"+title+"</p>";

	// Kick off the conversion cascade
	ExportImageDialog(thisTune,callback,currentTune,false);

	return true;

}

// 
// Export Image Dialog - Used to hold SVG for batch image export
//
// callback and val are used for batch export automation
//

function ExportImageDialog(theABC,callback,val,metronome_state){

	//console.log("ExportImageDialog "+val);

	gTheOKButton = null;
	
	// Cache the tune for the exporter naming
	gPlayerABC = theABC;
	
	var instrument = GetRadioValue("notenodertab");

	var abcOptions = GetABCJSParams(instrument);

	abcOptions.oneSvgPerLine = false;	

	function initRender() {

		// Adapt the top based on the player control size
		var theTop = 40;

		var theHeight = window.innerHeight - 340;

	   	modal_msg = '<div id="playerholder" style="height:'+theHeight+'px;overflow-y:auto;margin-bottom:15px;">';

		modal_msg += '<div id="abcplayer">';			

	   	modal_msg += '<div id="playback-paper"></div>';
	   	modal_msg += '</div>';

	   	modal_msg += '</div>';

		modal_msg += '</p>';

	   	// Scale the player for larger screens
		var windowWidth = window.innerWidth;

		var instrument = GetRadioValue("notenodertab");

		var theWidth;

		if (isDesktopBrowser()){

			if (giPadTwoColumn){
				if (isLandscapeOrientation()){
					theWidth = windowWidth * (gPlayerScaling / 100);
				}
				else{
					theWidth = windowWidth * 0.9;	
				}
			}
			else{
				theWidth = windowWidth * (gPlayerScaling / 100);
			}

			if (theWidth < 850){
				theWidth = 850;
			}

		}
		else{

			theWidth = 800;  
			
		}

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: theTop, width:theWidth, okText:"Close", scrollWithPage: (isMobileBrowser()) });

		var theOKButtons = document.getElementsByClassName("modal_flat_ok");

		var theOKButton = null;

		for (var i=0;i<theOKButtons.length;++i){

			theOKButton = theOKButtons[i];

			if (theOKButton.innerText == "Close"){

				gTheOKButton = theOKButton;

				break;

			}
		}

		// Add the file header
		theABC = GetABCFileHeader() + theABC;

		var visualObj = ABCJS.renderAbc("playback-paper", theABC, abcOptions)[0];

		// Post process whistle or note name tab
		postProcessTab([visualObj], "playback-paper",instrument, true);

		// Do the next tune
		if (callback){
			setTimeout(function(){
				callback(val,gTheOKButton);
			},10);
		}

	}

	initRender();

}

//
// Reformat all the tunes by MusicXML Format roundtrip
//

function BatchMusicXMLRoundTrip(){

	// Don't allow MusicXML round trip while offline
	if (!navigator.onLine){

		var thePrompt = "Reformat Using MusicXML not available while offline.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	// Make sure there are tunes to convert
	var nTunes = CountTunes();

	// Any tunes to reformat?
	if (nTunes == 0){

		var thePrompt = "No ABC tunes to reformat.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	// Setup initial values
	const theData = {
	  reformatall: false
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Reformat Using MusicXML&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#reformatusingxml" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;margin-bottom:12px;font-size:12pt;line-height:18pt;font-family:helvetica">Click OK to reformat either the current tune or all the tunes in the ABC by exporting the tune(s) in MusicXML format and then re-import them using the current MusicXML import settings.</p>'},
	  {html: '<p style="margin-top:24px;margin-bottom:12px;font-size:12pt;line-height:18pt;font-family:helvetica">This can be useful for cleaning up notation formatting issues or changing the number of measures per stave.</p>'},
	  {html: '<p style="text-align:center;margin-top:32px;"><input style="margin-left:0px" id="configure_musicxml_import" class="btn btn-subdialog configure_musicxml_import" onclick="ConfigureMusicXMLImport()" type="button" value="MusicXML/MIDI Import Settings" title="Configure MusicXML/MIDI import settings"></p>'},	  
	  {name: "          Reformat all tunes", id: "reformatall", type:"checkbox", cssClass:"configure_xmlroundtrip_text"},
	];

	const modal = DayPilot.Modal.form(form, {}, { theme: "modal_flat_wide", top: 100, width: 600, scrollWithPage: (AllowDialogsToScroll()), okText: "Reformat",autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			if (args.result.reformatall){
			
				BatchMusicXMLRoundTripWorker();

			}
			else{

				BatchMusicXMLRoundTripCurrentTune();

			}
		}

	});
}

function BatchMusicXMLRoundTripCurrentTune(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","BatchMusicXMLRoundTripOne");

	var theSelectedTuneIndex = findSelectedTuneIndex();

	// Try to find the current tune
	var theTune = findSelectedTune();

	if (theTune == ""){
		// This should never happen
		return;
	}

	var theTitle = getTuneTitle(theTune);

	// Put up the spinner
	showTheSpinner();

	try{
		fetch(`https://seisiuneer.pythonanywhere.com/abc2xml`, {
		    method: 'POST',
		    body: theTune
		  })
		.then(response => {
		    return response.text();
		})
		.then(data => {

			data = importMusicXML(data,theTitle)

			// Stuff in the injected ABC
			var theABC = gTheABC.value;

			theABC = theABC.replace(theTune,data);

			setABCEditorText(theABC);

			if (gRawMode){

				RenderAsync(true,null,function(){
					hideTheSpinner();
				});

			}
			else{

				RenderAsync(true,theSelectedTuneIndex,function(){
					hideTheSpinner();
				});

			}

			gIsDirty = true;

		});
	}
	catch(err){
		hideTheSpinner();
	}
}

var gBatchMusicXMLRoundTripAccum = "";

function BatchMusicXMLRoundTripWorker(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","BatchMusicXMLRoundTripAll");

	var totalTunesToExport;

	function callback(theTitle,theABC){

		//console.log("callback called");

		gBatchMusicXMLRoundTripAccum += importMusicXML(theABC,theTitle);

		gBatchMusicXMLRoundTripAccum += "\n";

		nTunes--;

		if (!gBatchImageExportCancelRequested){

			if (nTunes != 0){

				setTimeout(function(){

					currentTune++;

					var thisTune = getTuneByIndex(currentTune);

					var title = getTuneTitle(thisTune);

					gTheBatchImageExportStatusText.innerHTML = "<p>Reformatting tune "+ (currentTune+1) + " of "+totalTunesToExport+"<br/><br/>"+title+"</p>";

					ExportMusicXMLForReformat(thisTune,title,callback);

				}, 250);

			}
			else{

				// We're done, close the status dialog
				gTheBatchImageExportOKButton.click();

				gBatchImageExportCancelRequested = false;

				setABCEditorText(gBatchMusicXMLRoundTripAccum);

				RenderAsync(true,null,function(){
					hideTheSpinner();
				});

				gIsDirty = true;

				clearGetTuneByIndexCache()

			}

		}
		else{

			// Take down the spinner
			hideTheSpinner();

			clearGetTuneByIndexCache();

		}
	}

	// Make sure there are tunes to convert
	var nTunes = CountTunes();

	gBatchMusicXMLRoundTripAccum =	FindPreTuneHeader(gTheABC.value);

	totalTunesToExport = nTunes;

	var currentTune = 0;

	gBatchImageExportCancelRequested = false;
	gTheBatchImageExportOKButton = null;
	gTheBatchImageExportStatusText = null;

	var thePrompt = "Formatting tune "+ (currentTune+1) + " of "+totalTunesToExport;
	
	// Center the string in the prompt
	thePrompt = makeCenteredPromptString(thePrompt);

	// Put up batch running dialog
	DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 290, scrollWithPage: (AllowDialogsToScroll()), okText:"Cancel" }).then(function(args){
		
		//console.log("Got cancel");
		
		gBatchImageExportCancelRequested = true;
		
	});	

	var modals = document.getElementsByClassName("modal_flat_main");

	var nmodals = modals.length;

	modals[nmodals-1].style.zIndex = 100001;

	// Find the OK button

	var theOKButtons = document.getElementsByClassName("modal_flat_ok");

	// Find the button that says "Cancel" to use to close the dialog when the cascade is complete
	var theOKButton = null;

	for (var i=0;i<theOKButtons.length;++i){

		theOKButton = theOKButtons[i];

		if (theOKButton.innerText == "Cancel"){

			//console.log("Found conversion cancel button");
			gTheBatchImageExportOKButton = theOKButton;

			break;

		}
	}

	// Find the status text 

	var theStatusElems = document.getElementsByClassName("modal_flat_content");
	var nStatus = theStatusElems.length;

	gTheBatchImageExportStatusText = theStatusElems[nStatus-1];
	gTheBatchImageExportStatusText.style.textAlign = "center";

	var thisTune = getTuneByIndex(currentTune);

	var title = getTuneTitle(thisTune);
	
	gTheBatchImageExportStatusText.innerHTML = "<p>Reformatting tune "+ (currentTune+1) + " of "+totalTunesToExport+"<br/><br/>"+title+"</p>";
	
	showTheSpinner();
	
	// Kick off the conversion cascade
	ExportMusicXMLForReformat(thisTune,title,callback);

	return true;

}

// 
// Convert and export one tune to MusicXML
//
function ExportMusicXMLForReformat(theABC,title,callback){
	
	fetch(`https://seisiuneer.pythonanywhere.com/abc2xml`, {
	    method: 'POST',
	    body: theABC
	  })
	.then(response => {

	    return response.text();

	  })
	  .then(data => {

	  	callback(title,data);

	  })
	  .catch(
	  	error => {
	  		
	  		console.log("ExportMusicXMLForReformat - MusicXML conversion failed on "+title);

			callback(title,"");

	  });

}


//
// Export all the tunes in ABC Format
//

function BatchABCExport(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","BatchABCExport");

	var totalTunesToExport;

	function callback(){

		//console.log("callback2 called");

		nTunes--;

		if (!gBatchImageExportCancelRequested){

			if (nTunes != 0){

				setTimeout(function(){

					currentTune++;

					var thisTune = getTuneByIndex(currentTune);

					var title = getTuneTitle(thisTune);

					gTheBatchImageExportStatusText.innerHTML = "<p>Exporting ABC for tune "+ (currentTune+1) + " of "+totalTunesToExport+"<br/><br/>"+title+"</p>";

					var fname = GetTuneAudioDownloadName(thisTune,".abc");

					ExportOneABCTune(thisTune,fname,callback,null);

				}, gBatchExportDelayMS);

			}
			else{

				// We're done, close the status dialog
				gTheBatchImageExportOKButton.click();

				gBatchImageExportCancelRequested = false;

				clearGetTuneByIndexCache();
			}
		}
		else{
			clearGetTuneByIndexCache();
		}
	}

	// Make sure there are tunes to convert
	var nTunes = CountTunes();

	if (nTunes == 0){
		return;
	}

	totalTunesToExport = nTunes;

	var currentTune = 0;

	gBatchImageExportCancelRequested = false;
	gTheBatchImageExportOKButton = null;
	gTheBatchImageExportStatusText = null;

	var thePrompt = "Exporting ABC for tune "+ (currentTune+1) + " of "+totalTunesToExport;
	
	// Center the string in the prompt
	thePrompt = makeCenteredPromptString(thePrompt);

	// Put up batch running dialog
	DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 290, scrollWithPage: (AllowDialogsToScroll()), okText:"Cancel" }).then(function(args){
		
		//console.log("Got cancel");
		
		gBatchImageExportCancelRequested = true;
		
	});	

	var modals = document.getElementsByClassName("modal_flat_main");

	var nmodals = modals.length;

	modals[nmodals-1].style.zIndex = 100001;

	// Find the OK button

	var theOKButtons = document.getElementsByClassName("modal_flat_ok");

	// Find the button that says "Cancel" to use to close the dialog when the cascade is complete
	var theOKButton = null;

	for (var i=0;i<theOKButtons.length;++i){

		theOKButton = theOKButtons[i];

		if (theOKButton.innerText == "Cancel"){

			//console.log("Found conversion cancel button");
			gTheBatchImageExportOKButton = theOKButton;

			break;

		}
	}

	// Find the status text 

	var theStatusElems = document.getElementsByClassName("modal_flat_content");
	var nStatus = theStatusElems.length;

	gTheBatchImageExportStatusText = theStatusElems[nStatus-1];
	gTheBatchImageExportStatusText.style.textAlign = "center";

	var thisTune = getTuneByIndex(currentTune);

	var title = getTuneTitle(thisTune);
	
	gTheBatchImageExportStatusText.innerHTML = "<p>Exporting ABC for tune "+ (currentTune+1) + " of "+totalTunesToExport+"<br/><br/>"+title+"</p>";
	
	var fname = GetTuneAudioDownloadName(thisTune,".abc");

	// Kick off the conversion cascade
	ExportOneABCTune(thisTune,fname, callback,null);

	return true;

}

// 
// Convert and export one tune to ABC
//
function ExportOneABCTune(theABC,fname,callback,errorCallback){
	
  	//console.log("ExportOneABCTune success!")

	var a = document.createElement("a");

	document.body.appendChild(a);

	a.style = "display: none";

	var blob = new Blob([theABC], {type: "text/plain"}),

	url = window.URL.createObjectURL(blob);
	a.href = url;
	a.download = fname;
	a.click();

	document.body.removeChild(a);

	setTimeout(function() {
	  window.URL.revokeObjectURL(url);
	}, 1000);		

	callback();

}

//
// Export all the tunes in MusicXML Format
//

function BatchMusicXMLExport(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","BatchMusicXMLExport");

	var totalTunesToExport;

	function callback(){

		//console.log("callback2 called");

		nTunes--;

		if (!gBatchImageExportCancelRequested){

			if (nTunes != 0){

				setTimeout(function(){

					currentTune++;

					var thisTune = getTuneByIndex(currentTune);

					var title = getTuneTitle(thisTune);

					gTheBatchImageExportStatusText.innerHTML = "<p>Exporting MusicXML for tune "+ (currentTune+1) + " of "+totalTunesToExport+"<br/><br/>"+title+"</p>";

					var fname = GetTuneAudioDownloadName(thisTune,".xml");

					ExportMusicXML(thisTune,fname,callback,null);

				}, 250);

			}
			else{

				// We're done, close the status dialog
				gTheBatchImageExportOKButton.click();

				gBatchImageExportCancelRequested = false;

				clearGetTuneByIndexCache();
			}
		}
		else{

			clearGetTuneByIndexCache();

		}
	}

	// Make sure there are tunes to convert
	var nTunes = CountTunes();

	if (nTunes == 0){
		return;
	}

	totalTunesToExport = nTunes;

	var currentTune = 0;

	gBatchImageExportCancelRequested = false;
	gTheBatchImageExportOKButton = null;
	gTheBatchImageExportStatusText = null;

	var thePrompt = "Exporting MusicXML for tune "+ (currentTune+1) + " of "+totalTunesToExport;
	
	// Center the string in the prompt
	thePrompt = makeCenteredPromptString(thePrompt);

	// Put up batch running dialog
	DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 290, scrollWithPage: (AllowDialogsToScroll()), okText:"Cancel" }).then(function(args){
		
		//console.log("Got cancel");
		
		gBatchImageExportCancelRequested = true;
		
	});	

	var modals = document.getElementsByClassName("modal_flat_main");

	var nmodals = modals.length;

	modals[nmodals-1].style.zIndex = 100001;

	// Find the OK button

	var theOKButtons = document.getElementsByClassName("modal_flat_ok");

	// Find the button that says "Cancel" to use to close the dialog when the cascade is complete
	var theOKButton = null;

	for (var i=0;i<theOKButtons.length;++i){

		theOKButton = theOKButtons[i];

		if (theOKButton.innerText == "Cancel"){

			//console.log("Found conversion cancel button");
			gTheBatchImageExportOKButton = theOKButton;

			break;

		}
	}

	// Find the status text 

	var theStatusElems = document.getElementsByClassName("modal_flat_content");
	var nStatus = theStatusElems.length;

	gTheBatchImageExportStatusText = theStatusElems[nStatus-1];
	gTheBatchImageExportStatusText.style.textAlign = "center";

	var thisTune = getTuneByIndex(currentTune);

	var title = getTuneTitle(thisTune);
	
	gTheBatchImageExportStatusText.innerHTML = "<p>Exporting MusicXML for tune "+ (currentTune+1) + " of "+totalTunesToExport+"<br/><br/>"+title+"</p>";
	
	var fname = GetTuneAudioDownloadName(thisTune,".xml");

	// Kick off the conversion cascade
	ExportMusicXML(thisTune,fname, callback,null);

	return true;

}

// 
// Convert and export one tune to MusicXML
//
function ExportMusicXML(theABC,fname,callback,errorCallback){
	
	fetch(`https://seisiuneer.pythonanywhere.com/abc2xml`, {
	    method: 'POST',
	    body: theABC
	  })
	.then(response => {

	    return response.text();

	  })
	  .then(data => {

	  	//console.log("ExportMusicXML success!")

		var a = document.createElement("a");

		document.body.appendChild(a);

		a.style = "display: none";

		var blob = new Blob([data], {type: "text/plain"}),

		url = window.URL.createObjectURL(blob);
		a.href = url;
		a.download = fname;
		a.click();

		document.body.removeChild(a);

		setTimeout(function() {
		  window.URL.revokeObjectURL(url);
		}, 1000);		

		callback();

	  })
	  .catch(
	  	error => {

	  		console.log("ExportMusicXML - MusicXML conversion failed on "+fname);

	  		if (errorCallback){
	  			errorCallback();
	  		}
	  		else{
				callback();
			}

	  });

}

//
// Return the CSV or JSON tune name
//
function Get_CSV_JSON_TuneName(tuneABC){

	var lines = tuneABC.split("\n"); // Split the string by new line

	for (var j = 0; j < lines.length; ++j) {

		var currentLine = lines[j].trim(); // Trim any whitespace from the line

		// Check if the line starts with "T:"
		if (currentLine.startsWith("T:")) {

			var fname = currentLine.slice(2);

			fname = fname.trim();

			return fname;

		}
	}

	// Failed to find a tune title, return a default
	return "Gan Ainm";

}
//
// Export all the tunes Share URL in a JSON file
//
function BatchJSONExport(){

	// Make sure there are tunes to convert
	var nTunes = CountTunes();

	if (nTunes == 0){
		return;
	}

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","BatchJSONExport");

	var theJSON = [];

	for (var i=0;i<nTunes;++i){

		var thisTune = getTuneByIndex(i);

		var title = Get_CSV_JSON_TuneName(thisTune);

        // If section header, strip the *
        if (title.startsWith('*')) {
            title = title.substring(1);
        }

        thisTune = GetABCFileHeader() + thisTune;

		var theURL = FillUrlBoxWithAbcInLZW(thisTune,false);

		var titleURL = title.replaceAll("&","");
		titleURL = titleURL.replaceAll(" ","_");
		titleURL = titleURL.replaceAll("#","^");

		theURL+="&name="+titleURL+"&play=1";

		theJSON.push({Name:title,URL:theURL});

	}

	var theJSONString = JSON.stringify(theJSON);

	saveTextFileDeveloper("Please enter a filename for your batch Share URL JSON file:","All_Share_URLs_JSON.txt",theJSONString);

	clearGetTuneByIndexCache();

}

//
// Export all the tunes Share URL in a CSV file
//

function escapeForCSV(str) {

    if (typeof str !== 'string') {
        return str;
    }

    // Escape double quotes by doubling them
    let escapedStr = str.replace(/"/g, '""');

    // If the string contains commas, double quotes, or newlines, wrap it in double quotes
    if (/[",]/.test(escapedStr)) {
        escapedStr = `"${escapedStr}"`;
    }

    return escapedStr;
}

function BatchCSVExport(){

	// Make sure there are tunes to convert
	var nTunes = CountTunes();

	if (nTunes == 0){
		return;
	}

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","BatchCSVExport");

	var theCSV = "Name,ShareURL\n";

	for (var i=0;i<nTunes;++i){

		var thisTune = getTuneByIndex(i);

		var title = Get_CSV_JSON_TuneName(thisTune);

		// If section header, strip the *
        if (title.startsWith('*')) {
            title = title.substring(1);
        }

        thisTune = GetABCFileHeader() + thisTune;

		var theURL = FillUrlBoxWithAbcInLZW(thisTune,false);

		var titleURL = title.replaceAll("&","");
		titleURL = titleURL.replaceAll(" ","_");
		titleURL = titleURL.replaceAll("#","^");

		theCSV += escapeForCSV(title);

		theCSV += ",";

		theURL+="&name="+titleURL+"&play=1";

		theCSV += escapeForCSV(theURL);
		
		theCSV += "\n";

	}

	saveCSVFile("Please enter a filename for your batch Share URL CSV file:","All_Share_URLs_CSV.csv",theCSV);

	clearGetTuneByIndexCache();

}


//
// Export all the tunes names as a text file
//
function ExportAllTuneTitles(){

	// Make sure there are tunes to convert
	var nTunes = CountTunes();

	if (nTunes == 0){
		return;
	}

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","ExportAllTuneTitles");

	var theTuneTitles = "";

	for (var i=0;i<nTunes;++i){

		var thisTune = getTuneByIndex(i);

		var title = Get_CSV_JSON_TuneName(thisTune);

		// If section header, strip the *
        if (title.startsWith('*')) {
            title = title.substring(1);
        }

		theTuneTitles += title;
	
		theTuneTitles += "\n";

	}

	saveTextFileDeveloper("Please enter a filename for your tune titles text file:","All_Tune_Titles.txt",theTuneTitles);

	clearGetTuneByIndexCache();

}

// 
// Download the current tune as a .WAV file
//

var gMIDIbuffer = null;
var gPlayerABC = null;
var gTheOKButton = null;
var gTheMuteHandle = null;
var gPlayMetronome = false;

//
// Return the .WAV or .MP3 filename
//
function GetTuneAudioDownloadName(tuneABC,extension){

	var lines = tuneABC.split("\n"); // Split the string by new line

	for (var j = 0; j < lines.length; ++j) {

		var currentLine = lines[j].trim(); // Trim any whitespace from the line

		// Check if the line starts with "T:"
		if (currentLine.startsWith("T:")) {

			var fname = currentLine.slice(2);

			fname = fname.trim();

			// Strip out any naughty HTML tag characters
			fname = cleanFileName(fname);

			return fname+extension;

		}
	}

	// Failed to find a tune title, return a default
	return "output"+extension;

}


//
// Is this a Jig with no specified timing?
//
function isJigWithNoTiming(tuneABC,millisecondsPerMeasure){

	var lines = tuneABC.split("\n");

	var bHasTempo = false;
	var bIsJig = false;
	var bIsSlipJig = false;
	var bIsSlide = false;

	var theMSPerMeasure  = millisecondsPerMeasure;

	for (var j = 0; j < lines.length; ++j) {

		var currentLine = lines[j].trim(); // Trim any whitespace from the line

		if (currentLine.startsWith("Q:")){

			bHasTempo = true;

		}

		if (currentLine.startsWith("M:")){

			// Is this a jig variant (meter ends with /8)?

			var theMeter = currentLine.replace("M:","");
			theMeter = theMeter.trim();

			if ((theMeter.indexOf("12/8") != -1)){
				bIsSlide = true;
				theMSPerMeasure = 2000;
			}

			if ((theMeter.indexOf("6/8") != -1)){
				bIsJig = true;
				theMSPerMeasure = 1000;
			}

			if ((theMeter.indexOf("9/8") != -1)){
				bIsSlipJig = true;
				theMSPerMeasure = 1500;
			}

		}
	}

	if ((bIsJig || bIsSlipJig || bIsSlide) && (!bHasTempo)){

		//console.log("Tempo replacement case, returning "+theMSPerMeasure);

		return theMSPerMeasure;

	}
	else{

		return millisecondsPerMeasure;

	}
}

//
// Generate and download the .wav file for the current tune
//
function DownloadWave(){

	var originalMS;

	// Keep track of export
	sendGoogleAnalytics("export","DownloadWave");

	// Fix timing bug for jig-like tunes with no tempo specified
	gMIDIbuffer.millisecondsPerMeasure  = isJigWithNoTiming(gPlayerABC,gMIDIbuffer.millisecondsPerMeasure);

	originalMS = gMIDIbuffer.millisecondsPerMeasure;

	// Adjust for the player tempo percentage
	if (gSynthControl && gSynthControl.warp){
		gMIDIbuffer.millisecondsPerMeasure *= (100 / gSynthControl.warp);
	}

	// Adjust the sample fade time if required
	var theFade = computeFade(gPlayerABC);

	gMIDIbuffer.fadeLength = theFade;

	gMIDIbuffer.prime().then((function(t) {
		
		var wavData = gMIDIbuffer.download();

		gMIDIbuffer.millisecondsPerMeasure = originalMS;

		var link = document.createElement("a");
		
		document.body.appendChild(link);
		
		link.setAttribute("style", "display: none;");
		
		link.href = wavData;
		
		link.download = GetTuneAudioDownloadName(gPlayerABC,".wav");
		
		link.click();
		
		window.URL.revokeObjectURL(wavData);
		
		document.body.removeChild(link);
		
		}
    )).catch((function(e) {

        //console.warn("Problem exporting .wav:", e)
    	// Nope, exit
		var thePrompt = "A problem occured when exporting the .wav file.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);

		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

    }));

}


//
// Batch .MP3 Export
//

var gBatchMP3ExportCancelRequested = false;
var gTheBatchMP3ExportOKButton = null;
var gTheBatchMP3ExportStatusText = null;

//
// Append additional copies of the tune notes for long MP3 generation
//
function AddDuplicatesForMp3(theTune, rhythmType, count, doClickTrack, doInjectSilence){

	// Nothing to do?
	if ((count == 1) && (!doClickTrack) && (!doInjectSilence)){
		//console.log("AddDuplicatesForMp3 - nothing to do!");
		return theTune;
	}

	theTune = theTune.trim();

	// Find the notes below the header
	var theNotes = removeABCTuneHeaders(theTune);

	theNotes = theNotes.trim();

	var theLines = theNotes.split("\n");

	var lineCount = theLines.length;

	// Should never happen...
	if (lineCount == 0){
		return theTune;
	}

	var startLine = 0;
	var bFoundMIDI = (theLines[0].indexOf("%") != -1);

	// Are there any % directives at the top of the ABC, if yes skip them
	if (bFoundMIDI){
		
		// Strip the % directive from the notes
		theNotes = theNotes.replace(theLines[startLine]+"\n","");

		startLine = 1;

		for (var i=1;i<lineCount;++i){
			
			if (theLines[i].indexOf("%") == -1){
				break;
			}

			// Strip the % directive from the notes
			theNotes = theNotes.replace(theLines[startLine]+"\n","");

			startLine++;

		}
	}

	var firstLine = theLines[startLine]; 

	// Find the offset into the tune of the first line of notes in the trimmed version
	var theNotesIndex = theTune.indexOf(firstLine);

	theTune = theTune.substring(0,theNotesIndex);

	if (doInjectSilence){

		//console.log("Adding silence for rhythm type "+rhythmType);

		switch (rhythmType){
			case "reel":
				theTune+="V:1\nV:2\nz8|z8|\nV:1\nz8|z8|\n";
				break;
			case "jig":
				theTune+="V:1\nV:2\nz6|z6|\nV:1\nz6|z6|\n";
				break;
			case "slide":
				theTune+="V:1\nV:2\nz12|\nV:1\nz12|\n";
				break;
			case "slipjig":
				theTune+="V:1\nV:2\nz9|z9|\nV:1\nz9|z9|\n";
				break;
			case "polka":
				theTune+="V:1\nV:2\nz4|z4|\nV:1\nz4|z4|\n";
				break;
			case "waltz":
				theTune+="V:1\nV:2\nz6|z6|\nV:1\nz6|z6|\n";
				break;
			default:
				theTune+="V:1\nV:2\nz8|z8|\nV:1\nz8|z8|\n";
				break;			
		}

	}

	if (doClickTrack){

		//console.log("Adding click track for rhythm type "+rhythmType);

		switch (rhythmType){
			case "reel":
				theTune+="V:1\nV:2\n%%MIDI program 128\n^Cz3 ^Cz3|^Cz3 ^Cz3|\nV:1\nz8|z8|\n";
				break;
			case "jig":
				theTune+="V:1\nV:2\n%%MIDI program 128\n^Cz2 ^Cz2|^Cz2 ^Cz2|\nV:1\nz6|z6|\n";
				break;
			case "slide":
				theTune+="V:1\nV:2\n%%MIDI program 128\n^Cz2 ^Cz2 ^Cz2 ^Cz2|\nV:1\nz12|\n";
				break;
			case "slipjig":
				theTune+="V:1\nV:2\n%%MIDI program 128\n^Cz2 ^Cz2 ^Cz2|^Cz2 ^Cz2 ^Cz2|\nV:1\nz9|z9|\n";
				break;
			case "polka":
				theTune+="V:1\nV:2\n%%MIDI program 128\n^Cz ^Cz|^Cz ^Cz|\nV:1\nz4|z4|\n";
				break;
			case "waltz":
				theTune+="V:1\nV:2\n%%MIDI program 128\n^Cz ^Cz ^Cz|^Cz ^Cz ^Cz|\nV:1\nz6|z6|\n";
				break;
			default:
				theTune+="V:1\nV:2\n%%MIDI program 128\n^Cz3 ^Cz3|^Cz3 ^Cz3|\nV:1\nz8|z8|\n";
				break;			
		}
	}

	theTune += theNotes;

	for (var i=0;i<count-1;++i){
		theTune += "\n";
		theTune += theNotes;
	}

	return theTune;
}

//
// Is this a Jig variant
//
function getTuneRhythmType(tuneABC){

	var lines = tuneABC.split("\n");

	var bIsJig = false;
	var bIsSlipJig = false;
	var bIsSlide = false;
	var bIsPolka = false;
	var bIsReel = false;
	var bIsWaltz = false;
	var bIsOddJig = false;

	for (var j = 0; j < lines.length; ++j) {

		var currentLine = lines[j].trim(); // Trim any whitespace from the line

		if (currentLine.startsWith("M:")) {

			// Is this a jig variant (meter ends with /8)?

			var theMeter = currentLine.replace("M:","");
			theMeter = theMeter.trim();

			if ((theMeter.indexOf("3/8") != -1)){
				bIsOddJig = true;
			}

			if ((theMeter.indexOf("6/8") != -1)){
				bIsJig = true;
			}

			if ((theMeter.indexOf("9/8") != -1)){
				bIsSlipJig = true;
			}

			if ((theMeter.indexOf("12/8") != -1)){
				bIsSlide = true;
			}

			if ((theMeter.indexOf("2/4") != -1)){
				bIsPolka = true;
			}

			if ((theMeter.indexOf("4/4") != -1)){
				bIsReel = true;
			}

			if ((theMeter.indexOf("3/4") != -1)){
				bIsWaltz = true;
			}

			if ((theMeter.indexOf("C") != -1)){
				bIsReel = true;
			}

		}
	}

	if (bIsJig || bIsSlide){

		//console.log("Is a jig!");
		return "jig";

	}
	if (bIsSlipJig){

		//console.log("Is a slip jig!");
		return "slipjig";

	}
	if (bIsOddJig){

		//console.log("Is an odd jig!");
		return "oddjig";

	}
	if (bIsPolka){

		//console.log("Is a polka!");
		return "polka";

	}
	if (bIsReel){

		//console.log("Is a reel!");
		return "reel";

	}
	if (bIsWaltz){

		//console.log("Is a waltz!");
		return "waltz";

	}

	// Default to reel
	return "reel";

}

//
// Batch MP3 export of all the tunes in the ABC area
//

// Milliseconds between exports
var gBatchMP3ExportDelayMS = 250; 

function BatchMP3Export(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","BatchMP3Export");

	const before_tune_actions = [
	    { name: "Do nothing", id: 0 },
	    { name: "Inject two bars of silence", id: 1 },
	    { name: "Inject a two-bar style-appropriate click intro", id: 2 },
	    { name: "Inject both two bars of silence and click intro", id: 3 }
  	];

	// Setup initial values
	const theData = {
	  configure_repeats:1,
	  configure_before_each_tune: 0,
	  configure_include_reverb:true,
	  configure_percent_speed:100
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Export All Tunes as MP3&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#export_all_as_mp3" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:24px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica">This will export all the tunes in the ABC area as .MP3 files with one or more repeats.</p>'},	  
	  {html: '<p style="margin-top:24px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica">You may optionally set the playback speed as a percentage of the original.</p>'},	  
	  {html: '<p style="margin-top:24px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica">You may also optionally inject two bars of silence and/or a click intro before each tune.</p>'},	  
	  {name: "Playback speed (percentage, default is 100):", id: "configure_percent_speed", type:"number", cssClass:"configure_repeats_form_text"}, 
	  {name: "How many times to repeat each tune in the .MP3:", id: "configure_repeats", type:"number", cssClass:"configure_repeats_form_text"}, 
	  {name: "         Include reverb effects in the .MP3", id: "configure_include_reverb", type:"checkbox", cssClass:"configure_repeats_form_text"},
	  {name: "Before each tune:", id: "configure_before_each_tune", type:"select", options:before_tune_actions, cssClass:"configure_mp3_before_tune_select"},
	  {html: '<p style="margin-top:16px;font-size:12pt;line-height:18pt;font-family:helvetica"><strong>To append two-bars of silence and/or a click intro before each tune:</strong></p>'},	  
	  {html: '<p style="margin-top:16px;font-size:12pt;line-height:18pt;font-family:helvetica">Select your option for silence and/or click intro from the <strong>Before each tune:</strong> dropdown.</p>'},	  
	  {html: '<p style="margin-top:16px;font-size:12pt;line-height:18pt;font-family:helvetica"><strong>For best results with repeated tunes:</strong></p>'},	  
	  {html: '<p style="margin-top:16px;font-size:12pt;line-height:18pt;font-family:helvetica">For clean repeats, your tunes must not have extraneous pickup or trailing notes and must have proper and complete timing.</p>'},	  
	  {html: '<p style="margin-top:16px;font-size:12pt;line-height:18pt;font-family:helvetica">If there is a repeat at the end of the first part of a tune, either standalone or in a first ending, there must be a matching |: bar at the start of the tune for the tune repeats to work properly.</p>'},	  
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 100, width: 760, scrollWithPage: (AllowDialogsToScroll()), okText: "Export",autoFocus: false } ).then(function(args){
		
		if (!args.canceled){
		
			var repeatCountStr = args.result.configure_repeats;

			if (repeatCountStr == null){
				return;
			}

			repeatCount = parseInt(repeatCountStr);

			if ((isNaN(repeatCount)) || (repeatCount == undefined)){
				return;
			}

			if (repeatCount < 1){
				return;
			}

			var beforeTuneAction = args.result.configure_before_each_tune;

			var doClickTrack = false;
			var doInjectSilence = false;

			switch (beforeTuneAction){

				case 0: // Do nothing
					doClickTrack = false;
					doInjectSilence = false;
					break;

				case 1: // Inject silence
					doClickTrack = false;
					doInjectSilence = true;
					break;

				case 2: // Inject click intro
					doClickTrack = true;
					doInjectSilence = false;
					break;

				case 3: // Inject both silence and click intro
					doClickTrack = true;
					doInjectSilence = true;
					break;

			}

			var doIncludeReverb = args.result.configure_include_reverb;

			// Get the speed percentage
			var percentSpeedStr = args.result.configure_percent_speed;

			var percentSpeed = 100;

			if (percentSpeedStr != null){

				percentSpeedStr = percentSpeedStr.replace("%","");

				var percentSpeed = parseInt(percentSpeedStr);

				if ((isNaN(percentSpeed)) || (percentSpeed == undefined)){
					percentSpeed = 100;
				}

				// Minimum speed is 5%
				if (percentSpeed <= 5){
					percentSpeed = 5;
				}

				// Maximum spped is 400%
				if (percentSpeed > 400){
					percentSpeed = 400;
				}
			}

			DoBatchMP3Export(repeatCount,doClickTrack,doInjectSilence,doIncludeReverb,percentSpeed);
		}

	});
}


function DoBatchMP3Export(repeatCount,doClickTrack,doInjectSilence,doIncludeReverb,percentSpeed){

	var totalTunesToExport;

	function callback2(theOKButton){

		//console.log("callback2 called");

		nTunes--;

		// Dismiss the player
		theOKButton.click();

		if (!gBatchMP3ExportCancelRequested){

			if (nTunes != 0){

				setTimeout(function(){

					currentTune++;

					var thisTune = getTuneByIndex(currentTune);

					var rhythmType = getTuneRhythmType(thisTune);

					thisTune = AddDuplicatesForMp3(thisTune, rhythmType, repeatCount, doClickTrack, doInjectSilence);

					thisTune = PreProcessPlayABC(thisTune);

					var title = getTuneTitle(thisTune);

					gTheBatchMP3ExportStatusText.innerHTML = "<p>Exporting .MP3 for tune "+ (currentTune+1) + " of "+totalTunesToExport+"<br/><br/>"+title+"</p>";

					PlayABCDialog(thisTune,callback,currentTune,false);

				}, gBatchMP3ExportDelayMS);

			}
			else{

				// We're done, close the status dialog
				gTheBatchMP3ExportOKButton.click();

				gBatchMP3ExportCancelRequested = false;
			}
		}
	}

	function callback(result,theOKButton){

		//debugger;

		// Set the speed
		gSynthControl.warp = percentSpeed; 

		//console.log("callback called result = "+result);
		if (doIncludeReverb){

			DownloadMP3WithReverb(callback2,theOKButton);

		}
		else{

			DownloadMP3(callback2,theOKButton);

		}

	}

	// Make sure there are tunes to convert
	var nTunes = CountTunes();

	if (nTunes == 0){
		return;
	}

	totalTunesToExport = nTunes;

	var currentTune = 0;

	gBatchMP3ExportCancelRequested = false;
	gTheBatchMP3ExportOKButton = null;
	gTheBatchMP3ExportStatusText = null;

	var thePrompt = "Exporting .MP3 for tune "+ (currentTune+1) + " of "+totalTunesToExport;
	
	// Center the string in the prompt
	thePrompt = makeCenteredPromptString(thePrompt);

	// Put up batch running dialog
	DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 290, scrollWithPage: (AllowDialogsToScroll()), okText:"Cancel" }).then(function(args){
		
		//console.log("Got cancel");
		
		gBatchMP3ExportCancelRequested = true;
		
	});	

	var modals = document.getElementsByClassName("modal_flat_main");

	var nmodals = modals.length;

	modals[nmodals-1].style.zIndex = 100001;

	// Find the OK button

	var theOKButtons = document.getElementsByClassName("modal_flat_ok");

	// Find the button that says "Cancel" to use to close the dialog when the cascade is complete
	var theOKButton = null;

	for (var i=0;i<theOKButtons.length;++i){

		theOKButton = theOKButtons[i];

		if (theOKButton.innerText == "Cancel"){

			//console.log("Found conversion cancel button");
			gTheBatchMP3ExportOKButton = theOKButton;

			break;

		}
	}

	// Find the status text 

	var theStatusElems = document.getElementsByClassName("modal_flat_content");
	var nStatus = theStatusElems.length;

	gTheBatchMP3ExportStatusText = theStatusElems[nStatus-1];
	gTheBatchMP3ExportStatusText.style.textAlign = "center";

	var thisTune = getTuneByIndex(currentTune);

	var rhythmType = getTuneRhythmType(thisTune);

	thisTune = AddDuplicatesForMp3(thisTune, rhythmType, repeatCount, doClickTrack, doInjectSilence);
	
	thisTune = PreProcessPlayABC(thisTune);

	var title = getTuneTitle(thisTune);
	
	gTheBatchMP3ExportStatusText.innerHTML = "<p>Exporting .MP3 for tune "+ (currentTune+1) + " of "+totalTunesToExport+"<br/><br/>"+title+"</p>";

	// Kick off the conversion cascade
	PlayABCDialog(thisTune,callback,currentTune,false);

	return true;

}

//
// Generate and download the .mp3 file for the current tune
//
var gInDownloadMP3 = false;

function DownloadMP3(callback,val){

	// Avoid re-entry
	if (gInDownloadMP3){
		return false;
	}

	// Keep track of export
	sendGoogleAnalytics("export","DownloadMP3");

	gInDownloadMP3 = true;

	function convertToMp3(wav){

	    var arrayBuffer = wav;
	    var buffer = new Uint8Array(arrayBuffer);
	  
	    var data = parseWav(buffer);
	    var dataSize = data.samples.length;
	    var nSamples = dataSize / 4;

	    // Create the MP3 encoder
	    var theSampleRate = data.sampleRate;
		var mp3encoder = new lamejs.Mp3Encoder(2, theSampleRate, gMP3Bitrate);
		var mp3Data = [];

		var data16 = new Int16Array(data.samples.buffer);

		//
		// Test zeroing out the first 10ms of data
		// to eliminate mp3 encoding pop
		//
		for (let i = 0; i < 882; i++) {
			data16[i] = 0;
		}

		// Calculate the length of the resulting arrays (even and odd)
		const evenLength = Math.ceil(dataSize / 2);
		const oddLength = dataSize - evenLength;

		// Create new Int16Arrays for even and odd values
		var evenArray = new Int16Array(evenLength);
		var oddArray = new Int16Array(oddLength);

		// Split the original array into even and odd arrays
		for (let i = 0; i < (nSamples*2); i++) {
		  if (i % 2 === 0) {
		    evenArray[i / 2] = data16[i];
		  } else {
		    oddArray[(i - 1) / 2] = data16[i];
		  }
		}

		var sampleBlockSize = 1152; //can be anything but make it a multiple of 576 to make encoders life easier

		for (var i = 0; i < nSamples; i += sampleBlockSize) {
		  var leftChunk = evenArray.subarray(i, i + sampleBlockSize);
		  var rightChunk = oddArray.subarray(i, i + sampleBlockSize);
		  var mp3buf = mp3encoder.encodeBuffer(leftChunk, rightChunk);
		  if (mp3buf.length > 0) {
		    mp3Data.push(mp3buf);
		  }
		}
		var mp3buf = mp3encoder.flush();   //finish writing mp3

		if (mp3buf.length > 0) {
		    mp3Data.push(mp3buf);
		}

	    return mp3Data;

	};

	function parseWav(wav) {
	  function readInt(i, bytes) {
	    var ret = 0,
	        shft = 0;

	    while (bytes) {
	      ret += wav[i] << shft;
	      shft += 8;
	      i++;
	      bytes--;
	    }
	    return ret;
	  }

	  //if (readInt(20, 2) != 1) throw 'Invalid compression code, not PCM';
	  //if (readInt(22, 2) != 1) throw 'Invalid number of channels, not 1';
	  return {
	    sampleRate: readInt(24, 4),
	    bitsPerSample: readInt(34, 2),
	    samples: wav.subarray(44)
	  };
	}

	var originalMS;

	// Fix timing bug for jig-like tunes with no tempo specified
	gMIDIbuffer.millisecondsPerMeasure  = isJigWithNoTiming(gPlayerABC,gMIDIbuffer.millisecondsPerMeasure);

	originalMS = gMIDIbuffer.millisecondsPerMeasure;

	// Adjust for the player tempo percentage
	if (gSynthControl && gSynthControl.warp){
		gMIDIbuffer.millisecondsPerMeasure *= (100 / gSynthControl.warp);
	}

	// Adjust the sample fade time if required
	var theFade = computeFade(gPlayerABC);

	gMIDIbuffer.fadeLength = theFade;

	gMIDIbuffer.prime().then(function(t) {

		if (!callback){

			var elem = document.getElementById("abcplayer_mp3button");

			if (elem){
				elem.value = "Encoding .MP3";
			}
		}
		
		showTheSpinner();

		// Give the UI a chance to update
		setTimeout(async function(){
	
			var wavDataURL = gMIDIbuffer.download();

			var wavData = await fetch(wavDataURL).then(r => r.blob());

			// Restore the buffer timing
			gMIDIbuffer.millisecondsPerMeasure = originalMS;

			var fileReader = new FileReader();

			fileReader.onload = function(event) {

				var buffer = event.target.result;

				var mp3Data = convertToMp3(buffer);

				var blob = new Blob(mp3Data, {type: 'audio/mp3'});

				var url = window.URL.createObjectURL(blob);

				var link = document.createElement("a");
				
				document.body.appendChild(link);
				
				link.setAttribute("style", "display: none;");
				
				link.href = url;
				
				link.download = GetTuneAudioDownloadName(gPlayerABC,".mp3");
				
				link.click();
				
				window.URL.revokeObjectURL(url);
				
				document.body.removeChild(link);

				if (!callback){

					var elem = document.getElementById("abcplayer_mp3button");

					if (elem){
						elem.value = "Save as .MP3";
					}

				}

				hideTheSpinner();

				gInDownloadMP3 = false;

				if (callback){
					callback(val);
				}

			};

			fileReader.readAsArrayBuffer(wavData);

		},gSpinnerDelay);
	}	
    ).catch((function(e) {

		var thePrompt = "A problem occured when exporting the .mp3 file.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);

		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		if (!callback){

			var elem = document.getElementById("abcplayer_mp3button");

			if (elem){
				elem.value = "Save as .MP3";
			}

		}

		hideTheSpinner();

		gInDownloadMP3 = false;


    }));

}

//
// Generate and download the MIDI file for the current tune
//
function DownloadMIDI(callback, val){

	// Keep track of export
	if (!callback){
		sendGoogleAnalytics("export","DownloadMIDI");
	}

	var midiData = ABCJS.synth.getMidiFile(gPlayerABC, { midiOutputType: "link" });

	var thisMIDI = midiData[0];

	thisMIDI = thisMIDI.replace('<a download','<a id="downloadmidilink" download');
    
	var link = document.createElement("div");

	link.innerHTML = thisMIDI;

	link.setAttribute("style", "display: none;");

	document.body.appendChild(link);

	var theMIDILink = document.getElementById("downloadmidilink");
	
	theMIDILink.click();
		
	document.body.removeChild(link);

	if (callback){
   		callback(val);
   	}


}

//
// Export the tune in various audio or image formats
//
function ExportAudioOrImage(){

	var modal_msg = "";
	
	var format = GetRadioValue("notenodertab");

	if (!gIsQuickEditor){

			modal_msg  = '<p style="text-align:center;font-size:20pt;font-family:helvetica">Export Audio, Image, or PDF</p>';

	}
	else{

			modal_msg  = '<p style="text-align:center;font-size:20pt;font-family:helvetica">Export Audio or Image</p>';

	}

	if (gPlayABCTuneCount > 1){
		modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:32px;">Export Single Tune Audio</p>';
	}
	else{
		modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:32px;">Export Tune Audio</p>';
	}

	modal_msg  += '<p style="text-align:center;font-size:20pt;font-family:helvetica;">';
	modal_msg += '<input id="abcplayer_wavbutton" class="abcplayer_wavbutton btn btn-wavedownload" onclick="DownloadWave();" type="button" value="Export as WAV File" title="Exports the audio for the current tune as a .WAV file">'
	modal_msg += '<input id="abcplayer_mp3button" class="abcplayer_mp3button btn btn-mp3download" onclick="DownloadMP3();" type="button" value="Export as MP3 File" title="Exports the audio for the current tune as a .MP3 file">'
	modal_msg += '<input id="abcplayer_midibutton" class="abcplayer_midibutton btn btn-mididownload" onclick="DownloadMIDI();" type="button" value="Export as MIDI File" title="Exports the current tune note events as a MIDI file">'
	modal_msg  += '</p>';

	modal_msg  += '<p style="text-align:center;font-size:20pt;font-family:helvetica;">';
	modal_msg += '<input id="abcplayer_wavreverbbutton" class="abcplayer_wavreverbbutton btn btn-wavereverbdownload" onclick="DownloadWaveWithReverb();" type="button" value="Export as WAV File with Reverb" title="Exports the audio for the current tune as a .WAV file including reverb"><input id="abcplayer_mp3reverbbutton" class="abcplayer_mp3reverbbutton btn btn-mp3reverbdownload" onclick="DownloadMP3WithReverb();" type="button" value="Export as MP3 File with Reverb" title="Exports the audio for the current tune as a .MP3 file including reverb">'
	modal_msg  += '</p>';

	if (gPlayABCTuneCount > 1){
		modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:24px;">Export Single Tune Image</p>';
	}
	else{
		modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:24px;">Export Tune Image</p>';			
	}

	modal_msg += '<p style="text-align:center;font-size:20pt;font-family:helvetica"><input id="abcplayer_jpgbutton" class="abcplayer_jpgbutton btn btn-jpgdownload" onclick="DownloadJPEG();" type="button" value="Export as JPEG File" title="Exports the current tune image as a JPEG file">'
	modal_msg += '<input id="abcplayer_pngbutton" class="abcplayer_pngbutton btn btn-pngdownload" onclick="DownloadPNG();" type="button" value="Export as PNG File" title="Exports the current tune image as a PNG file">'
	modal_msg += '<input id="abcplayer_svgbutton" class="abcplayer_svgbutton btn btn-svgdownload" onclick="DownloadSVG();" type="button" value="Export as SVG File" title="Exports the current tune image as a SVG file">'
	modal_msg  += '</p>';
	modal_msg += '<p class="export_single_text">';
	modal_msg += 'Image width to export: <input id="export_width" type="number" min="0" step="1" max="4096" title="Image width to export" autocomplete="off"/>';
	modal_msg += '</p>';

	if (!gIsQuickEditor){

		if (gPlayABCTuneCount > 1){
			modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:24px;">Export All Tunes as PDF File</p>';
			modal_msg += '<p style="text-align:center;font-size:20pt;font-family:helvetica"><input id="abcplayer_pdfbutton" class="abcplayer_pdfbutton btn btn-pdfdownload" onclick="PDFExportDialog();" type="button" value="Export All Tunes as PDF File" title="Exports all the tunes as a PDF file"></p>'
		}
		else{
			modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:24px;">Export Tune as PDF File</p>';
			modal_msg += '<p style="text-align:center;font-size:20pt;font-family:helvetica"><input id="abcplayer_pdfbutton" class="abcplayer_pdfbutton btn btn-pdfdownload" onclick="PDFExportDialog();" type="button" value="Export Tune as PDF File" title="Exports this tune as a PDF file"></p>'

		}
	}

	modal_msg += '<a id="exportaudioimage_help" href="https://michaeleskin.com/abctools/userguide.html#export_audio_image" target="_blank" style="text-decoration:none;" title="Learn more about the audio and image exporter" class="dialogcornerbutton">?</a>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 100, scrollWithPage: (AllowDialogsToScroll()) })

	document.getElementById("export_width").value = gExportWidth;

}


//
// Compute the fade to use for the samples
// My custom samples have shorter fade times for best sound
//
function computeFade(tuneABC){

	//debugger;

	var theFade = 200;

	// By default, no duration extention
	gExtendDuration = 0;

	// Is there an %abcjs_release_decay_time fade annotation?
	searchRegExp = /^%abcjs_release_decay_time.*[\r\n]*/gm

	var fadeRequested = tuneABC.match(searchRegExp);

	if ((fadeRequested) && (fadeRequested.length > 0)){

		var theFade = fadeRequested[fadeRequested.length-1].replace("%abcjs_release_decay_time","");
			
		theFade = theFade.trim();

		var theFadeValue = parseInt(theFade);

		if (!isNaN(theFadeValue)){
			//console.log("Got fade override: "+theFadeValue)
			theFade = theFadeValue;
			if (theFade > 200){
				gExtendDuration = (theFade-200) / 1000;
				//console.log("gExtendDuration: "+gExtendDuration);
			}
		}
	}

	//console.log("theFade = "+theFade);

	return theFade;
}

//
// Post-process whistle and notename tab
//
function postProcessTab(visualObj, renderDivID, instrument, bIsPlayback){

	// 
	// Hide all the leger lines on the tab staves
	//
	function hideTabLines(){
		
		var allTopLines;

		if (bIsPlayback || gIsQuickEditor){
			allTopLines = document.querySelectorAll('div[id="' + renderDivID + '"] > svg > g > g > [class="abcjs-top-line"]');
		}
		else{
			allTopLines = document.querySelectorAll('div[id="' + renderDivID + '"] > div > svg > g > g > [class="abcjs-top-line"]');
		}

		var nVis = visualObj.length;

		// Sanity check the tab replacement state
		if (nVis == 0){
			//console.log("postProcessTab: no visualObj entries");
			return;
		}

		//
		// Hide the staff lines on the tab staves
		//

		// For single tune re-renders, the visual only has one entry
		var vis = 0;

		// If there is more than one tune being rendered, find it
		if (nVis > 1){
			var vis = renderDivID.replace("notation","");
			vis = parseInt(vis);
			if (isNaN(vis)){
				//console.log("postProcessTab: bad renderDivID");
				return;
			}
		}

		var theVisual = visualObj[vis];

		var nStaffsInVisual = theVisual.lines.length;

		if (nStaffsInVisual == 0){
			//console.log("postProcessTab: no lines in visual")
			return;
		}

		var theLinesToCheck = [];

		for (var i=0;i<nStaffsInVisual;++i){

			var theStaff = theVisual.lines[i].staff;

			if (theStaff){
				theLinesToCheck.push(theVisual.lines[i]);
			}

		}

		var nLinesToCheck = theLinesToCheck.length;

		if (nLinesToCheck == 0){
			//console.log("postProcessTab: no staff lines in visual")
			return;

		}

		var theTabTopLines = [];

		for (var i=0;i<nLinesToCheck;++i){

			var theLine = theLinesToCheck[i];

			var nStaffsInLine = theLine.staff.length;

			var tabStaffIndex = nStaffsInLine/2

			for (j=0;j<nStaffsInLine;++j){

				if (j<tabStaffIndex){
					theTabTopLines.push(false);
				}
				else{
					theTabTopLines.push(true);
				}

			}

		}

		for (var x = 0; x < allTopLines.length; x++) {

			if (theTabTopLines[x]) {

				allTopLines[x].setAttribute("class", "hiddentabline");

				var theSiblings = getNextSiblings(allTopLines[x]);

				for (var y = 0; y < theSiblings.length; y++) {
					theSiblings[y].setAttribute("class", "hiddentabline");
				}

			}

		}

	}

	//console.log("postProcessTab: renderDivID = "+renderDivID);

	if (!visualObj){

		//console.log("postProcessTab: Got null visualObj");
		return;
	}

	if (instrument === "whistle") {
	    hideTabLines();

	    let Tspans;
	    const baseSelector = `div[id="${renderDivID}"] > `;
	    const svgPath = (gIsQuickEditor || bIsPlayback) ? "svg" : "div > svg";
	    Tspans = document.querySelectorAll(`${baseSelector}${svgPath} > g > g[data-name="tabNumber"] > text > tspan`);

	    const map = [
	        "g", "m", "a", "i", "b", "c", "j", "d", "k", "e", "f", "l",
	        "g", "m", "a", "i", "b", "c", "j", "D", "K", "E", "F", "L",
	        "G", "M", "A", "I", "B", "C", "J", "D", "K", "E", "F", "L",
	        "G", "M", "A"
	    ];

	    Tspans.forEach(tspan => {
	        tspan.setAttribute("class", "whistle");
	        tspan.setAttribute("dy", "-7");

	        const idx = parseInt(tspan.innerHTML);
	        if (!isNaN(idx) && idx >= 0 && idx < map.length) {
	            tspan.innerHTML = map[idx];
	        } else {
	            tspan.setAttribute("class", "whistle_small");
	            tspan.setAttribute("dy", "-23");
	            tspan.innerHTML = "x";
	        }
	    });
	}
	else
	if (instrument === "recorder") {
	    hideTabLines();

	    const selector = gIsQuickEditor || bIsPlayback
	        ? `div[id="${renderDivID}"] > svg > g > g[data-name="tabNumber"] > text > tspan`
	        : `div[id="${renderDivID}"] > div > svg > g > g[data-name="tabNumber"] > text > tspan`;

	    const Tspans = document.querySelectorAll(selector);

      var fingeringMap;

      if (!gRecorderFingeringGerman){

        // Baroque recorder fingering
  	    fingeringMap = [
  	        "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=", 
            "q", "w", "e", "r", "T", "y", "u", "i", "o", "p", "[", "]", 
            "a", "s", "d", "f", "g", "h","j", "k"
  	    ];

      }
      else{

        // German recorder fingering
        fingeringMap = [
            "1", "2", "3", "4", "5", "%", "/", "8", "&", "0", "-", "=", 
            "q", "w", "e", "r", "T", "?", "{", "i", "}", "p", "[", "]", 
            "a", "A", "D", "f", "g", "h", "j", "k"
        ];

      }

	    Tspans.forEach(tspan => {
	        let val = parseInt(tspan.innerHTML, 10);
	        tspan.setAttribute("class", "recorder");
	        tspan.setAttribute("dy", "-8");

	        if (!isNaN(val) && val >= 0 && val < fingeringMap.length) {
	            tspan.innerHTML = fingeringMap[val];
	        } else {
	            tspan.setAttribute("class", "whistle_small");
	            tspan.setAttribute("dy", "-23");
	            tspan.innerHTML = "x";
	        }
	    });
	}
	else
	if (instrument === "notenames") {
	    hideTabLines();
	    let useSharps = true;
	    let Svgs = document.querySelectorAll(
	        bIsPlayback || gIsQuickEditor
	            ? `div[id="${renderDivID}"] > svg`
	            : `div[id="${renderDivID}"] > div > svg`
	    );

	    const nSVGsRequired = bIsPlayback || gIsQuickEditor ? 0 : 1;
	    if (!Svgs || Svgs.length <= nSVGsRequired) return;

	    const mappings = {
	        sharps: [
	            "G,", "G♯,", "A,", "A♯,", "B,", "C", "C♯", "D", "D♯", "E", "F", "F♯", "G", "G♯", "A", "A♯", "B",
	            "c", "c♯", "d", "d♯", "e", "f", "f♯", "g", "g♯", "a", "a♯", "b", "c'", "c♯'", "d'", "d♯'", "e'",
	            "f'", "f♯'", "g'", "g♯'", "a'", "a♯'", "b'"
	        ],
	        flats: [
	            "G,", "A♭,", "A,", "B♭,", "B,", "C", "D♭", "D", "E♭", "E", "F", "G♭", "G", "A♭", "A", "B♭", "B",
	            "c", "d♭", "d", "e♭", "e", "f", "g♭", "g", "a♭", "a", "b♭", "b", "c'", "d♭'", "d'", "e♭'", "e'",
	            "f'", "g♭'", "g'", "a♭'", "a'", "b♭'", "b'"
	        ],
	        comhaltas: {
	            sharps: [
	                "G,", "G♯,", "A,", "A♯,", "B,", "C,", "C♯,", "D", "D♯", "E", "F", "F♯", "G", "G♯", "A", "A♯", "B",
	                "C", "C♯", "D'", "D♯'", "E'", "F'", "F♯'", "G'", "G♯'", "A'", "A♯'", "B'", "C'", "C♯'", "D''",
	                "D♯''", "E''", "F''", "F♯''", "G''", "G♯''", "A''", "A♯''", "B''"
	            ],
	            flats: [
	                "G,", "A♭,", "A,", "B♭,", "B,", "C,", "D♭", "D", "E♭", "E", "F", "G♭", "G", "A♭", "A", "B♭", "B",
	                "C", "D♭", "D'", "E♭'", "E'", "F'", "G♭'", "G'", "A♭'", "A'", "B♭'", "B'", "C'", "D♭'", "D''",
	                "E♭''", "E''", "F''", "G♭''", "G''", "A♭''", "A''", "B♭''", "B''"
	            ]
	        }
	    };

	    for (let i = nSVGsRequired; i < Svgs.length; i++) {
	        const svg = Svgs[i];
	        const keySig = svg.querySelector('g[data-name="staff-extra key-signature"]');
	        if (keySig?.innerHTML.includes("accidentals.flat")) {
	            useSharps = false;
	        }

	        const Tspans = svg.querySelectorAll('g[data-name="tabNumber"] > text > tspan');
	        const useMap = gUseComhaltasABC || gForceComhaltasABC
	            ? mappings.comhaltas[useSharps ? "sharps" : "flats"]
	            : mappings[useSharps ? "sharps" : "flats"];

	        Tspans.forEach(tspan => {
	            const idx = parseInt(tspan.innerHTML, 10);
	            tspan.innerHTML = useMap[idx] || "?";
	        });
	    }
	}
}

//
// Toggle the metronome version of the tune;
//
function ToggleMetronome(){

	gPlayMetronome = !gPlayMetronome;

  // Persist metronome
  if (gLocalStorageAvailable){
    
    localStorage.PlayMetronome = gPlayMetronome;

  }

	gTheOKButton.click();

	setTimeout(function() {

		if (gPlayMetronome){

			var testVal = inject_one_metronome(gPlayerABC, false);

			// Injection failed due to unsupported meter
			if (!testVal){

				gPlayMetronome = false; 

			  var modal_msg  = '<p style="text-align:center;font-size:20pt;font-family:helvetica">Metronome Not Available for this Meter</p>';
			 	modal_msg += '<p style="font-size:14pt;line-height:20pt;font-family:helvetica;">No metronome pattern is available for the meter of this tune.</p>';
			 	modal_msg += '<p style="font-size:14pt;line-height:20pt;font-family:helvetica;">Only the original version can be played.</p>';

				DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) }).then(
					function(){
						PlayABCDialog(gPlayerABC,null,null,false);
					});

        // Persist metronome
        if (gLocalStorageAvailable){
          
          localStorage.PlayMetronome = false;

        }
				return;

			}

			// Launch the player with the metronome injected tune
			PlayABCDialog(gPlayerABC,null,null,gPlayMetronome);

		}
		else{

			// Launch the original tune
			PlayABCDialog(gPlayerABC,null,null,gPlayMetronome);

		}

	},250);

}

//
// Zoom the player
// 
function ZoomPlayer(doZoomIn){

	gPlayerScaling = parseInt(gPlayerScaling);

	if (!isNaN(gPlayerScaling)){

		if (doZoomIn){
			gPlayerScaling += 10;
			if (gPlayerScaling > 100){
				gPlayerScaling = 100;
			}
		}
		else{
			gPlayerScaling -= 10;
			if (gPlayerScaling < 50){
				gPlayerScaling = 50;
			}
		}

		if (gLocalStorageAvailable){
			// Save player scaling
			localStorage.PlayerScaling = gPlayerScaling;
		}

	}
	else{
		if (gIsIPad){
			gPlayerScaling = 60;
		}
		else{
			gPlayerScaling = 50;
		}
	}

	gTheOKButton.click();

	// Try to find the current tune
	var theSelectedABC = getTuneByIndex(gPlayABCTuneIndex);

	if (theSelectedABC == ""){
		// This should never happen
		return;
	}

	// Pre-process the ABC to inject any requested programs or volumes
	theSelectedABC = PreProcessPlayABC(theSelectedABC);

	setTimeout(function() {

		// Launch the modified tune
		PlayABCDialog(theSelectedABC,null,null,gPlayMetronome);

	},250);		

}

//
// Show the player settings, reload player if changes made
//
function ShowPlayerSettings(){

	function player_settings_callback(doReload){

		if (doReload){

			gTheOKButton.click();

			// Try to find the current tune
			var theSelectedABC = getTuneByIndex(gPlayABCTuneIndex);

			if (theSelectedABC == ""){
				// This should never happen
				return;
			}

			// Pre-process the ABC to inject any requested programs or volumes
			theSelectedABC = PreProcessPlayABC(theSelectedABC);

			setTimeout(function() {

				// Launch the modified tune
				PlayABCDialog(theSelectedABC,null,null,gPlayMetronome);

			},250);		
		}
	}

	// Show the player settings
	ConfigurePlayerSettings(player_settings_callback);

}

//
// Shared player cursor control
//
var gPlayerContainerRect = null;
var gPlayerHolder = null;

function throttle(func, limit) {

	let inThrottle;
	return function(...args) {
		if (!inThrottle) {
			func.apply(this, args);
			inThrottle = true;
			setTimeout(() => (inThrottle = false), limit);
		}
	};
	
}

function smoothWindowScrollBy(x, y) {
	//console.log("smoothWindowScrollBy");
	window.scrollBy({
		top: y,
		left: x,
		behavior: 'smooth',
	});
}

function smoothElementScrollTo(elem, x, y) {
	//console.log("smoothElementScrollTo");
	elem.scrollTo({
		top: y,
		left: x,
		behavior: 'smooth',
	});
}

// Throttle the scrollBy function 
const throttledWindowScrollBy = throttle(smoothWindowScrollBy, 200);

// Throttle the scrollTo function 
const throttledElementScrollTo = throttle(smoothElementScrollTo, 200);

function CursorControl() {

	var self = this;

	var cursorLastScroll = -1000;

	var SCROLLTHRESHOLD = 48;

	self.onReady = function() {
	};

	self.onStart = function() {

		var svg = document.querySelector("#playback-paper svg");

		var cursor = document.querySelector("#playback-paper svg .abcjs-cursor");

		if (!cursor){

			cursor = document.createElementNS("http://www.w3.org/2000/svg", "line");
			cursor.setAttribute("class", "abcjs-cursor");
			cursor.setAttributeNS(null, 'x1', 0);
			cursor.setAttributeNS(null, 'y1', 0);
			cursor.setAttributeNS(null, 'x2', 0);
			cursor.setAttributeNS(null, 'y2', 0);
			svg.appendChild(cursor);

		}

	};

	self.beatSubdivisions = 2;

	self.onBeat = function(beatNumber, totalBeats, totalTime) {
	};

	self.onEvent = function(ev) {

		if (ev.measureStart && ev.left === null)
			return; // this was the second part of a tie across a measure line. Just ignore it.

		if (!gDisablePlayHighlight){

			var lastSelection = document.querySelectorAll("#playback-paper svg .highlight");
			for (var k = 0; k < lastSelection.length; k++)
				lastSelection[k].classList.remove("highlight");

			for (var i = 0; i < ev.elements.length; i++ ) {
				var note = ev.elements[i];
				for (var j = 0; j < note.length; j++) {

					if (gOnlyHighlightV1){
						// Only highlight first voice events 
						if (note[j].classList.contains("abcjs-v0")){
							note[j].classList.add("highlight");
						}
					}
					else{
						note[j].classList.add("highlight");
					}

				}
			}
		}

		var cursor = document.querySelector("#playback-paper svg .abcjs-cursor");

		if (cursor) {

			cursor.setAttribute("x1", ev.left - 2);
			cursor.setAttribute("x2", ev.left - 2);
			cursor.setAttribute("y1", ev.top);
			cursor.setAttribute("y2", ev.top + ev.height);

			if (gAutoscrollPlayer){

				// Get the SVG element's position relative to the container
				const svgRect = cursor.getBoundingClientRect();

				var containerHeight = gPlayerContainerRect.bottom-gPlayerContainerRect.top;

				// Keep several lines visible under the currently playing line

				// Scroll target is now user controllable
				var theScrollTarget = containerHeight*(gAutoscrollTarget/100);

			 	var forceScroll = false;
			 	if ((svgRect.bottom < gPlayerContainerRect.top) || (svgRect.top > gPlayerContainerRect.bottom)){
			 		//console.log("Force case!");
			 		forceScroll = true;
			 	}

				// Check if the SVG element is above or below the container's visible area
				if (svgRect.top < gPlayerContainerRect.top) {

					//console.log("top case");

					// Scroll up to make the SVG element visible at the top

					var theScroll = gPlayerHolder.scrollTop + svgRect.top - gPlayerContainerRect.top;

				 	var delta = cursorLastScroll - theScroll;

				 	if (delta < 0){
				 		delta = -delta;
				 	}
					 
				 	// if (delta != 0){
				 	// 	console.log("delta: "+delta);
				 	// }

					if ((delta > SCROLLTHRESHOLD) || forceScroll){

						if (gAutoscrollSmooth){

							throttledElementScrollTo(gPlayerHolder,0,theScroll);

						}
						else{

							gPlayerHolder.scrollTop = theScroll;

						}

						if (!forceScroll){
							cursorLastScroll = theScroll;
						}

					}

				} else if (svgRect.bottom > theScrollTarget) {

					//console.log("bottom case");

					var cursorHeight = svgRect.bottom - svgRect.top;

					//console.log("cursorHeight "+cursorHeight+" scrollTarget "+theScrollTarget);

					// This prevents very tall scores from jumping up and down on each cursor event
					if (cursorHeight <= theScrollTarget){
						
						//console.log("normal case");

						// Scroll down to make the SVG element visible at the bottom with additional space underneath
						var theScroll = gPlayerHolder.scrollTop + svgRect.bottom - theScrollTarget;

					 	var delta = cursorLastScroll - theScroll;

					 	if (delta < 0){
					 		delta = -delta;
					 	}

					 	// if (delta != 0){
					 	// 	console.log("delta: "+delta);
					 	// }
						
						if ((delta > SCROLLTHRESHOLD) || forceScroll) {

							if (gAutoscrollSmooth){

								throttledElementScrollTo(gPlayerHolder,0,theScroll);

						 	}
						 	else{

						 		gPlayerHolder.scrollTop = theScroll;

						 	}

							if (!forceScroll){
								cursorLastScroll = theScroll;
							}
						}
					}
					else{

						//console.log("override case");

						// Scroll down to make the SVG element visible at the bottom with additional space underneath
						var theScroll = gPlayerHolder.scrollTop + svgRect.top - gPlayerContainerRect.top;

					 	var delta = cursorLastScroll - theScroll;

					 	if (delta < 0){
					 		delta = -delta;
					 	}

					 	// if (delta != 0){
					 	// 	console.log("delta: "+delta);
					 	// }

					 	if ((delta > SCROLLTHRESHOLD) || forceScroll) {

							if (gAutoscrollSmooth){

								throttledElementScrollTo(gPlayerHolder,0,theScroll);

							}
							else{

								gPlayerHolder.scrollTop = theScroll;

							}

							if (!forceScroll){
								cursorLastScroll = theScroll;
							}

						}
					}
				}
			}
		}
	};

	self.onFinished = function() {
		var els = document.querySelectorAll("svg .highlight");
		for (var i = 0; i < els.length; i++ ) {
			els[i].classList.remove("highlight");
		}
		var cursor = document.querySelector("#playback-paper svg .abcjs-cursor");
		if (cursor) {
			cursor.setAttribute("x1", 0);
			cursor.setAttribute("x2", 0);
			cursor.setAttribute("y1", 0);
			cursor.setAttribute("y2", 0);
		}
	};

}

//
// MAE 15 Jul 2024 - For quick editor
//
function CursorControlOneTune() {

	var self = this;

	self.onReady = function() {
	};

	self.onStart = function() {
		var svg = document.querySelector("#notation0 svg");

		var cursor = document.querySelector("#notation0 svg .abcjs-cursor");

		if (!cursor){

			cursor = document.createElementNS("http://www.w3.org/2000/svg", "line");
			cursor.setAttribute("class", "abcjs-cursor");
			cursor.setAttributeNS(null, 'x1', 0);
			cursor.setAttributeNS(null, 'y1', 0);
			cursor.setAttributeNS(null, 'x2', 0);
			cursor.setAttributeNS(null, 'y2', 0);
			svg.appendChild(cursor);

		}

	};

	self.beatSubdivisions = 2;

	self.onBeat = function(beatNumber, totalBeats, totalTime) {
	};

	self.onEvent = function(ev) {

		if (ev.measureStart && ev.left === null)
			return; // this was the second part of a tie across a measure line. Just ignore it.

		// Allow note highlighting if not in raw mode
		if (!gRawMode){

			if (!gDisablePlayHighlight){

				var lastSelection = document.querySelectorAll("#notation0 svg .highlight");
				for (var k = 0; k < lastSelection.length; k++)
					lastSelection[k].classList.remove("highlight");

				for (var i = 0; i < ev.elements.length; i++ ) {
					var note = ev.elements[i];
					for (var j = 0; j < note.length; j++) {

						if (gOnlyHighlightV1){
							// Only highlight first voice events 
							if (note[j].classList.contains("abcjs-v0")){
								note[j].classList.add("highlight");
							}
						}
						else{
							note[j].classList.add("highlight");
						}

					}
				}
			}
		}

		var cursor = document.querySelector("#notation0 svg .abcjs-cursor");

		if (cursor) {

			cursor.setAttribute("x1", ev.left - 2);
			cursor.setAttribute("x2", ev.left - 2);
			cursor.setAttribute("y1", ev.top);
			cursor.setAttribute("y2", ev.top + ev.height);

			// Don't try to autoscroll cursors larger than the notation bounding rect
			if (gAutoscrollPlayer){

				// Only autoscroll if two column or full screen
				if ((!gIsOneColumn) || (gIsOneColumn && gIsMaximized)){

					// Get the SVG element's position relative to the container
					const svgRect = cursor.getBoundingClientRect();

					var containerHeight = window.innerHeight;

					// Keep several lines visible under the currently playing line
					// Scroll target is now user controllable
					var theScrollTarget = containerHeight*(gAutoscrollTarget/100);

					//console.log("top: "+svgRect.top);

					// Check if the SVG element is above or below the container's visible area
					if (svgRect.top < 0) {

						//console.log("top case");

						// Scroll up to make the SVG element visible at the top
						if (gAutoscrollSmooth){

						 	throttledWindowScrollBy(0,svgRect.top-32);
						 	
						}
						else{

							window.scrollBy(0,svgRect.top-32); 

						}

					} else if (svgRect.bottom > theScrollTarget) {

						//console.log("bottom case");

						var cursorHeight = svgRect.bottom - svgRect.top;

						//console.log("cursorHeight "+cursorHeight+" scrollTarget "+theScrollTarget);

						// This prevents very tall scores from jumping up and down on each cursor event
						if (cursorHeight <= theScrollTarget){
							
							//console.log("normal case");

							if (gAutoscrollSmooth){

						 		throttledWindowScrollBy(0,svgRect.bottom - theScrollTarget);

							}
							else{

								// Scroll down to make the SVG element visible at the bottom with additional space underneath
								window.scrollBy(0,svgRect.bottom - theScrollTarget);

							}
						}
						else{

							//console.log("override case");

							// Scroll up to make the SVG element visible at the top
							if (gAutoscrollSmooth){

						 		throttledWindowScrollBy(0,svgRect.top-32);

							}
							else{

								window.scrollBy(0,svgRect.top-32);

							}
						}
					}
				}
			}
		}
	};

	self.onFinished = function() {

		if (!gRawMode){
			var els = document.querySelectorAll("svg .highlight");
			for (var i = 0; i < els.length; i++ ) {
				els[i].classList.remove("highlight");
			}
		}
		
		var cursor = document.querySelector("#notation0 svg .abcjs-cursor");
		
		if (cursor) {
			cursor.setAttribute("x1", 0);
			cursor.setAttribute("x2", 0);
			cursor.setAttribute("y1", 0);
			cursor.setAttribute("y2", 0);
		}
	};

}

//
// Find the largest rectangle of a specific aspect ratio that fit in another rectangle
//
function findLargestRectangle(containerWidth, containerHeight, targetAspectRatio) {

	// console.log("findLargestRectangle containerWidth: "+containerWidth+" containerHeight: "+containerHeight+" targetAspectRatio: "+targetAspectRatio);

    // Initialize variables to store the best rectangle found
    var bestRectangle = { width: 0, height: 0 };

    // Iterate through all possible rectangle widths
    for (var width = 1; width <= containerWidth; width++) {

        // Calculate corresponding height based on the target aspect ratio
        var height = width / targetAspectRatio;

        // Ensure the calculated height is within the container bounds
        if (height <= containerHeight) {
                          
            // console.log("best width: "+width);
            // console.log("best height: "+height);

	        bestRectangle.width = width;
	        
	        bestRectangle.height = height;

        }
    }

    return bestRectangle;
}

// 
// Play the previous tune
//
// Shift click goes to the first tune
//
function PlayPrevious(e){

	if (gPlayABCTuneIndex > 0){

		if (e.shiftKey){
			gPlayABCTuneIndex = 0;
		}
		else{ 
			gPlayABCTuneIndex--;
		}

		// Try to find the current tune
		var theSelectedABC = getTuneByIndex(gPlayABCTuneIndex);

		if (theSelectedABC == ""){
			// This should never happen
			return;
		}

		// Close the current player
		gTheOKButton.click();

		// Pre-process the ABC to inject any requested programs or volumes
		theSelectedABC = PreProcessPlayABC(theSelectedABC);

		// Play back locally in-tool	
		PlayABCDialog(theSelectedABC,null,null,gPlayMetronome);
	}
}
// 
// Play the next tune
//
// Shift click goes to the last tune
//
function PlayNext(e){

	if (gPlayABCTuneIndex < (gPlayABCTuneCount-1)){

		if (e.shiftKey){
			gPlayABCTuneIndex = gPlayABCTuneCount-1;
		}
		else{ 
			gPlayABCTuneIndex++;
		}

		// Try to find the current tune
		var theSelectedABC = getTuneByIndex(gPlayABCTuneIndex);

		if (theSelectedABC == ""){
			// This should never happen
			return;
		}

		// Close the current tune
		gTheOKButton.click();

		// Pre-process the ABC to inject any requested programs or volumes
		theSelectedABC = PreProcessPlayABC(theSelectedABC);

		// Play back locally in-tool	
		PlayABCDialog(theSelectedABC,null,null,gPlayMetronome);
	}
}

// 
// Play a selected tune from the player tune name dropdown
//
function PlaySelectedTune(){

	// Get the selected tune index
	var val = document.getElementById("playertunelist").value;

	val = parseInt(val);

	if (isNaN(val)){
		return;
	}

	gPlayABCTuneIndex = val;

	// Try to find the current tune
	var theSelectedABC = getTuneByIndex(gPlayABCTuneIndex);

	if (theSelectedABC == ""){
		// This should never happen
		return;
	}

	// Close the current tune
	gTheOKButton.click();

	// Pre-process the ABC to inject any requested programs or volumes
	theSelectedABC = PreProcessPlayABC(theSelectedABC);

	// Play back locally in-tool	
	PlayABCDialog(theSelectedABC,null,null,gPlayMetronome);

}

//
// Find just the notes of a tune
//
function JustTheNotes(theTune){

	// Don't inject section header tune fragments
	if (isSectionHeader(theTune)){
		return theTune;
	}

	var theOriginalTune = theTune;

	// Find the notes below the header
	var theNotes = removeABCTuneHeaders(theTune);

	var theLines = theNotes.split("\n");

	// Find the first line that doesn't start with a comment
	var nLines = theLines.length;

	var firstLine;
	var bGotNotes = false;

	for (var i=0;i<nLines;++i){

		firstLine = theLines[i];

		if (firstLine.indexOf("%") != 0){
			bGotNotes = true;
			var theFirstLineIndex = theNotes.indexOf(firstLine);
			theNotes = theNotes.substring(theFirstLineIndex);
			break;
		} 
	}

	// Didn't find anything below the header, exit early
	if (!bGotNotes){

		return(theOriginalTune);

	}

	return theNotes;
}

//
// See if there is a select region for the tune and return partial ABC version
//
function ProcessSelectRegionForPlay(theABC){

	//console.log("ProcessSelectRegionForPlay");

	// Allow disable from the advanced settings dialog
	if (gDisableSelectedPlay){
		return theABC;
	}

	// Never process selections in full screen mode
	if (gIsMaximized){
		return theABC;
	}

	var start = gTheABC.selectionStart;
	var end = gTheABC.selectionEnd;

	// No selection region, just return the entire tune
	if (start == end){
		return theABC;
	}
	
	// Doesn't work for multivoice tunes
	if (theABC.indexOf("V:")!= -1){
		return theABC;
	}

	var theTuneOffset = findTuneOffsetByIndex(gPlayABCTuneIndex);
	var length = theABC.length;
	
	//console.log("theTuneOffset: "+theTuneOffset+" start: "+start+" end: "+end+" length: "+length);

	//console.log("before \n"+theABC)

	// Find the notes below the header
	var theNotes = JustTheNotes(theABC);

	//console.log("after \n"+theNotes)

	//debugger;

	if (start < theTuneOffset){
		start = theTuneOffset;
	}

	if (end > (theTuneOffset + length)){
		end = (theTuneOffset + length);
	}

	// Get the start and end relative to the tune
	start -= theTuneOffset;
	end -= theTuneOffset;

	// Get the offset to the notes in the tune
	var notesOffset = theABC.indexOf(theNotes);

	// If there are headers in the ABC, then the indexOf will fail
	// since they were stripped. Return the whole tune.
	if (notesOffset == -1){
		return theABC;
	}

	// If the selection is entirely in the header, return the whole tune
	if ((start < notesOffset) && (end < notesOffset)){
		return theABC;
	}
	
	//console.log("notesOffset: "+notesOffset);

	// If the selection start is in the header, bump it to the start of the ntoes
	if (start < notesOffset){

		start = notesOffset;

	}

	// Make the start and end relative to the notes
	start -= notesOffset;
	end -= notesOffset;

	//console.log("adjusted start: "+start+" end: "+end);

	// Can't have a starting line with just a blank line
	var onlyTheNotes = theNotes.substring(start,end);

	onlyTheNotes = onlyTheNotes.trim();

	if (onlyTheNotes.indexOf("\n") == 0){
		onlyTheNotes = onlyTheNotes.substring(1,onlyTheNotes.length);
		onlyTheNotes = onlyTheNotes.trim();
	}

	// Return the header plus the selected notes
	var output = theABC.substring(0,notesOffset)+onlyTheNotes;
	
	return output;

}

//
// Deactivate the Quick Editor player
//

function deactivateQuickPlayer(){

	if (gIsQuickEditor){
		// Turn off raw mode if required
		if (gRawMode){

			gSuppressQuickPlayer = true;

			ToggleRawMode();

			gSuppressQuickPlayer = false;

		}

		// Clean up last play operation
		gMIDIbuffer = null;

		// If on iOS and the muting controller installed, dispose it now
		if (gIsIOS){

			if (gTheMuteHandle){
			 	gTheMuteHandle.dispose();
					gTheMuteHandle = null;
				}
		}

		if (gSynthControl){
				
			gSynthControl.destroy();

			gSynthControl = null;

		}	

		document.getElementById("playback-audio-inline").innerHTML = "";

		gCurrentTune = -1;

	}
}

//
// Play the ABC
//
function PlayABC(e){

	if (gAllowCopy){

		// Clean up any inline session in process
		if (gIsQuickEditor){

			if (gRawMode){

				// Player not allowed in QuickEditor raw mode
				return;
			}
		}

		// Deactivate Quick Player 
		deactivateQuickPlayer();

		var theSelectedABC;

		if (gIsMaximized){

			if (!gPlayABCGotMaximizedPlay){

				// Try to find the current tune
				var theSelectedABC = findSelectedTune();

				if (theSelectedABC == ""){
					// This should never happen
					return;
				}

				// Get the current tune index and tune count
				gPlayABCTuneIndex = findSelectedTuneIndex();
				gPlayABCTuneCount = CountTunes();

				gPlayABCGotMaximizedPlay = true;

			}
			else{

				// Try to find the current tune
				theSelectedABC = getTuneByIndex(gPlayABCTuneIndex);

				if (theSelectedABC == ""){
					// This should never happen
					return;
				}
			}
		}
		else{
			// If shift key click on play, open the Tune Trainer
			if (e && e.shiftKey){
				TuneTrainer(false);
				return;
			}
			else
			// Select random tune if user clicks play with the alt keys pressed
			if (e && e.altKey){

				gPlayABCTuneCount = CountTunes();

				gPlayABCTuneIndex = Math.floor(Math.random() * gPlayABCTuneCount);

				theSelectedABC = getTuneByIndex(gPlayABCTuneIndex);

				if (theSelectedABC == ""){
					// This should never happen
					return;
				}

			}
			else{

				// Try to find the current tune
				theSelectedABC = findSelectedTune();

				if (theSelectedABC == ""){
					// This should never happen
					return;
				}

				// Get the current tune index and tune count
				gPlayABCTuneIndex = findSelectedTuneIndex();
				gPlayABCTuneCount = CountTunes();

				// Fixup weird case of not being to find a selected tune when there are tunes present
				// Sometimes happens after a paste
				if (gPlayABCTuneIndex == -1){

					//console.log("PlayABC - bad index case");
					
					gPlayABCTuneIndex = 0;

					theSelectedABC = getTuneByIndex(gPlayABCTuneIndex);
					
				}
				
			}

			gPlayABCGotMaximizedPlay = false;

		}

		// See if there is a select region and return the partial tune
		theSelectedABC = ProcessSelectRegionForPlay(theSelectedABC);

		// Pre-process the ABC to inject any requested programs or volumes
		theSelectedABC = PreProcessPlayABC(theSelectedABC);

		// Play back locally in-tool	
		PlayABCDialog(theSelectedABC,null,null,gPlayMetronome);

	}
}

// 
// Tune Play Dialog
//
// callback and val are used for batch export automation
//

function PlayerSetupCommon(theABC){

	//console.log("PlayerSetupCommon");

	var soundFontRequested = ScanTuneForSoundFont(theABC);

	if (soundFontRequested){

		var theOriginalSoundFont = gTheActiveSoundFont;

		switch (soundFontRequested){
			case "fluid":
				gTheActiveSoundFont = "https://paulrosen.github.io/midi-js-soundfonts/FluidR3_GM/";
				break;
			case "musyng":
				gTheActiveSoundFont = "https://paulrosen.github.io/midi-js-soundfonts/MusyngKite/";
				break;
			case "fatboy":
				//gTheActiveSoundFont = "https://paulrosen.github.io/midi-js-soundfonts/FatBoy/";
	    		gTheActiveSoundFont =  "https://michaeleskin.com/abctools/soundfonts/fatboy_4/";
				break;
			case "canvas":
				gTheActiveSoundFont = "https://michaeleskin.com/abctools/soundfonts/canvas/";
				break;
			case "mscore":
				gTheActiveSoundFont = "https://michaeleskin.com/abctools/soundfonts/mscore_2/";
				break;
			case "arachno":
				gTheActiveSoundFont = "https://michaeleskin.com/abctools/soundfonts/arachno_3/";
				break;
			case "fluidhq":
				gTheActiveSoundFont = "https://michaeleskin.com/abctools/soundfonts/fluidhq_1/";
				break;
		}

		// New soundfont requested, clear the cache
		if (gTheActiveSoundFont != theOriginalSoundFont){
			
			// Clear the soundfont cache
			gSoundsCacheABCJS = {};

		}

	}
	else{

		// No sound font requested, lets see if the current font is the user default
		if (gTheActiveSoundFont != gDefaultSoundFont){

			gTheActiveSoundFont = gDefaultSoundFont;

			// Clear the soundfont cache
			gSoundsCacheABCJS = {};

		}
	}

	// Is there a GM instrument override request in the tune?
	ScanTuneForGMOverride(theABC);

	var bodhranPitchRequested = ScanTuneForBodhranPitch(theABC);

	if (bodhranPitchRequested){

		var theOriginalBodhranPitch = gTheActiveBodhranPitch;

		gTheActiveBodhranPitch = bodhranPitchRequested;

		// New soundfont requested, clear the cache
		if (gTheActiveBodhranPitch != theOriginalBodhranPitch){
			
			// Clear the soundfont cache
			gSoundsCacheABCJS = {};

		}

	}
	else{

		// No sound font requested, lets see if the current font is the user default
		if (gTheActiveBodhranPitch != gDefaultBodhranPitch){

			gTheActiveBodhranPitch = gDefaultBodhranPitch;

			// Clear the soundfont cache
			gSoundsCacheABCJS = {};

		}
	}

	var banjoStyleRequested = ScanTuneForBanjoStyle(theABC);

	if (banjoStyleRequested){

		var theOriginalBanjoStyle = gTheActiveBanjoStyle;

		gTheActiveBanjoStyle = banjoStyleRequested;

		// New soundfont requested, clear the cache
		if (banjoStyleRequested != theOriginalBanjoStyle){
			
			// Clear the soundfont cache
			gSoundsCacheABCJS = {};

		}

	}
	else{

		// No sound font requested, lets see if the current font is the user default
		if (gTheActiveBanjoStyle != gDefaultBanjoStyle){

			gTheActiveBanjoStyle = gDefaultBanjoStyle;

			// Clear the soundfont cache
			gSoundsCacheABCJS = {};

		}
	}

	// Only highlighting first voice when playing
	gOnlyHighlightV1 = false;
	gOnlyHighlightV1 = ScanTuneForV1OnlyHighlight(theABC);

	// Has play highlighting been disabled?
	gDisablePlayHighlight = false;
	gDisablePlayHighlight = ScanTuneForDisablePlayHighlight(theABC);

	// Has tilde roll render force on or off
	gForceRollUseRollForIrishRoll = false;
	gForceRollUseRollForIrishRoll = ScanTuneForForceIrishRoll(theABC);

	gForceRollUseRollForIrishRollDisable = false;
	gForceRollUseRollForIrishRollDisable = ScanTuneForForceIrishRollDisable(theABC);

	// No need to add classes if play highlight disabled
	if (gDisablePlayHighlight){
		gOnlyHighlightV1 = false;
	}

	// Are we tuning the voices
	gVoiceTuning = null;
	gSequenceCallback = null;
	gVoiceTuning = ScanTuneForVoiceTuning(theABC);

	if (gVoiceTuning && (gVoiceTuning.length > 0)){
		gSequenceCallback = VoiceTuningCallback;
	}

	var instrument = GetRadioValue("notenodertab");

	gTabFirstStaffOnly = ScanTuneForTabFirstStaffOnly(theABC, instrument);
	gTabSecondStaffOnly = false;

	if (!gTabFirstStaffOnly){
		gTabSecondStaffOnly = ScanTuneForTabSecondStaffOnly(theABC, instrument);
	}

	// Scan tune for reverb commands
	ScanTuneForReverb(theABC);

	return true;

}

//
// Voice tuning callback
//
function VoiceTuningCallback(notes,context){

	//console.log("VoiceTuningCallback");

	var nVoices = notes.length;

	var nTunings = gVoiceTuning.length;

	if (nTunings < nVoices){
		nVoices = nTunings;
	}

	var i,j;

	for (i=0;i<nVoices;++i){

		var thisVoiceTuning = gVoiceTuning[i];
		
		var thisVoice = notes[i];
		
		var nNotes = thisVoice.length;
		
		for (j=0;j<nNotes;++j){

			thisVoice[j].cents = thisVoiceTuning;

		}

	}
}

// Keep track where you are in the tune collection
var gPlayABCTuneIndex = 0;
var gPlayABCTuneCount = 0;
var gPlayABCGotMaximizedPlay = false;

function PlayABCDialog(theABC,callback,val,metronome_state){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","PlayABCDialog");

	gMIDIbuffer = null;
	gTheOKButton = null;
  gPlayerABC = theABC;

  if (metronome_state){
    theABC = inject_one_metronome(theABC, false);
  }

	// Do common setup of soundfont and custom timing injection
	if (!PlayerSetupCommon(theABC)){
		return;
	}

	// Setup any custom timing found
	ScanTuneForCustomTimingInjection(theABC);
	
	var instrument = GetRadioValue("notenodertab");

	var abcOptions = GetABCJSParams(instrument);

	abcOptions.oneSvgPerLine = false;

	// Clear the tab label if present to compress vertical space
	if (instrument != "noten" ){

		// Sanity check the options first
		if (abcOptions.tablature && (abcOptions.tablature.length > 0)){
			abcOptions.tablature[0].label = "";
		}
	}

	function setTune(userAction) {

		synthControl.disable(true);

		var visualObj = ABCJS.renderAbc("playback-paper", theABC, abcOptions)[0];

		// Post process whistle or note name tab
		postProcessTab([visualObj], "playback-paper",instrument, true);

		var midiBuffer = new ABCJS.synth.CreateSynth(theABC);

		gMIDIbuffer = midiBuffer;
        gMIDIInitStillWaiting = false;

        SetupPlayerEventHandlers();

		midiBuffer.init({
			visualObj: visualObj
		}).then(function (response) {

			//console.log(response);

			if (synthControl) {


				var fadeLength = computeFade(theABC);

				synthControl.setTune(visualObj, userAction, {fadeLength:fadeLength}).then(function (response) {
					
					console.log("Audio successfully loaded.");

					gSynthControl = synthControl;

					if (callback){
						callback(val,gTheOKButton);
					}
					
					// Hook up tempo dialog
					var elem = document.getElementsByClassName("abcjs-midi-tempo");
					if (elem && (elem.length > 0)){
						elem[0].onclick = SetPlayerTempo;
					}

					// Are we using the trainer touch controls
					if (gTrainerTouchControls){

						//debugger;

						var elems1 = document.getElementsByClassName("abcjs-midi-clock");
						var elems2 = document.getElementsByClassName("abcjs-midi-current-tempo-wrapper");

						if (elems1 && elems2 && (elems1.length > 0) && (elems2.length > 0)){
							
							var elem = elems1[0];
							elem.onclick = DecrementTempo;
							elem = elems2[0];
							elem.onclick = IncrementTempo;

						}
					
					}
					
				}).catch(function (error) {
					
			    // MAE 10 Jul 2024 - Hide the spinner
					hideTheSpinner();
        	gMIDIInitStillWaiting = false;
 
					console.log("Problem loading audio for this tune");

				});
			}
		}).catch(function (error) {

	    // MAE 10 Jul 2024 - Hide the spinner
			hideTheSpinner();
      gMIDIInitStillWaiting = false;
			console.log("Problem loading audio for this tune");

		});
	}

	function StopPlay(){

		gSynthControl = null;
	
		if (synthControl){
				
			synthControl.destroy();

			synthControl = null;


		}
	}

	var cursorControl = new CursorControl();

	var synthControl;

	function initPlay() {

		// Clear the looper callback
		gLoopCallback = null;
		gStartPlayCallback = null;
		gPreStartPlayCallback = null;

		// Clear the player in pause flag
		gPlayerInPause = false;

		// Adapt the top based on the player control size
        var theTop;
		var theHeight;

		if (gLargePlayerControls){
			theHeight = window.innerHeight - 306;
		}
		else{
			theHeight = window.innerHeight - 286;
			if (isDesktopBrowser() && isSafari()){
				theHeight -= 10;
			}
		}

		theTop = 20;

	   	modal_msg = '<div id="playerholder" style="height:'+theHeight+'px;overflow-y:auto;margin-bottom:15px;">';

		if (gLargePlayerControls){
			modal_msg += '<div id="abcplayer" class="abcjs-large">';
		}
		else{
			modal_msg += '<div id="abcplayer">';			
		}

	   	modal_msg += '<div id="playback-paper"></div>';
	   	modal_msg += '</div>';

	   	modal_msg += '</div>';

	   	// Add the player controls
		if (gLargePlayerControls){
	   		modal_msg += '<div id="playback-audio" class="abcjs-large"></div>';
		}
		else{
	   		modal_msg += '<div id="playback-audio"></div>';
		}

	   	// Add the action buttons
		modal_msg += '<p style="text-align:center;margin:0px;margin-top:10px">';

		if (isDesktopBrowser()){
			modal_msg += '<input id="abcplayer_zoom_out" class="btn btn-player_zoom abcplayer_zoom_out" onclick="ZoomPlayer(false)" type="button" value="→&nbsp;←" title="Decreases the player width 10% of the window screen size">';
		}

		modal_msg += '<input id="abcplayer_trainer" class="btn btn-looper abcplayer_trainer" onclick="TuneTrainerLaunchFromPlayer()" type="button" value="Start Tune Trainer" title="Opens the Tune Trainer for practicing tunes with increasing tempos">';

    if (gPlayMetronome){
  		modal_msg += '<input id="abcplayer_metronomebutton" class="abcplayer_metronome button btn btn-metronome" onclick="ToggleMetronome();" type="button" value="Disable Metronome" title="Disables the metronome">';
    }
    else{
      modal_msg += '<input id="abcplayer_metronomebutton" class="abcplayer_metronome button btn btn-metronome" onclick="ToggleMetronome();" type="button" value="Enable Metronome" title="Enables the metronome">';
    }

		if (!gIsQuickEditor){
			modal_msg += '<input id="abcplayer_exportbutton" class="abcplayer_exportbutton btn btn-exportaudiomidi" onclick="ExportAudioOrImage();" type="button" value="Export Audio, Image, or PDF" title="Brings up a dialog where you can export the tune in various audio, image, and PDF formats">';
		}
		else{
			modal_msg += '<input id="abcplayer_exportbutton" class="abcplayer_exportbutton btn btn-exportaudiomidi" onclick="ExportAudioOrImage();" type="button" value="Export Audio or Image" title="Brings up a dialog where you can export the tune in various audio and image formats">';			
		}

		modal_msg += '<input id="abcplayer_settingsbutton" class="abcplayer_settingsbutton btn btn-configuresettingsfromhelp" onclick="ShowPlayerSettings();" type="button" value="Settings" title="Brings up the Player Instrument Settings dialog where you can select the default MIDI soundfont, MIDI instruments, and MIDI volumes to use when playing tunes.&nbsp;&nbsp;From the dialog you can also set the Player screen width percentage.">';
		
		if (isDesktopBrowser()){
			modal_msg += '<input id="abcplayer_zoom_in" class="btn btn-player_zoom abcplayer_zoom_in" onclick="ZoomPlayer(true)" type="button" value="←&nbsp;→" title="Increases the player width 10% of the window screen size">';
		}

		modal_msg += '</p>';

		// Add a little spacer to give more room for the page controls
		modal_msg += '<p style="text-align:center;font-size:0pt;font-family:helvetica">&nbsp;</p>';

		modal_msg += '<a id="abcplayer_help" href="https://michaeleskin.com/abctools/userguide.html#playing_your_tunes" target="_blank" style="text-decoration:none;" title="Learn more about the Player" class="dialogcornerbutton">?</a>';

		if (gPlayABCTuneCount > 1){

			if (gPlayerStatusOnLeft){
				modal_msg += '<p id="playerstatus_left" class="playerstatus_left">';
			}
			else{
				modal_msg += '<p id="playerstatus" class="playerstatus">';
			}

			modal_msg += '<input id="abcplayer_previousbutton" class="abcplayer_previousbutton btn btn-playerprevious" onclick="PlayPrevious(event);" type="button" value="&nbsp;←&nbsp;" title="Play the previous tune.&nbsp;&nbsp;Shift-click to jump to the first tune.">Tune '+(gPlayABCTuneIndex+1)+' of '+ gPlayABCTuneCount+'<input id="abcplayer_nextbutton" class="abcplayer_nextbutton btn btn-playernext" onclick="PlayNext(event);" type="button" value="&nbsp;→&nbsp;" title="Play the next tune.&nbsp;&nbsp;Shift-click to jump to the last tune.">';

			modal_msg += '<br/><select id="playertunelist" onchange="PlaySelectedTune();" title="Select a tune to play from the list">';

			// Have to cache this before calling GetTunebookIndexTitles()
			totalTunes = CountTunes();
			var theTuneTitles = GetTunebookIndexTitles();
			var nTitles = theTuneTitles.length;

			// debugger;

			for (var i=0;i<nTitles;++i){
				modal_msg += '<option value="'+i+'">'+theTuneTitles[i]+'</option>';
			}
            
          	modal_msg += '</select></p>';
		}

	   	// Scale the player for larger screens
		var windowWidth = window.innerWidth;

		var instrument = GetRadioValue("notenodertab");

		var theWidth;

		if (isDesktopBrowser()){

			if (giPadTwoColumn){
				if (isLandscapeOrientation()){
					theWidth = windowWidth * (gPlayerScaling / 100);
				}
				else{
					theWidth = windowWidth * 0.9;	
				}
			}
			else{
				theWidth = windowWidth * (gPlayerScaling / 100);
			}

			if (theWidth < 850){
				theWidth = 850;
			}

		}
		else{

			theWidth = 800;  
			
		}

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: theTop, width:theWidth, okText:"Close", scrollWithPage: (isMobileBrowser()) });

		// Style previous and next tune buttons depending on tune count state
		if (gPlayABCTuneCount > 1){

			var elem = document.getElementById("abcplayer_previousbutton");

			if (gPlayABCTuneIndex > 0){
				elem.disabled = false;
				elem.style.opacity = 1.0;
			}
			else{
				elem.disabled = true;
				elem.style.opacity = 0.25;
			}


			elem = document.getElementById("abcplayer_nextbutton")

			if (gPlayABCTuneIndex < (gPlayABCTuneCount-1)){
				elem.disabled = false;
				elem.style.opacity = 1.0;
			}
			else{
				elem.disabled = true;
				elem.style.opacity = 0.25;
			}

			document.getElementById("playertunelist").value = gPlayABCTuneIndex;

		}

		var format = GetRadioValue("notenodertab");
		
		// Idle the metronome button
		if ((metronome_state) && (metronome_state == true)){

			var elem = document.getElementById("abcplayer_metronomebutton");

			elem.value = "Disable Metronome";

		}

		var theOKButtons = document.getElementsByClassName("modal_flat_ok");

		// Find the button that says "Close" and hook its click handler to make sure music stops on close
		// Need to search through the modals since there may be a first time share dialog also present
		// the first time someone plays a linked PDF tune

		var theOKButton = null;

		for (var i=0;i<theOKButtons.length;++i){

			theOKButton = theOKButtons[i];

			if (theOKButton.innerText == "Close"){

				gTheOKButton = theOKButton;

				var originalOnClick = theOKButton.onclick;

				theOKButton.onclick = function(){

					originalOnClick(); 
					StopPlay(); 

				    // Focus after operation
				    FocusAfterOperation();

					// If on iOS and the muting controller installed, dispose it now
					if (gIsIOS){

						if (gTheMuteHandle){
						 	gTheMuteHandle.dispose();
  							gTheMuteHandle = null;
  						}
					}

				};

				break;

			}
		}

		if (ABCJS.synth.supportsAudio()) {
			
			synthControl = new ABCJS.synth.SynthController(theABC);

			synthControl.load("#playback-audio", cursorControl, {displayLoop: true, displayRestart: true, displayPlay: true, displayProgress: true, displayWarp: true});


		} else {

			document.querySelector("#playback-audio").innerHTML = "<div class='audio-error'>Audio is not supported in this browser.</div>";

		}

		setTune(false);

		// Cache autoscroll values early
		gPlayerHolder = document.getElementById("playerholder");
		gPlayerContainerRect = gPlayerHolder.getBoundingClientRect();

	}

	// Try to deal with tab deactivation muting
	if (gIsIOS){

		var context = ABCJS.synth.activeAudioContext();

		// Decide on some parameters
		let allowBackgroundPlayback = false; // default false, recommended false
		let forceIOSBehavior = false; // default false, recommended false

		gTheMuteHandle = null;
		
		// Pass it to unmute if the context exists... ie WebAudio is supported
		if (context)
		{
		  // If you need to be able to disable unmute at a later time, you can use the returned handle's dispose() method
		  // if you don't need to do that (most folks won't) then you can simply ignore the return value
		  gTheMuteHandle = unmute(context, allowBackgroundPlayback, forceIOSBehavior);
		  
		}
	}

	initPlay();

}

//
// Flatten all the P: tag parts in a tune
//

function stripNewlineIfSingleLine(str) {
  // Check if the string ends with '\n' and does not contain any other '\n'
  if (str.endsWith('\n') && str.indexOf('\n') === str.length - 1) {
    return str.slice(0, -1); // Remove the trailing '\n'
  }
  return str;
}

const removeSpacesAndDotsFromPLine = (input) => {
  return input.split('\n') // Split the input by new lines
    .map(line => {
      if (line.startsWith('P:')) {
        // If the line starts with "P:", remove spaces and dots
        return line.replace(/[ .]/g, ''); 
      }
      return line; // Otherwise, keep the line unchanged
    })
    .join('\n'); // Join the lines back into a single string
};

function removeVskipLines(text) {
  return text
    .split('\n')
    .filter(line => !line.trim().startsWith('%%vskip'))
    .join('\n');
}

function removeFirstTitleLine(input) {
  const lines = input.split('\n');
  const titleLines = lines.filter(line => line.startsWith('T:'));

  if (titleLines.length >= 2) {
    const index = lines.findIndex(line => line.startsWith('T:'));
    if (index !== -1) {
      lines.splice(index, 1); // Remove only the first T: line
    }
  }

  return lines.join('\n');
}

function removeAllPLines(input) {
  return input
    .split('\n')
    .filter(line => !line.startsWith('P:'))
    .join('\n');
}

function removeSinglePercentLines(input) {
  return input
    .split('\n')
    .filter(line => !/^%(?:\s|$|P:)/.test(line))
    .join('\n');
}

function flattenABCParts(abcString) {

	//debugger;

	//console.log(abcString)

  abcString = removeSinglePercentLines(abcString);

	// Strip any commented P: tags
	abcString = abcString.replace(/^ *% *P:.*$/gm, '');

  //console.log(abcString)

	abcString = abcString.replace(/^\s*[\r\n]+/gm, '');

  //console.log(abcString)
	
	// Turn inline P: tags into discrete P: tags
	abcString = abcString.replace(/\[P:\s+([A-Z])\]/g, 'P:$1\n');
	abcString = abcString.replaceAll("\n\n","\n");

	// Strip all the extra spaces after P: tags
	abcString = removeSpacesAndDotsFromPLine(abcString);

  // Extract header text (everything before the first 'P:')
  const headerMatch = abcString.match(/^[\s\S]*?(?=P:)/);
  const header = headerMatch ? headerMatch[0] : '';
  
  // Extract part order from the first P: tag, which is followed by part labels
  const partOrderMatch = abcString.match(/P:([^\n]+)/);
  if (!partOrderMatch) {
      return abcString;  // No part order found, return the original ABC
  }

  //debugger;

  // Capture only the part order, ensure it only captures the sequence after "P:"
  var partSequence = partOrderMatch[1].replace(/\s+/g, ' ').trim();  // Normalize spaces and trim

  // Extract each part's content (using P:[A-Z] format for parts)
  const partPattern = /(P:[A-Z0-9()]*)([\s\S]*?)(?=P:[A-Z]|$)/g;
  let parts = {};
  let match;

  // Handle sequence tag in header case
  var gotSequenceTag = false;
  var sequenceTag = "";

  while ((match = partPattern.exec(abcString)) !== null) {
      const partLabel = match[1];
      const partContent = match[2].trim();
      if (!gotSequenceTag){
      	//debugger;
       	if (partLabel.length > 3){
      		gotSequenceTag = true;
      		sequenceTag = partLabel;
      	}
      }
      parts[partLabel] = `${partLabel}\n${partContent}`; // was P:
  }

  //debugger;

  // If no sequence found, return orginal ABC
  if (!gotSequenceTag){
  	return abcString;
  }

  // Helper function to parse part sequences (handles groups and repeats)
  function parsePartSequence(seq) {
      let flattenedSequence = [];
      const groupPattern = /\(([^\)]+)\)(\d*)|([A-Z])(\d*)/g;
      let groupMatch;
      
      while ((groupMatch = groupPattern.exec(seq)) !== null) {
          if (groupMatch[3]) {
              // Simple part like A2 or B
              const part = groupMatch[3];
              const repeat = parseInt(groupMatch[4], 10) || 1;
              for (let i = 0; i < repeat; i++) {
                  flattenedSequence.push(part);
              }
          } else if (groupMatch[1]) {
              // Group like (A2B)3
              const group = groupMatch[1];
              const groupRepeat = parseInt(groupMatch[2], 10) || 1;
              const parsedGroup = parsePartSequence(group);
              for (let i = 0; i < groupRepeat; i++) {
                  flattenedSequence = flattenedSequence.concat(parsedGroup);
              }
          }
      }
      
      return flattenedSequence;
  }

  //debugger;

  // Flatten the ABC according to the parsed part sequence
  const parsedSequence = parsePartSequence(partSequence);
  let flattenedABC = [];

  // Handle header case
  if (gotSequenceTag){
       if (parts[sequenceTag]) {
       	var headerTagContents = stripNewlineIfSingleLine(parts[sequenceTag]);
          flattenedABC.push(headerTagContents);
      }
  }
  
  parsedSequence.forEach(part => {
  	var fullPart = "P:"+part;
      if (parts[fullPart]) {
          flattenedABC.push(parts[fullPart]);
      }
  });

  // Combine header and flattened parts
  return header + flattenedABC.join('\n');

}


//
// Based on the global injection configuration, pre-process the %%MIDI directives in the ABC
function PreProcessPlayABC(theTune){

	//console.log("PreProcessPlayABC");

  var theABCFileHeader = GetABCFileHeader();

  // Was first title hiding requested?
  var searchRegExp = /^%hide_first_title_on_play.*$/gm

  // First look in the tune
  var hidefirstTitleRequested = searchRegExp.test(theTune);

  if (!hidefirstTitleRequested){
    hidefirstTitleRequested = searchRegExp.test(theABCFileHeader);
  }
  
  if (hidefirstTitleRequested){
    theTune = removeFirstTitleLine(theTune);
  }

	searchRegExp = /^%play_flatten_parts.*$/gm

	var flattenPartsRequested = searchRegExp.test(theTune);

	if (flattenPartsRequested){
		// console.log("Before:");
		// console.log(theTune);
		theTune = flattenABCParts(theTune);
		// console.log("After:");
		// console.log(theTune);
	}

	// Allow lowercase chords?

	gAllowLowercaseChords = false;

	searchRegExp = /^%allow_lowercase_chords.*$/gm

	var lowercaseChordsRequested = searchRegExp.test(theTune);

	if (lowercaseChordsRequested){
		gAllowLowercaseChords = true;
	}

	// Override any ABC play values?

	// Strip any features hidden from the More Tools dialog
	theTune = processAllStripping(theTune);

	// Always override programs and volumes?
	var bForceOverride = false;

	if (gOverridePlayMIDIParams){

		theTune = OverrideOneTuneMIDIParams(theTune, gDefaultSoundFont, gTheMelodyProgram, gTheBassProgram, gTheChordProgram, gTheBassVolume, gTheChordVolume);

		bForceOverride = true;
	}

	// Inject programs?
	if (gAlwaysInjectPrograms){

		// Check first for any existing program messages before replacing
		var searchRegExp = /^%%MIDI chordprog.*$/m

		var chordProgramRequested = theTune.match(searchRegExp);

		var bUsingDefaultChord = false;

		if (!((chordProgramRequested) && (chordProgramRequested.length > 0))){

			bUsingDefaultChord = true;

			theTune = InjectOneTuneMIDIProgramAboveTune(theTune, gTheChordProgram, false, true);

		}

		// Check first for any existing program messages before replacing
		var searchRegExp = /^%%MIDI bassprog.*$/m

		var bassProgramRequested = theTune.match(searchRegExp);

		if (!((bassProgramRequested) && (bassProgramRequested.length > 0))){

			if (bForceOverride){
				theTune = InjectOneTuneMIDIProgramAboveTune(theTune, gTheBassProgram, true, false);
			}
			else{

				// 4 January 2024 - Legacy tunebook playback override fix
				// They've manually set a chord prog, but there is no bass set, use the chordprog to match the legacy behavior
				if (!bUsingDefaultChord){

					// We must have found a chordprog above
					var theBassProgram = chordProgramRequested[0].replace("%%MIDI chordprog","");
					
					theBassProgam = theBassProgram.trim();
					
					theTune = InjectOneTuneMIDIProgramAboveTune(theTune, theBassProgram, true, false);

				}
				else{

					// OK to use the default if they haven't set a chordprog 
					theTune = InjectOneTuneMIDIProgramAboveTune(theTune, gTheBassProgram, true, false);

				}
			}
		}

		searchRegExp = /^%%MIDI program.*$/m

		var melodyProgramRequested = theTune.match(searchRegExp);

		if (!((melodyProgramRequested) && (melodyProgramRequested.length > 0))){

			theTune = InjectOneTuneMIDIProgramAboveTune(theTune, gTheMelodyProgram, false, false);

		}
	}

	// Inject volumes?
	if (gAlwaysInjectVolumes){

		// Check first for any existing volume messages before replacing
		var searchRegExp = /^%%MIDI bassvol.*$/m

		var bassVolumeRequested = theTune.match(searchRegExp);

		if (!((bassVolumeRequested) && (bassVolumeRequested.length > 0))){

			theTune = InjectOneTuneMIDIVolumeAboveTune(theTune, gTheBassVolume, false);

		}

		var searchRegExp = /^%%MIDI chordvol.*$/m

		var chordVolumeRequested = theTune.match(searchRegExp);

		if (!((chordVolumeRequested) && (chordVolumeRequested.length > 0))){

			theTune = InjectOneTuneMIDIVolumeAboveTune(theTune, gTheChordVolume, true);

		}

	}

	// Inject default reverb?
	if (gReverbString && (gReverbString != "")){

		// Check first for any reverb annotations before replacing
		var searchRegExp = /^%reverb.*$/m

		var reverbRequested = theTune.match(searchRegExp);

		if (!((reverbRequested) && (reverbRequested.length > 0))){

			theTune = InjectReverbAboveTune(theTune, gReverbString);
		}

	}	

	// Strip injected incipit formatting metadata
	// This is for play links that were created from formatted incipits
	var incipitStart = theTune.indexOf("%incipits_inject_start");

	if (incipitStart != -1){

		var output = theTune.substring(0,incipitStart);

		var endMarker = "%incipits_inject_end";
		var incipitEnd = theTune.indexOf(endMarker);
		incipitEnd += endMarker.length+1;

		output += theTune.substring(incipitEnd,theTune.length);

		theTune = output;

	}

	// MAE 16 Jun 2024
	// Using a %%MIDI gchord string for this tune?

	// Initially disable gchord use
	gUseGChord = false;

	var searchRegExp = /%%MIDI gchord\b/

	var gchordRequested = searchRegExp.test(theTune);

	if (gchordRequested){

		//console.log("Using discrete gchord");
		gUseGChord = true;
	}

	if (!gUseGChord){

		var searchRegExp = /\[I:\s*MIDI[\s=]+gchord\s.*\]/

		var gchordRequested = searchRegExp.test(theTune);

		if (gchordRequested){

			//console.log("Using inline gchord");
			gUseGChord = true;
		}
	}

	// Strip titlespace
	theTune = theTune.replace(/%%titlespace\s.*\r?\n/g, '');

	theTune = theABCFileHeader + theTune;

  // Filter out any %%vskip spacing
  searchRegExp = /^%hide_vskip_on_play.*$/gm

  var hidevskipRequested = searchRegExp.test(theTune);

  if (hidevskipRequested){
    theTune = removeVskipLines(theTune);
  }

  // Hide any P: tags in the player?
  searchRegExp = /^%hide_player_part_tags.*$/gm

  var hidePtags = searchRegExp.test(theTune);

  if (hidePtags){
     theTune = removeAllPLines(theTune);   
  }

  // Allow loop state caching
  gAllowLoopStateCaching = true;

	return(theTune);

}

//
// Is a tune a hornpipe?
//
function tuneIsHornpipe(theTune){

	// First look for a Hornpipe rhythm request
	var searchRegExp = /^R:Hornpipe.*$/gm

	// Detect Hornpipe annotation
	var testHornpipe = theTune.match(searchRegExp);

	if ((testHornpipe) && (testHornpipe.length > 0)){

		return true;

	}

	searchRegExp = /^R: Hornpipe.*$/gm

	// Detect Hornpipe annotation
	testHornpipe = theTune.match(searchRegExp);

	if ((testHornpipe) && (testHornpipe.length > 0)){

		return true;

	}

	searchRegExp = /^R:hornpipe.*$/gm

	// Detect Hornpipe annotation
	testHornpipe = theTune.match(searchRegExp);

	if ((testHornpipe) && (testHornpipe.length > 0)){

		return true;

	}

	searchRegExp = /^R: hornpipe.*$/gm

	// Detect Hornpipe annotation
	testHornpipe = theTune.match(searchRegExp);

	if ((testHornpipe) && (testHornpipe.length > 0)){

		return true;

	}

	return false;
}

//
// Validate and optionally inject a roll_2 string from an array of params
//
function validate_roll_2_params(theParamString, doInject){

	var theParams = theParamString.split(" ");

	if (theParams && (theParams.length != 8)){

		//console.log("roll2 length incorrect");

		return false;

	}

	var Roll2Duration1 = theParams[0]; 
	var Roll2Duration2 = theParams[1]; 
	var Roll2Fraction1 = theParams[2];
	var Roll2Fraction2 = theParams[3];
	var Roll2Fraction3 = theParams[4]; 
	var Roll2Volume1 = theParams[5];
	var Roll2Volume2 = theParams[6]; 
	var Roll2Volume3 = theParams[7]; 

	Roll2Duration1 = parseFloat(Roll2Duration1);
	Roll2Duration2 = parseFloat(Roll2Duration2); 
	Roll2Fraction1 = parseFloat(Roll2Fraction1);
	Roll2Fraction2 = parseFloat(Roll2Fraction2);
	Roll2Fraction3 = parseFloat(Roll2Fraction3); 
	Roll2Volume1 = parseFloat(Roll2Volume1);
	Roll2Volume2 = parseFloat(Roll2Volume2); 
	Roll2Volume3 = parseFloat(Roll2Volume3); 

	if ((!isNaN(Roll2Duration1)) && (!isNaN(Roll2Duration2)) && (!isNaN(Roll2Fraction1)) && (!isNaN(Roll2Fraction2)) &&
		(!isNaN(Roll2Fraction3)) && (!isNaN(Roll2Volume1)) && (!isNaN(Roll2Volume2)) && (!isNaN(Roll2Volume3))){

		// Sanity check the parameters
		if ((Roll2Duration1>=0.0) && 
			(Roll2Duration2>=0.0) &&
			((Roll2Fraction1>=0.0) && (Roll2Fraction1<=1.0)) &&
			((Roll2Fraction2>=0.0) && (Roll2Fraction2<=1.0)) &&
			((Roll2Fraction3>=0.0) && (Roll2Fraction3<=1.0)) &&
			((Roll2Volume1>=0.0) && (Roll2Volume1<=2.0)) &&
			((Roll2Volume2>=0.0) && (Roll2Volume2<=2.0)) &&
			((Roll2Volume3>=0.0) && (Roll2Volume3<=2.0)) &&
			((Roll2Duration1 + Roll2Duration2) < 3.0)){

			//console.log("roll2 validation pass");
			
			if (doInject){
				gRoll2Duration1 = Roll2Duration1; 
				gRoll2Duration2 = Roll2Duration2; 
				gRoll2Fraction1 = Roll2Fraction1;
				gRoll2Fraction2 = Roll2Fraction2;
				gRoll2Fraction3 = Roll2Fraction3; 
				gRoll2Volume1 = Roll2Volume1;
				gRoll2Volume2 = Roll2Volume2; 
				gRoll2Volume3 = Roll2Volume3; 
			}

			return true;
		}
		else{

			//console.log("roll2 validation fail1");

			return false
		}
	}

	//console.log("roll3 validation fail2");

	return false;
}

//
// Validate and optionally inject a roll_3 string from an array of params
//
function validate_roll_3_params(theParamString, doInject){

	var theParams = theParamString.split(" ");

	if (theParams && (theParams.length != 8)){

		//console.log("roll3 length incorrect");
		
		return false;

	}
	
	var Roll3Duration1 = theParams[0]; 
	var Roll3Duration2 = theParams[1]; 
	var Roll3Fraction1 = theParams[2];
	var Roll3Fraction2 = theParams[3];
	var Roll3Fraction3 = theParams[4]; 
	var Roll3Volume1 = theParams[5];
	var Roll3Volume2 = theParams[6]; 
	var Roll3Volume3 = theParams[7]; 

	Roll3Duration1 = parseFloat(Roll3Duration1);
	Roll3Duration2 = parseFloat(Roll3Duration2); 
	Roll3Fraction1 = parseFloat(Roll3Fraction1);
	Roll3Fraction2 = parseFloat(Roll3Fraction2);
	Roll3Fraction3 = parseFloat(Roll3Fraction3); 
	Roll3Volume1 = parseFloat(Roll3Volume1);
	Roll3Volume2 = parseFloat(Roll3Volume2); 
	Roll3Volume3 = parseFloat(Roll3Volume3); 

	if ((!isNaN(Roll3Duration1)) && (!isNaN(Roll3Duration2)) && (!isNaN(Roll3Fraction1)) && (!isNaN(Roll3Fraction2)) &&
		(!isNaN(Roll3Fraction3)) && (!isNaN(Roll3Volume1)) && (!isNaN(Roll3Volume2)) && (!isNaN(Roll3Volume3))){
		
		// Sanity check the parameters
		if ((Roll3Duration1>=0.0) && 
			(Roll3Duration2>=0.0) &&
			((Roll3Fraction1>=0.0) && (Roll3Fraction1<=1.0)) &&
			((Roll3Fraction2>=0.0) && (Roll3Fraction2<=1.0)) &&
			((Roll3Fraction3>=0.0) && (Roll3Fraction3<=1.0)) &&
			((Roll3Volume1>=0.0) && (Roll3Volume1<=2.0)) &&
			((Roll3Volume2>=0.0) && (Roll3Volume2<=2.0)) &&
			((Roll3Volume3>=0.0) && (Roll3Volume3<=2.0)) &&
			((Roll3Duration1 + Roll3Duration2) < 3.0)){

			//console.log("roll3 validation pass");
			
			if (doInject){
				gRoll3Duration1 = Roll3Duration1; 
				gRoll3Duration2 = Roll3Duration2; 
				gRoll3Fraction1 = Roll3Fraction1;
				gRoll3Fraction2 = Roll3Fraction2;
				gRoll3Fraction3 = Roll3Fraction3; 
				gRoll3Volume1 = Roll3Volume1;
				gRoll3Volume2 = Roll3Volume2; 
				gRoll3Volume3 = Roll3Volume3; 
			}

			return true;
		}
		else{

			//console.log("roll3 validation fail1");

			return false;
		}
	}

	console.log("roll3 validation fail2");

	return false;
}

//
// Scan tune for custom timing annotations
//
function ScanTuneForCustomTimingInjection(theTune){

	//debugger;

	// Default is no swing
	gAddSwing = false;

	// MAE 20 Jun 2024 - To support Paul's swing algorithm
	gAddABCJSSwing = false;

	// Default is typical hornpipe swing factor
	gSwingFactor = gAutoSwingFactor;

	var searchRegExp;
	var doAddSwing;

	// Check if autoswing enabled
	if (gAutoSwingHornpipes){

		gAddSwing = tuneIsHornpipe(theTune);

	}

	// Next search for an addswing override
	searchRegExp = /^%swing.*$/gm

	// Detect addswing annotation
	doAddSwing = theTune.match(searchRegExp);

	if ((doAddSwing) && (doAddSwing.length > 0)){

		gAddSwing = true;

		var theParamString = doAddSwing[0].replace("%swing","");

		theParamString = theParamString.trim();

		var theParams = theParamString.split(" ");

		if (theParams.length >= 1){

			var theSwingValueFound = theParams[0];

			var swingValue = parseFloat(theSwingValueFound);

			if (!isNaN(swingValue)){

				gSwingFactor = swingValue;

			}
		}

	}

	// Have they disabled swing?

	searchRegExp = /^%noswing.*$/gm

	// Detect noswing annotation
	doAddSwing = theTune.match(searchRegExp);

	if ((doAddSwing) && (doAddSwing.length > 0)){

		gAddSwing = false;

	}

	// Next search for an swing_offset override
	searchRegExp = /^%swing_offset.*$/gm

	// Detect grace_duration_ms annotation
	var doSwingOffset = theTune.match(searchRegExp);

	// Default is 0
	gSwingOffset = 0;

	if ((doSwingOffset) && (doSwingOffset.length > 0)){

		var theParamString = doSwingOffset[0].replace("%swing_offset","");

		theParamString = theParamString.trim();

		var theParams = theParamString.split(" ");

		if (theParams.length >= 1){

			var theOffsetValueFound = theParams[0];

			var offsetValue = parseInt(theOffsetValueFound);

			if (!isNaN(offsetValue)){

				if ((offsetValue >= 0) && (offsetValue <= 16)){
					gSwingOffset = offsetValue;
				}

			}
		}
	}

	// Next search for an grace_duration_ms override
	searchRegExp = /^%grace_duration_ms.*$/gm

	// Detect grace_duration_ms annotation
	var doGraceDuration = theTune.match(searchRegExp);

	// Default is 45 ms
	gGraceDuration = 0.045;

	if ((doGraceDuration) && (doGraceDuration.length > 0)){

		var theParamString = doGraceDuration[0].replace("%grace_duration_ms","");

		theParamString = theParamString.trim();

		var theParams = theParamString.split(" ");

		if (theParams.length >= 1){

			var theDurationValueFound = theParams[0];

			var durationValue = parseInt(theDurationValueFound);

			if (!isNaN(durationValue)){

				if ((durationValue >= 0) && (durationValue <= 150)){
					gGraceDuration = durationValue/1000;
				}

			}
		}
	}

	// Is there a Q: tempo tag?
	gGraceMissingTempo = true;

	// Next search for an tempo tag
	searchRegExp = /^Q:.*$/gm

	// Detect tempo tag
	var hasTempo = theTune.match(searchRegExp);

	if ((hasTempo) && (hasTempo.length > 0)){
		gGraceMissingTempo = false;
	}

	// Is this a jig-type rhythm?
	gGraceTuneType = getTuneRhythmType(theTune);

	// Reset quarter note roll timing defaults
	var roll2 = validate_roll_2_params(gRoll2DefaultParams,true);

	// Sanity check the default validate
	if (!roll2){
		gRoll2Duration1 = 0.95; 
		gRoll2Duration2 = 0.8; 
		gRoll2Fraction1 = 1.0;
		gRoll2Fraction2 = 0.75;
		gRoll2Fraction3 = 0.9; 
		gRoll2Volume1 = 1.0;
		gRoll2Volume2 = 0.75; 
		gRoll2Volume3 = 1.0; 
	}

	// Scan tune for custom quarter note roll
	searchRegExp = /^%roll_2_params.*$/gm

	// Detect roll_timing annotation
	var doRoll2Timing = theTune.match(searchRegExp);

	if ((doRoll2Timing) && (doRoll2Timing.length > 0)){

		var theParamString = doRoll2Timing[0].replace("%roll_2_params","");

		theParamString = theParamString.trim();

		// Validate and inject roll_2_params
		validate_roll_2_params(theParamString,true);

	}

	// Reset dotted quarter note roll timing defaults
	var roll3 = validate_roll_3_params(gRoll3DefaultParams,true);

	// Sanity check the default validate
	if (!roll3){

		// Reset dotted quarter note roll timing defaults
		gRoll3Duration1 = 1.45; 
		gRoll3Duration2 = 0.6; 
		gRoll3Fraction1 = 1.0;
		gRoll3Fraction2 = 0.75;
		gRoll3Fraction3 = 0.9; 
		gRoll3Volume1 = 1.0;
		gRoll3Volume2 = 0.75;
		gRoll3Volume3 = 1.0;  

	}

	// Scan tune for custom dotted quarter note roll
	searchRegExp = /^%roll_3_params.*$/gm

	// Detect roll_timing annotation
	var doRoll3Timing = theTune.match(searchRegExp);

	if ((doRoll3Timing) && (doRoll3Timing.length > 0)){

		var theParamString = doRoll3Timing[0].replace("%roll_3_params","");

		theParamString = theParamString.trim();

		// Validate and inject roll_3_params
		validate_roll_3_params(theParamString,true);

	}

	// Disable original roll solution override
	gRollUseOriginalRollSolution = false;

	// Scan tune for roll timing override
	searchRegExp = /^%use_original_abcjs_roll_solution.*$/gm

	// Detect roll_timing annotation
	var useOriginalRollSolution = theTune.match(searchRegExp);

	if ((useOriginalRollSolution) && (useOriginalRollSolution.length > 0)){

		gRollUseOriginalRollSolution = true;

	}

	// Next search for an ornament_divider

	gOrnamentDivider = 32;

	searchRegExp = /^%ornament_divider.*$/gm

	// Detect ornament_divider annotation
	var doOrnamentDivider = theTune.match(searchRegExp);

	if ((doOrnamentDivider) && (doOrnamentDivider.length > 0)){

		var theParamString = doOrnamentDivider[0].replace("%ornament_divider","");

		theParamString = theParamString.trim();

		var theParams = theParamString.split(" ");

		if (theParams.length >= 1){

			var theOrnamentDividerFound = theParams[0];

			var ornamentDivider = parseFloat(theOrnamentDividerFound);

			if (!isNaN(ornamentDivider)){

				if ((ornamentDivider >= 2) && (ornamentDivider <= 256)){

					gOrnamentDivider = ornamentDivider;

				}

			}
		}

	}

	// Next search for an ornament_offset

	gOrnamentOffset = 2;

	searchRegExp = /^%ornament_offset.*$/gm

	// Detect gOrnamentOffset annotation
	var doOrnamentOffset = theTune.match(searchRegExp);

	if ((doOrnamentOffset) && (doOrnamentOffset.length > 0)){

		var theParamString = doOrnamentOffset[0].replace("%ornament_offset","");

		theParamString = theParamString.trim();

		var theParams = theParamString.split(" ");

		if (theParams.length >= 1){

			var theOrnamentOffsetFound = theParams[0];

			var ornamentOffset = parseInt(theOrnamentOffsetFound);

			if (!isNaN(ornamentOffset)){

				if (ornamentOffset >= 0){

					gOrnamentOffset = ornamentOffset;

				}

			}
		}

	}

  // Next search for an tremolo divider

  gTremoloDivider = 0;

  searchRegExp = /^%tremolo_divider.*$/gm

  // Detect tremolo_divider annotation
  var doTremoloDivider = theTune.match(searchRegExp);

  if ((doTremoloDivider) && (doTremoloDivider.length > 0)){

    var theParamString = doTremoloDivider[0].replace("%tremolo_divider","");

    theParamString = theParamString.trim();

    var theParams = theParamString.split(" ");

    if (theParams.length >= 1){

      var theTremoloDividerFound = theParams[0];

      var tremoloDivider = parseFloat(theTremoloDividerFound);

      if (!isNaN(tremoloDivider)){

        if ((tremoloDivider >= 2) && (tremoloDivider <= 256)){

          gTremoloDivider = tremoloDivider;

        }

      }
    }

  }

}

//
// Scan tune for soundfont request
//
function ScanTuneForSoundFont(theTune){

	var soundFontFound = null;

	var commandToReplace = "%abcjs_soundfont";

	var gotSoundFont = false;

	// Search for a soundfont request
	var searchRegExp = /^%abcjs_soundfont.*$/gm

	// Detect soundfont annotation
	var soundfont = theTune.match(searchRegExp);

	if ((soundfont) && (soundfont.length > 0)){

		gotSoundFont = true;

	}
	else{
		// Search for a soundfont request
		searchRegExp = /^%soundfont.*$/gm

		// Detect soundfont annotation
		soundfont = theTune.match(searchRegExp);

		if ((soundfont) && (soundfont.length > 0)){

			gotSoundFont = true;
			commandToReplace = "%soundfont";
		}

	}

	if (gotSoundFont){

		soundFontFound = soundfont[soundfont.length-1].replace(commandToReplace,"");
		
		soundFontFound = soundFontFound.trim();

		soundFontFound = soundFontFound.toLowerCase();

	}

	return soundFontFound;
}

//
// Scan tune for GM custom sounds override request
//
function ScanTuneForGMOverride(theTune){

	var old_gOverrideCustomGMSounds = gOverrideCustomGMSounds;
	var old_gCustomGMSoundsOverride = gCustomGMSoundsOverride;

	gOverrideCustomGMSounds = false;
	gCustomGMSoundsOverride = false;

	var customSoundsFound = null;

	// Search for a use_custom_gm_sounds request
	var searchRegExp = /^%use_custom_gm_sounds.*$/gm

	// Detect use_custom_gm_sounds annotation
	var customSounds = theTune.match(searchRegExp);

	if ((customSounds) && (customSounds.length > 0)){

		customSoundsFound = customSounds[customSounds.length-1].replace("%use_custom_gm_sounds","");
		
		customSoundsFound = customSoundsFound.trim();

		customSoundsFound = customSoundsFound.toLowerCase();

		if (customSoundsFound == "true"){
			//console.log("ScanTuneForGMOverride true");
			gOverrideCustomGMSounds = true;
			gCustomGMSoundsOverride = true;
		}
		if (customSoundsFound == "false"){
			//console.log("ScanTuneForGMOverride false");
			gOverrideCustomGMSounds = true;
			gCustomGMSoundsOverride = false;
		}
	}

	// Do we need to clear the instrument cache?
	if ((gOverrideCustomGMSounds != old_gOverrideCustomGMSounds) || (old_gCustomGMSoundsOverride != gCustomGMSoundsOverride)){
		// Clear the soundfont cache
		gSoundsCacheABCJS = {};

	}

}

//
// Scan tune for bodhran tune request
//
function ScanTuneForBodhranPitch(theTune){

	var bodhranPitchFound = null;

	// Search for a bodhran tuning request
	var searchRegExp = /^%bodhran_tuning.*$/gm

	// Detect bodhran tuning annotation
	var bodhranPitch = theTune.match(searchRegExp);

	if ((bodhranPitch) && (bodhranPitch.length > 0)){

		bodhranPitchFound = bodhranPitch[bodhranPitch.length-1].replace("%bodhran_tuning","");
		
		bodhranPitchFound = bodhranPitchFound.trim();

		bodhranPitchFound = bodhranPitchFound.toLowerCase();

	}

	if (!bodhranPitchFound){

		// Search for a bodhran pitch request
		searchRegExp = /^%bodhran_pitch.*$/gm

		// Detect bodhran pitch annotation
		bodhranPitch = theTune.match(searchRegExp);

		if ((bodhranPitch) && (bodhranPitch.length > 0)){

			bodhranPitchFound = bodhranPitch[bodhranPitch.length-1].replace("%bodhran_pitch","");
			
			bodhranPitchFound = bodhranPitchFound.trim();

			bodhranPitchFound = bodhranPitchFound.toLowerCase();

		}

	}

	//console.log("ScanTuneForBodhranPitch returning "+bodhranPitchFound);

	return bodhranPitchFound;
}

//
// Scan tune for banjo style
//
function ScanTuneForBanjoStyle(theTune){

	var banjoStyleFound = null;

	// Search for a banjo style request
	var searchRegExp = /^%banjo_style.*$/gm

	// Detect banjo style annotation
	var banjoStyle = theTune.match(searchRegExp);

	if ((banjoStyle) && (banjoStyle.length > 0)){

		banjoStyleFound = banjoStyle[banjoStyle.length-1].replace("%banjo_style","");
		
		banjoStyleFound = banjoStyleFound.trim();
	}

	//console.log("ScanTuneForBanjoStyle returning "+banjoStyleFound);

	switch (banjoStyleFound){
		case "0":
		case "1":
		case "2":
		case "3":
		case "4":
			break;
		default:
			return null;
	}

	return banjoStyleFound;
}

//
// Scan tune for only highlighting first voice
//
function ScanTuneForV1OnlyHighlight(theTune){

	// Search for a V1 only highlight
	var searchRegExp = /^%play_highlight_v1_only.*$/gm

	// Detect bagpipes score annotation
	var isV1Only = theTune.match(searchRegExp);

	if ((isV1Only) && (isV1Only.length > 0)){
		return true;
	}

	return false;
}

//
// Scan tune for disable highlight 
//
function ScanTuneForDisablePlayHighlight(theTune){

	// Search for a play highlight disable
	var searchRegExp = /^%disable_play_highlight.*$/gm

	// Detect disable highlight annotation
	var isDisableHighlight = theTune.match(searchRegExp);

	if ((isDisableHighlight) && (isDisableHighlight.length > 0)){
		return true;
	}

	return false;
}

//
// Scan tune for force Irish rolls on 
//
function ScanTuneForForceIrishRoll(theTune){

	// Search for play rolls
	var searchRegExp = /^%irish_rolls_on.*$/gm

	// Detect disable highlight annotation
	var isTildeRolls = theTune.match(searchRegExp);

	if ((isTildeRolls) && (isTildeRolls.length > 0)){
		return true;
	}

	return false;

}

//
// Scan tune for disable Irish rolls
//
function ScanTuneForForceIrishRollDisable(theTune){

	// Search for disable rolls
	var searchRegExp = /^%irish_rolls_off.*$/gm

	// Detect disable highlight annotation
	var isTildeRolls = theTune.match(searchRegExp);

	if ((isTildeRolls) && (isTildeRolls.length > 0)){
		return true;
	}

	return false;
}

//
// Scan tune for voice tuning
//
function ScanTuneForVoiceTuning(theTune){

	// Search for disable rolls
	var searchRegExp = /^%voice_tuning_cents.*$/gm

	var isVoiceTuning = theTune.match(searchRegExp);

	if ((isVoiceTuning) && (isVoiceTuning.length > 0)){

		var theTunings = isVoiceTuning[0].replace("%voice_tuning_cents","");

		theTunings = theTunings.match(/(?:^|\s)(-?\d+(?:\.\d+)?)(?=\s|$)/g);

		var nTunings = theTunings.length;

		if (nTunings > 0){
			var i;
			var testVal;
			var theFinalTuning = [];

			for (i=0;i<nTunings;++i){
				testVal = parseFloat(theTunings[i]);
				if (!isNaN(testVal)){
					theFinalTuning.push(testVal);
				}
				else{
					theFinalTuning.push(0);					
				}
			}

			return theFinalTuning;

		}
		else{

			return null;

		}

	}

	return null;
}

// Only showing tab for first staff?
function ScanTuneForTabFirstStaffOnly(theTune, instrument){

	// Doesn't work for whistle or names
	if ((instrument == "whistle") || (instrument == "recorder") || (instrument == "notenames") ){
		return false;
	}

	// Search for disable rolls
	var searchRegExp = /^%tab_first_voice_only.*$/gm

	var isTabFirstStaff = theTune.match(searchRegExp);

	if ((isTabFirstStaff) && (isTabFirstStaff.length > 0)){
		return true;
	}

	return false;

}

// Only showing tab for second staff?
function ScanTuneForTabSecondStaffOnly(theTune, instrument){

	// Doesn't work for whistle or names
	if ((instrument == "whistle") || (instrument == "recorder") || (instrument == "notenames") ){
		return false;
	}

	// Search for disable rolls
	var searchRegExp = /^%tab_first_voice_exclude.*$/gm

	var isTabSecondStaff = theTune.match(searchRegExp);

	if ((isTabSecondStaff) && (isTabSecondStaff.length > 0)){
		return true;
	}

	return false;

}


// Reverb requested
function ScanTuneForReverb(theTune){

	//console.log("ScanTuneForReverb");

	//debugger;

	// No reverb during offline use
	if ((!gSamplesOnline) && (!gAllowOfflineInstruments)){
		return;
	}

	// Valid reverb styles
	var reverbStyles = ["room","room1","room2","room3","chamber","chamber1","chamber2","chamber3","hall","hall1","hall2","hall3","church","church1","custom"];
	
	gEnableReverb = false;

	// Search for reverb request
	var searchRegExp = /^%reverb.*$/gm

	// Detect reverb annotation
	var setReverb = theTune.match(searchRegExp);

	if ((setReverb) && (setReverb.length > 0)){

		// Enable reverb
		var gotStyle = false;
		var gotDry = false;
		var gotWet = false;

		var theStyle;
		var theDry;
		var theWet;

		var thePatch = setReverb[0].replace("%reverb","");

		thePatch = thePatch.trim();

		var thePatches = thePatch.match(/[a-zA-Z0-9.]+/g);

		if (thePatches && (thePatches.length > 0)){
			
			if (thePatches.length >= 1){
				theStyle = thePatches[0];
				theStyle = theStyle.trim();

				for (var i=0;i<reverbStyles.length;++i){
					if (theStyle == reverbStyles[i]){
						gotStyle = true;
						break;
					}
				}
			}

			if (thePatches.length >= 2){
				theDry = thePatches[1];
				theDry = theDry.trim();
				theDry = parseFloat(theDry);
				if ((!isNaN(theDry)) && (theDry >= 0)){
					gotDry = true;
				}
			}	

			if (thePatches.length >= 3){
				theWet = thePatches[2];
				theWet = theWet.trim();
				theWet = parseFloat(theWet);
				if ((!isNaN(theWet)) && (theWet >= 0)){
					gotWet = true;
				}
			}

			if (gotStyle && gotDry && gotWet){

				var oldReverbStyle = gReverbStyle;

				//console.log("Reverb - Got complete definition: "+theStyle+" "+theDry+" "+theWet);
				//console.log("oldReverbStyle = "+oldReverbStyle);
				
				gEnableReverb = true;
				gReverbStyle = theStyle;
				gReverbDry = theDry;
				gReverbWet = theWet;

				if (gReverbStyle != oldReverbStyle){

					//console.log("Force reverb kernel reload");

					// Force a reload of the reverb convolution kernel
					gSoundsCacheABCJS = {};
				}
			}
		}
	}
}

//
// Swing Explorer
//
function SwingExplorer(){

	if (gAllowCopy){
		
		// Deactivate Quick Player 
		deactivateQuickPlayer();

		// Play back locally

		// Try to find the current tune
		var theSelectedABC = findSelectedTune();

		if (theSelectedABC == ""){
			// This should never happen
			return;
		}

		// Pre-process the ABC to inject any requested programs or volumes
		var theProcessedABC = PreProcessPlayABC(theSelectedABC);

		// Play back locally in-tool	
		SwingExplorerDialog(theSelectedABC,theProcessedABC,false);

	}
}

//
// Reload the player with a new swing setting
//
function SwingExplorerRegenerate(){

	var bDoReload = false;

	// Grab the swing factor
	var theSwingFactor = document.getElementById("swing_explorer_factor").value;

	theSwingFactor = parseFloat(theSwingFactor);

	if (!isNaN(theSwingFactor) && ((theSwingFactor >= -0.9) && (theSwingFactor <= 0.9))){

		gSwingFactor = theSwingFactor;

		bDoReload = true;
	}

	// Grab the swing offset
	var theSwingOffset = document.getElementById("swing_explorer_offset").value;

	theSwingOffset = parseInt(theSwingOffset);

	if (!isNaN(theSwingOffset) && ((theSwingOffset >= 0) && (theSwingOffset <= 16))){

		gSwingOffset = theSwingOffset;

		bDoReload = true;
	}

	if (bDoReload){

		gTheOKButton.click();

		setTimeout(function() {

			// Launch the player with the swing injected tune
			SwingExplorerDialog(gPlayerABCSwingExplorerOriginal,gPlayerABCSwingExplorerProcessed,true);

		},250);

	}
}

//
// Scan tune for swing annotation for the swing explorer
//
function ScanTuneForSwingExplorer(theTune){

	//debugger;

	// Default is swing while running the swing explorer
	gAddSwing = true;

	// Default is typical hornpipe swing factor
	gSwingFactor = 0.0;

	// Check if autoswing enabled
	if (gAutoSwingHornpipes){

		if (tuneIsHornpipe(theTune)){

			// Default is typical hornpipe swing factor
			gSwingFactor = gAutoSwingFactor;

		}
	
	}

	var searchRegExp;
	var doAddSwing;

	// Next search for an addswing override
	searchRegExp = /^%swing.*$/gm

	// Detect addswing annotation
	doAddSwing = theTune.match(searchRegExp);

	if ((doAddSwing) && (doAddSwing.length > 0)){

		var theParamString = doAddSwing[0].replace("%swing","");

		theParamString = theParamString.trim();

		var theParams = theParamString.split(" ");

		if (theParams.length >= 1){

			var theSwingValueFound = theParams[0];

			var swingValue = parseFloat(theSwingValueFound);

			if (!isNaN(swingValue)){

				gSwingFactor = swingValue;

			}
		}

	}

	// Next search for an swing_offset override
	searchRegExp = /^%swing_offset.*$/gm

	// Detect grace_duration_ms annotation
	var doSwingOffset = theTune.match(searchRegExp);

	// Default is 0
	gSwingOffset = 0;

	if ((doSwingOffset) && (doSwingOffset.length > 0)){

		var theParamString = doSwingOffset[0].replace("%swing_offset","");

		theParamString = theParamString.trim();

		var theParams = theParamString.split(" ");

		if (theParams.length >= 1){

			var theOffsetValueFound = theParams[0];

			var offsetValue = parseInt(theOffsetValueFound);

			if (!isNaN(offsetValue)){

				if ((offsetValue >= 0) && (offsetValue <= 16)){
					gSwingOffset = offsetValue;
				}

			}
		}
	}
}

//
// Inject the tune with the Swing Explorer values
//

function SwingExplorerInject(){

	var bDoInjectSwingFactor = false;

	var bDoInjectSwingOffset = false;

	var theSwingFactor = document.getElementById("swing_explorer_factor").value;

	theSwingFactor = parseFloat(theSwingFactor);

	if (!isNaN(theSwingFactor) && ((theSwingFactor >= -0.9) && (theSwingFactor <= 0.9))){

		bDoInjectSwingFactor = true;
	}

	// Grab the swing offset
	var theSwingOffset = document.getElementById("swing_explorer_offset").value;

	theSwingOffset = parseInt(theSwingOffset);

	if (!isNaN(theSwingOffset) && ((theSwingOffset >= 0) && (theSwingOffset <= 16))){

		bDoInjectSwingOffset = true;
	}

	var tuneWithString;

	if (bDoInjectSwingFactor || bDoInjectSwingOffset){

		if (bDoInjectSwingFactor){

			var theInjectString = "%swing "+theSwingFactor;

			//
			// Strip any existing %swing out of the current tune
			//

			var searchRegExp = /^%swing.*[\r\n]*/gm 

			var tuneWithNoSwing = gPlayerABCSwingExplorerOriginal.replaceAll(searchRegExp, "");

			tuneWithSwing = InjectStringBelowTuneHeader(tuneWithNoSwing,theInjectString);

		}

		if (bDoInjectSwingOffset){

			var theInjectString = "%swing_offset "+theSwingOffset;

			//
			// Strip any existing %swing_offset out of the current tune
			//

			var searchRegExp = /^%swing_offset.*[\r\n]*/gm 

			if (!bDoInjectSwingFactor){

				var tuneWithNoSwing = gPlayerABCSwingExplorerOriginal.replaceAll(searchRegExp, "");

				tuneWithSwing = InjectStringBelowTuneHeader(tuneWithNoSwing,theInjectString);

			}
			else{

				var tuneWithNoSwingOffset = tuneWithSwing.replaceAll(searchRegExp, "");

				tuneWithSwing = InjectStringBelowTuneHeader(tuneWithNoSwingOffset,theInjectString);

			}

		}

		// Seeing extra line breaks after the inject
		tuneWithSwing = tuneWithSwing.replace("\n\n","");

		// Try and keep the same tune after the redraw for immediate play
		var theSelectionStart = gTheABC.selectionStart;

		// Stuff in the injected ABC
		var theABC = gTheABC.value;

		theABC = theABC.replace(gPlayerABCSwingExplorerOriginal,tuneWithSwing);
		
		setABCEditorText(theABC);

		// Set dirty
		gIsDirty = true;

		// For future injects
		gPlayerABCSwingExplorerOriginal = tuneWithSwing;

		// Have to redraw if in raw mode
    	if (gRawMode){

			RenderAsync(true,null,function(){

				var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Swing Injection Complete!</p>';

				DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

					// Set the select point
					gTheABC.selectionStart = theSelectionStart;
				    gTheABC.selectionEnd = theSelectionStart;

				    // Focus after operation
				    FocusAfterOperation();
				});
				
			});

	    }
	    else{

			var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Swing Injection Complete!</p>';

			DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

				// Set the select point
				gTheABC.selectionStart = theSelectionStart;
			    gTheABC.selectionEnd = theSelectionStart;

			    // Focus after operation
			    FocusAfterOperation();

			});

	    }

	}

}



// 
// Swing Explorer Dialog
//

var gPlayerABCSwingExplorerOriginal = null;
var gPlayerABCSwingExplorerProcessed = null;

function SwingExplorerDialog(theOriginalABC, theProcessedABC, swing_explorer_state){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","SwingExplorerDialog");

	gMIDIbuffer = null;
	gTheOKButton = null;

	// We came in because of a swing change, don't init the tune cache
	if (!swing_explorer_state){

		gPlayerABCSwingExplorerOriginal = theOriginalABC;
		gPlayerABCSwingExplorerProcessed = theProcessedABC;

	}

	// Do common setup of soundfont and custom timing injection
	if (!PlayerSetupCommon(theProcessedABC)){
		return;
	}

	// Setup any swing found (Only done the first time)
	if (!swing_explorer_state){
		
		ScanTuneForCustomTimingInjection(theProcessedABC);

		// Swing explorer scan overrides the default
		ScanTuneForSwingExplorer(theProcessedABC);
	}
	
	var instrument = GetRadioValue("notenodertab");

	var abcOptions = GetABCJSParams(instrument);

	abcOptions.oneSvgPerLine = false;

	// Clear the tab label if present to compress vertical space
	if (instrument != "noten" ){

		// Sanity check the options first
		if (abcOptions.tablature && (abcOptions.tablature.length > 0)){
			abcOptions.tablature[0].label = "";
		}
	}
	

	function setTune(userAction) {

		synthControl.disable(true);

		var visualObj = ABCJS.renderAbc("playback-paper", theProcessedABC, abcOptions)[0];

		// Post process whistle or note name tab
		postProcessTab([visualObj], "playback-paper", instrument, true);

		var midiBuffer = new ABCJS.synth.CreateSynth(theProcessedABC);

		gMIDIbuffer = midiBuffer;
        gMIDIInitStillWaiting = false;

        SetupPlayerEventHandlers();

		midiBuffer.init({
			visualObj: visualObj
		}).then(function (response) {

			//console.log(response);
			
      if (synthControl) {

				var fadeLength = computeFade(theProcessedABC);

				synthControl.setTune(visualObj, userAction, {fadeLength:fadeLength}).then(function (response) {
					
					console.log("Audio successfully loaded.");
					
					gSynthControl = synthControl;

					// Hook up tempo dialog
					var elem = document.getElementsByClassName("abcjs-midi-tempo");
					if (elem && (elem.length > 0)){
						elem[0].onclick = SetPlayerTempo;
					}

					// Are we using the trainer touch controls
					if (gTrainerTouchControls){

						//debugger;

						var elems1 = document.getElementsByClassName("abcjs-midi-clock");
						var elems2 = document.getElementsByClassName("abcjs-midi-current-tempo-wrapper");

						if (elems1 && elems2 && (elems1.length > 0) && (elems2.length > 0)){
							
							var elem = elems1[0];
							elem.onclick = DecrementTempo;
							elem = elems2[0];
							elem.onclick = IncrementTempo;

						}
					
					}


				}).catch(function (error) {
					
			    // MAE 10 Jul 2024 - Hide the spinner
					hideTheSpinner();
        	gMIDIInitStillWaiting = false;
					console.log("Problem loading audio for this tune");

				});
			}
		}).catch(function (error) {

	    // MAE 10 Jul 2024 - Hide the spinner
			hideTheSpinner();
      gMIDIInitStillWaiting = false;
			console.log("Problem loading audio for this tune");

		});
	}

	function StopPlay(){

		gSynthControl = null;

		if (synthControl){
				
			synthControl.destroy();

			synthControl = null;
		}
	}

	var cursorControl = new CursorControl();

	var synthControl;

	function initPlay() {

		// Clear the looper callback
		gLoopCallback = null;
		gStartPlayCallback = null;
		gPreStartPlayCallback = null;

		// Clear the player in pause flag
		gPlayerInPause = false;

		// Adapt the top based on the player control size
		var theTop = 50;

		var theHeight = window.innerHeight - 400;

	   	modal_msg = '<div id="playerholder" style="height:'+theHeight+'px;overflow-y:auto;margin-bottom:15px;">';

		if (gLargePlayerControls){
			modal_msg += '<div id="abcplayer" class="abcjs-large">';
		}
		else{
			modal_msg += '<div id="abcplayer">';			
		}

	   	modal_msg += '<div id="playback-paper"></div>';
	   	modal_msg += '</div>';

	   	modal_msg += '</div>';

	   	// Add the player controls
		if (gLargePlayerControls){
	   		modal_msg += '<div id="playback-audio" class="abcjs-large"></div>';
		}
		else{
	   		modal_msg += '<div id="playback-audio"></div>';
		}

	   	// Add the swing explorer controls
		if (isMobileBrowser()){

			modal_msg += '<p class="configure_swingexplorer_text_mobile" style="text-align:center;margin:0px;margin-top:22px">';

			modal_msg += 'Swing factor: <input style="width:80px;" id="swing_explorer_factor" type="number" min="-0.9" step="0.05" max=".9" title="Swing factor, range is -0.9 to 0.9" autocomplete="off"/>';
			modal_msg += '&nbsp;&nbsp;Swing offset: <input style="width:90px;" id="swing_explorer_offset" type="number" min="0" step="1" max="16" title="Swing offset in eighth notes, range is 0 to 16" autocomplete="off"/>';
			modal_msg += '</p>';

			modal_msg += '<p class="configure_swingexplorer_text_mobile" style="text-align:center;margin:0px;margin-top:22px">';
			modal_msg += '<input id="swingexplorertest" class="swingexplorertest button btn btn-swingexplorertest" onclick="SwingExplorerRegenerate();" type="button" value="Reload Tune with Changed Swing Settings" title="Reloads the tune into the player with the entered swing factor">';
			modal_msg += '<input id="swingexplorerinject" class="swingexplorerinject button btn btn-swingexplorerinject" onclick="SwingExplorerInject();" type="button" style="margin-right:0px;" value="Inject Swing into the ABC" title="Injects the current swing factor into the tune ABC">';
			modal_msg += '</p>';
			modal_msg += '<a id="swingexplorerhelp" href="https://michaeleskin.com/abctools/userguide.html#swing_explorer" target="_blank" style="text-decoration:none;" title="Learn more about the Swing Explorer" class="dialogcornerbutton">?</a>';
		}
		else{

			modal_msg += '<p class="configure_swingexplorer_text" style="text-align:center;margin:0px;margin-top:22px">';

			modal_msg += 'Swing factor (range is -0.9 to 0.9): <input style="width:90px;" id="swing_explorer_factor" type="number" min="-0.9" step="0.05" max=".9" title="Swing factor, range is -0.9 to 0.9" autocomplete="off"/>';
			modal_msg += '&nbsp;&nbsp;Swing offset in eighth notes (range is 0 to 16): <input style="width:90px;" id="swing_explorer_offset" type="number" min="0" step="1" max="16" title="Swing offset in eighth notes, range is 0 to 16" autocomplete="off"/>';
			modal_msg += '</p>';
			modal_msg += '<p class="configure_swingexplorer_text" style="text-align:center;margin:0px;margin-top:22px">';
			modal_msg += '<input id="swingexplorertest" class="swingexplorertest button btn btn-swingexplorertest" onclick="SwingExplorerRegenerate();" type="button" value="Reload Tune with Changed Swing Settings" title="Reloads the tune into the player with the entered swing factor and offset">';
			modal_msg += '<input id="swingexplorerinject" class="swingexplorerinject button btn btn-swingexplorerinject" onclick="SwingExplorerInject();" type="button" style="margin-right:0px;" value="Inject Swing into the ABC" title="Injects the current swing factor and offset into the tune ABC">';
			modal_msg += '</p>';
			modal_msg += '<a id="swingexplorerhelp" href="https://michaeleskin.com/abctools/userguide.html#swing_explorer" target="_blank" style="text-decoration:none;" title="Learn more about the Swing Explorer" class="dialogcornerbutton">?</a>';

		}

	   	// Scale the player for larger screens
		var windowWidth = window.innerWidth;

		var instrument = GetRadioValue("notenodertab");

		var theWidth;

		if (isDesktopBrowser()){

			if (giPadTwoColumn){
				if (isLandscapeOrientation()){
					theWidth = windowWidth * (gPlayerScaling / 100);
				}
				else{
					theWidth = windowWidth * 0.9;	
				}
			}
			else{
				theWidth = windowWidth * (gPlayerScaling / 100);
			}

			if (theWidth < 850){
				theWidth = 850;
			}

		}
		else{

			theWidth = 800;  
			
		}

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: theTop, width:theWidth, okText:"Close", scrollWithPage: (isMobileBrowser()) });

		// Set the initial swing factor 
		document.getElementById("swing_explorer_factor").value = gSwingFactor;

		// Set the initial swing offset 
		document.getElementById("swing_explorer_offset").value = gSwingOffset;

		var theOKButtons = document.getElementsByClassName("modal_flat_ok");

		// Find the button that says "Close" and hook its click handler to make sure music stops on close
		// Need to search through the modals since there may be a first time share dialog also present
		// the first time someone plays a linked PDF tune

		var theOKButton = null;

		for (var i=0;i<theOKButtons.length;++i){

			theOKButton = theOKButtons[i];

			if (theOKButton.innerText == "Close"){

				gTheOKButton = theOKButton;

				var originalOnClick = theOKButton.onclick;

				theOKButton.onclick = function(){

					originalOnClick(); 
					StopPlay(); 

				    // Focus after operation
				    FocusAfterOperation();

					// If on iOS and the muting controller installed, dispose it now
					if (gIsIOS){

						if (gTheMuteHandle){
						 	gTheMuteHandle.dispose();
  							gTheMuteHandle = null;
  						}
					}

				};

				break;

			}
		}

		if (ABCJS.synth.supportsAudio()) {
			
			synthControl = new ABCJS.synth.SynthController(theProcessedABC);

			synthControl.load("#playback-audio", cursorControl, {displayLoop: true, displayRestart: true, displayPlay: true, displayProgress: true, displayWarp: true});


		} else {

			document.querySelector("#playback-audio").innerHTML = "<div class='audio-error'>Audio is not supported in this browser.</div>";

		}

		setTune(false);

		// Cache autoscroll values early
		gPlayerHolder = document.getElementById("playerholder");
		gPlayerContainerRect = gPlayerHolder.getBoundingClientRect();
	}

	// Try to deal with tab deactivation muting
	if (gIsIOS){

		var context = ABCJS.synth.activeAudioContext();

		// Decide on some parameters
		let allowBackgroundPlayback = false; // default false, recommended false
		let forceIOSBehavior = false; // default false, recommended false

		gTheMuteHandle = null;
		
		// Pass it to unmute if the context exists... ie WebAudio is supported
		if (context)
		{
		  // If you need to be able to disable unmute at a later time, you can use the returned handle's dispose() method
		  // if you don't need to do that (most folks won't) then you can simply ignore the return value
		  gTheMuteHandle = unmute(context, allowBackgroundPlayback, forceIOSBehavior);
		  
		}
	}

	initPlay();

}

//
// Reverb Explorer
//
function ReverbExplorer(){

	//console.log("ReverbExplorer");

	if (gAllowCopy){

		// Deactivate Quick Player 
		deactivateQuickPlayer();

		// Play back locally

		// Try to find the current tune
		var theSelectedABC = findSelectedTune();

		if (theSelectedABC == ""){
			// This should never happen
			return;
		}

		// Pre-process the ABC to inject any requested programs or volumes
		var theProcessedABC = PreProcessPlayABC(theSelectedABC);

		// Play back locally in-tool	
		ReverbExplorerDialog(theSelectedABC,theProcessedABC,false);

	}
}

//
// Reload the player with a new reverb setting
//
function ReverbExplorerRegenerate(){

	//console.log("ReverbExplorerRegenerate");

	// Get the style from the dropdown
	gReverbExplorerStyle = document.getElementById("reverb_explorer_settings").value;

	// Get the Dry and Wet values
	gReverbExplorerDry = document.getElementById("reverb_explorer_dry").value;
	gReverbExplorerWet = document.getElementById("reverb_explorer_wet").value;

	gTheOKButton.click();

	setTimeout(function() {

		// Launch the player with the instruments injected tune
		ReverbExplorerDialog(gPlayerReverbExplorerOriginal,gPlayerReverbExplorerProcessed,true);

	},250);
}

//
// Scan tune for swing annotation for the swing explorer
//
function ScanTuneForReverbExplorer(theTune){

	//console.log("ScanTuneForReverbExplorer");

	//debugger;

	// Valid reverb styles
	var reverbStyles = ["off", "room","room1","room2","room3","chamber","chamber1","chamber2","chamber3","hall","hall1","hall2","hall3","church","church1","custom"];

	// Search for reverb request
	var searchRegExp = /^%reverb.*$/gm

	// Detect reverb annotation
	var setReverb = theTune.match(searchRegExp);

	// Set the defaults
	gReverbExplorerDry = 1.0;
	gReverbExplorerWet = 0.0;
	gReverbExplorerStyle = 0;

	if ((setReverb) && (setReverb.length > 0)){

		// Enable reverb
		var gotStyle = false;
		var gotDry = false;
		var gotWet = false;

		var theStyle;
		var theDry;
		var theWet;

		var isOff = false;

		var thePatch = setReverb[0].replace("%reverb","");

		thePatch = thePatch.trim();

		var thePatches = thePatch.match(/[a-zA-Z0-9.]+/g);

		if (thePatches && (thePatches.length > 0)){
			
			if (thePatches.length >= 1){
				theStyle = thePatches[0];
				theStyle = theStyle.trim();

				for (var i=0;i<reverbStyles.length;++i){
					if (theStyle == reverbStyles[i]){
						gotStyle = true;
						break;
					}
				}
			}

			if (thePatches.length >= 2){
				theDry = thePatches[1];
				theDry = theDry.trim();
				theDry = parseFloat(theDry);
				if ((!isNaN(theDry)) && (theDry >= 0)){
					gotDry = true;
				}
			}	

			if (thePatches.length >= 3){
				theWet = thePatches[2];
				theWet = theWet.trim();
				theWet = parseFloat(theWet);
				if ((!isNaN(theWet)) && (theWet >= 0)){
					gotWet = true;
				}
			}

			if (theStyle == "off"){
				isOff = true;
				theDry = 1.0;
				theWet = 0.0;
			}

			if (isOff || (gotStyle && gotDry && gotWet)){

				//console.log("Reverb - Got complete definition: "+theStyle+" "+theDry+" "+theWet);
				//console.log("oldReverbStyle = "+oldReverbStyle);
				
				gReverbExplorerDry = theDry;
				gReverbExplorerWet = theWet;

				switch (theStyle){
					case "off":
						gReverbExplorerStyle = 0;
						break;
					case "room":
						gReverbExplorerStyle = 1;
						break;
					case "room1":
						gReverbExplorerStyle = 2;
						break;
					case "room2":
						gReverbExplorerStyle = 3;
						break;
					case "room3":
						gReverbExplorerStyle = 4;
						break;
					case "chamber":
						gReverbExplorerStyle = 5;
						break;
					case "chamber1":
						gReverbExplorerStyle = 6;
						break;
					case "chamber2":
						gReverbExplorerStyle = 7;
						break;
					case "chamber3":
						gReverbExplorerStyle = 8;
						break;
					case "hall":
						gReverbExplorerStyle = 9;
						break;
					case "hall1":
						gReverbExplorerStyle = 10;
						break;
					case "hall2":
						gReverbExplorerStyle = 11;
						break;
					case "hall3":
						gReverbExplorerStyle = 12;
						break;
					case "church":
						gReverbExplorerStyle = 13;
						break;
					case "church1":
						gReverbExplorerStyle = 14;
						break;
					case "custom":
						gReverbExplorerStyle = 15;
						break;
					default:
						gReverbExplorerStyle = 0;
						break;

				}

			}
		}
	}

}

//
// Inject the tune with the Reverb Explorer values
//

function ReverbExplorerInject(){

	//console.log("ReverbExplorerInject");

	// Get the style from the dropdown
	var theReverbStyle = document.getElementById("reverb_explorer_settings").value;

	theReverbStyle = reverbSettingsNames[theReverbStyle];
	theReverbStyle = theReverbStyle.replace(" ","");
	theReverbStyle = theReverbStyle.toLowerCase();

	//console.log("theReverbStyle = "+theReverbStyle);

	var isOff = false;

	if (theReverbStyle == "off"){
		isOff = true;
	}

	var bDoInjectDry = false;

	var theDry = document.getElementById("reverb_explorer_dry").value;

	theDry = parseFloat(theDry);

	if (!isNaN(theDry) && ((theDry >= 0) && (theDry <= 10))){

		bDoInjectDry = true;
	}

	var bDoInjectWet = false;

	// Grab the wet
	var theWet = document.getElementById("reverb_explorer_wet").value;

	theWet = parseFloat(theWet);

	if ((!isNaN(theWet)) && (theWet >= 0) && (theWet <= 10)){

		bDoInjectWet = true;

	}

	if (isOff || (bDoInjectDry && bDoInjectWet)){

		var theInjectString;

		if (isOff){

			theInjectString = "%reverb off";

		}
		else{

			theInjectString = "%reverb "+theReverbStyle+" "+theDry+" "+theWet;

		}

		//
		// Strip any existing %reverb out of the current tune
		//

		var searchRegExp = /^%reverb.*[\r\n]*/gm 

		var tuneWithNoReverb = gPlayerReverbExplorerOriginal.replaceAll(searchRegExp, "");

		var tuneWithReverb = InjectStringBelowTuneHeader(tuneWithNoReverb,theInjectString);

		// Seeing extra line breaks after the inject
		tuneWithReverb = tuneWithReverb.replace("\n\n","");

		// Try and keep the same tune after the redraw for immediate play
		var theSelectionStart = gTheABC.selectionStart;

		// Stuff in the injected ABC
		var theABC = gTheABC.value;

		theABC = theABC.replace(gPlayerReverbExplorerOriginal,tuneWithReverb);
		
		setABCEditorText(theABC);

		// Set dirty
		gIsDirty = true;

		// For future injects
		gPlayerReverbExplorerOriginal = tuneWithReverb;

		// Have to redraw if in raw mode
    	if (gRawMode){

			RenderAsync(true,null,function(){

				var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Reverb Injection Complete!</p>';

				DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

					// Set the select point
					gTheABC.selectionStart = theSelectionStart;
				    gTheABC.selectionEnd = theSelectionStart;

				    // Focus after operation
				    FocusAfterOperation();
				    
				});
				
			});

	    }
	    else{

			var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Reverb Injection Complete!</p>';

			DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

				// Set the select point
				gTheABC.selectionStart = theSelectionStart;
			    gTheABC.selectionEnd = theSelectionStart;

			    // Focus after operation
			    FocusAfterOperation();
			    
			});

	    }


	}

}

//
// Inject the reverb into this tune
//
function ReverbExplorerDialogInjectThisTune(theTune){

	//console.log("ReverbExplorerDialogInjectThisTune");

	var isOff = false;

	var theReverbStyle = reverbSettingsNames[gReverbExplorerStyle];
	theReverbStyle = theReverbStyle.replace(" ","");
	theReverbStyle = theReverbStyle.toLowerCase();

	if (theReverbStyle == "off"){
		isOff = true;
	}

	if (isOff){

		theInjectString = "%reverb off";

	}
	else{

		theInjectString = "%reverb "+theReverbStyle+" "+gReverbExplorerDry+" "+gReverbExplorerWet;

	}
	
	//
	// Strip any existing %reverb out of the current tune
	//

	var searchRegExp = /^%reverb.*[\r\n]*/gm 

	theTune = theTune.replaceAll(searchRegExp, "");

	theTune = InjectStringBelowTuneHeader(theTune,theInjectString);

	// Seeing extra linefeeds after the inject
	theTune = theTune.replace("\n\n","");

	return(theTune);

}

// 
// Reverb Explorer Dialog
//

var gReverbExplorerStyle = 0;
var gReverbExplorerDry = 0;
var gReverbExplorerWet = 0;
var gPlayerReverbExplorerOriginal = null;
var gPlayerReverbExplorerProcessed = null;
var gReverbExplorerSettings = null;

const reverbSettingsNames = [
	"Off",
	"Room",
	"Room 1",
	"Room 2",
	"Room 3",
	"Chamber",
	"Chamber 1",
	"Chamber 2",
	"Chamber 3",
	"Hall",
	"Hall 1",
	"Hall 2",
	"Hall 3",
	"Church",
	"Church 1",
	"Custom"
];

// Idle the load reverb kernel button
function idleReverbExplorer(){

	// Shared code with the advanced settings
	idleAdvancedSettings();
}

function ReverbExplorerDialog(theOriginalABC, theProcessedABC, reverb_explorer_state){

	//console.log("ReverbExplorerDialog");

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","ReverbExplorerDialog");

	gMIDIbuffer = null;
	gTheOKButton = null;

	// We came in because of a reverb change, don't init the tune cache
	if (!reverb_explorer_state){

		gPlayerReverbExplorerOriginal = theOriginalABC;
		gPlayerReverbExplorerProcessed = theProcessedABC;

	}

	// Do common setup of soundfont and custom timing injection
	if (!PlayerSetupCommon(theProcessedABC)){
		return;
	}

	// Setup any reverb found (Only done the first time)
	if (!reverb_explorer_state){
		
		ScanTuneForCustomTimingInjection(theProcessedABC);

		// Reverb explorer scan overrides the default
		ScanTuneForReverbExplorer(theProcessedABC);
	}
	
	if (!gReverbExplorerSettings){

		gReverbExplorerSettings = InstrumentExplorerBuildDropdown("reverb_explorer_settings",reverbSettingsNames);

	}

	theProcessedABC = ReverbExplorerDialogInjectThisTune(gPlayerReverbExplorerProcessed);

	ScanTuneForReverb(theProcessedABC);

	var instrument = GetRadioValue("notenodertab");

	var abcOptions = GetABCJSParams(instrument);

	abcOptions.oneSvgPerLine = false;

	// Clear the tab label if present to compress vertical space
	if (instrument != "noten" ){

		// Sanity check the options first
		if (abcOptions.tablature && (abcOptions.tablature.length > 0)){
			abcOptions.tablature[0].label = "";
		}
	}
	
	function setTune(userAction) {

		synthControl.disable(true);

		var visualObj = ABCJS.renderAbc("playback-paper", theProcessedABC, abcOptions)[0];

		// Post process whistle or note name tab
		postProcessTab([visualObj], "playback-paper", instrument, true);

		var midiBuffer = new ABCJS.synth.CreateSynth(theProcessedABC);

		gMIDIbuffer = midiBuffer;
        gMIDIInitStillWaiting = false;

		SetupPlayerEventHandlers();

		midiBuffer.init({
			visualObj: visualObj
		}).then(function (response) {

			//console.log(response);
			
      if (synthControl) {

				var fadeLength = computeFade(theProcessedABC);

				synthControl.setTune(visualObj, userAction, {fadeLength:fadeLength}).then(function (response) {
					
					console.log("Audio successfully loaded.");
					gSynthControl = synthControl;

					// Hook up tempo dialog
					var elem = document.getElementsByClassName("abcjs-midi-tempo");
					if (elem && (elem.length > 0)){
						elem[0].onclick = SetPlayerTempo;
					}

					// Are we using the trainer touch controls
					if (gTrainerTouchControls){

						//debugger;

						var elems1 = document.getElementsByClassName("abcjs-midi-clock");
						var elems2 = document.getElementsByClassName("abcjs-midi-current-tempo-wrapper");

						if (elems1 && elems2 && (elems1.length > 0) && (elems2.length > 0)){

							var elem = elems1[0];
							elem.onclick = DecrementTempo;
							elem = elems2[0];
							elem.onclick = IncrementTempo;

						}
					
					}


				}).catch(function (error) {
					
			    // MAE 10 Jul 2024 - Hide the spinner
					hideTheSpinner();
        	gMIDIInitStillWaiting = false;
					console.log("Problem loading audio for this tune");

				});
			}
		}).catch(function (error) {

	    // MAE 10 Jul 2024 - Hide the spinner
			hideTheSpinner();
      gMIDIInitStillWaiting = false;
			console.log("Problem loading audio for this tune");

		});
	}

	function StopPlay(){

		gSynthControl = null;

		if (synthControl){
				
			synthControl.destroy();

			synthControl = null;
		}
	}

	var cursorControl = new CursorControl();

	var synthControl;

	function initPlay() {

		// Clear the looper callback
		gLoopCallback = null;
		gStartPlayCallback = null;
		gPreStartPlayCallback = null;

		// Clear the player in pause flag
		gPlayerInPause = false;

		// Adapt the top based on the player control size
		var theTop = 50;

		var theHeight = window.innerHeight - 400;

	   	modal_msg = '<div id="playerholder" style="height:'+theHeight+'px;overflow-y:auto;margin-bottom:15px;">';

		if (gLargePlayerControls){
			modal_msg += '<div id="abcplayer" class="abcjs-large">';
		}
		else{
			modal_msg += '<div id="abcplayer">';			
		}

	   	modal_msg += '<div id="playback-paper"></div>';
	   	modal_msg += '</div>';

	   	modal_msg += '</div>';

	   	// Add the player controls
		if (gLargePlayerControls){
	   		modal_msg += '<div id="playback-audio" class="abcjs-large"></div>';
		}
		else{
	   		modal_msg += '<div id="playback-audio"></div>';
		}

	   	// Add the reverb explorer controls
		if (isMobileBrowser()){

			modal_msg += '<p class="configure_reverbexplorer_text_mobile" style="text-align:center;margin:0px;margin-top:22px">';

			modal_msg += "Reverb style:"+gReverbExplorerSettings;

			modal_msg += '&nbsp;&nbsp;&nbsp;Dry signal fraction: <input style="width:80px;" id="reverb_explorer_dry" type="number" min="0" step="0.05" max="5" title="How much of the original sound gets mixed in" autocomplete="off"/>';
			modal_msg += 'Wet signal fraction: <input style="width:80px;" id="reverb_explorer_wet" type="number" min="0" step="0.05" max="5" title="How much of the reverb gets mixed in" autocomplete="off"/>';
			modal_msg += '</p>';

			modal_msg += '<p class="configure_reverbexplorer_text_mobile" style="text-align:center;margin:0px;margin-top:22px">';
			modal_msg += '<input id="reverbexplorertest" class="reverbexplorertest button btn btn-reverbexplorertest" onclick="ReverbExplorerRegenerate();" type="button" value="Reload with Changed Reverb Settings" title="Reloads the tune into the player with the entered reverb settings">';
			modal_msg += '<input id="reverbexplorerinject" class="reverbexplorerinject button btn btn-reverbexplorerinject" onclick="ReverbExplorerInject();" type="button" style="margin-right:24px;" value="Inject Reverb into the ABC" title="Injects the current reverb settings into the tune ABC">';
			modal_msg += '<label class="loadimpulsebutton btn btn-reverbexplorerinject" for="loadimpulsebutton" title="Load a custom reverb convolution impulse .wav file">Load Custom Reverb Impulse <input type="file" id="loadimpulsebutton"  accept=".wav,.WAV" hidden/></label>'

			modal_msg += '</p>';
			modal_msg += '<a id="reverbexplorerhelp" href="https://michaeleskin.com/abctools/userguide.html#reverb_explorer" target="_blank" style="text-decoration:none;" title="Learn more about the Reverb Explorer" class="dialogcornerbutton">?</a>';
		}
		else{


			modal_msg += '<p class="configure_reverbexplorer_text" style="text-align:center;margin:0px;margin-top:22px">';

			modal_msg += "Reverb style:"+gReverbExplorerSettings;

			modal_msg += '&nbsp;&nbsp;&nbsp;Dry signal fraction: <input style="width:80px;" id="reverb_explorer_dry" type="number" min="0" step="0.05" max="5" title="How much of the original sound gets mixed in" autocomplete="off"/>';
			modal_msg += 'Wet signal fraction: <input style="width:80px;" id="reverb_explorer_wet" type="number" min="0" step="0.05" max="5" title="How much of the reverb gets mixed in" autocomplete="off"/>';
			modal_msg += '</p>';

			modal_msg += '<p class="configure_reverbexplorer_text" style="text-align:center;margin:0px;margin-top:22px">';
			modal_msg += '<input id="reverbexplorertest" class="reverbexplorertest button btn btn-reverbexplorertest" onclick="ReverbExplorerRegenerate();" type="button" value="Reload Tune with Changed Reverb Settings" title="Reloads the tune into the player with the entered reverb settings">';
			modal_msg += '<input id="reverbexplorerinject" class="reverbexplorerinject button btn btn-reverbexplorerinject" onclick="ReverbExplorerInject();" type="button" style="margin-right:24px;" value="Inject Reverb into the ABC" title="Injects the current reverb settings into the tune ABC">';
			modal_msg += '<label class="loadimpulsebutton btn btn-reverbexplorerinject" for="loadimpulsebutton" title="Load a custom reverb convolution impulse .wav file">Load Custom Reverb Impulse <input type="file" id="loadimpulsebutton"  accept=".wav,.WAV" hidden/></label>'
			modal_msg += '</p>';
			modal_msg += '<a id="reverbexplorerhelp" href="https://michaeleskin.com/abctools/userguide.html#reverb_explorer" target="_blank" style="text-decoration:none;" title="Learn more about the Swing Explorer" class="dialogcornerbutton">?</a>';

		}

	   	// Scale the player for larger screens
		var windowWidth = window.innerWidth;

		var instrument = GetRadioValue("notenodertab");

		var theWidth;

		if (isDesktopBrowser()){

			if (giPadTwoColumn){
				if (isLandscapeOrientation()){
					theWidth = windowWidth * (gPlayerScaling / 100);
				}
				else{
					theWidth = windowWidth * 0.9;	
				}
			}
			else{
				theWidth = windowWidth * (gPlayerScaling / 100);
			}

			if (theWidth < 850){
				theWidth = 850;
			}

		}
		else{

			theWidth = 800;  
			
		}

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: theTop, width:theWidth, okText:"Close", scrollWithPage: (isMobileBrowser()) });

		// Set up the reverb impulse load callback
		setTimeout(function(){

			idleReverbExplorer();

		}, 100);

		// Set the initial reverb configuration
		document.getElementById("reverb_explorer_dry").value = gReverbExplorerDry;
		document.getElementById("reverb_explorer_wet").value = gReverbExplorerWet;
		document.getElementById("reverb_explorer_settings").value = gReverbExplorerStyle;

		var theOKButtons = document.getElementsByClassName("modal_flat_ok");

		// Find the button that says "Close" and hook its click handler to make sure music stops on close
		// Need to search through the modals since there may be a first time share dialog also present
		// the first time someone plays a linked PDF tune

		var theOKButton = null;

		for (var i=0;i<theOKButtons.length;++i){

			theOKButton = theOKButtons[i];

			if (theOKButton.innerText == "Close"){

				gTheOKButton = theOKButton;

				var originalOnClick = theOKButton.onclick;

				theOKButton.onclick = function(){

					originalOnClick(); 
					StopPlay(); 

				    // Focus after operation
				    FocusAfterOperation();

					// If on iOS and the muting controller installed, dispose it now
					if (gIsIOS){

						if (gTheMuteHandle){
						 	gTheMuteHandle.dispose();
  							gTheMuteHandle = null;
  						}
					}

				};

				break;

			}
		}

		if (ABCJS.synth.supportsAudio()) {
			
			synthControl = new ABCJS.synth.SynthController(theProcessedABC);

			synthControl.load("#playback-audio", cursorControl, {displayLoop: true, displayRestart: true, displayPlay: true, displayProgress: true, displayWarp: true});


		} else {

			document.querySelector("#playback-audio").innerHTML = "<div class='audio-error'>Audio is not supported in this browser.</div>";

		}

		setTune(false);

		// Cache autoscroll values early
		gPlayerHolder = document.getElementById("playerholder");
		gPlayerContainerRect = gPlayerHolder.getBoundingClientRect();
	}

	// Try to deal with tab deactivation muting
	if (gIsIOS){

		var context = ABCJS.synth.activeAudioContext();

		// Decide on some parameters
		let allowBackgroundPlayback = false; // default false, recommended false
		let forceIOSBehavior = false; // default false, recommended false

		gTheMuteHandle = null;
		
		// Pass it to unmute if the context exists... ie WebAudio is supported
		if (context)
		{
		  // If you need to be able to disable unmute at a later time, you can use the returned handle's dispose() method
		  // if you don't need to do that (most folks won't) then you can simply ignore the return value
		  gTheMuteHandle = unmute(context, allowBackgroundPlayback, forceIOSBehavior);
		  
		}
	}

	initPlay();

}

//
// MIDI Instrument Explorer
// 
// This allows the user to easily test playing a tune with different soundfonts and MIDI instruments
//

var gInstrumentExplorerMelodyInstruments = null;
var gInstrumentExplorerBassInstruments = null;
var gInstrumentExplorerChordInstruments = null;
var gInstrumentExplorerSoundfonts = null;

function InstrumentExplorer(){

	if (gAllowCopy){

		// Deactivate Quick Player 
		deactivateQuickPlayer();

		// Try to find the current tune
		var theSelectedABC = findSelectedTune();

		if (theSelectedABC == ""){
			// This should never happen
			return;
		}

		// Clear out the tune processing caches
		gPlayerABCInstrumentExplorerOriginal = null;
		gPlayerABCInstrumentExplorerProcessed = null;
		gPlayerABCInstrumentExplorerInjected = null;

		// Generate the instrument menus
		if (!gInstrumentExplorerSoundfonts){

			gInstrumentExplorerSoundfonts = InstrumentExplorerBuildDropdown("instrument_explorer_soundfont",soundfontNames);

			// Make the soundfont dropdown narrower using inline CSS
			gInstrumentExplorerSoundfonts = gInstrumentExplorerSoundfonts.replace('<select ','<select style="width:130px;" ');

		}

		if (!gInstrumentExplorerMelodyInstruments){

			gInstrumentExplorerMelodyInstruments = InstrumentExplorerBuildDropdown("instrument_explorer_melody_program",generalMIDISoundNames);

		}

		if (!gInstrumentExplorerBassInstruments){

			gInstrumentExplorerBassInstruments = InstrumentExplorerBuildDropdown("instrument_explorer_bass_program",generalMIDISoundNames);

		}

		if (!gInstrumentExplorerChordInstruments){

			gInstrumentExplorerChordInstruments = InstrumentExplorerBuildDropdown("instrument_explorer_chord_program",generalMIDISoundNames);

		}		

		// Fix issue with initial swing not happening
		ScanTuneForCustomTimingInjection(theSelectedABC);

		// Scan the original tune for any existing directives for initialization of the UI
		ScanTuneForInstrumentExplorer(theSelectedABC);

		// Pre-process the ABC to strip out all MIDI directives
		var theProcessedABC = PreProcessTuneInstrumentExplorer(theSelectedABC);

		// Play back locally in-tool	
		InstrumentExplorerDialog(theSelectedABC,theProcessedABC,false);

	}
}

//
// Instrument Explorer Dropdown builder
//

function InstrumentExplorerBuildDropdown(dropdown_name,dropdown_options){

	var theDropdown = '<select id="'+dropdown_name+'" name="'+dropdown_name+'">\n';

	var nOptions = dropdown_options.length;

	for (var i=0;i<nOptions;++i){

		theDropdown += '<option value="'+i+'"> '+dropdown_options[i]+'</option>'; 

	}
	
	theDropdown += '</select>'; 

	return theDropdown;


}

//
// Strip out any existing MIDI directives in the tune
//
function PreProcessTuneInstrumentExplorer(theTune){

	var searchRegExp = /^%abcjs_soundfont.*[\r\n]*/gm

	theTune = theTune.replaceAll(searchRegExp,"");

	searchRegExp = /^%soundfont.*[\r\n]*/gm

	theTune = theTune.replaceAll(searchRegExp,"");

	searchRegExp = /^%%MIDI program.*[\r\n]*/gm

	theTune = theTune.replaceAll(searchRegExp,"");

	searchRegExp = /^%%MIDI bassprog.*[\r\n]*/gm

	theTune = theTune.replaceAll(searchRegExp,"");

	searchRegExp = /^%%MIDI chordprog.*[\r\n]*/gm

	theTune = theTune.replaceAll(searchRegExp,"");

	searchRegExp = /^%%MIDI bassvol.*[\r\n]*/gm

	theTune = theTune.replaceAll(searchRegExp,"");

	searchRegExp = /^%%MIDI chordvol.*[\r\n]*/gm

	theTune = theTune.replaceAll(searchRegExp,"");

	return theTune;

}

//
// Reload the player with new instruments and volumes
//
function InstrumentExplorerRegenerate(){

	// Grab the sound font
	gInstrumentExplorerSoundfont = document.getElementById("instrument_explorer_soundfont").value;

	// Grab the melody instrument
	gInstrumentExplorerMelodyInstrument = document.getElementById("instrument_explorer_melody_program").value;

	// Grab the bass instrument
	gInstrumentExplorerBassInstrument = document.getElementById("instrument_explorer_bass_program").value;

	// Grab the chord instrument
	gInstrumentExplorerChordInstrument = document.getElementById("instrument_explorer_chord_program").value;

	// Grab the bass volume
	var theBassVolume = document.getElementById("instrument_explorer_bass_volume").value;

	theBassVolume = parseInt(theBassVolume);
	if (!isNaN(theBassVolume)){
		gInstrumentExplorerBassVolume = theBassVolume;
	}

	// Grab the chord volume
	var theChordVolume = document.getElementById("instrument_explorer_chord_volume").value;

	theChordVolume = parseInt(theChordVolume);
	if (!isNaN(theChordVolume)){
		gInstrumentExplorerChordVolume = theChordVolume;
	}

	gTheOKButton.click();

	setTimeout(function() {

		// Launch the player with the instruments injected tune
		InstrumentExplorerDialog(gPlayerABCInstrumentExplorerOriginal,gPlayerABCInstrumentExplorerProcessed,true);

	},250);
}


//
// Scan tune for MIDI soundfont, programs and volumes to use as starting defaults for the Instrument Explorer
//
function ScanTuneForInstrumentExplorer(theTune){

	// Start with the setting defaults

	switch (gDefaultSoundFont){
		case "https://paulrosen.github.io/midi-js-soundfonts/FluidR3_GM/":
			gInstrumentExplorerSoundfont = "0";
			break;
		case "https://paulrosen.github.io/midi-js-soundfonts/MusyngKite/":
			gInstrumentExplorerSoundfont = "1";
			break;
		//case "https://paulrosen.github.io/midi-js-soundfonts/FatBoy/":
		case "https://michaeleskin.com/abctools/soundfonts/fatboy_4/":
			gInstrumentExplorerSoundfont = "2";
			break;
		case "https://michaeleskin.com/abctools/soundfonts/canvas/":
			gInstrumentExplorerSoundfont = "3";
			break;
		case "https://michaeleskin.com/abctools/soundfonts/mscore_2/":
			gInstrumentExplorerSoundfont = "4";
			break;
		case "https://michaeleskin.com/abctools/soundfonts/arachno_3/":
			gInstrumentExplorerSoundfont = "5";
			break;
		case "https://michaeleskin.com/abctools/soundfonts/fluidhq_1/":
			gInstrumentExplorerSoundfont = "6";
			break;
		default:
			gInstrumentExplorerSoundfont = "0";
			break;		
	}

	if (gTheMelodyProgram == "150"){
		gInstrumentExplorerMelodyInstrument = 0;
	}
	else{
		gInstrumentExplorerMelodyInstrument = parseInt(gTheMelodyProgram)+1;
	}

	gInstrumentExplorerMelodyInstrument = ""+gInstrumentExplorerMelodyInstrument;

	if (gTheChordProgram == "150"){
		gInstrumentExplorerChordInstrument = 0;
	}
	else{
		gInstrumentExplorerChordInstrument = parseInt(gTheChordProgram)+1;
	}

	gInstrumentExplorerChordInstrument = ""+gInstrumentExplorerChordInstrument;

	if (gTheBassProgram == "150"){
		gInstrumentExplorerBassInstrument = 0;
	}
	else{
		gInstrumentExplorerBassInstrument = parseInt(gTheBassProgram)+1;
	}

	gInstrumentExplorerBassInstrument = ""+gInstrumentExplorerBassInstrument;

	gInstrumentExplorerBassVolume = gTheBassVolume;
	gInstrumentExplorerChordVolume = gTheChordVolume;

	var searchRegExp;

	var theMatch;

	var commandToReplace = "%abcjs_soundfont";
	var gotSoundFont = false;

	searchRegExp = /^%abcjs_soundfont.*$/gm

	theMatch = theTune.match(searchRegExp);

	if ((theMatch) && (theMatch.length > 0)){

		gotSoundFont = true;

	}
	else{

		searchRegExp = /^%soundfont.*$/gm

		theMatch = theTune.match(searchRegExp);

		if ((theMatch) && (theMatch.length > 0)){

			gotSoundFont = true;

			commandToReplace = "%soundfont";
		}

	}

	if (gotSoundFont){
		var theParamString = theMatch[theMatch.length-1].replace(commandToReplace,"");

		theParamString = theParamString.trim();

		if (theParamString != ""){

			switch (theParamString){
				case "fluid":
					gInstrumentExplorerSoundfont = "0";
					break;
				case "musyng":
					gInstrumentExplorerSoundfont = "1";
					break;
				case "fatboy":
					gInstrumentExplorerSoundfont = "2";
					break;
				case "canvas":
					gInstrumentExplorerSoundfont = "3";
					break;
				case "mscore":
					gInstrumentExplorerSoundfont = "4";
					break;
				case "arachno":
					gInstrumentExplorerSoundfont = "5";
					break;
				case "fluidhq":
					gInstrumentExplorerSoundfont = "6";
					break;
			}
		}
	}

	searchRegExp = /^%%MIDI program.*$/gm

	theMatch = theTune.match(searchRegExp);

	if ((theMatch) && (theMatch.length > 0)){

		var theParamString = theMatch[0].replace("%%MIDI program","");

		theParamString = theParamString.trim();

		if (theParamString != ""){

			if (theParamString.toLowerCase()  == "mute"){

				gInstrumentExplorerMelodyInstrument = "0";
			
			}
			else{

				var theValue = parseInt(theParamString);

				if (!isNaN(theValue)){

					gInstrumentExplorerMelodyInstrument = ""+(theValue+1);

				}
			}
		}
	}

	searchRegExp = /^%%MIDI bassprog.*$/gm

	theMatch = theTune.match(searchRegExp);

	if ((theMatch) && (theMatch.length > 0)){

		var theParamString = theMatch[0].replace("%%MIDI bassprog","");

		theParamString = theParamString.trim();
		
		if (theParamString != ""){

			if (theParamString.toLowerCase() == "mute"){

				gInstrumentExplorerBassInstrument = "0";
			
			}
			else{

				var theValue = parseInt(theParamString);

				if (!isNaN(theValue)){

					gInstrumentExplorerBassInstrument = ""+(theValue+1);

				}
			}
		}
	}

	searchRegExp = /^%%MIDI chordprog.*$/gm

	theMatch = theTune.match(searchRegExp);

	if ((theMatch) && (theMatch.length > 0)){

		var theParamString = theMatch[0].replace("%%MIDI chordprog","");

		theParamString = theParamString.trim();
		
		if (theParamString != ""){

			if (theParamString.toLowerCase() == "mute"){

				gInstrumentExplorerChordInstrument = "0";
			
			}
			else{

				var theValue = parseInt(theParamString);

				if (!isNaN(theValue)){

					gInstrumentExplorerChordInstrument = ""+(theValue+1);

				}
			}
		}
	}

	searchRegExp = /^%%MIDI bassvol.*$/gm

	theMatch = theTune.match(searchRegExp);

	if ((theMatch) && (theMatch.length > 0)){

		var theParamString = theMatch[0].replace("%%MIDI bassvol","");

		theParamString = theParamString.trim();
		
		if (theParamString != ""){

			var theValue = parseInt(theParamString);

			if (!isNaN(theValue)){

				gInstrumentExplorerBassVolume = theValue;

			}
		}
	}

	searchRegExp = /^%%MIDI chordvol.*$/gm

	theMatch = theTune.match(searchRegExp);

	if ((theMatch) && (theMatch.length > 0)){

		var theParamString = theMatch[0].replace("%%MIDI chordvol","");

		theParamString = theParamString.trim();
		
		if (theParamString != ""){

			var theValue = parseInt(theParamString);

			if (!isNaN(theValue)){

				gInstrumentExplorerChordVolume = theValue;

			}
		}
	}
}

//
// Inject the tune with the Instrument Explorer values
//
function InstrumentExplorerInject(){

	// Doing all tunes
	var do_inject_all = document.getElementById("instrumentexplorer_inject_all").checked;
	//console.log("do_inject_all: "+do_inject_all);

	// Grab the sound font
	gInstrumentExplorerSoundfont = document.getElementById("instrument_explorer_soundfont").value;

	// Grab the melody instrument
	gInstrumentExplorerMelodyInstrument = document.getElementById("instrument_explorer_melody_program").value;
	
	// Grab the bass instrument
	gInstrumentExplorerBassInstrument = document.getElementById("instrument_explorer_bass_program").value;

	// Grab the chord instrument
	gInstrumentExplorerChordInstrument = document.getElementById("instrument_explorer_chord_program").value;

	// Grab the bass volume
	var theBassVolume = document.getElementById("instrument_explorer_bass_volume").value;

	theBassVolume = parseInt(theBassVolume);
	if (!isNaN(theBassVolume)){
		gInstrumentExplorerBassVolume = theBassVolume;
	}

	// Grab the chord volume
	var theChordVolume = document.getElementById("instrument_explorer_chord_volume").value;

	theChordVolume = parseInt(theChordVolume);
	if (!isNaN(theChordVolume)){
		gInstrumentExplorerChordVolume = theChordVolume;
	}

	if (!do_inject_all){

		gPlayerABCInstrumentExplorerInjected = InstrumentExplorerDialogInjectThisTune(gPlayerABCInstrumentExplorerProcessed);

		// Try and keep the same tune after the redraw for immediate play
		var theSelectionStart = gTheABC.selectionStart;

		// Stuff in the injected ABC
		var theABC = gTheABC.value;

		theABC = theABC.replace(gPlayerABCInstrumentExplorerOriginal,gPlayerABCInstrumentExplorerInjected);
		
		setABCEditorText(theABC);

		// Set dirty
		gIsDirty = true;

		// For future injects
		gPlayerABCInstrumentExplorerOriginal = gPlayerABCInstrumentExplorerInjected;

		// Have to redraw if in raw mode
		if (gRawMode){

			RenderAsync(true,null,function(){

				var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Instrument Injection Complete!</p>';

				DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

					// Set the select point
					gTheABC.selectionStart = theSelectionStart;
				    gTheABC.selectionEnd = theSelectionStart;

				    // Focus after operation
				    FocusAfterOperation();
				    
				});
				
			});

	    }
	    else{

			var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Instrument Injection Complete!</p>';

			DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

				// Set the select point
				gTheABC.selectionStart = theSelectionStart;
			    gTheABC.selectionEnd = theSelectionStart;

			    // Focus after operation
			    FocusAfterOperation();
			    
			});

	    }

	}
	else{

		// Inject all the tunes
		var nTunes = CountTunes();

		var theNotes = gTheABC.value;

		// Find the tunes
		var theTunes = theNotes.split(/^X:/gm);

		var output = FindPreTuneHeader(theNotes);

		for (var i=1;i<=nTunes;++i){

			theTunes[i] = "X:"+theTunes[i];

			output+= InstrumentExplorerDialogInjectThisTune(theTunes[i]);

			output+="\n\n";

		}

		// Stuff in the output
		setABCEditorText(output);

		// Set dirty
		gIsDirty = true;

		// Have to redraw if in raw mode
	    if (gRawMode){

			RenderAsync(true,null,function(){

				var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Instrument Injection Complete!</p>';

				DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

					// Set the select point
					gTheABC.selectionStart = 0;
				    gTheABC.selectionEnd = 0;

				    // Focus after operation
				    FocusAfterOperation();
				    
				});

			});

	    }
	    else{

			var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Instrument Injection Complete!</p>';

			DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

				// Set the select point
				gTheABC.selectionStart = 0;
			    gTheABC.selectionEnd = 0;

			    // Focus after operation
			    FocusAfterOperation();
			    
			});

	    }

	}

}

//
// Inject the MIDI parameters into this tune
//
function InstrumentExplorerDialogInjectThisTune(theTune){

	// Inject soundfont
	switch (gInstrumentExplorerSoundfont){
		case "0":
			theTune = InjectStringBelowTuneHeader(theTune, "%soundfont fluid");
			break;
		case "1":
			theTune = InjectStringBelowTuneHeader(theTune, "%soundfont musyng");
			break;
		case "2":
			theTune = InjectStringBelowTuneHeader(theTune, "%soundfont fatboy");
			break;
		case "3":
			theTune = InjectStringBelowTuneHeader(theTune, "%soundfont canvas");
			break;
		case "4":
			theTune = InjectStringBelowTuneHeader(theTune, "%soundfont mscore");
			break;
		case "5":
			theTune = InjectStringBelowTuneHeader(theTune, "%soundfont arachno");
			break;
		case "6":
			theTune = InjectStringBelowTuneHeader(theTune, "%soundfont fluidhq");
			break;
		default:
			theTune = InjectStringBelowTuneHeader(theTune, "%soundfont fluid");
			break;
	}

	// Inject melody instrument
	// Offset by one to deal with mute instrument at offset zero
	if (gInstrumentExplorerMelodyInstrument == "0"){
		theTune = InjectStringBelowTuneHeader(theTune, "%%MIDI program mute");
	}
	else{
		var theProgram = parseInt(gInstrumentExplorerMelodyInstrument)-1;
		theTune = InjectStringBelowTuneHeader(theTune, "%%MIDI program "+theProgram);
	}

	// Inject bass instrument
	if (gInstrumentExplorerBassInstrument == "0"){
		theTune = InjectStringBelowTuneHeader(theTune, "%%MIDI bassprog mute");
	}
	else{
		var theProgram = parseInt(gInstrumentExplorerBassInstrument)-1;
		theTune = InjectStringBelowTuneHeader(theTune, "%%MIDI bassprog "+theProgram);
	}

	// Inject chord instrument
	if (gInstrumentExplorerChordInstrument == "0"){
		theTune = InjectStringBelowTuneHeader(theTune, "%%MIDI chordprog mute");
	}
	else{
		var theProgram = parseInt(gInstrumentExplorerChordInstrument)-1;
		theTune = InjectStringBelowTuneHeader(theTune, "%%MIDI chordprog "+theProgram);
	}

	// Inject bass volume
	theTune = InjectStringBelowTuneHeader(theTune, "%%MIDI bassvol "+gInstrumentExplorerBassVolume);

	// Inject chord volume
	theTune = InjectStringBelowTuneHeader(theTune, "%%MIDI chordvol "+gInstrumentExplorerChordVolume);

	// Seeing extra linefeeds after the inject
	theTune = theTune.replace("\n\n","");

	return(theTune);

}

// 
// Instrument Explorer Dialog
//

var gInstrumentExplorerSoundfont = "0";
var gInstrumentExplorerMelodyInstrument = "0";
var gInstrumentExplorerBassInstrument = "0";
var gInstrumentExplorerChordInstrument = "0";
var gInstrumentExplorerBassVolume = 0;
var gInstrumentExplorerChordVolume = 0;
var gPlayerABCInstrumentExplorerOriginal = null;
var gPlayerABCInstrumentExplorerProcessed = null;
var gPlayerABCInstrumentExplorerInjected = null;

function InstrumentExplorerDialog(theOriginalABC, theProcessedABC, instrument_explorer_state){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","InstrumentExplorerDialog");

	gMIDIbuffer = null;
	gTheOKButton = null;

	// We came in because of an instrument change, don't init the tune cache
	if (!instrument_explorer_state){

		gPlayerABCInstrumentExplorerOriginal = theOriginalABC;

		gPlayerABCInstrumentExplorerProcessed = theProcessedABC;

	}

	theProcessedABC = InstrumentExplorerDialogInjectThisTune(gPlayerABCInstrumentExplorerProcessed);

	gPlayerABCInstrumentExplorerInjected = theProcessedABC;

	// Inject default reverb?
	if (gReverbString && (gReverbString != "")){

		// Check first for any reverb annotations before replacing
		var searchRegExp = /^%reverb.*$/m

		var reverbRequested = theProcessedABC.match(searchRegExp);

		if (!((reverbRequested) && (reverbRequested.length > 0))){

			theProcessedABC = InjectReverbAboveTune(theProcessedABC, gReverbString);
		}

	}	

	// Do common setup of soundfont and custom timing injection
	if (!PlayerSetupCommon(theProcessedABC)){
		return;
	}
	

	var instrument = GetRadioValue("notenodertab");

	var abcOptions = GetABCJSParams(instrument);

	abcOptions.oneSvgPerLine = false;

	// Clear the tab label if present to compress vertical space
	if (instrument != "noten" ){

		// Sanity check the options first
		if (abcOptions.tablature && (abcOptions.tablature.length > 0)){
			abcOptions.tablature[0].label = "";
		}
	}

	function setTune(userAction) {

		synthControl.disable(true);

		// Strip titlespace
		var strippedABC = theProcessedABC.replace(/%%titlespace\s.*\r?\n/g, '');

		strippedABC = GetABCFileHeader() + strippedABC;

		var visualObj = ABCJS.renderAbc("playback-paper", strippedABC, abcOptions)[0];

		// Post process whistle or note name tab
		postProcessTab([visualObj], "playback-paper", instrument, true);

		var midiBuffer = new ABCJS.synth.CreateSynth(theProcessedABC);

		gMIDIbuffer = midiBuffer;
        gMIDIInitStillWaiting = false;

		SetupPlayerEventHandlers();
		
		midiBuffer.init({
			visualObj: visualObj
		}).then(function (response) {

			//console.log(response);
			
      if (synthControl) {

				var fadeLength = computeFade(theProcessedABC);

				synthControl.setTune(visualObj, userAction, {fadeLength:fadeLength}).then(function (response) {
					
					console.log("Audio successfully loaded.");
					gSynthControl = synthControl;

					// Hook up tempo dialog
					var elem = document.getElementsByClassName("abcjs-midi-tempo");
					if (elem && (elem.length > 0)){
						elem[0].onclick = SetPlayerTempo;
					}

					// Are we using the trainer touch controls
					if (gTrainerTouchControls){

						//debugger;

						var elems1 = document.getElementsByClassName("abcjs-midi-clock");
						var elems2 = document.getElementsByClassName("abcjs-midi-current-tempo-wrapper");

						if (elems1 && elems2 && (elems1.length > 0) && (elems2.length > 0)){
							
							var elem = elems1[0];
							elem.onclick = DecrementTempo;
							elem = elems2[0];
							elem.onclick = IncrementTempo;

						}
					
					}


				}).catch(function (error) {
					
			    // MAE 10 Jul 2024 - Hide the spinner
					hideTheSpinner();
        	gMIDIInitStillWaiting = false;
					console.log("Problem loading audio for this tune");

				});
			}
		}).catch(function (error) {

	    // MAE 10 Jul 2024 - Hide the spinner
			hideTheSpinner();
      gMIDIInitStillWaiting = false;
			console.log("Problem loading audio for this tune");

		});
	}

	function StopPlay(){

		gSynthControl = null;

		if (synthControl){
				
			synthControl.destroy();

			synthControl = null;
		}
	}

	var cursorControl = new CursorControl();

	var synthControl;

	function initPlay() {

		// Clear the looper callback
		gLoopCallback = null;
		gStartPlayCallback = null;
		gPreStartPlayCallback = null;

		// Clear the player in pause flag
		gPlayerInPause = false;

		// Adapt the top based on the player control size
		var theTop = 50;

		var theHeight = window.innerHeight - 515; 

	   	modal_msg = '<div id="playerholder" style="height:'+theHeight+'px;overflow-y:auto;margin-bottom:15px;">';

		if (gLargePlayerControls){
			modal_msg += '<div id="abcplayer" class="abcjs-large">';
		}
		else{
			modal_msg += '<div id="abcplayer">';			
		}

	   	modal_msg += '<div id="playback-paper"></div>';
	   	modal_msg += '</div>';

	   	modal_msg += '</div>';

	   	// Add the player controls
		if (gLargePlayerControls){
	   		modal_msg += '<div id="playback-audio" class="abcjs-large"></div>';
		}
		else{
	   		modal_msg += '<div id="playback-audio"></div>';
		}

	   	// Add the MIDI Instrument Explorer controls
		modal_msg += '<div class="configure_instrumentexplorer_text" style="text-align:center;margin:0px;margin-top:36px">';
		modal_msg += '<p class="configure_instrumentexplorer_text">';
		modal_msg += "Soundfont:"+gInstrumentExplorerSoundfonts+"&nbsp;&nbsp;&nbsp;Melody:"+gInstrumentExplorerMelodyInstruments;
		modal_msg += '</p>';
		modal_msg += '<p class="configure_instrumentexplorer_text">';
		modal_msg += "Bass:"+ gInstrumentExplorerBassInstruments+"&nbsp;&nbsp;&nbsp;Chords:"+gInstrumentExplorerChordInstruments;
		modal_msg += '</p>';
		modal_msg += '<p class="configure_instrumentexplorer_text">';
		modal_msg += 'Bass Volume (0-127):&nbsp;&nbsp;<input style="width:90px;" id="instrument_explorer_bass_volume" type="number" min="0" step="1" max="127" title="Bass volume, range is 0-127"  autocomplete="off"/>';
		modal_msg += 'Chord Volume (0-127):&nbsp;&nbsp;<input style="width:90px;" id="instrument_explorer_chord_volume" type="number" min="0" step="1" max="127" title="Chord volume, range is 0-127" autocomplete="off"/>';
  		modal_msg += '<span style="font-size:12pt;font-family:helvetica;">Inject all tunes:</span><input style="width:16px;margin-left:8px;margin-right:24px;" id="instrumentexplorer_inject_all" type="checkbox"/>';
		modal_msg += '</p>';
		modal_msg += '<p class="configure_instrumentexplorer_text">';
		modal_msg += '<input id="instrumentexplorertest" class="instrumentexplorertest button btn btn-instrumentexplorertest" onclick="InstrumentExplorerRegenerate();" type="button" value="Reload Tune with Changed Instruments and Volumes" title="Reloads the tune into the player with the selected MIDI soundfont, melody instrument, bass instrument, bass volumes, chord instrument, and chord volumes">';
		modal_msg += '<input id="instrumentexplorerinject" class="instrumentexplorerinject button btn btn-instrumentexplorerinject" onclick="InstrumentExplorerInject();" style="margin-right:0px;" type="button" value="Inject Instruments and Volumes into the ABC" title="Injects the current soundfont, melody instrument, bass instrument, bass volume, chord instrument, and chord volumes into the tune ABC">';
		modal_msg += '</p>';
		modal_msg += '</div>';

		modal_msg += '<a id="instrumentexplorerhelp" href="https://michaeleskin.com/abctools/userguide.html#midi_instrument_explorer" target="_blank" style="text-decoration:none;" title="Learn more about the MIDI Instrument Explorer" class="dialogcornerbutton">?</a>';			
		

	   	// Scale the player for larger screens
		var windowWidth = window.innerWidth;

		var instrument = GetRadioValue("notenodertab");

		var theWidth;

		if (isDesktopBrowser()){

			if (giPadTwoColumn){
				if (isLandscapeOrientation()){
					theWidth = windowWidth * (gPlayerScaling / 100);
				}
				else{
					theWidth = windowWidth * 0.9;	
				}
			}
			else{
				theWidth = windowWidth * (gPlayerScaling / 100);
			}

			if (theWidth < 850){
				theWidth = 850;
			}

		}
		else{

			theWidth = 800;  
			
		}

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: theTop, width:theWidth, okText:"Close", scrollWithPage: (isMobileBrowser()) });

		// Set the initial values
		document.getElementById("instrument_explorer_soundfont").value = gInstrumentExplorerSoundfont;
		document.getElementById("instrument_explorer_melody_program").value = gInstrumentExplorerMelodyInstrument;
		document.getElementById("instrument_explorer_bass_program").value = gInstrumentExplorerBassInstrument;
		document.getElementById("instrument_explorer_chord_program").value = gInstrumentExplorerChordInstrument;
		document.getElementById("instrument_explorer_bass_volume").value = gInstrumentExplorerBassVolume;
		document.getElementById("instrument_explorer_chord_volume").value = gInstrumentExplorerChordVolume;

		var theOKButtons = document.getElementsByClassName("modal_flat_ok");

		// Find the button that says "Close" and hook its click handler to make sure music stops on close
		// Need to search through the modals since there may be a first time share dialog also present
		// the first time someone plays a linked PDF tune

		var theOKButton = null;

		for (var i=0;i<theOKButtons.length;++i){

			theOKButton = theOKButtons[i];

			if (theOKButton.innerText == "Close"){

				gTheOKButton = theOKButton;

				var originalOnClick = theOKButton.onclick;

				theOKButton.onclick = function(){

					originalOnClick(); 
					StopPlay(); 

				    // Focus after operation
				    FocusAfterOperation();

					// If on iOS and the muting controller installed, dispose it now
					if (gIsIOS){

						if (gTheMuteHandle){
						 	gTheMuteHandle.dispose();
  							gTheMuteHandle = null;
  						}
					}

				};

				break;

			}
		}

		if (ABCJS.synth.supportsAudio()) {
			
			synthControl = new ABCJS.synth.SynthController(theProcessedABC);

			synthControl.load("#playback-audio", cursorControl, {displayLoop: true, displayRestart: true, displayPlay: true, displayProgress: true, displayWarp: true});


		} else {

			document.querySelector("#playback-audio").innerHTML = "<div class='audio-error'>Audio is not supported in this browser.</div>";

		}

		setTune(false);

		// Cache autoscroll values early
		gPlayerHolder = document.getElementById("playerholder");
		gPlayerContainerRect = gPlayerHolder.getBoundingClientRect();
	}

	// Try to deal with tab deactivation muting
	if (gIsIOS){

		var context = ABCJS.synth.activeAudioContext();

		// Decide on some parameters
		let allowBackgroundPlayback = false; // default false, recommended false
		let forceIOSBehavior = false; // default false, recommended false

		gTheMuteHandle = null;
		
		// Pass it to unmute if the context exists... ie WebAudio is supported
		if (context)
		{
		  // If you need to be able to disable unmute at a later time, you can use the returned handle's dispose() method
		  // if you don't need to do that (most folks won't) then you can simply ignore the return value
		  gTheMuteHandle = unmute(context, allowBackgroundPlayback, forceIOSBehavior);
		  
		}
	}

	initPlay();

}


//
// Grace Duration Explorer
//
function GraceExplorer(){

	if (gAllowCopy){

		// Deactivate Quick Player 
		deactivateQuickPlayer();

		// Play back locally

		// Try to find the current tune
		var theSelectedABC = findSelectedTune();

		if (theSelectedABC == ""){
			// This should never happen
			return;
		}

		// Fix issue with initial swing not happening
		ScanTuneForCustomTimingInjection(theSelectedABC);

		// Pre-process the ABC to inject any requested programs or volumes
		var theProcessedABC = PreProcessPlayABC(theSelectedABC);

		// Play back locally in-tool	
		GraceExplorerDialog(theSelectedABC,theProcessedABC,false);

	}
}

//
// Reload the player with a new grace duration
//
function GraceExplorerRegenerate(){

	var bDoReload = false;

	// Grab the grace duration
	var theGraceDuration = document.getElementById("grace_explorer_duration").value;

	theGraceDuration = parseFloat(theGraceDuration);

	if (!isNaN(theGraceDuration) && ((theGraceDuration >= 0) && (theGraceDuration <= 150))){

		gGraceDuration = theGraceDuration/1000;

		bDoReload = true;
	}

	if (bDoReload){

		gTheOKButton.click();

		setTimeout(function() {

			// Launch the player with the grace injected tune
			GraceExplorerDialog(gPlayerABCGraceExplorerOriginal,gPlayerABCGraceExplorerProcessed,true);

		},250);

	}
}


//
// Scan tune for grace annotation for the grace explorer
//
function ScanTuneForGraceExplorer(theTune){

	//debugger;

	gGraceDuration = 0.045;

	var searchRegExp;
	var doGraceDuration;

	// Next search for an grace_duration_ms override
	searchRegExp = /^%grace_duration_ms.*$/gm

	// Detect grace_duration_ms annotation
	doGraceDuration = theTune.match(searchRegExp);

	if ((doGraceDuration) && (doGraceDuration.length > 0)){

		var theParamString = doGraceDuration[0].replace("%grace_duration_ms","");

		theParamString = theParamString.trim();

		var theParams = theParamString.split(" ");

		if (theParams.length >= 1){

			var theGraceDurationFound = theParams[0];

			var graceValue = parseFloat(theGraceDurationFound);

			if (!isNaN(graceValue)){

				if ((graceValue >= 0) && (graceValue <= 150)){

					gGraceDuration = graceValue/1000;
				
				}
			}
		}
	}

}

//
// Inject the tune with the Swing Explorer values
//

function GraceExplorerInject(){

	// Doing all tunes
	var do_inject_all = document.getElementById("grace_explorer_inject_all").checked;
	
	//console.log("do_inject_all: "+do_inject_all);

	var bDoInjectGraceDuration = false;

	// Grab the swing factor
	var theGraceDuration = document.getElementById("grace_explorer_duration").value;

	theGraceDuration = parseFloat(theGraceDuration);

	if (!isNaN(theGraceDuration) && ((theGraceDuration >= 0) && (theGraceDuration <= 150))){

		bDoInjectGraceDuration = true;
	}

	if (bDoInjectGraceDuration){

		var theInjectString = "%grace_duration_ms "+theGraceDuration;

		//
		// Strip any existing %grace_duration_ms out of the current tune
		//
		var searchRegExp = /^%grace_duration_ms.*[\r\n]*/gm 

		if (!do_inject_all){

			var tuneWithNoGrace = gPlayerABCGraceExplorerOriginal.replaceAll(searchRegExp, "");

			var tuneWithGrace = InjectStringBelowTuneHeader(tuneWithNoGrace,theInjectString);

			// Seeing extra line breaks after the inject
			tuneWithGrace = tuneWithGrace.replace("\n\n","");

			// Try and keep the same tune after the redraw for immediate play
			var theSelectionStart = gTheABC.selectionStart;

			// Stuff in the injected ABC
			var theABC = gTheABC.value;

			theABC = theABC.replace(gPlayerABCGraceExplorerOriginal,tuneWithGrace);
			
			setABCEditorText(theABC);

			// Set dirty
			gIsDirty = true;

			// For future injects
			gPlayerABCGraceExplorerOriginal = tuneWithGrace;

			// Have to redraw if in raw mode
	    	if (gRawMode){

				RenderAsync(true,null,function(){

					var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Grace Duration Injection Complete!</p>';

					DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

						// Set the select point
						gTheABC.selectionStart = theSelectionStart;
					    gTheABC.selectionEnd = theSelectionStart;

					    // Focus after operation
					    FocusAfterOperation();
					    
					});
					
				});

		    }
		    else{

				var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Grace Duration Injection Complete!</p>';

				DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

					// Set the select point
					gTheABC.selectionStart = theSelectionStart;
				    gTheABC.selectionEnd = theSelectionStart;

				    // Focus after operation
				    FocusAfterOperation();
				    
				});

		    }
		}
		else{

			// Inject all the tunes
			var nTunes = CountTunes();

			var theNotes = gTheABC.value;

			// Find the tunes
			var theTunes = theNotes.split(/^X:/gm);

			var output = FindPreTuneHeader(theNotes);

			for (var i=1;i<=nTunes;++i){

				theTunes[i] = "X:"+theTunes[i];

				var tuneWithNoGrace = theTunes[i].replaceAll(searchRegExp, "");

				var tuneWithGrace = InjectStringBelowTuneHeader(tuneWithNoGrace,theInjectString);

				// Seeing extra line breaks after the inject
				tuneWithGrace = tuneWithGrace.replace("\n\n","");

				output+= tuneWithGrace;

				output+="\n\n";

			}

			// Stuff in the output
			setABCEditorText(output);

			// Set dirty
			gIsDirty = true;

			// Have to redraw if in raw mode
		    if (gRawMode){

				RenderAsync(true,null,function(){
					
					var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Grace Duration Injection Complete!</p>';

					DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

						// Set the select point
						gTheABC.selectionStart = 0;
					    gTheABC.selectionEnd = 0;

					    // Focus after operation
					    FocusAfterOperation();
					    
					});

				});

		    }
		    else{

				var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Grace Duration Injection Complete!</p>';

				DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

					// Set the select point
					gTheABC.selectionStart = 0;
				    gTheABC.selectionEnd = 0;

				    // Focus after operation
				    FocusAfterOperation();
				    
				});

		    }

		}

	}

}

// 
// Grace Explorer Dialog
//

var gPlayerABCGraceExplorerOriginal = null;
var gPlayerABCGraceExplorerProcessed = null;

function GraceExplorerDialog(theOriginalABC, theProcessedABC, grace_explorer_state){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","GraceExplorerDialog");

	gMIDIbuffer = null;
	gTheOKButton = null;

	// We came in because of a grace duration change, don't init the tune cache
	if (!grace_explorer_state){

		gPlayerABCGraceExplorerOriginal = theOriginalABC;
		gPlayerABCGraceExplorerProcessed = theProcessedABC;

	}

	// Do common setup of soundfont and custom timing injection
	if (!PlayerSetupCommon(theProcessedABC)){
		return;
	}

	// Setup any swing found (Only done the first time)
	if (!grace_explorer_state){

		ScanTuneForGraceExplorer(theProcessedABC);

	}
	
	var instrument = GetRadioValue("notenodertab");

	var abcOptions = GetABCJSParams(instrument);

	abcOptions.oneSvgPerLine = false;

	// Clear the tab label if present to compress vertical space
	if (instrument != "noten" ){

		// Sanity check the options first
		if (abcOptions.tablature && (abcOptions.tablature.length > 0)){
			abcOptions.tablature[0].label = "";
		}
	}
	
	function setTune(userAction) {

		synthControl.disable(true);

		var visualObj = ABCJS.renderAbc("playback-paper", theProcessedABC, abcOptions)[0];

		// Post process whistle or note name tab
		postProcessTab([visualObj], "playback-paper", instrument, true);

		var midiBuffer = new ABCJS.synth.CreateSynth(theProcessedABC);

		gMIDIbuffer = midiBuffer;
        gMIDIInitStillWaiting = false;

		SetupPlayerEventHandlers();
		
		midiBuffer.init({
			visualObj: visualObj
		}).then(function (response) {

			//console.log(response);
			
      if (synthControl) {

				var fadeLength = computeFade(theProcessedABC);

				synthControl.setTune(visualObj, userAction, {fadeLength:fadeLength}).then(function (response) {
					
					console.log("Audio successfully loaded.");
					gSynthControl = synthControl;

					// Hook up tempo dialog
					var elem = document.getElementsByClassName("abcjs-midi-tempo");
					if (elem && (elem.length > 0)){
						elem[0].onclick = SetPlayerTempo;
					}

					// Are we using the trainer touch controls
					if (gTrainerTouchControls){

						//debugger;

						var elems1 = document.getElementsByClassName("abcjs-midi-clock");
						var elems2 = document.getElementsByClassName("abcjs-midi-current-tempo-wrapper");

						if (elems1 && elems2 && (elems1.length > 0) && (elems2.length > 0)){

							var elem = elems1[0];
							elem.onclick = DecrementTempo;
							elem = elems2[0];
							elem.onclick = IncrementTempo;

						}
					
					}


				}).catch(function (error) {
					
			    // MAE 10 Jul 2024 - Hide the spinner
					hideTheSpinner();
        	gMIDIInitStillWaiting = false;
					console.log("Problem loading audio for this tune");

				});
			}
		}).catch(function (error) {

	    // MAE 10 Jul 2024 - Hide the spinner
			hideTheSpinner();
      gMIDIInitStillWaiting = false;
			console.log("Problem loading audio for this tune");

		});
	}

	function StopPlay(){

		gSynthControl = null;

		if (synthControl){
				
			synthControl.destroy();

			synthControl = null;
		}
	}

	var cursorControl = new CursorControl();

	var synthControl;

	function initPlay() {

		// Clear the looper callback
		gLoopCallback = null;
		gStartPlayCallback = null;
		gPreStartPlayCallback = null;
		
		// Clear the player in pause flag
		gPlayerInPause = false;

		// Adapt the top based on the player control size
		var theTop = 50;

		var theHeight = window.innerHeight - 400;

	   	modal_msg = '<div id="playerholder" style="height:'+theHeight+'px;overflow-y:auto;margin-bottom:15px;">';

		if (gLargePlayerControls){
			modal_msg += '<div id="abcplayer" class="abcjs-large">';
		}
		else{
			modal_msg += '<div id="abcplayer">';			
		}

	   	modal_msg += '<div id="playback-paper"></div>';
	   	modal_msg += '</div>';

	   	modal_msg += '</div>';

	   	// Add the player controls
		if (gLargePlayerControls){
	   		modal_msg += '<div id="playback-audio" class="abcjs-large"></div>';
		}
		else{
	   		modal_msg += '<div id="playback-audio"></div>';
		}

	   	// Add the grace explorer controls
		modal_msg += '<p class="configure_graceexplorer_text" style="text-align:center;margin:0px;margin-top:22px">';

		modal_msg += 'Grace duration in milliseconds (range is 1-150): <input style="width:90px;" id="grace_explorer_duration" type="number" min="0" step="1" max="150" title="Grace duration in milliseconds, range is 1 to 150, 0 disables the custom grace duration feature and uses original abcjs default behavior" autocomplete="off"/>';
		modal_msg += '<span style="font-size:12pt;font-family:helvetica;">Inject all tunes:</span><input style="width:16px;margin-left:8px;margin-right:24px;" id="grace_explorer_inject_all" type="checkbox"/>';
		modal_msg += '</p>';
		modal_msg += '<p class="configure_graceexplorer_text" style="text-align:center;margin:0px;margin-top:22px">';
		modal_msg += '<input id="graceexplorertest" class="graceexplorertest button btn btn-graceexplorertest" onclick="GraceExplorerRegenerate();" type="button" value="Reload Tune with Changed Grace Duration" title="Reloads the tune into the player with the entered grace duration">';
		modal_msg += '<input id="graceexplorerinject" class="graceexplorerinject button btn btn-graceexplorerinject" onclick="GraceExplorerInject();" type="button" style="margin-right:0px;" value="Inject Grace Duration into the ABC" title="Injects the current grace duration into the tune ABC">';
		modal_msg += '</p>';
		modal_msg += '<a id="graceexplorerhelp" href="https://michaeleskin.com/abctools/userguide.html#grace_duration_explorer" target="_blank" style="text-decoration:none;" title="Learn more about the Grace Duration Explorer" class="dialogcornerbutton">?</a>';

	   	// Scale the player for larger screens
		var windowWidth = window.innerWidth;

		var instrument = GetRadioValue("notenodertab");

		var theWidth;

		if (isDesktopBrowser()){

			if (giPadTwoColumn){
				if (isLandscapeOrientation()){
					theWidth = windowWidth * (gPlayerScaling / 100);
				}
				else{
					theWidth = windowWidth * 0.9;	
				}
			}
			else{
				theWidth = windowWidth * (gPlayerScaling / 100);
			}

			if (theWidth < 850){
				theWidth = 850;
			}

		}
		else{

			theWidth = 800;  
			
		}
		

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: theTop, width:theWidth, okText:"Close", scrollWithPage: (isMobileBrowser()) });

		// Set the initial grace duration
		document.getElementById("grace_explorer_duration").value = gGraceDuration/.001;

		var theOKButtons = document.getElementsByClassName("modal_flat_ok");

		// Find the button that says "Close" and hook its click handler to make sure music stops on close
		// Need to search through the modals since there may be a first time share dialog also present
		// the first time someone plays a linked PDF tune

		var theOKButton = null;

		for (var i=0;i<theOKButtons.length;++i){

			theOKButton = theOKButtons[i];

			if (theOKButton.innerText == "Close"){

				gTheOKButton = theOKButton;

				var originalOnClick = theOKButton.onclick;

				theOKButton.onclick = function(){

					originalOnClick(); 
					StopPlay(); 

				    // Focus after operation
				    FocusAfterOperation();

					// If on iOS and the muting controller installed, dispose it now
					if (gIsIOS){

						if (gTheMuteHandle){
						 	gTheMuteHandle.dispose();
  							gTheMuteHandle = null;
  						}
					}

				};

				break;

			}
		}

		if (ABCJS.synth.supportsAudio()) {
			
			synthControl = new ABCJS.synth.SynthController(theProcessedABC);

			synthControl.load("#playback-audio", cursorControl, {displayLoop: true, displayRestart: true, displayPlay: true, displayProgress: true, displayWarp: true});


		} else {

			document.querySelector("#playback-audio").innerHTML = "<div class='audio-error'>Audio is not supported in this browser.</div>";

		}

		setTune(false);

		// Cache autoscroll values early
		gPlayerHolder = document.getElementById("playerholder");
		gPlayerContainerRect = gPlayerHolder.getBoundingClientRect();
	}

	// Try to deal with tab deactivation muting
	if (gIsIOS){

		var context = ABCJS.synth.activeAudioContext();

		// Decide on some parameters
		let allowBackgroundPlayback = false; // default false, recommended false
		let forceIOSBehavior = false; // default false, recommended false

		gTheMuteHandle = null;
		
		// Pass it to unmute if the context exists... ie WebAudio is supported
		if (context)
		{
		  // If you need to be able to disable unmute at a later time, you can use the returned handle's dispose() method
		  // if you don't need to do that (most folks won't) then you can simply ignore the return value
		  gTheMuteHandle = unmute(context, allowBackgroundPlayback, forceIOSBehavior);
		  
		}
	}

	initPlay();

}

//
// Roll Explorer
//
function RollExplorer(){

	if (gAllowCopy){

		// Deactivate Quick Player 
		deactivateQuickPlayer();

		// Play back locally

		// Try to find the current tune
		var theSelectedABC = findSelectedTune();

		if (theSelectedABC == ""){
			// This should never happen
			return;
		}

		// Fix issue with initial swing not happening
		ScanTuneForCustomTimingInjection(theSelectedABC);

		// Pre-process the ABC to inject any requested programs or volumes
		var theProcessedABC = PreProcessPlayABC(theSelectedABC);

		gRollExplorerTransformed = false;

		// Play back locally in-tool	
		RollExplorerDialog(theSelectedABC,theProcessedABC,false);

	}
}

//
// Roll issue dialog
//
function RollParameterIssueAlert(callback){

	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;">Please Check the Roll Parameters</p>';

	modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:36px;text-align:center;">There is an issue with the roll parameters</p>';
	modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:20px;text-align:center;">All values must be positive</p>';
	modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:20px;text-align:center;">The total of the slot sizes for each of the roll styles must be less than 3</p>';
	modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:20px;text-align:center;">The fractions must be between 0 and 1</p>';
	modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:20px;text-align:center;">The volumes must be between 0 and 2</p>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 100, width: 700,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){
		if (callback){
			callback();
		}
	});
}

//
// Make a roll string from a parameter set
//
function makeRollString(roll_array){

	var i;
	var res = "";
	var nParams = roll_array.length;
	for (i=0;i<nParams;++i){
		if (i != nParams-1){
			res += roll_array[i]+" ";
		}
		else{
			res += roll_array[i];
		}
	}

	return res;
}

//
// Validate the roll parameters
//
function RollExplorerValidate(){

	var Roll2Duration1 = document.getElementById("roll_2_slot_1").value;
	var Roll2Duration2 = document.getElementById("roll_2_slot_2").value;

	var Roll2Fraction1 = document.getElementById("roll_2_fraction_1").value;
	var Roll2Fraction2 = document.getElementById("roll_2_fraction_2").value;
	var Roll2Fraction3 = document.getElementById("roll_2_fraction_3").value;

	var Roll2Volume1 = document.getElementById("roll_2_volume_1").value;
	var Roll2Volume2 = document.getElementById("roll_2_volume_2").value;
	var Roll2Volume3 = document.getElementById("roll_2_volume_3").value;

	var Roll3Duration1 = document.getElementById("roll_3_slot_1").value;
	var Roll3Duration2 = document.getElementById("roll_3_slot_2").value;

	var Roll3Fraction1 = document.getElementById("roll_3_fraction_1").value;
	var Roll3Fraction2 = document.getElementById("roll_3_fraction_2").value;
	var Roll3Fraction3 = document.getElementById("roll_3_fraction_3").value;

	var Roll3Volume1 = document.getElementById("roll_3_volume_1").value;
	var Roll3Volume2 = document.getElementById("roll_3_volume_2").value;
	var Roll3Volume3 = document.getElementById("roll_3_volume_3").value;

	var Roll2String = makeRollString([Roll2Duration1,Roll2Duration2,Roll2Fraction1,Roll2Fraction2,Roll2Fraction3,Roll2Volume1,Roll2Volume2,Roll2Volume3]);
	var Roll3String = makeRollString([Roll3Duration1,Roll3Duration2,Roll3Fraction1,Roll3Fraction2,Roll3Fraction3,Roll3Volume1,Roll3Volume2,Roll3Volume3]);

	// Do validate but don't set
	var parse1 = validate_roll_2_params(Roll2String,false);
	var parse2 = validate_roll_3_params(Roll3String,false);

	if (parse1 && parse2){
		parse1 = validate_roll_2_params(Roll2String,true);
		parse2 = validate_roll_3_params(Roll3String,true);

		return true;
	}

	return false;
}

//
// Transform ~G3 style rolls to a style better for reels
//
function RollExplorerTransformReel(useAlternateStyle){

	gRollExplorerTransformed = true;

	function transformTildes(input) {
		return input.replace(/(~[a-zA-Z])3/g, function(match, p1) {
		    return p1.charAt(1) + p1 + "2";
		});
	}

	function transformTildes2(input) {
		return input.replace(/(~[a-zA-Z])3/g, function(match, p1) {
		    return p1 + "2" + p1.charAt(1);
		});
	}

	if (useAlternateStyle){

		gPlayerABCRollExplorerTransformed=transformTildes2(gPlayerABCRollExplorerOriginal);
		gPlayerABCRollExplorerProcessed = transformTildes2(gPlayerABCRollExplorerProcessed);

	}
	else{

		gPlayerABCRollExplorerTransformed=transformTildes(gPlayerABCRollExplorerOriginal);
		gPlayerABCRollExplorerProcessed = transformTildes(gPlayerABCRollExplorerProcessed);

	}

	gTheOKButton.click();

	setTimeout(function() {

		// Launch the player with the roll injected tune
		RollExplorerDialog(gPlayerABCRollExplorerTransformed,gPlayerABCRollExplorerProcessed,true);

	},250);

}

//
// Reload the Roll Explorer with new values
//
function RollExplorerRegenerate(){

	//debugger;

	var bDoReload = false;

	bDoReload = RollExplorerValidate();

	if (bDoReload){

		gTheOKButton.click();

		setTimeout(function() {

			if (gPlayerABCRollExplorerTransformed){

				// Launch the player with the roll injected tune
				RollExplorerDialog(gPlayerABCRollExplorerTransformed,gPlayerABCRollExplorerProcessed,true);

			}
			else{

				// Launch the player with the roll injected tune
				RollExplorerDialog(gPlayerABCRollExplorerOriginal,gPlayerABCRollExplorerProcessed,true);

			}

		},250);

	}
	else{

		// Show issue with the roll parameters
		RollParameterIssueAlert(null);

	}
}

//
// Inject the tune with the Roll explorer values
//

function RollExplorerInject(){

	var bDoInjectRollParams = RollExplorerValidate();

	if (bDoInjectRollParams){

		var theInjectString = "%roll_2_params "+gRoll2Duration1+" "+gRoll2Duration2+" "+gRoll2Fraction1+" "+gRoll2Fraction2+" "+gRoll2Fraction3+" "+gRoll2Volume1+" "+gRoll2Volume2+" "+gRoll2Volume3+"\n"+"%roll_3_params "+gRoll3Duration1+" "+gRoll3Duration2+" "+gRoll3Fraction1+" "+gRoll3Fraction2+" "+gRoll3Fraction3+" "+gRoll3Volume1+" "+gRoll3Volume2+" "+gRoll3Volume3;

		//
		// Strip any existing %roll_2_params or %roll_3_paramsout of the current tune
		//

		var searchRegExp = /^%roll_2_params.*[\r\n]*/gm 

		var tuneWithNoRoll;

		if (gPlayerABCRollExplorerTransformed){

			tuneWithNoRoll = gPlayerABCRollExplorerTransformed.replaceAll(searchRegExp, "");
		}
		else{

			tuneWithNoRoll = gPlayerABCRollExplorerOriginal.replaceAll(searchRegExp, "");

		}
		
		searchRegExp = /^%roll_3_params.*[\r\n]*/gm 

		tuneWithNoRoll = tuneWithNoRoll.replaceAll(searchRegExp, "");

		var tuneWithRoll = InjectStringBelowTuneHeader(tuneWithNoRoll,theInjectString);

		// Seeing extra line breaks after the inject
		tuneWithRoll = tuneWithRoll.replace("\n\n","");

		// Try and keep the same tune after the redraw for immediate play
		var theSelectionStart = gTheABC.selectionStart;

		// Stuff in the injected ABC
		var theABC = gTheABC.value;

		theABC = theABC.replace(gPlayerABCRollExplorerOriginal,tuneWithRoll);
		
		setABCEditorText(theABC);

		// Set dirty
		gIsDirty = true;

		// For future injects
		gPlayerABCRollExplorerOriginal = tuneWithRoll;

		// Have to redraw if in raw mode or ABC was changed
    	if (gRawMode || gRollExplorerTransformed){

			RenderAsync(true,null,function(){
				
				var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Roll Parameter Injection Complete!</p>';

				DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

					// Set the select point
					gTheABC.selectionStart = theSelectionStart;
				    gTheABC.selectionEnd = theSelectionStart;

				    // Focus after operation
				    FocusAfterOperation();
				    
				});

			});

	    }
	    else{

			var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Roll Parameter Injection Complete!</p>';

			DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 300, width: 500,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

				// Set the select point
				gTheABC.selectionStart = theSelectionStart;
			    gTheABC.selectionEnd = theSelectionStart;

			    // Focus after operation
			    FocusAfterOperation();
				    
				});

	    }

	}
	else{

		// Show issue with the roll parameters
		RollParameterIssueAlert(null);

	}

}

// 
// Roll Explorer Dialog
//

function idleRollExplorer(){

	// Stuff the dialog fields from the abcjs globals

	document.getElementById("roll_2_slot_1").value = gRoll2Duration1;
	document.getElementById("roll_2_slot_2").value = gRoll2Duration2;

	document.getElementById("roll_2_fraction_1").value = gRoll2Fraction1;
	document.getElementById("roll_2_fraction_2").value = gRoll2Fraction2;
	document.getElementById("roll_2_fraction_3").value = gRoll2Fraction3;

	document.getElementById("roll_2_volume_1").value = gRoll2Volume1;
	document.getElementById("roll_2_volume_2").value = gRoll2Volume2;
	document.getElementById("roll_2_volume_3").value = gRoll2Volume3;

	document.getElementById("roll_3_slot_1").value = gRoll3Duration1;
	document.getElementById("roll_3_slot_2").value = gRoll3Duration2;

	document.getElementById("roll_3_fraction_1").value = gRoll3Fraction1;
	document.getElementById("roll_3_fraction_2").value = gRoll3Fraction2;
	document.getElementById("roll_3_fraction_3").value = gRoll3Fraction3;

	document.getElementById("roll_3_volume_1").value = gRoll3Volume1;
	document.getElementById("roll_3_volume_2").value = gRoll3Volume2;
	document.getElementById("roll_3_volume_3").value = gRoll3Volume3;

}

//
// Reset roll values to reasonable defaults
//
function RollExplorerResetRoll2(){

	var theDefaultParams = gRoll2DefaultParams;

	validate_roll_2_params(theDefaultParams, true);

	idleRollExplorer();

	RollExplorerRegenerate();

}

function RollExplorerResetRoll3(){

	var theDefaultParams = gRoll3DefaultParams;

	validate_roll_3_params(theDefaultParams, true);

	idleRollExplorer();

	RollExplorerRegenerate();
}

//
// Make roll values the new tool roll defaults
//

function RollExplorerDefaultRoll2(){

	var Roll2Duration1 = document.getElementById("roll_2_slot_1").value;
	var Roll2Duration2 = document.getElementById("roll_2_slot_2").value;

	var Roll2Fraction1 = document.getElementById("roll_2_fraction_1").value;
	var Roll2Fraction2 = document.getElementById("roll_2_fraction_2").value;
	var Roll2Fraction3 = document.getElementById("roll_2_fraction_3").value;

	var Roll2Volume1 = document.getElementById("roll_2_volume_1").value;
	var Roll2Volume2 = document.getElementById("roll_2_volume_2").value;
	var Roll2Volume3 = document.getElementById("roll_2_volume_3").value;

	var Roll2String = makeRollString([Roll2Duration1,Roll2Duration2,Roll2Fraction1,Roll2Fraction2,Roll2Fraction3,Roll2Volume1,Roll2Volume2,Roll2Volume3]);

	// Do validate but don't set
	var parse1 = validate_roll_2_params(Roll2String,false);

	if (parse1){
		
		// Make the new values live
		parse1 = validate_roll_2_params(Roll2String,true);

		gRoll2DefaultParams = Roll2String;

		SaveConfigurationSettings();

		var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Quarter Note Roll Parameters Set as Tool Default</p>';

		modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:36px;text-align:center;">You can edit the values in the Advanced Settings dialog.</p>';

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 200, width: 700,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

			RollExplorerRegenerate();

		});

	}
	else{

		// Show issue with the roll parameters
		RollParameterIssueAlert(null);

	}

}

function RollExplorerDefaultRoll3(){

	var Roll3Duration1 = document.getElementById("roll_3_slot_1").value;
	var Roll3Duration2 = document.getElementById("roll_3_slot_2").value;

	var Roll3Fraction1 = document.getElementById("roll_3_fraction_1").value;
	var Roll3Fraction2 = document.getElementById("roll_3_fraction_2").value;
	var Roll3Fraction3 = document.getElementById("roll_3_fraction_3").value;

	var Roll3Volume1 = document.getElementById("roll_3_volume_1").value;
	var Roll3Volume2 = document.getElementById("roll_3_volume_2").value;
	var Roll3Volume3 = document.getElementById("roll_3_volume_3").value;

	var Roll3String = makeRollString([Roll3Duration1,Roll3Duration2,Roll3Fraction1,Roll3Fraction2,Roll3Fraction3,Roll3Volume1,Roll3Volume2,Roll3Volume3]);

	// Do validate but don't set
	var parse1 = validate_roll_3_params(Roll3String,false);

	if (parse1){

		parse1 = validate_roll_3_params(Roll3String,true);

		gRoll3DefaultParams = Roll3String;

		SaveConfigurationSettings();

		var modal_msg  = '<p style="text-align:center;font-size:14pt;font-family:helvetica;">Dotted Quarter Note Roll Parameters Set as Tool Default</p>';

		modal_msg += '<p style="font-size:12pt;line-height:18pt;margin-top:36px;text-align:center;">You can edit the values in the Advanced Settings dialog.</p>';

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 200, width: 700,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

			RollExplorerRegenerate();

		});

	}
	else{

		// Show issue with the roll parameters
		RollParameterIssueAlert(null);

	}

}

var gPlayerABCRollExplorerOriginal = null;
var gPlayerABCRollExplorerProcessed = null;
var gPlayerABCRollExplorerTransformed = null;

var gRollExplorerTransformed = false;

function RollExplorerDialog(theOriginalABC, theProcessedABC, roll_explorer_state){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","RollExplorerDialog");

	gMIDIbuffer = null;
	gTheOKButton = null;

	// We came in because of a grace duration change, don't init the tune cache
	if (!roll_explorer_state){

		gPlayerABCRollExplorerOriginal = theOriginalABC;
		gPlayerABCRollExplorerProcessed = theProcessedABC;
		gPlayerABCRollExplorerTransformed = null;

	}

	// Do common setup of soundfont and custom timing injection
	if (!PlayerSetupCommon(theProcessedABC)){
		return;
	}

	// Setup any swing found (Only done the first time)
	if (!roll_explorer_state){

		ScanTuneForCustomTimingInjection(theProcessedABC);

	}
	
	var instrument = GetRadioValue("notenodertab");

	var abcOptions = GetABCJSParams(instrument);

	abcOptions.oneSvgPerLine = false;

	// Clear the tab label if present to compress vertical space
	if (instrument != "noten" ){

		// Sanity check the options first
		if (abcOptions.tablature && (abcOptions.tablature.length > 0)){
			abcOptions.tablature[0].label = "";
		}
	}
	
	function setTune(userAction) {

		synthControl.disable(true);

		var visualObj = ABCJS.renderAbc("playback-paper", theProcessedABC, abcOptions)[0];

		// Post process whistle or note name tab
		postProcessTab([visualObj], "playback-paper", instrument, true);

		var midiBuffer = new ABCJS.synth.CreateSynth(theProcessedABC);

		gMIDIbuffer = midiBuffer;
        gMIDIInitStillWaiting = false;

		SetupPlayerEventHandlers();
		
		midiBuffer.init({
			visualObj: visualObj
		}).then(function (response) {

			//console.log(response);
			
      if (synthControl) {

				var fadeLength = computeFade(theProcessedABC);

				synthControl.setTune(visualObj, userAction, {fadeLength:fadeLength}).then(function (response) {
					
					console.log("Audio successfully loaded.");
					gSynthControl = synthControl;

					// Hook up tempo dialog
					var elem = document.getElementsByClassName("abcjs-midi-tempo");
					if (elem && (elem.length > 0)){
						elem[0].onclick = SetPlayerTempo;
					}

					// Are we using the trainer touch controls
					if (gTrainerTouchControls){

						//debugger;

						var elems1 = document.getElementsByClassName("abcjs-midi-clock");
						var elems2 = document.getElementsByClassName("abcjs-midi-current-tempo-wrapper");

						if (elems1 && elems2 && (elems1.length > 0) && (elems2.length > 0)){
							
							var elem = elems1[0];
							elem.onclick = DecrementTempo;
							elem = elems2[0];
							elem.onclick = IncrementTempo;

						}
					
					}


				}).catch(function (error) {
					
			    // MAE 10 Jul 2024 - Hide the spinner
					hideTheSpinner();
        	gMIDIInitStillWaiting = false;
					console.log("Problem loading audio for this tune");

				});
			}
		}).catch(function (error) {

	    // MAE 10 Jul 2024 - Hide the spinner
			hideTheSpinner();
      gMIDIInitStillWaiting = false;
			console.log("Problem loading audio for this tune");

		});
	}

	function StopPlay(){

		gSynthControl = null;

		if (synthControl){
				
			synthControl.destroy();

			synthControl = null;
		}
	}

	var cursorControl = new CursorControl();

	var synthControl;

	function initPlay() {

		// Clear the looper callback
		gLoopCallback = null;
		gStartPlayCallback = null;
		gPreStartPlayCallback = null;
		
		// Clear the player in pause flag
		gPlayerInPause = false;

		// Adapt the top based on the player control size
		var theTop = 20;

		var theHeight = window.innerHeight - 650;

	   	modal_msg = '<div id="playerholder" style="height:'+theHeight+'px;overflow-y:auto;margin-bottom:15px;">';

		if (gLargePlayerControls){
			modal_msg += '<div id="abcplayer" class="abcjs-large">';
		}
		else{
			modal_msg += '<div id="abcplayer">';			
		}

	   	modal_msg += '<div id="playback-paper"></div>';
	   	modal_msg += '</div>';

	   	modal_msg += '</div>';

	   	// Add the player controls
		if (gLargePlayerControls){
	   		modal_msg += '<div id="playback-audio" class="abcjs-large"></div>';
		}
		else{
	   		modal_msg += '<div id="playback-audio"></div>';
		}

	   	// Add the roll explorer controls
		modal_msg += '<p class="configure_rollexplorer_text" style="font-size:14pt;text-align:center;margin:0px;margin-top:15px;margin-left:224px">Quarter Note Roll Parameters<input id="reset_roll_explorer_2" class="button btn btn-reset_roll_explorer_2" onclick="RollExplorerResetRoll2();" type="button" value="Reset" title="Reset quarter note roll parameters to the current tool defaults"><input id="default_roll_explorer_2" class="button btn btn-default_roll_explorer_2" onclick="RollExplorerDefaultRoll2();" type="button" value="Set as Tool Default" title="Makes the current quarter note roll parameters the default for the tool"></p>';
		modal_msg += '<p class="configure_rollexplorer_text" style="text-align:center;margin:0px;margin-top:8px">';
		modal_msg += 'Slot 1: <input style="width:85px;" id="roll_2_slot_1" title="Quarter note slot 1 time" autocomplete="off" type="number" min="0" step="0.05" max="2.95"/>';
		modal_msg += 'Slot 2: <input style="width:85px;" id="roll_2_slot_2" title="Quarter note slot 2 time" autocomplete="off"  type="number" min="0" step="0.05" max="2.95"/>';
		modal_msg += '</p>';
		modal_msg += '<p class="configure_rollexplorer_text" style="text-align:center;margin:0px;margin-top:8px">';
		modal_msg += 'Fraction 1: <input style="width:85px;" id="roll_2_fraction_1" title="Quarter note fraction 1" autocomplete="off" type="number" min="0" step="0.05" max="1"/>';
		modal_msg += 'Fraction 2: <input style="width:85px;" id="roll_2_fraction_2" title="Quarter note fraction 2" autocomplete="off" type="number" min="0" step="0.05" max="1"/>';
		modal_msg += 'Fraction 3: <input style="width:85px;" id="roll_2_fraction_3" title="Quarter note fraction 3" autocomplete="off" type="number" min="0" step="0.05" max="1"/>';
		modal_msg += '</p>';
		modal_msg += '<p class="configure_rollexplorer_text" style="text-align:center;margin:0px;margin-top:8px">';
		modal_msg += 'Volume 1: <input style="width:85px;" id="roll_2_volume_1" title="Quarter note volume 1" autocomplete="off" type="number" min="0" step="0.05" max="2"/>';
		modal_msg += 'Volume 2: <input style="width:85px;" id="roll_2_volume_2" title="Quarter note volume 2" autocomplete="off" type="number" min="0" step="0.05" max="2"/>';
		modal_msg += 'Volume 3: <input style="width:85px;" id="roll_2_volume_3" title="Quarter note volume 3" autocomplete="off" type="number" min="0" step="0.05" max="2"/>';
		modal_msg += '</p>';
		modal_msg += '<p class="configure_rollexplorer_text" style="font-size:14pt;text-align:center;margin:0px;margin-top:10px;margin-left:162px">Dotted Quarter Note Roll Parameters<input id="reset_roll_explorer_3" class="reset_roll_explorer_3 button btn btn-reset_roll_explorer_3" onclick="RollExplorerResetRoll3();" type="button" value="Reset" title="Reset dotted quarter note roll parameters to the current tool defaults"><input id="default_roll_explorer_3" class="button btn btn-default_roll_explorer_3" onclick="RollExplorerDefaultRoll3();" type="button" value="Set as Tool Default" title="Makes the current dotted quarter note roll parameters the default for the tool"></p>';
		modal_msg += '<p class="configure_rollexplorer_text" style="text-align:center;margin:0px;margin-top:8px">';
		modal_msg += 'Slot 1: <input style="width:85px;" id="roll_3_slot_1" title="Dotted quarter note slot 1 time" autocomplete="off" type="number" min="0" step="0.05" max="2.95"/>';
		modal_msg += 'Slot 2: <input style="width:85px;" id="roll_3_slot_2" title="Dotted quarter note slot 2 time" autocomplete="off" type="number" min="0" step="0.05" max="2.95"/>';
		modal_msg += '</p>';
		modal_msg += '<p class="configure_rollexplorer_text" style="text-align:center;margin:0px;margin-top:8px">';
		modal_msg += 'Fraction 1: <input style="width:85px;" id="roll_3_fraction_1" title="Dotted quarter note fraction 1" autocomplete="off" type="number" min="0" step="0.05" max="1"/>';
		modal_msg += 'Fraction 2: <input style="width:85px;" id="roll_3_fraction_2" title="Dotted quarter note fraction 2" autocomplete="off" type="number" min="0" step="0.05" max="1"/>';
		modal_msg += 'Fraction 3: <input style="width:85px;" id="roll_3_fraction_3" title="Dotted quarter note fraction 3" autocomplete="off" type="number" min="0" step="0.05" max="1"/>';
		modal_msg += '</p>';
		modal_msg += '<p class="configure_rollexplorer_text" style="text-align:center;margin:0px;margin-top:8px">';
		modal_msg += 'Volume 1: <input style="width:85px;" id="roll_3_volume_1" title="Dotted quarter note volume 1" autocomplete="off" type="number" min="0" step="0.05" max="2"/>';
		modal_msg += 'Volume 2: <input style="width:85px;" id="roll_3_volume_2" title="Dotted quarter note volume 2" autocomplete="off" type="number" min="0" step="0.05" max="2"/>';
		modal_msg += 'Volume 3: <input style="width:85px;" id="roll_3_volume_3" title="Dotted quarter note volume 3" autocomplete="off" type="number" min="0" step="0.05" max="2"/>';
		modal_msg += '</p>';		
		modal_msg += '<p class="configure_rollexplorer_text" style="text-align:center;margin:0px;margin-top:24px">';
		modal_msg += '<input id="rollexplorertest" class="rollexplorertest button btn btn-rollexplorertest" onclick="RollExplorerRegenerate();" type="button" value="Reload Tune with Parameters" title="Reloads the tune into the player with the entered roll parameters">';
		modal_msg += '<input id="rollexplorerinject" class="rollexplorerinject button btn btn-rollexplorerinject" onclick="RollExplorerInject();" type="button" value="Inject Parameters into ABC" title="Injects the current roll parameters and roll transformations into the tune ABC">';
		modal_msg += '<input id="rollexplorertransform" class="rollexplorertransform button btn btn-rollexplorertransform" onclick="RollExplorerTransformReel(false);" type="button" value="~G3 → G~G2" title="Transforms ~G3 style rolls to G~G2 style, may be useful for creating a better sounding roll for reels">';
		modal_msg += '<input id="rollexplorertransform2" style="margin-right:0px" class="rollexplorertransform2 button btn btn-rollexplorertransform" onclick="RollExplorerTransformReel(true);" type="button" value="~G3 → ~G2G" title="Transforms ~G3 style rolls to ~G2G style, may be useful for creating a better sounding roll for reels">';
		modal_msg += '</p>';
		modal_msg += '<a id="rollexplorerhelp" href="https://michaeleskin.com/abctools/userguide.html#roll_explorer" target="_blank" style="text-decoration:none;" title="Learn more about the Roll Explorer" class="dialogcornerbutton">?</a>';

	   	// Scale the player for larger screens
		var windowWidth = window.innerWidth;

		var instrument = GetRadioValue("notenodertab");

		var theWidth;

		if (isDesktopBrowser()){

			if (giPadTwoColumn){
				if (isLandscapeOrientation()){
					theWidth = windowWidth * 0.6;
				}
				else{
					theWidth = windowWidth * 0.9;	
				}
			}
			else{
				theWidth = windowWidth * 0.5;
			}

			if (theWidth < 850){
				theWidth = 850;
			}

		}
		else{

			theWidth = 800;  
			
		}

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: theTop, width:theWidth, okText:"Close", scrollWithPage: (isMobileBrowser()) });

		// Set the initial roll parameters
		idleRollExplorer();

		var theOKButtons = document.getElementsByClassName("modal_flat_ok");

		// Find the button that says "Close" and hook its click handler to make sure music stops on close
		// Need to search through the modals since there may be a first time share dialog also present
		// the first time someone plays a linked PDF tune

		var theOKButton = null;

		for (var i=0;i<theOKButtons.length;++i){

			theOKButton = theOKButtons[i];

			if (theOKButton.innerText == "Close"){

				gTheOKButton = theOKButton;

				var originalOnClick = theOKButton.onclick;

				theOKButton.onclick = function(){

					originalOnClick(); 
					StopPlay(); 

				    // Focus after operation
				    FocusAfterOperation();

					// If on iOS and the muting controller installed, dispose it now
					if (gIsIOS){

						if (gTheMuteHandle){
						 	gTheMuteHandle.dispose();
  							gTheMuteHandle = null;
  						}
					}

				};

				break;

			}
		}

		if (ABCJS.synth.supportsAudio()) {
			
			synthControl = new ABCJS.synth.SynthController(theProcessedABC);

			synthControl.load("#playback-audio", cursorControl, {displayLoop: true, displayRestart: true, displayPlay: true, displayProgress: true, displayWarp: true});


		} else {

			document.querySelector("#playback-audio").innerHTML = "<div class='audio-error'>Audio is not supported in this browser.</div>";

		}

		setTune(false);

		// Cache autoscroll values early
		gPlayerHolder = document.getElementById("playerholder");
		gPlayerContainerRect = gPlayerHolder.getBoundingClientRect();
	}

	// Try to deal with tab deactivation muting
	if (gIsIOS){

		var context = ABCJS.synth.activeAudioContext();

		// Decide on some parameters
		let allowBackgroundPlayback = false; // default false, recommended false
		let forceIOSBehavior = false; // default false, recommended false

		gTheMuteHandle = null;
		
		// Pass it to unmute if the context exists... ie WebAudio is supported
		if (context)
		{
		  // If you need to be able to disable unmute at a later time, you can use the returned handle's dispose() method
		  // if you don't need to do that (most folks won't) then you can simply ignore the return value
		  gTheMuteHandle = unmute(context, allowBackgroundPlayback, forceIOSBehavior);
		  
		}
	}

	initPlay();

}


//
// Tune trainer - Loops tunes with increasing speed
//

//
// Launched from the player, close the player, launch the trainer
function TuneTrainerLaunchFromPlayer(){

	// Click the OK button in the player
	gTheOKButton.click();

	setTimeout(function() {

		// Launch the trainer
		TuneTrainer(true);

	},250);
}

function TuneTrainer(bIsFromPlayer){

	if (gAllowCopy){


		if (!bIsFromPlayer){
			// Deactivate Quick Player 
			deactivateQuickPlayer();

		}

		var theSelectedABC;

		if (bIsFromPlayer){
			theSelectedABC = getTuneByIndex(gPlayABCTuneIndex);
		}
		else{
			// Try to find the current tune
			theSelectedABC = findSelectedTune();
		}

		if (theSelectedABC == ""){
			// This should never happen
			return;
		}

		// Fix issue with initial swing not happening
		ScanTuneForCustomTimingInjection(theSelectedABC);

		// Fixes bug reported by Alix on 11 Apr 2024 for tunes with tags at the end and extra blank lines
		theSelectedABC = theSelectedABC.trim();

		// See if there is a select region and return the partial tune
		theSelectedABC = ProcessSelectRegionForPlay(theSelectedABC);

		// Pre-process the ABC to inject any requested programs or volumes
		var theProcessedABC = PreProcessPlayABC(theSelectedABC);

    // Don't allow loop state caching or handling
    gAllowLoopStateCaching = false;

		// Play back locally in-tool	
		TuneTrainerDialog(theSelectedABC,theProcessedABC,false);

	}
}


//
// Reset the looper 
//
function TuneTrainerReset(){

	//console.log("TuneTrainerReset");

	var bDoReload = false;

	// Set the initial loop parameters
	var looperSpeedStart = document.getElementById("looper_start_percent").value;
	var looperSpeedEnd = document.getElementById("looper_end_percent").value;
	var looperSpeedIncrement = document.getElementById("looper_increment").value;
	var looperCount = document.getElementById("looper_count").value;

	looperSpeedStart = parseFloat(looperSpeedStart);
	looperSpeedEnd = parseFloat(looperSpeedEnd);
	looperSpeedIncrement = parseFloat(looperSpeedIncrement);
	looperCount = parseFloat(looperCount);

	if ((!isNaN(looperSpeedStart)) && (!isNaN(looperSpeedEnd)) && (!isNaN(looperSpeedIncrement)) && (!isNaN(looperCount)) ){

		if ((looperSpeedStart <= looperSpeedEnd) && (looperSpeedStart >= 0) && (looperSpeedEnd <= 400) && (looperSpeedIncrement >= 0) && (looperCount > 0)){

			gLooperSpeedStart = looperSpeedStart;
			gLooperSpeedEnd = looperSpeedEnd;
			gLooperSpeedIncrement = looperSpeedIncrement;
			gLooperCount = looperCount;
			gLooperCurrent = gLooperSpeedStart;
			gLooperLoopCount = gLooperCount;

			bDoReload = true;

		}
	}

	if (bDoReload){

		// Clear the looper callback
		gLoopCallback = null;
		gStartPlayCallback = null;
		gPreStartPlayCallback = null;

		// Clear the player in pause flag
		gPlayerInPause = false;

		gTheOKButton.click();

		setTimeout(function() {

			// Launch the player with the new values
			TuneTrainerDialog(gPlayerLooperOriginal,gPlayerLooperProcessed,true);

		},250);

	}
	else{

		// User entered odd values
		var thePrompt = '<p style="font-family:helvetica;font-size:14pt;text-align:center"><strong>Invalid Tune Trainer Values Entered</strong></p><p style="font-family:helvetica;font-size:14pt;margin-top:36px;">All values must be numbers.</p><p style="font-family:helvetica;font-size:14pt;">Starting tempo must be less than the ending tempo.</p><p style="font-family:helvetica;font-size:14pt;">Tempo increment must be greater than zero.</p><p style="font-family:helvetica;font-size:14pt;">Loop count must be greater than zero.</p><p style="font-family:helvetica;font-size:14pt;">Please fix and try again.</p>'

		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

	}
}

//
// Toggle the metronome version of the tune;
//
function ToggleTuneTrainerMetronome(){

	gPlayMetronome = !gPlayMetronome;

  // Persist metronome
  if (gLocalStorageAvailable){
    
    localStorage.PlayMetronome = gPlayMetronome;

  }

	gTheOKButton.click();

	setTimeout(function() {

		if (gPlayMetronome){

			var testVal = inject_one_metronome(gPlayerLooperProcessed, false);

			// Injection failed due to unsupported meter
			if (!testVal){

        gPlayMetronome = false;

		    var modal_msg  = '<p style="text-align:center;font-size:20pt;font-family:helvetica">Metronome Not Available for this Meter</p>';
		 	   modal_msg += '<p style="font-size:14pt;line-height:20pt;font-family:helvetica;">No metronome pattern is available for the meter of this tune.</p>';
		 	   modal_msg += '<p style="font-size:14pt;line-height:20pt;font-family:helvetica;">Only the original version can be played.</p>';

			  DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) }).then(
				function(){
					TuneTrainerDialog(gPlayerLooperOriginal,gPlayerLooperProcessed,true);
				});

        // Persist metronome
        if (gLocalStorageAvailable){
          
          localStorage.PlayMetronome = false;

        }

				return;

			}

			TuneTrainerDialog(gPlayerLooperOriginal,gPlayerLooperProcessed,true);

		}
		else{

			// Launch the original tune
			TuneTrainerDialog(gPlayerLooperOriginal,gPlayerLooperProcessed,true);

		}

	},250);		

}

// 
// Save the countdown enable state
//
function ToggleLoopCountdown(){

	gLooperDoCountdown = document.getElementById("looper_docountdown").checked;

	if (gLocalStorageAvailable){
		localStorage.LooperDoCountdown = gLooperDoCountdown;
	}
}

// 
// Save the countdown state
//
function SaveLoopCountdown(){
	
	gLooperCountdown = document.getElementById("looper_countdown").value;

	gLooperCountdown = parseInt(gLooperCountdown);

	if (isNaN(gLooperCountdown)){
		gLooperCountdown = 5;
	}

	if (gLooperCountdown < 1){
		gLooperCountdown = 5;
	}

	if (gLocalStorageAvailable){
		localStorage.LooperCountdown = gLooperCountdown;
	}
}

// 
// Tune trainer Dialog
//

// Starting defaults
var gLooperSpeedStart = 50;
var gLooperSpeedEnd = 100;
var gLooperSpeedIncrement = 10;
var gLooperCount = 1;
var gLooperCurrent = gLooperSpeedStart;
var gLooperLoopCount = gLooperCount;
var gPlayerLooperOriginal = null;
var gPlayerLooperProcessed = null;
var gTouchIncrementFive = false;
var gLooperDoCountdown = true;
var gLooperCountdown = 5;

function TuneTrainerDialog(theOriginalABC, theProcessedABC, looperState){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","TuneTrainer");

	var totalLoops = 0;
	var loopCount = 0;

	gMIDIbuffer = null;
	gTheOKButton = null;

	// We came in because of a looper param change, don't init the tune cache
	if (!looperState){

		gPlayerLooperOriginal = theOriginalABC;
		gPlayerLooperProcessed = theProcessedABC;

	}

  if (gPlayMetronome){
    theProcessedABC = inject_one_metronome(gPlayerLooperProcessed, false);
  }

	gLooperCurrent = gLooperSpeedStart;
	gLooperLoopCount = gLooperCount;

	// Save the settings in browser local storage for next time
	if (gLocalStorageAvailable){
		localStorage.LooperSpeedStart = gLooperSpeedStart;
		localStorage.LooperSpeedEnd = gLooperSpeedEnd;
		localStorage.LooperSpeedIncrement = gLooperSpeedIncrement;
		localStorage.LooperCount = gLooperCount;
	}

	// Do common setup of soundfont and custom timing injection
	if (!PlayerSetupCommon(theProcessedABC)){
		return;
	}
	
	var instrument = GetRadioValue("notenodertab");

	var abcOptions = GetABCJSParams(instrument);

	abcOptions.oneSvgPerLine = false;

	// Clear the tab label if present to compress vertical space
	if (instrument != "noten" ){

		// Sanity check the options first
		if (abcOptions.tablature && (abcOptions.tablature.length > 0)){
			abcOptions.tablature[0].label = "";
		}
	}
	
	function setTune(userAction) {

		synthControl.disable(true);

		var visualObj = ABCJS.renderAbc("playback-paper", theProcessedABC, abcOptions)[0];

		// Post process whistle or note name tab
		postProcessTab([visualObj], "playback-paper", instrument, true);

		var midiBuffer = new ABCJS.synth.CreateSynth(theProcessedABC);

		gMIDIbuffer = midiBuffer;
        gMIDIInitStillWaiting = false;

		SetupPlayerEventHandlers();
		
		midiBuffer.init({
			visualObj: visualObj
		}).then(function (response) {

			//console.log(response);
			
      if (synthControl) {

				var fadeLength = computeFade(theProcessedABC);

				synthControl.setTune(visualObj, userAction, {fadeLength:fadeLength}).then(function (response) {
					
					console.log("Audio successfully loaded.");

					//console.log("Tune is loaded, setting initial warp and loop callback");

					// Stuff in the initial warp
					synthControl.forceWarp(gLooperCurrent);

					synthControl.isLooping = true;

					// Setup the callbacks
					gLoopCallback = LoopCallback;
					gStartPlayCallback = StartPlayCallback;
					gPreStartPlayCallback = PreStartPlayCallback;

					gSynthControl = synthControl;

					// Hook up tempo dialog
					var elem = document.getElementsByClassName("abcjs-midi-tempo");
					if (elem && (elem.length > 0)){
						elem[0].onclick = SetPlayerTempo;
					}

					// Are we using the trainer touch controls
					if (gTrainerTouchControls){

						//debugger;

						var elems1 = document.getElementsByClassName("abcjs-midi-clock");
						var elems2 = document.getElementsByClassName("abcjs-midi-current-tempo-wrapper");

						if (elems1 && elems2 && (elems1.length > 0) && (elems2.length > 0)){

							
							var elem = elems1[0];
							elem.onclick = DecrementTempo;
							elem = elems2[0];
							elem.onclick = IncrementTempo;

						}
					
					}

				}).catch(function (error) {
					
			    // MAE 10 Jul 2024 - Hide the spinner
					hideTheSpinner();
        	gMIDIInitStillWaiting = false;
					console.log("Problem loading audio for this tune");

				});
			}
		}).catch(function (error) {

	    // MAE 10 Jul 2024 - Hide the spinner
			hideTheSpinner();
      gMIDIInitStillWaiting = false;
			console.log("Problem loading audio for this tune");

		});
	}

	function StopPlay(){

		gSynthControl = null;

		if (synthControl){
				
			synthControl.destroy();

			synthControl = null;
		}
	}

	//
	// Update the status bar
	//
	function UpdateProgressBar(){

		//debugger;

		if (loopCount > totalLoops){

			return;
		
		}

		if ((gLooperSpeedStart == gLooperSpeedEnd) || (gLooperSpeedIncrement == 0)){

			var elem = document.getElementById("looperstatusbaroverlay");
			elem.style.display = "block";

			elem = document.getElementById("looperstatusbar");
			elem.style.display = "block";

			elem.style.width = "212px";
		
			return;		

		}

		setTimeout(function(){

			var progressWidth = 212;

			var elem = document.getElementById("looperstatusbaroverlay");
			elem.style.display = "block";

			elem = document.getElementById("looperstatusbar");
			elem.style.display = "block";

			if (gLooperSpeedStart != gLooperSpeedEnd);
			{
				progressWidth = 212 * (loopCount/totalLoops);
			}

			elem.style.width = progressWidth+"px";

		},10);

	}

	//
	// Calc the total number of times to get to the full speed
	//
	function CalcTotalLoops(){

		if ((gLooperSpeedStart == gLooperSpeedEnd) || (gLooperSpeedIncrement == 0)){

			return 1;
		
		}

		var count = 0;

		var looperSpeedStart = gLooperSpeedStart;
		var looperSpeedEnd = gLooperSpeedEnd;
		var looperSpeedIncrement = gLooperSpeedIncrement;
		var looperCount = gLooperCount;

		var start = looperSpeedStart;

		while (start < looperSpeedEnd){
			count += looperCount;
			start += looperSpeedIncrement;
		}

		//console.log("count = "+count);

		return count;
	}

	// Callback at end of each loop
	function LoopCallback(){

		//console.log("LoopCallback");

		//console.log("gPlayerInPause "+gPlayerInPause);

		if (!gPlayerInPause){

			if ((!isNaN(gLooperSpeedEnd)) && (!isNaN(gLooperSpeedIncrement)) && (!isNaN(gLooperCount))){

				loopCount++;

				var isAtEnd = false;

				if (gLooperCurrent == gLooperSpeedEnd){
					isAtEnd = true;
				}

				// If incrementing, also possible to just spin at the start tempo
				if (gLooperSpeedIncrement != 0){

					gLooperLoopCount--;

					if (gLooperLoopCount == 0){

						gLooperLoopCount = gLooperCount;

						if (gLooperCurrent != gLooperSpeedEnd){

							gLooperCurrent = gLooperCurrent + gLooperSpeedIncrement;

							if (gLooperCurrent >= gLooperSpeedEnd){
								gLooperCurrent = gLooperSpeedEnd;
								isAtEnd = true;
							}

							synthControl.pause();
						
							synthControl.forceWarp(gLooperCurrent);

						}
						else{
							isAtEnd = true;
						}

					}
					
					var elem = document.getElementById("looperstatus");

					if (!isAtEnd){
						if ((gLooperSpeedStart != gLooperSpeedEnd) && (gLooperSpeedIncrement != 0)){
							elem.innerHTML = "Tempo:&nbsp;"+gLooperCurrent+"%&nbsp;&nbsp;-&nbsp;&nbsp;Loop "+((gLooperCount - gLooperLoopCount)+1)+" of "+gLooperCount;
						}
						else{
							elem.innerHTML = "Tempo:&nbsp;"+gLooperCurrent+"%";
						}
					}
					else{
						elem.innerHTML = "Tempo:&nbsp;"+gLooperCurrent+"%";

					}

					// Update the progress bar
					UpdateProgressBar();
				}
			}
			else{
				
				gPlayerInPause = false;

			}
		}
		else{

			gPlayerInPause = false;

		}
	}

	// Called when the user first clicks play
	function StartPlayCallback(){

		var elem = document.getElementById("looperstatus");

		if ((gLooperSpeedStart != gLooperSpeedEnd) && (gLooperSpeedIncrement != 0)){
			elem.innerHTML = "Tempo:&nbsp;"+gLooperCurrent+"%&nbsp;&nbsp;-&nbsp;&nbsp;Loop 1 of "+gLooperCount;		
		}
		else{
			var elem = document.getElementById("looperstatus");
			elem.innerHTML = "Tempo:&nbsp;"+gLooperCurrent+"%";
		}

		// Update the progress bar
		UpdateProgressBar();

	}

	// Called once when the user first clicks play before the play starts
	function PreStartPlayCallback(callback){

		//console.log("PreStartPlayCallback");

		gLooperDoCountdown = document.getElementById("looper_docountdown").checked;
		gLooperCountdown = document.getElementById("looper_countdown").value;

		gLooperCountdown = parseInt(gLooperCountdown);

		if (isNaN(gLooperCountdown)){
			gLooperCountdown = 5;
		}

		if (gLooperCountdown < 1){
			gLooperCountdown = 5;
		}

		if (gLocalStorageAvailable){
			localStorage.LooperDoCountdown = gLooperDoCountdown;
			localStorage.LooperCountdown = gLooperCountdown;
		}

		if (gLooperDoCountdown){

			var elem = document.getElementById("loopercountdown");

			elem.style.display = "block";

		    var count = gLooperCountdown; 

		    var countdownElement = document.getElementById('loopercountdowntext');
		     
		    countdownElement.textContent = count;

		    var countdownInterval = setInterval(function() {

		      count--;
		      
		      countdownElement.textContent = count;

		      if (count <= 0) {
		        clearInterval(countdownInterval);
		        elem.style.display = "none";

		        // Show the player for one second before start
		        setTimeout(function(){

		        	callback();

		        },1000);
		      }

		    }, 1000); // Update every 1 second
		}
		else{
			// Start immediately
	        callback();
		}
	}

	// 
	// Large control increment/decrement control
	//
	function IncrementDecrementControlValue(event){

		//debugger;

		//console.log("IncrementDecrementControlValue this ="+this);

		//console.log("Control text = "+this.innerHTML);

		var theText = this.innerHTML;

		var theControl = null;
		var theControlIndex = 0;

		if (theText.indexOf("Starting") == 0){
			//console.log("Start control");
			theControl = document.getElementById("looper_start_percent");
			theControlIndex = 0;
		}
		else
		if (theText.indexOf("Ending") == 0){
			//console.log("End control");
			theControl = document.getElementById("looper_end_percent");
			theControlIndex = 1;
		}
		else
		if (theText.indexOf("Tempo") == 0){
			//console.log("Increment control");
			theControl = document.getElementById("looper_increment");
			theControlIndex = 2;
		}
		else
		if (theText.indexOf("Increment") == 0){
			//console.log("Count control");
			theControl = document.getElementById("looper_count");
			theControlIndex = 3;
		}

		const elemRect = this.getBoundingClientRect();

		var eventX = event.clientX;

		var isDecrement = true;
		var delta = 1;

		if ((eventX - elemRect.left) > (elemRect.width/2)){
			
			isDecrement = false;

			if (theControlIndex != 3){

				if (gTouchIncrementFive){
					delta = 5;
				}
			}

		}
		else{

			if (theControlIndex != 3){
				
				if (gTouchIncrementFive){
					delta = 5;
				}

			}

		}

		//console.log("isDecrement = "+isDecrement);

		var theValue = theControl.value;

		switch (theControlIndex){

			// Start
			// End
			case 0:
			case 1:
				theValue = parseFloat(theValue);
				if (isDecrement){
					theValue = theValue - delta;
					if (theValue < 1){
						theValue = 1;
					}
				}
				else{
					theValue = theValue + delta;
					if (theValue > 400){
						theValue = 400
					}
				}
				break;

			// Increment
			case 2:
				theValue = parseFloat(theValue);
				if (isDecrement){
					theValue = theValue - delta;
					if (theValue < 0){
						theValue = 0;
					}
				}
				else{
					theValue = theValue + delta;
					if (theValue > 400){
						theValue = 400
					}
				}
				break;


			// Count
			case 3:
				theValue = parseInt(theValue);
				if (isDecrement){
					theValue = theValue - delta;
					if (theValue < 1){
						theValue = 1;
					}
				}
				else{
					theValue = theValue + delta;
					if (theValue > 100){
						theValue = 100
					}
				}
				break;
		}

		theControl.value = theValue;
	}

	//
	// Touching the % next to the value entry toggles the touch entry decrement/increment value between 1 and 5
	function ToggleTouchValueIncrement(){

		gTouchIncrementFive = !gTouchIncrementFive;

	}

	var cursorControl = new CursorControl();

	var synthControl;

	function initPlay() {

		// Clear the looper callback
		gLoopCallback = null;
		gStartPlayCallback = null;
		gPreStartPlayCallback = null;

		// Clear the player in pause flag
		gPlayerInPause = false;

		// Adapt the top based on the player control size
        var theTop;

		var theHeight;

		if (gLargePlayerControls){
			theHeight = window.innerHeight - 416;
		}
		else{
			theHeight = window.innerHeight - 396;
			if (isDesktopBrowser() && isSafari()){
				theHeight -= 10;
			}
		}

		theTop = 20;

	   	modal_msg = '<div id="playerholder" style="height:'+theHeight+'px;overflow-y:auto;margin-bottom:15px;">';

		if (gLargePlayerControls){
			modal_msg += '<div id="abcplayer" class="abcjs-large">';
		}
		else{
			modal_msg += '<div id="abcplayer">';			
		}

	   	modal_msg += '<div id="playback-paper"></div>';
	   	modal_msg += '</div>';

	   	modal_msg += '</div>';

	   	// Add the player controls
		if (gLargePlayerControls){
	   		modal_msg += '<div id="playback-audio" class="abcjs-large"></div>';
		}
		else{
	   		modal_msg += '<div id="playback-audio"></div>';
		}

	  // Add the tune trainer controls

		modal_msg += '<p class="configure_looper_text" style="text-align:center;margin:0px;margin-top:20px">';
		modal_msg += '<span id="looper_text_1">Starting tempo:</span> <input style="width:75px;margin-right:4px;" id="looper_start_percent" type="number" min="1" step="1" max="400" title="Tune tempo start percentage" autocomplete="off"/><span id="looper_percent_span_1">%&nbsp;&nbsp;&nbsp;&nbsp;</span>';
		modal_msg += '<span id="looper_text_2">Ending tempo:</span> <input style="width:75px;margin-right:4px;" id="looper_end_percent" type="number" min="1" step="1" max="400" title="Tune tempo end percentage" autocomplete="off"/><span id="looper_percent_span_2">%&nbsp;&nbsp;&nbsp;&nbsp;</span>';
		modal_msg += '<span id="looper_text_3">Tempo increment:</span> <input style="width:75px;margin-right:4px;" id="looper_increment" type="number" min="0" step="1" max="400" title="Tempo increment percentage" autocomplete="off"/><span id="looper_percent_span_3">%</span>';
		modal_msg += '</p>';
		modal_msg += '<p class="configure_looper_text" style="text-align:center;margin:0px;margin-top:20px">';
		modal_msg += '<span id="looper_text_4">Increment tempo after how many loops:</span> <input style="width:60px;margin-right:14px;" id="looper_count" type="number" min="1" step="1" max="100" title="Increment tempo after this many times through the tune" autocomplete="off"/><span id="looper_text_5">Countdown?</span><input style="width:18px;margin-left:8px;margin-right:14px;" id="looper_docountdown" type="checkbox" onchange="ToggleLoopCountdown();"/><span id="looper_text_6">Countdown secs:</span><input style="width:60px;margin-left:8px;" id="looper_countdown" type="number" min="1" step="1" max="30" title="Countdown secs" autocomplete="off" onchange="SaveLoopCountdown();"/>';
		modal_msg += '</p>';
		modal_msg += '<p class="configure_looper_text" style="text-align:center;margin:0px;margin-top:20px">';
		modal_msg += '<input id="looperreset" class="looperreset button btn btn-looperreset" onclick="TuneTrainerReset();" type="button" value="Apply Tune Trainer Settings and Reload the Player" title="Applies the entered tune trainer settings and reloads the player">';

    if (gPlayMetronome){
  		modal_msg += '<input id="looper_metronomebutton" class="looper_metronome button btn btn-metronome" onclick="ToggleTuneTrainerMetronome();" type="button" value="Disable Metronome" title="Disables the metronome">';
    }
    else{
      modal_msg += '<input id="looper_metronomebutton" class="looper_metronome button btn btn-metronome" onclick="ToggleTuneTrainerMetronome();" type="button" value="Enable Metronome" title="Enables the metronome">';
    }
		
    modal_msg += '</p>';
		modal_msg += '<a id="looperhelp" href="https://michaeleskin.com/abctools/userguide.html#tune_trainer" target="_blank" style="text-decoration:none;" title="Learn more about the Tune Trainer" class="dialogcornerbutton">?</a>';
		modal_msg += '<p id="looperstatus"></p>';
		modal_msg += '<div id="looperstatusbar"></div>';
		modal_msg += '<div id="looperstatusbaroverlay"></div>';
		modal_msg += '<div id="loopercountdown" class="looper-modal"><div class="looper-modal-content"><div class="looper-modal-text" id="loopercountdowntext"></div></div></div>';

	   	// Scale the player for larger screens
		var windowWidth = window.innerWidth;

		var instrument = GetRadioValue("notenodertab");

		var theWidth;

		if (isDesktopBrowser()){

			theWidth = windowWidth * (gPlayerScaling / 100);

			if (giPadTwoColumn){
				if (isLandscapeOrientation()){
					theWidth = windowWidth * (gPlayerScaling / 100);
				}
				else{
					theWidth = windowWidth * 0.9;	
				}
			}

			if (theWidth < 850){
				theWidth = 850;
			}

		}
		else{

			theWidth = 800;  
			
		}

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: theTop, width:theWidth, okText:"Close", scrollWithPage: (isMobileBrowser()) });

		// Set the initial loop parameters
		document.getElementById("looper_start_percent").value = gLooperSpeedStart;
		document.getElementById("looper_end_percent").value = gLooperSpeedEnd;
		document.getElementById("looper_increment").value = gLooperSpeedIncrement;
		document.getElementById("looper_count").value = gLooperCount;

		document.getElementById("looper_docountdown").checked = gLooperDoCountdown;
		document.getElementById("looper_countdown").value = gLooperCountdown;
	
		// Are we using the trainer touch controls
		if (gTrainerTouchControls){

			document.getElementById("looper_text_1").onclick = IncrementDecrementControlValue;
			document.getElementById("looper_text_2").onclick = IncrementDecrementControlValue;
			document.getElementById("looper_text_3").onclick = IncrementDecrementControlValue;
			document.getElementById("looper_text_4").onclick = IncrementDecrementControlValue;

			document.getElementById("looper_percent_span_1").onclick = ToggleTouchValueIncrement;
			document.getElementById("looper_percent_span_2").onclick = ToggleTouchValueIncrement;
			document.getElementById("looper_percent_span_3").onclick = ToggleTouchValueIncrement;
		
		}

		// Calc the total loops
		totalLoops = CalcTotalLoops();

		// Idle the metronome button
		if (gPlayMetronome){

			var elem = document.getElementById("looper_metronomebutton");

			elem.value = "Disable Metronome";

		}
		else{

			var elem = document.getElementById("looper_metronomebutton");

			elem.value = "Enable Metronome";

		}

		var theOKButtons = document.getElementsByClassName("modal_flat_ok");

		// Find the button that says "Close" and hook its click handler to make sure music stops on close
		// Need to search through the modals since there may be a first time share dialog also present
		// the first time someone plays a linked PDF tune

		var theOKButton = null;

		for (var i=0;i<theOKButtons.length;++i){

			theOKButton = theOKButtons[i];

			if (theOKButton.innerText == "Close"){

				gTheOKButton = theOKButton;

				var originalOnClick = theOKButton.onclick;

				theOKButton.onclick = function(){

					originalOnClick(); 
					StopPlay(); 

				    // Focus after operation
				    FocusAfterOperation();

					// If on iOS and the muting controller installed, dispose it now
					if (gIsIOS){

						if (gTheMuteHandle){
						 	gTheMuteHandle.dispose();
  							gTheMuteHandle = null;
  						}
					}

				};

				break;

			}
		}

		if (ABCJS.synth.supportsAudio()) {
			
			synthControl = new ABCJS.synth.SynthController(theProcessedABC);

			synthControl.load("#playback-audio", cursorControl, {displayLoop: false, displayRestart: true, displayPlay: true, displayProgress: true, displayWarp: true});
			
		} else {

			document.querySelector("#playback-audio").innerHTML = "<div class='audio-error'>Audio is not supported in this browser.</div>";

		}

		setTune(false);

		// Cache autoscroll values early
		gPlayerHolder = document.getElementById("playerholder");
		gPlayerContainerRect = gPlayerHolder.getBoundingClientRect();

	}

	// Try to deal with tab deactivation muting
	if (gIsIOS){

		var context = ABCJS.synth.activeAudioContext();

		// Decide on some parameters
		let allowBackgroundPlayback = false; // default false, recommended false
		let forceIOSBehavior = false; // default false, recommended false

		gTheMuteHandle = null;
		
		// Pass it to unmute if the context exists... ie WebAudio is supported
		if (context)
		{
		  // If you need to be able to disable unmute at a later time, you can use the returned handle's dispose() method
		  // if you don't need to do that (most folks won't) then you can simply ignore the return value
		  gTheMuteHandle = unmute(context, allowBackgroundPlayback, forceIOSBehavior);
		  
		}
	}

	initPlay();

}

// Used by the IncrementTempo and DecrementTempo functions
var gSynthControl = null;

//
// Decrement the tempo
//
function DecrementTempo(){

	//console.log("DecrementTempo");

	var elems = document.getElementsByClassName("abcjs-midi-tempo");

	if (elems && (elems.length>0)){

		var elem = elems[0];
		
		var theTempo = elem.value;

		theTempo = parseInt(theTempo);

		if (!isNaN(theTempo)){
			
			if (theTempo > 5){
				theTempo -= 5;
				elem.value = theTempo;

				gSynthControl.pause();
				gSynthControl.forceWarp(theTempo);

        gLastWarp = theTempo;

        if (gLocalStorageAvailable){
          localStorage.LastWarp = gLastWarp;
        }

			}
		}
	}
}

//
// Increment the tempo
//
function IncrementTempo(){

	//console.log("IncrementTempo");
	
	var elems = document.getElementsByClassName("abcjs-midi-tempo");

	if (elems && (elems.length>0)){

		var elem = elems[0];
		
		var theTempo = elem.value;

		theTempo = parseInt(theTempo);

		if (!isNaN(theTempo)){

			theTempo += 5;

			elem.value = theTempo;
			
			gSynthControl.pause();
			gSynthControl.forceWarp(theTempo);

      gLastWarp = theTempo;

      if (gLocalStorageAvailable){
        localStorage.LastWarp = gLastWarp;
      }

		}
	}
}

//
// Set the tempo
//
function SetPlayerTempo(e){

	//console.log("SetPlayerTempo");

	var theTempo;
	var elem;

	var elems = document.getElementsByClassName("abcjs-midi-tempo");

	if (elems && (elems.length>0)){

		elem = elems[0];
		
		theTempo = elem.value;

		theTempo = parseInt(theTempo);

		if (isNaN(theTempo)){
			theTempo = 100;
		}

	}
	else{
		return;
	}

	const theData = {
	  configure_tempo:theTempo
	};

	var form = [
	  {html: '<p style="text-align:center;margin-bottom:32px;font-size:16pt;font-family:helvetica;margin-left:15px;">Set Tempo Percentage&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#playing_your_tunes" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {name: "Tempo percentage:", id: "configure_tempo", type:"number", cssClass:"configure_staffwidth_form_text"}, 
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 250, width: 400, scrollWithPage: (AllowDialogsToScroll()), autoFocus: true } ).then(function(args){
		
		if (!args.canceled){

			var newTempo = args.result.configure_tempo;

			newTempo = parseInt(newTempo);

			if (isNaN(newTempo)){
				return;
			}

			if (newTempo < 0){
				return;
			}

			elem.value = newTempo;
			
			gSynthControl.pause();

			gSynthControl.forceWarp(newTempo);

      gLastWarp = newTempo;

      if (gLocalStorageAvailable){
        localStorage.LastWarp = gLastWarp;
      }

		}
	});
}

//
// Setup DGDAE tab button
//
function setupDGDAE(){
	var elem = document.getElementById("b5");
	elem.value = "dgdae";
	elem = document.getElementById("b5label");
	elem.title = "Shows DGDAE 5-string Bouzouki tablature";
	elem.innerHTML = "DGDAE";
}

//
// Setup CGDAE tab button
//
function setupCGDAE(){
	var elem = document.getElementById("b5");
	elem.value = "cgdae";
	elem = document.getElementById("b5label");
	elem.title = "Shows CGDAE 5-string Fiddle tablature";
	elem.innerHTML = "CGDAE";
}

//
// Setup CGDA tab button
//
function setupCGDA(){
	var elem = document.getElementById("b4");
	elem.value = "cgda";
	elem = document.getElementById("b4label");
	elem.title = "Shows CGDA Mandola/Mandocello tablature";
	elem.innerHTML = "CGDA";
}

//
// Setup GDAD tab button
//
function setupGDAD(){
	var elem = document.getElementById("b4");
	elem.value = "gdad";
	elem = document.getElementById("b4label");
	elem.title = "Shows GDAD Bouzouki tablature";
	elem.innerHTML = "GDAD";
}

//
// Setup whistle tab button
//
function setupWhistleTab(){
	var elem = document.getElementById("b9");
	elem.value = "whistle";
	elem = document.getElementById("b9label");
	elem.title = "Shows Tin Whistle (D) tablature";
	elem.innerHTML = "Whistle";
	elem.style.padding = "0.8rem 0.7rem 0.7rem 0.7rem";
}

//
// Setup recorder tab button
//
function setupRecorderTab(){
	var elem = document.getElementById("b9");
	elem.value = "recorder";
	elem = document.getElementById("b9label");

	elem.title = "Shows Baroque Recorder tablature";
	elem.innerHTML = "Recorder";		
	elem.style.padding = "0.8rem 7px 0.7rem 7px";
}

//
// Save/load global configuration to/from local browser storage
//

// Global settings state
var gAlwaysInjectPrograms = true;
var gTheMelodyProgram = 0;
var gTheBassProgram = 0;
var gTheChordProgram = 0;
var gAlwaysInjectVolumes = true;
var gTheBassVolume = 64;
var gTheChordVolume = 64;
var gOverridePlayMIDIParams = false;
var gInjectTab_StripChords = true;

var gOpenLinksInTrainer = false;

// Box and concertina tab global state
var gInjectTab_FontFamily = "Palatino";
var gInjectTab_TabFontSize = 11;
var gInjectTab_StaffSep = 80;
var gInjectTab_MusicSpace = 10;
var gInjectTab_TabLocation = 1;
var gInjectTab_ConcertinaStyle = 0;
var gInjectTab_ConcertinaTuning = 0;
var gInjectTab_ConcertinaFingering = 0;
var gInjectTab_GaryCoover = false;
var gInjectTab_BoxTabStyle = 0;
var gInjectTab_Colors = false;

// Box and Concertina Push and draw tablature glyphs
var gInjectTab_PushGlyph = "↓";
var gInjectTab_DrawGlyph = "↑";
var gInjectTab_UseBarForDraw = false;

// Large player controls
var gLargePlayerControls = false;

// Trainer label touch increment/decrement controls
var gTrainerTouchControls = false;

// Bamboo flute key
var gBambooFluteKey = 1; // Default to D

// Mountain Dulcimer style
var gMDulcimerStyle = 0; // Default to high string
var gMDulcimerStripBadTunes = false; // Don't strip bad tunes on MD injection
var gMDulcimerUseDashForOpenString = false; // Use a space for open strings

// Harmonica tab
var gHarmonicaTuning = "0";
var gHarmonicaKey = "C";
var gHarmonicaOctave = "0";
var gHarmonicaPlusSign = false;
var gHarmonicaStacking = true;
var gHarmonicaTabColors = false;

//
// For custom harmonica tuning option
//
var gHarmonicaCustom;

const gHarmonicaCustomDefault = {
	version:3,
	type:"CustomHarmonica",
	name:"Custom",
	noteMap:[
		"1", // C
	    "-1'", // C# / Db
	    "-1", // D
	    "1o", // D# / Eb
	    "2", // E
	    "-2''", // F
	    "-2'", // F# / Gb
	    "3", // G
	    "-3'''", // G# / Ab
	    "-3''", // A
	    "-3'", // A# / Bb
	    "-3", // B
	    "4", // C
	    "-4'", // C# / Db
	    "-4", // D
	    "4o", // E# / Eb
	    "5", // E
	    "-5", // F
	    "5o", // F# / Gb
	    "6", // G
	    "-6'", // G# / Ab
	    "-6", // A
	    "6o", // A# / Bb
	    "-7", // B
	    "7", // C
	    "-7o", // C# / Db
	    "-8", // D
	    "8'", // D# / Eb
	    "8", // E
	    "-9", // F
	    "9'", // F# / Gb
	    "9", // G
	    "-9o", // G# / Ab
	    "-10", // A
	    "10''", // A# / Bb
	    "10'", // B
	    "10", // C
	    "-10o'", //C#,
	    "x", // D
	    "x", // D# / Eb
	    "x", // E
	    "x", // F
	    "x", // F# / Gb
	    "x", // G
	    "x", // G# / Ab
	    "x", // A
	    "x", // A# / Bb
	    "x",  // B
	    "x", // C
	    "x", //C#,
	    "x", // D
	    "x", // D# / Eb
	    "x", // E
	    "x", // F
	    "x", // F# / Gb
	    "x", // G
	    "x", // G# / Ab
	    "x", // A
	    "x", // A# / Bb
	    "x"  // B
    ] 
}


// Custom tab
var gCustomTabKey = "0";
var gCustomTabOctave = "0";

//
// For custom tab option
//
var gCustomTab;

const gCustomTabDefault = {
	version:2,
	type:"CustomTab",
	name:"Default (Scale Semitone Numbers)",
	noteMap:[
		"0", // C
	    "1", // C# / Db
	    "2", // D
	    "3", // D# / Eb
	    "4", // E
	    "5", // F
	    "6", // F# / Gb
	    "7", // G
	    "8", // G# / Ab
	    "9", // A
	    "10", // A# / Bb
	    "11", // B
	    "12", // C
	    "13", // C# / Db
	    "14", // D
	    "15", // E# / Eb
	    "16", // E
	    "17", // F
	    "18", // F# / Gb
	    "19", // G
	    "20", // G# / Ab
	    "21", // A
	    "22", // A# / Bb
	    "23", // B
	    "24", // C
	    "25", // C# / Db
	    "26", // D
	    "27", // D# / Eb
	    "28", // E
	    "29", // F
	    "30", // F# / Gb
	    "31", // G
	    "32", // G# / Ab
	    "33", // A
	    "34", // A# / Bb
	    "35", // B
	    "36", // C
	    "37", //C#,
	    "38", // D
	    "39", // D# / Eb
	    "40", // E
	    "41", // F
	    "42", // F# / Gb
	    "43", // G
	    "44", // G# / Ab
	    "45", // A
	    "46", // A# / Bb
	    "47",  // B
	    "48", // C
	    "49", //C#,
	    "50", // D
	    "51", // D# / Eb
	    "52", // E
	    "53", // F
	    "54", // F# / Gb
	    "55", // G
	    "56", // G# / Ab
	    "57", // A
	    "58", // A# / Bb
	    "59"  // B
    ] 
}

// Get the initial configuration settings from local browser storage, if present
function GetInitialConfigurationSettings(){

	// MAE 9 Feb 2025 - This setting makes no sense any more, setting it to true.
	// var val = localStorage.AlwaysInjectPrograms;
	// if (val){
	// 	gAlwaysInjectPrograms = (val == "true");
	// }
	// else{
	// 	gAlwaysInjectPrograms = true;
	// }
	
	gAlwaysInjectPrograms = true;

	val = localStorage.TheMelodyProgram;
	if (val){
		gTheMelodyProgram = val;
	}
	else{
		gTheMelodyProgram = 0;
	}

	val = localStorage.TheBassProgram;
	if (val){
		gTheBassProgram = val;
	}
	else{
		gTheBassProgram = 0;
	}

	val = localStorage.TheChordProgram;
	if (val){
		gTheChordProgram = val;
	}
	else{
		gTheChordProgram = 0;
	}

	// MAE 9 Feb 2025 - This setting makes no sense any more, setting it to true.
	// val = localStorage.AlwaysInjectVolumes;
	// if (val){
	// 	gAlwaysInjectVolumes = (val == "true");
	// }
	// else{
	// 	gAlwaysInjectVolumes = true;
	// }

	gAlwaysInjectVolumes = true

	val = localStorage.OpenLinksInTrainer;
	if (val){
	 	gOpenLinksInTrainer = (val == "true");
    }
	else{
	 	gOpenLinksInTrainer = false;
    }

	val = localStorage.TheBassVolume;
	if (val){
		gTheBassVolume = val;
	}
	else{
		gTheBassVolume = 64;
	}

	val = localStorage.TheChordVolume;
	if (val){
		gTheChordVolume = val;
	}
	else{
		gTheChordVolume = 64;
	}

	val = localStorage.OverridePlayMIDIParams;
	if (val){
		gOverridePlayMIDIParams = (val == "true");
	}
	else{
		gOverridePlayMIDIParams = false;
	}

	val = localStorage.PlayAlternateChordsOverride;
	if (val){
		gPlayAlternateChordsOverride = (val == "true");
	}
	else{
		gPlayAlternateChordsOverride = false;
	}

	// Box and concertina tab global state

	val = localStorage.InjectTab_FontFamily;
	if (val){
		gInjectTab_FontFamily = val;
	}
	else{
		gInjectTab_FontFamily = "Palatino";
	}

	val = localStorage.InjectTab_TabFontSize;
	if (val){
		gInjectTab_TabFontSize = val;
	}
	else{
		gInjectTab_TabFontSize = 10;
	}

	val = localStorage.InjectTab_StaffSep;
	if (val){
		gInjectTab_StaffSep = val;
	}
	else{
		gInjectTab_StaffSep = 80;
	}

	val = localStorage.InjectTab_MusicSpace;
	if (val){
		gInjectTab_MusicSpace = val;
	}
	else{
		gInjectTab_MusicSpace = 10;
	}

	val = localStorage.InjectTab_TabLocation;
	if (val){
		gInjectTab_TabLocation = val;
	}
	else{
		gInjectTab_TabLocation = 1;
	}

	val = localStorage.InjectTab_ConcertinaTuning;
	if (val){
		gInjectTab_ConcertinaTuning = val;
	}
	else{
		gInjectTab_ConcertinaTuning = 0;
	}

	val = localStorage.InjectTab_ConcertinaStyle;
	if (val){
		gInjectTab_ConcertinaStyle = val;
	}
	else{
		gInjectTab_ConcertinaStyle = 0;
	}

	val = localStorage.InjectTab_ConcertinaFingering;
	if (val){
		gInjectTab_ConcertinaFingering = val;
	}
	else{
		gInjectTab_ConcertinaFingering = 1;
	}

	val = localStorage.InjectTab_GaryCoover;
	if (val){
		gInjectTab_GaryCoover = (val == "true");
	}
	else{
		gInjectTab_GaryCoover = false;
	}

  val = localStorage.InjectTab_Colors;
  if (val){
    gInjectTab_Colors = (val == "true");
  }
  else{
    gInjectTab_Colors = false;
  }

	val = localStorage.InjectTab_BoxTabStyle;
	if (val){
		gInjectTab_BoxTabStyle = val;
	}
	else{
		gInjectTab_BoxTabStyle = 0;
	}

	val = localStorage.InjectTab_StripChords;
	if (val){
		gInjectTab_StripChords = (val == "true");
	}
	else{
		gInjectTab_StripChords = true;
	}

	// Push and draw glyphs
	val = localStorage.InjectTab_PushGlyph;
	if (val){
		gInjectTab_PushGlyph = val;
	}
	else{
		gInjectTab_PushGlyph = "↓";
	}

	val = localStorage.InjectTab_DrawGlyph;
	if (val){
		gInjectTab_DrawGlyph = val;
	}
	else{
		gInjectTab_DrawGlyph = "↑";
	}

	val = localStorage.InjectTab_UseBarForDraw;
	if (val){
		gInjectTab_UseBarForDraw = (val == "true");
	}
	else{
		gInjectTab_UseBarForDraw = false;
	}

	// Default to 50% full screen scaling
	val = localStorage.FullScreenScaling;
	if (val){
		gFullScreenScaling = val;
	}
	else{
		gFullScreenScaling = 50;
	}

    var theButtonNames = localStorage.angloButtonNames2;

    if (theButtonNames){
        gAngloButtonNames = JSON.parse(theButtonNames);
    }
    else{
    	resetAngloButtonNames();
    }

    var theMusicXMLImportSettings = localStorage.musicXMLImportOptionsV6;

    if (theMusicXMLImportSettings){
        gMusicXMLImportOptions = JSON.parse(theMusicXMLImportSettings);
    }
    else{
    	resetMusicXMLImportOptions();
    }

	val = localStorage.LargePlayerControls;

	if (val){
		gLargePlayerControls = (val == "true");
	}
	else{

		if ((gIsIPhone) || (gIsAndroid)){

			gLargePlayerControls = true;

		}
		else{

			gLargePlayerControls = false;
		}
	}

	val = localStorage.TrainerTouchControls;

	if (val){
		gTrainerTouchControls = (val == "true");
	}
	else{

		if ((gIsIPhone) || (gIsAndroid) || (gIsIPad)){

			gTrainerTouchControls = true;

		}
		else{

			gTrainerTouchControls = false;
		}
	}

	// Harmonica
	val = localStorage.HarmonicaTuning;
	if (val){
		gHarmonicaTuning = val;
	}
	else{
		gHarmonicaTuning = "0";
	}

	val = localStorage.HarmonicaKey;
	if (val){
		gHarmonicaKey = val;
	}
	else{
		gHarmonicaKey = "C";
	}

	val = localStorage.HarmonicaOctave;
	if (val){
		gHarmonicaOctave = val;
	}
	else{
		gHarmonicaOctave = "0";
	}

	val = localStorage.HarmonicaPlusSign;
	if (val){
		gHarmonicaPlusSign = (val == "true");
	}
	else{
		gHarmonicaPlusSign = false;
	}

	val = localStorage.HarmonicaStacking;
	if (val){
		gHarmonicaStacking = (val == "true");
	}
	else{
		gHarmonicaStacking = true;
	}

  val = localStorage.HarmonicaTabColors;
  if (val){
    gHarmonicaTabColors = (val == "true");
  }
  else{
    gHarmonicaTabColors = false;
  }

	var theCustomHarmonica = localStorage.HarmonicaCustom;

    if (theCustomHarmonica){

        gHarmonicaCustom = JSON.parse(theCustomHarmonica);

		if (gHarmonicaCustom.version == 1){

			// Upgrade any older custom tuning maps
			gHarmonicaCustom.version = 3;
			
			for (var i=0;i<22;++i){
				gHarmonicaCustom.noteMap.push("x");
			}

			localStorage.HarmonicaCustom = JSON.stringify(gHarmonicaCustom);
		}
		else
		if (gHarmonicaCustom.version == 2){

			// Upgrade any older custom tuning maps
			gHarmonicaCustom.version = 3;
			
			for (var i=0;i<12;++i){
				gHarmonicaCustom.noteMap.push("x");
			}

			localStorage.HarmonicaCustom = JSON.stringify(gHarmonicaCustom);
		}

    }
    else{
    	resetHarmonicaCustom();
    }

	// Custom tab
	val = localStorage.CustomTabKey;
	if (val){
		gCustomTabKey = val;
	}
	else{
		gCustomTabKey = "0";
	}

	val = localStorage.CustomTabOctave;
	if (val){
		gCustomTabOctave = val;
	}
	else{
		gCustomTabOctave = "0";
	}

	var theCustomTab = localStorage.CustomTab;

    if (theCustomTab){

        gCustomTab = JSON.parse(theCustomTab);

        if (gCustomTab.version == 1){

			// Upgrade any older custom tuning maps
			gCustomTab.version = 2;
			
			for (var i=0;i<12;++i){
				gCustomTab.noteMap.push("x");
			}

			localStorage.CustomTab = JSON.stringify(gCustomTab);
		}

    }
    else{
    	resetCustomTab();
    }

	// Bamboo flute
	val = localStorage.BambooFluteKey;
	if (val){
		gBambooFluteKey = val;
	}
	else{
		gBambooFluteKey = 1;
	}

	// Mountain dulcimer
	val = localStorage.MDulcimerStyle;
	if (val){
		gMDulcimerStyle = val;
	}
	else{
		gMDulcimerStyle = 0;
	}

	val = localStorage.MDulcimerStripBadTunes;
	if (val){
		gMDulcimerStripBadTunes = (val == "true");
	}
	else{
		gMDulcimerStripBadTunes = false;
	}

	val = localStorage.MDulcimerUseDashForOpenString;
	if (val){
		gMDulcimerUseDashForOpenString = (val == "true");
	}
	else{
		gMDulcimerUseDashForOpenString = false;
	}

	// ABC rendering fonts
    var theRenderingFonts = localStorage.RenderingFonts;

    if (theRenderingFonts){
    	
    	try{

	        gRenderingFonts = JSON.parse(theRenderingFonts);
	        
	        // MAE 24 Nov 2023 - For addition of the tab label font
	        if (!gRenderingFonts.tablabelfont){

	        	gRenderingFonts.tablabelfont = "Trebuchet MS 14";

	        }
	        // MAE 26 Nov 2023 - For addition of the tab graces font
	        if (!gRenderingFonts.tabgracefont){

	        	gRenderingFonts.tabgracefont = "Arial 8";

	        }
	    }
	    catch(err){

	    	// In case font parsing throws an error
	    	resetABCRenderingFonts();
	    	
	    }
    }
    else{
    	resetABCRenderingFonts();
    }

	// Show tab names
	var theShowTabNames = localStorage.abcShowTabNames;

	if (theShowTabNames){

		if (theShowTabNames == "true"){

			gShowTabNames = true;

		}
		else{

			gShowTabNames = false;

		}

	}
	else{

		gShowTabNames = true;
	}

	// Capo
	val = localStorage.abcCapo;
	if (val){
		gCapo = val;
	}
	else{
		gCapo = 0;
	}

	// MP3 bitrate
	val = localStorage.MP3Bitrate;
	if (val){
		gMP3Bitrate = val;
	}
	else{
		gMP3Bitrate = 224;
	}

	// Sound font
	val = localStorage.theSoundFont4;
	if (val){
		gDefaultSoundFont = val;
		gTheActiveSoundFont = val;
	}
	else{
		gDefaultSoundFont = "https://paulrosen.github.io/midi-js-soundfonts/FluidR3_GM/";
		gTheActiveSoundFont = gDefaultSoundFont;
	}

	val = localStorage.AutoscrollPlayer;
	if (val){
		gAutoscrollPlayer = (val == "true");
	}
	else{
		gAutoscrollPlayer = true;
	}

	val = localStorage.AutoscrollSmooth;
	if (val){
		gAutoscrollSmooth = (val == "true");
	}
	else{
		gAutoscrollSmooth = true;
	}

	val = localStorage.AutoscrollTarget;
	if (val){
		var testVal = parseFloat(val);
		if (!isNaN(testVal)){
			gAutoscrollTarget = testVal;
			if ((gAutoscrollTarget < 0) || (gAutoscrollTarget > 100)){
				gAutoscrollTarget = 66;
			}
		}
	}
	else{
		gAutoscrollTarget = 66;
	}

	val = localStorage.AutoSwingHornpipes;
	if (val){
		gAutoSwingHornpipes = (val == "true");
	}
	else{
		gAutoSwingHornpipes = true;
	}

	val = localStorage.AutoSwingFactor;
	if (val){
		var testVal = parseFloat(val);
		if (!isNaN(testVal)){
			gAutoSwingFactor = testVal;
		}
	}
	else{
		gAutoSwingFactor = 0.25;
	}


	val = localStorage.UseCustomGMSounds;
	if (val){
		gUseCustomGMSounds = (val == "true");
	}
	else{
		gUseCustomGMSounds = true;
	}

	val = localStorage.TipJarCount;
	if (val){
		gTipJarCount = val;
	}
	else{
		gTipJarCount = 0;
	}

	// Setup initial saved ABC snapshot
	val = localStorage.SavedSnapshot;
	if (!val){
		localStorage.SavedSnapshot = "";
	}

	val = localStorage.SavedSnapshot2;
	if (!val){
		localStorage.SavedSnapshot2 = "";
	}

	val = localStorage.SavedSnapshot3;
	if (!val){
		localStorage.SavedSnapshot3 = "";
	}

	val = localStorage.SavedSnapshot4;
	if (!val){
		localStorage.SavedSnapshot4 = "";
	}

	// Setup initial saved exit snapshot
	val = localStorage.SaveLastAutoSnapShot;
	if (val){
		gSaveLastAutoSnapShot = (val == "true");
	}
	else{
		gSaveLastAutoSnapShot = false;
	}

	val = localStorage.LastAutoSnapShot;
	if (!val){
		localStorage.LastAutoSnapShot = "";
	}

	val = localStorage.PDFFont;
	if (val){
		gPDFFont = val;
	}

	val = localStorage.PDFFontStyle;
	if (val){
		gPDFFontStyle = val;
	}

	val = localStorage.PDFOrientation;
	if (val){
		gPDFOrientation = val;
	}

	val = localStorage.PDFIncludeHiddenTitles;
	if (val){
		gPDFIncludeHiddenTitles = (val == "true");
	}

	val = localStorage.PDFAutoPageNumbers;
	if (val){
		gPDFAutoPageNumbers = (val == "true");
	}

	val = localStorage.UseComhaltasABC;
	if (val){
		gUseComhaltasABC = (val == "true");
	}

	val = localStorage.AllowMIDIInput;
	if (val){
		gAllowMIDIInput = (val == "true");
	}

	val = localStorage.MIDIChromatic;
	if (val){
		gMIDIChromatic = (val == "true");
	}

	// PDF Features
    var PDFTunebookConfig = localStorage.PDFTunebookConfig;

    if (PDFTunebookConfig){

        gPDFTunebookConfig = JSON.parse(PDFTunebookConfig);

        // Fixup config for new full tunebook links field added 11 Dec 2023
        if ((gPDFTunebookConfig.bAdd_add_full_tunebook == undefined) || (gPDFTunebookConfig.bAdd_add_full_tunebook == null)){
			gPDFTunebookConfig.bAdd_add_full_tunebook = false;
        }

        // Fixup config for fonts inject field added 12 Feb 2024
        if ((gPDFTunebookConfig.bAdd_add_fonts == undefined) || (gPDFTunebookConfig.bAdd_add_fonts == null)){
			gPDFTunebookConfig.bAdd_add_fonts = false;
        }
    }
    else{
    	resetPDFTunebookConfig();
    }

    // Tune Trainer settings
    val = localStorage.LooperSpeedStart;
	if (val){
		gLooperSpeedStart = parseFloat(val);
		if (isNaN(gLooperSpeedStart)){
			gLooperSpeedStart = 50;
		}
	}
	else{
		gLooperSpeedStart = 50;
	}

    val = localStorage.LooperSpeedEnd;
	if (val){
		gLooperSpeedEnd = parseFloat(val);
		if (isNaN(gLooperSpeedEnd)){
			gLooperSpeedEnd = 100;
		}
	}
	else{
		gLooperSpeedEnd = 100;
	}

	val = localStorage.LooperSpeedIncrement;
	if (val){
		gLooperSpeedIncrement = parseFloat(val);
		if (isNaN(gLooperSpeedIncrement)){
			gLooperSpeedIncrement = 10;
		}
	}
	else{
		gLooperSpeedIncrement = 10;
	}

	val = localStorage.LooperCount;
	if (val){
		gLooperCount = parseInt(val);
		if (isNaN(gLooperCount)){
			gLooperCount = 1;
		}
	}
	else{
		gLooperCount = 1;
	}

	val = localStorage.LooperDoCountdown;
	if (val){
		gLooperDoCountdown = (val == "true");
	}
	else{
		gLooperDoCountdown = true;
	}

	val = localStorage.LooperCountdown;
	if (val){
		gLooperCountdown = parseInt(val);
		if (isNaN(gLooperCountdown)){
			gLooperCountdown = 5;
		}
	}
	else{
		gLooperCountdown = 5;
	}

	val = localStorage.abcStaffSpacing;
	if (val){
		var testVal = parseInt(val);
		if (!isNaN(testVal)){
			gStaffSpacing = STAFFSPACEOFFSET + testVal;
		}
		else{
			gStaffSpacing = STAFFSPACEOFFSET + STAFFSPACEDEFAULT;
		}
	}
	else{

		// Staff spacing in local storage not initialized, set it here
		// Related to issue where shared tune reset the saved staff spacing
		gStaffSpacing = STAFFSPACEOFFSET + STAFFSPACEDEFAULT;

		var ssp = gStaffSpacing - STAFFSPACEOFFSET;
		localStorage.abcStaffSpacing = ssp;

	}

	// Batch image export cycle delay
	val = localStorage.BatchExportDelayMS;
	if (val){
		gBatchExportDelayMS = parseInt(val);
		if (isNaN(gBatchExportDelayMS) || (gBatchExportDelayMS<0)){
			gBatchExportDelayMS = 200;
		}
	}
	else{
		gBatchExportDelayMS = 200;
	}

	// Batch MP3 export cycle delay
	val = localStorage.BatchMP3ExportDelayMS;
	if (val){
		gBatchMP3ExportDelayMS = parseInt(val);
		if (isNaN(gBatchMP3ExportDelayMS) || (gBatchMP3ExportDelayMS<0)){
			gBatchMP3ExportDelayMS = 250;
		}
	}
	else{
		gBatchMP3ExportDelayMS = 250;
	}

	// Image export resolution
	val = localStorage.ExportWidth;
	if (val){
		gExportWidth = parseInt(val);
		if (isNaN(gExportWidth) || (gExportWidth<0)){
			gExportWidth = 2400;
		}
	}
	else{
		gExportWidth = 2400;
	}

	val = localStorage.ExportWidthAll;
	if (val){
		gExportWidthAll = parseInt(val);
		if (isNaN(gExportWidthAll) || (gExportWidthAll<0)){
			gExportWidthAll = 2400;
		}
	}
	else{
		gExportWidthAll = 2400;
	}

	val = localStorage.MetronomeHighVolume;
	if (val){
		gMetronomeHighVolume = parseInt(val);
		if (isNaN(gMetronomeHighVolume) || (gMetronomeHighVolume<0) || (gMetronomeHighVolume>127)){
			gMetronomeHighVolume = 64;
		}
	}
	else{
		gMetronomeHighVolume = 64;
	}

  val = localStorage.MetronomeLowVolume;
  if (val){
    gMetronomeLowVolume = parseInt(val);
    if (isNaN(gMetronomeLowVolume) || (gMetronomeLowVolume<0) || (gMetronomeLowVolume>127)){
      gMetronomeLowVolume = 48;
    }
  }
  else{
    gMetronomeLowVolume = 48;
  }

  val = localStorage.MetronomeHighSound;
  if (val){
    gMetronomeHighSound = parseInt(val);
    if (isNaN(gMetronomeHighSound) || (gMetronomeHighSound<35) || (gMetronomeHighSound>81)){
      gMetronomeHighSound = 76;
    }
  }
  else{
    gMetronomeHighSound = 76;
  }

  val = localStorage.MetronomeLowSound;
  if (val){
    gMetronomeLowSound = parseInt(val);
    if (isNaN(gMetronomeLowSound) || (gMetronomeLowSound<35) || (gMetronomeLowSound>81)){
      gMetronomeLowSound = 77;
    }
  }
  else{
    gMetronomeLowSound = 77;
  }


	gRawFirstTime = true;
	val = localStorage.RawFirstTime;
	if (val){
		gRawFirstTime = (val == "true");
	}

	gRawHighlightColor = "#F00000";
	val = localStorage.RawHighlightColor;
	if (val){
		gRawHighlightColor = val;
	}

	gPlayerStatusOnLeft = false;
	val = localStorage.PlayerStatusOnLeft;
	if (val){
		gPlayerStatusOnLeft = (val == "true");
	}

	gDisableSelectedPlay = false;
	val = localStorage.DisableSelectedPlay;
	if (val){
		gDisableSelectedPlay = (val == "true");
	}

	gRollUseRollForIrishRoll = false;
	val = localStorage.RollUseRollForIrishRoll;
	if (val){
		gRollUseRollForIrishRoll = (val == "true");
	}

	gRoll2DefaultParams = "0.95 0.8 1.0 0.75 0.9 1.0 0.75 1.0";

	val = localStorage.Roll2DefaultParams;
	
	if (val){

		var checkParams = validate_roll_2_params(val,false);
		
		if (checkParams){

			gRoll2DefaultParams = val;

			checkParams = validate_roll_2_params(val,true);

		}
	}

	gRoll3DefaultParams = "1.45 0.6 1.0 0.75 0.9 1.0 0.75 1.0";

	val = localStorage.Roll3DefaultParams;

	if (val){
		
		var checkParams = validate_roll_3_params(val,false);
		
		if (checkParams){

			gRoll3DefaultParams = val;

			checkParams = validate_roll_3_params(val,true);

		}
	}

	// Get the default tune database

	gDefaultTuneDatabase = 0;

	val = localStorage.DefaultTuneDatabase;

	if (val){
		gDefaultTuneDatabase = parseInt(val);
	}

	// Tune database retry parameters

	gTuneDatabaseRetryTimeMS = 3000;

	val = localStorage.TuneDatabaseRetryTimeMS;

	if (val){
		gTuneDatabaseRetryTimeMS = parseInt(val);
	}

	gTuneDatabaseRetryCount = 10;

	val = localStorage.TuneDatabaseRetryCount;

	if (val){
		gTuneDatabaseRetryCount = parseInt(val);
	}

	gLastTuneSearchValue = "";
	val = localStorage.LastTuneSearchValue;

	if (val){
		gLastTuneSearchValue = val;
	}

	// Shape note style
	gShapeNoteStyle = 0;
	val = localStorage.ShapeNoteStyle;
	if (val){
		gShapeNoteStyle = val;
	}
	
	// Save feature selections
	gFeaturesShowSearch = true;
	val = localStorage.FeaturesShowSearch;
	if (val){
		gFeaturesShowSearch = (val == "true");
	}

	gFeaturesShowExamples = true;
	val = localStorage.FeaturesShowExamples;
	if (val){
		gFeaturesShowExamples = (val == "true");
	}

	gFeaturesShowTemplates = true;
	val = localStorage.FeaturesShowTemplates;
	if (val){
		gFeaturesShowTemplates = (val == "true");
	}

	gFeaturesShowTablatures = true;
	val = localStorage.FeaturesShowTablatures;
	if (val){
		gFeaturesShowTablatures = (val == "true");
	}

	gFeaturesShowExplorers = true;
	val = localStorage.FeaturesShowExplorers;
	if (val){
		gFeaturesShowExplorers = (val == "true");
	}

	gFeaturesShowExport = true;
	val = localStorage.FeaturesShowExport;
	if (val){
		gFeaturesShowExport = (val == "true");
	}

	gFeaturesShowBagpipeDrones = true;
	val = localStorage.FeaturesShowBagpipeDrones;
	if (val){
		gFeaturesShowBagpipeDrones = (val == "true");
	}

	gFeaturesShowTabButtons = true;
	val = localStorage.FeaturesShowTabButtons;
	if (val){
		gFeaturesShowTabButtons = (val == "true");
	}

    val = localStorage.ABCEditorFontSize;
	if (val){
		gABCEditorFontsize = parseInt(val);
		if (isNaN(gABCEditorFontsize)){
			gABCEditorFontsize = 13;
		}
	}
	else{
		gABCEditorFontsize = 13;
	}

	gShowDiagnostics = false;
	val = localStorage.ShowDiagnostics;
	if (val){
		gShowDiagnostics = (val == "true");
	}

	// Default reverb string
	gReverbString = "chamber 0.95 0.05";
	val = localStorage.ReverbString2;
	if (val){
		gReverbString = val;
	}

	// TinyURL override
	gDoTinyURLAPIKeyOverride = false;
	gTinyURLAPIKeyOverride = "";
	val = localStorage.TinyURLAPIKeyOverride;
	if (val && (val != "")){
		gDoTinyURLAPIKeyOverride = true;
		gTinyURLAPIKeyOverride = val;
	}

	// TinyURL use count
	gTinyURLCount = 0;
	val = localStorage.TinyURLCount;
	if (val){
		gTinyURLCount = val;
	}

	// MIDI import warning
	gMIDIImportWarned = false;
	val = localStorage.MIDIImportWarned;
	if (val){
		gMIDIImportWarned = (val == "true");
	}

	// Show DGDAE Tab
	gShowDGDAETab = false;
	val = localStorage.ShowDGDAETab;
	if (val){
		gShowDGDAETab = (val == "true");

		if (gShowDGDAETab){
			setupDGDAE();
		}
	}

	// Show CGDA Tab
	gShowCGDATab = false;
	val = localStorage.ShowCGDATab;
	if (val){
		gShowCGDATab = (val == "true");

		if (gShowCGDATab){
			setupCGDA();
		}
	}

	// Show Recorder Tab
	gShowRecorderTab = false;
	val = localStorage.ShowRecorderTab;
	if (val){
		gShowRecorderTab = (val == "true");

		if (gShowRecorderTab){
			setupRecorderTab();
		}
	}

  // Use German Recorder fingerings
  gRecorderFingeringGerman = false;
  val = localStorage.RecorderFingeringGerman;
  if (val){
    gRecorderFingeringGerman = (val == "true");
  }

	// Confirm Clear
	gConfirmClear = true;
	val = localStorage.ConfirmClear;
	if (val){
		gConfirmClear = (val == "true");
	}

	// Clean smart quotes
	gCleanSmartQuotes = true;
	val = localStorage.CleanSmartQuotes;
	if (val){
		gCleanSmartQuotes = (val == "true");
	}

	// 2 July 2024 
	gAllowOfflineInstruments = false;
	val = localStorage.AllowOfflineInstruments;
	if (val){
		gAllowOfflineInstruments = (val == "true");
	}

	// Two column display for iPad
	giPadTwoColumn = false;
	val = localStorage.iPadTwoColumn;
	if (val){
		giPadTwoColumn = (val == "true");
	}
	else{
		giPadTwoColumn = false;
	}

	// Force large controls for iPad two-column
	if (giPadTwoColumn){
		gLargePlayerControls = true;
	}

	// Default to 60% iPad player scaling
	val = localStorage.PlayerScaling;
	if (val){
		gPlayerScaling = val;
	}
	else{
		if (gIsIPad){
			gPlayerScaling = 60;
		}
		else{
			gPlayerScaling = 50;
		}
	}

	// Tune set building global parameters
	BuildTuneSetRepeat = false;
	val = localStorage.BuildTuneSetRepeat;
	if (val){
		BuildTuneSetRepeat = (val == "true");
	}

  BuildTuneSetVerbose = true;
  val = localStorage.BuildTuneSetVerbose;
  if (val){
    BuildTuneSetVerbose = (val == "true");
  }  

	BuildTuneSetRepeatCount = 1;
	val = localStorage.BuildTuneSetRepeatCount;
	if (val){
		BuildTuneSetRepeatCount = parseInt(val);
		if (isNaN(BuildTuneSetRepeatCount)){
			BuildTuneSetRepeatCount = 1;
		}
		if (BuildTuneSetRepeatCount < 1){
			BuildTuneSetRepeatCount = 1;
		}
	}

	// Force Android?
	gForceAndroid = false;
	val = localStorage.forceAndroid;
	if (val){
		gForceAndroid = (val == "true");
	}

	// Disable Android?
	gDisableAndroid = false;
	val = localStorage.disableAndroid;
	if (val){
		gDisableAndroid = (val == "true");
	}

	// Always hide banner?
	gZoomBannerAlwaysHidden = false;

	val = localStorage.ZoomBannerAlwaysHidden;

	if (val){
		gZoomBannerAlwaysHidden = (val == "true");
	}

	// Custom stringed instrument tablature settings
    val = localStorage.CustomStringedCount;
	if (val){
		gCustomStringedCount = parseInt(val);
		if (isNaN(gCustomStringedCount)){
			gCustomStringedCount = 6;
		}
	}
	else{
		gCustomStringedCount = 6;
	}

	val = localStorage.CustomStringedCapo;
	if (val){
		gCustomStringedCapo = parseInt(val);
		if (isNaN(gCustomStringedCapo)){
			gCustomStringedCapo = 0;
		}
	}
	else{
		gCustomStringedCapo = 0;
	}

    val = localStorage.CustomStringedString1;
    if ((val) || (val == "")){
    	gCustomStringedString1 = val;
    }
    else{
    	gCustomStringedString1 = "D,";
    }

    val = localStorage.CustomStringedString2;
    if ((val) || (val == "")){
    	gCustomStringedString2 = val;
    }
    else{
    	gCustomStringedString2 = "A,";
    }

    val = localStorage.CustomStringedString3;
    if ((val) || (val == "")){
    	gCustomStringedString3 = val;
    }
    else{
    	gCustomStringedString3 = "D";
    }

    val = localStorage.CustomStringedString4;
    if ((val) || (val == "")){
    	gCustomStringedString4 = val;
    }
    else{
    	gCustomStringedString4 = "G";
    }

    val = localStorage.CustomStringedString5;
    if ((val) || (val == "")){
    	gCustomStringedString5 = val;
    }
    else{
    	gCustomStringedString5 = "B";
    }

    val = localStorage.CustomStringedString6;
    if ((val) || (val == "")){
    	gCustomStringedString6 = val;
    }
    else{
    	gCustomStringedString6 = "e";
    }

    val = localStorage.CustomStringedLabel;
    if ((val) || (val == "")){
    	gCustomStringedLabel = val;
    }
    else{
    	gCustomStringedLabel = "Guitar - Drop D";
    }

	// Incipits builder
	val = localStorage.IncipitsBuilderBars;
	if (val){
		gIncipitsBuilderBars = parseInt(val);
		if (isNaN(gIncipitsBuilderBars)){
			gIncipitsBuilderBars = 3;
		}
	}
	else{
		gIncipitsBuilderBars = 3;
	}

	val = localStorage.IncipitsBuilderWidth;
	if (val){
		gIncipitsBuilderWidth = parseInt(val);
		if (isNaN(gIncipitsBuilderWidth)){
			gIncipitsBuilderWidth = 400;
		}
	}
	else{
		gIncipitsBuilderWidth = 400;
	}

	gIncipitsBuilderLeftJustify = true;
	val = localStorage.IncipitsBuilderLeftJustify;
	if (val){
		gIncipitsBuilderLeftJustify = (val == "true");
	}

	gIncipitsBuilderInjectNumbers = false;
	val = localStorage.IncipitsBuilderInjectNumbers;
	if (val){
		gIncipitsBuilderInjectNumbers = (val == "true");
	}

	gIncipitsBuilderStripText = true;
	val = localStorage.IncipitsBuilderStripText;
	if (val){
		gIncipitsBuilderStripText = (val == "true");
	}

	val = localStorage.IncipitsTagsToStrip;
    if (val || (val == "")){
    	gIncipitsTagsToStrip = val;
    }
    else{
    	gIncipitsTagsToStrip = "ABCDINOSWwZ";
    }

  val = localStorage.LastWarp;
  if (val){
    gLastWarp = parseInt(val);
    if (isNaN(gLastWarp)){
      gLastWarp = 100;
    }
  }
  else{
    gLastWarp = 100;
  }

  gLastPlayerRepeat = false;
  val = localStorage.LastPlayerRepeat
  if (val){
    gLastPlayerRepeat = (val == "true");
  }

  gPlayMetronome = false;
  val = localStorage.PlayMetronome
  if (val){
    gPlayMetronome = (val == "true");
  }

  // Remove all previously added cursor width style blocks created by this function
  document.querySelectorAll('style[custom_cursor_definition="true"]').forEach(el => el.remove());
  gUseWidePlayCursor = true;
  val = localStorage.UseWidePlayCursor;
  if (val){
    gUseWidePlayCursor = (val == "true");
  }
  if (gUseWidePlayCursor){
    const style = document.createElement("style");
    style.setAttribute("custom_cursor_definition", "true");
    style.textContent = ".abcjs-cursor{stroke:#00F000;stroke-width:12px;stroke-opacity:0.25;transform:translate(7px,0px);}"
    document.head.appendChild(style);
  }

	// Save the settings, in case they were initialized
	SaveConfigurationSettings();

}

// Save the configuration settings in local browser storage
function SaveConfigurationSettings(){

	// 
	// Centralized place to save local browser storage values
	//
	if (gLocalStorageAvailable){

		// MAE 9 Feb 2025 - This setting makes no sense any more, setting it to true.
		//localStorage.AlwaysInjectPrograms = gAlwaysInjectPrograms;

		localStorage.TheMelodyProgram = gTheMelodyProgram;
		localStorage.TheBassProgram = gTheBassProgram;
		localStorage.TheChordProgram = gTheChordProgram;

		// MAE 9 Feb 2025 - This setting makes no sense any more, setting it to true.
		//localStorage.AlwaysInjectVolumes = gAlwaysInjectVolumes;

		localStorage.OpenLinksInTrainer = gOpenLinksInTrainer;
		
		localStorage.TheBassVolume = gTheBassVolume;
		localStorage.TheChordVolume = gTheChordVolume;
		localStorage.OverridePlayMIDIParams = gOverridePlayMIDIParams;
		localStorage.PlayAlternateChordsOverride = gPlayAlternateChordsOverride;

		// Tab injection parameters
		
		localStorage.InjectTab_StripChords = gInjectTab_StripChords;
		localStorage.InjectTab_FontFamily = gInjectTab_FontFamily;
		localStorage.InjectTab_TabFontSize = gInjectTab_TabFontSize;
		localStorage.InjectTab_StaffSep = gInjectTab_StaffSep;
		localStorage.InjectTab_MusicSpace = gInjectTab_MusicSpace;
		localStorage.InjectTab_TabLocation = gInjectTab_TabLocation;
		localStorage.InjectTab_ConcertinaTuning = gInjectTab_ConcertinaTuning;
		localStorage.InjectTab_ConcertinaStyle = gInjectTab_ConcertinaStyle;
		localStorage.InjectTab_ConcertinaFingering = gInjectTab_ConcertinaFingering;
		localStorage.InjectTab_GaryCoover = gInjectTab_GaryCoover;
    localStorage.InjectTab_Colors = gInjectTab_Colors;
		localStorage.InjectTab_BoxTabStyle = gInjectTab_BoxTabStyle;

		// Accordion and concertina tab bellows direction glyphs
		localStorage.InjectTab_PushGlyph = gInjectTab_PushGlyph;
		localStorage.InjectTab_DrawGlyph = gInjectTab_DrawGlyph;
		localStorage.InjectTab_UseBarForDraw = gInjectTab_UseBarForDraw;

		// Fullscreen scaling
		localStorage.FullScreenScaling = gFullScreenScaling;

		// Anglo button naming matrix
		localStorage.angloButtonNames2 = JSON.stringify(gAngloButtonNames);

		// MusicXML import options
		localStorage.musicXMLImportOptionsV6 = JSON.stringify(gMusicXMLImportOptions);

		// Large player control player options
		localStorage.LargePlayerControls = gLargePlayerControls;

		// Trainer touch control options
		localStorage.TrainerTouchControls = gTrainerTouchControls;

		// Harmonica tab settings
		localStorage.HarmonicaTuning = gHarmonicaTuning;		
		localStorage.HarmonicaKey = gHarmonicaKey;
		localStorage.HarmonicaOctave = gHarmonicaOctave;
		localStorage.HarmonicaPlusSign = gHarmonicaPlusSign;
		localStorage.HarmonicaStacking = gHarmonicaStacking;
    localStorage.HarmonicaTabColors = gHarmonicaTabColors;

		// Custom harmonica settings
		localStorage.HarmonicaCustom = JSON.stringify(gHarmonicaCustom);

		// Custom tab settings
		localStorage.CustomTabKey = gCustomTabKey;
		localStorage.CustomTabOctave = gCustomTabOctave;

		// Custom tab settings
		localStorage.CustomTab = JSON.stringify(gCustomTab);

		// Save the bamboo flute key
		localStorage.BambooFluteKey =  gBambooFluteKey;

		// Save the mountain dulcimer style and bad tune strip option
		localStorage.MDulcimerStyle =  gMDulcimerStyle;
		localStorage.MDulcimerStripBadTunes = gMDulcimerStripBadTunes;
		localStorage.MDulcimerUseDashForOpenString = gMDulcimerUseDashForOpenString;

		// Save the ABC rendering fonts
		localStorage.RenderingFonts = JSON.stringify(gRenderingFonts);

		// Save the show tab names state
		var showtabnames = gShowTabNames;
		if (showtabnames){
			localStorage.abcShowTabNames = "true";
		}
		else{
			localStorage.abcShowTabNames = "false";
		}

		// Save the capo state
		localStorage.abcCapo = gCapo;

		// Save the MP3 bitrate
		localStorage.MP3Bitrate = gMP3Bitrate;

		// Save the soundfont preference
		localStorage.theSoundFont4 = gDefaultSoundFont;

		// Save the player autoscroll preference
		localStorage.AutoscrollPlayer = gAutoscrollPlayer;
		localStorage.AutoscrollSmooth = gAutoscrollSmooth;

		localStorage.AutoscrollTarget = gAutoscrollTarget;

		// Save the hornpipe auto-swing setting
		localStorage.AutoSwingHornpipes = gAutoSwingHornpipes

		// Save the auto-swing swing factor
		localStorage.AutoSwingFactor = gAutoSwingFactor

		// Save the custom GM sounds setting
		localStorage.UseCustomGMSounds = gUseCustomGMSounds;

		// Save the tip jar count 
		localStorage.TipJarCount = gTipJarCount;

		// Save the save editor state flag
		localStorage.SaveLastAutoSnapShot = gSaveLastAutoSnapShot;

		// Save the last PDF font and style
		localStorage.PDFFont = gPDFFont;
		localStorage.PDFFontStyle = gPDFFontStyle;

		// Save the Comhaltas display mode
		localStorage.UseComhaltasABC = gUseComhaltasABC;

		// Save the allow MIDI input state
		localStorage.AllowMIDIInput = gAllowMIDIInput;

		// Save the chromatic MIDI parsing state
		localStorage.MIDIChromatic = gMIDIChromatic;

		// Save the PDF features 
		localStorage.PDFTunebookConfig = JSON.stringify(gPDFTunebookConfig);

		// Save the Tune Trainer settings
		localStorage.LooperSpeedStart = gLooperSpeedStart;
		localStorage.LooperSpeedEnd = gLooperSpeedEnd;
		localStorage.LooperSpeedIncrement = gLooperSpeedIncrement;
		localStorage.LooperCount = gLooperCount;
		localStorage.LooperDoCountdown = gLooperDoCountdown;
		localStorage.LooperCountdown = gLooperCountdown;

		// Save the batch export cycle time
		localStorage.BatchExportDelayMS = gBatchExportDelayMS;
		localStorage.BatchMP3ExportDelayMS = gBatchMP3ExportDelayMS;

		// Save the image export size
		localStorage.ExportWidth = gExportWidth;	
		localStorage.ExportWidthAll = gExportWidthAll;

		// Save the metronome settings
    localStorage.MetronomeHighVolume = gMetronomeHighVolume;
		localStorage.MetronomeLowVolume = gMetronomeLowVolume;
    localStorage.MetronomeHighSound = gMetronomeHighSound;
    localStorage.MetronomeLowSound = gMetronomeLowSound;

		// Save first time Raw use
		localStorage.RawFirstTime = gRawFirstTime;

		// Save the raw highlight color
		localStorage.RawHighlightColor = gRawHighlightColor;

		// Save the player status on left
		localStorage.PlayerStatusOnLeft = gPlayerStatusOnLeft;

		// Use the custom roll solution for tilde rolls
		localStorage.RollUseRollForIrishRoll = gRollUseRollForIrishRoll;

		// Default roll parameters
		localStorage.Roll2DefaultParams = gRoll2DefaultParams;
		localStorage.Roll3DefaultParams = gRoll3DefaultParams;

		// Default tune collection 
		localStorage.DefaultTuneDatabase = gDefaultTuneDatabase; 

		// Tune database retry parameters
		localStorage.TuneDatabaseRetryTimeMS = gTuneDatabaseRetryTimeMS; 
		localStorage.TuneDatabaseRetryCount = gTuneDatabaseRetryCount; 

		// Tune search last value
	  localStorage.LastTuneSearchValue = gLastTuneSearchValue;

		// Preferred shape note style
		localStorage.ShapeNoteStyle = gShapeNoteStyle;

		// Disable selected play
		localStorage.DisableSelectedPlay = gDisableSelectedPlay;

		// Save UI features preferences
		localStorage.FeaturesShowSearch = gFeaturesShowSearch;
		localStorage.FeaturesShowExamples = gFeaturesShowExamples;
		localStorage.FeaturesShowTemplates = gFeaturesShowTemplates;
		localStorage.FeaturesShowTablatures = gFeaturesShowTablatures;
		localStorage.FeaturesShowExplorers = gFeaturesShowExplorers;
		localStorage.FeaturesShowExport = gFeaturesShowExport;
		localStorage.FeaturesShowTabButtons = gFeaturesShowTabButtons;
		localStorage.FeaturesShowBagpipeDrones = gFeaturesShowBagpipeDrones;

		// Save Editor font size
		localStorage.ABCEditorFontSize = gABCEditorFontsize;

		// Save diagnostics state
		localStorage.ShowDiagnostics = gShowDiagnostics;

		// Save default reverb string
		localStorage.ReverbString2 = gReverbString;

		// Save the TinyURL API key override
		localStorage.TinyURLAPIKeyOverride = gTinyURLAPIKeyOverride;

		// Save the TinyURL use count
		localStorage.TinyURLCount = gTinyURLCount;

		// Save the show DGDAE state
		localStorage.ShowDGDAETab = gShowDGDAETab;

		// Show the show CGDA state
		localStorage.ShowCGDATab = gShowCGDATab;

		// Show the recorder tab
		localStorage.ShowRecorderTab = gShowRecorderTab;

    // Use German recorder fingerings
    localStorage.RecorderFingeringGerman = gRecorderFingeringGerman;

		// Confirm Clear
		localStorage.ConfirmClear = gConfirmClear;

		// Allow offline instruments
		localStorage.AllowOfflineInstruments = gAllowOfflineInstruments;

		// Clean Smart Quotes
		localStorage.CleanSmartQuotes = gCleanSmartQuotes;

		// iPad two column display
		localStorage.iPadTwoColumn = giPadTwoColumn;

		// Player scaling
		localStorage.PlayerScaling = gPlayerScaling;

		// Tune set creation
		localStorage.BuildTuneSetRepeat = BuildTuneSetRepeat;
		localStorage.BuildTuneSetRepeatCount = BuildTuneSetRepeatCount;
    localStorage.BuildTuneSetVerbose = BuildTuneSetVerbose;

		// Force Android?
		localStorage.forceAndroid = gForceAndroid;

		// Disable Android?
		localStorage.disableAndroid = gDisableAndroid;

		// Custom string instrument tab settings
		localStorage.CustomStringedCount = gCustomStringedCount;
		localStorage.CustomStringedCapo = gCustomStringedCapo;
		localStorage.CustomStringedLabel = gCustomStringedLabel;
		localStorage.CustomStringedString1 = gCustomStringedString1;
		localStorage.CustomStringedString2 = gCustomStringedString2;
		localStorage.CustomStringedString3 = gCustomStringedString3;
		localStorage.CustomStringedString4 = gCustomStringedString4;
		localStorage.CustomStringedString5 = gCustomStringedString5;
		localStorage.CustomStringedString6 = gCustomStringedString6;

		// Incipits builder
		localStorage.IncipitsBuilderBars = gIncipitsBuilderBars;
		localStorage.IncipitsBuilderWidth = gIncipitsBuilderWidth;
		localStorage.IncipitsBuilderLeftJustify = gIncipitsBuilderLeftJustify;
		localStorage.IncipitsBuilderInjectNumbers = gIncipitsBuilderInjectNumbers;
		localStorage.IncipitsBuilderStripText = gIncipitsBuilderStripText;
		localStorage.IncipitsTagsToStrip = gIncipitsTagsToStrip;

    // Warp
    localStorage.LastWarp = gLastWarp;

    // Repeat
    localStorage.LastPlayerRepeat = gLastPlayerRepeat;

    // Metronomes
    localStorage.PlayMetronome = gPlayMetronome;

    // Wide cursor
    localStorage.UseWidePlayCursor = gUseWidePlayCursor;
    
	}
}


//
// Configure the MusicXML import
//
var gMusicXMLImportOptions = {};

function resetMusicXMLImportOptions(){

	gMusicXMLImportOptions = {
		b:4,
		n:0,
		c:0,
		v:0,
		d:4,
		x:0,
		noped:0,
		p:'',
		v1:0,
		stm:0,
		s:0,
		t:0,
		u:0,
		v:0,
		v1:0,
		mnum:-1,
		m:1,
		addq:1,
		q:100,
		addstavenum:0
	};
}

function setMusicXMLOptions () {

    gMusicXMLImportOptions.x = $('#musicxml_nlb').prop ('checked') ? 1 : 0;

	// If allowing linebreaks, can't have end-of-stave numbers
	if (gMusicXMLImportOptions.x == 0){
		gMusicXMLImportOptions.addstavenum = 0;
		$('#musicxml_addstavenum').prop('checked',false);
	}
	else{
		gMusicXMLImportOptions.addstavenum = $('#musicxml_addstavenum').prop ('checked') ? 1 : 0;
	}

    gMusicXMLImportOptions.u = $('#musicxml_unfld').prop ('checked') ? 1 : 0;
    gMusicXMLImportOptions.b = parseInt ($('#musicxml_bpl').val () || 4);
    gMusicXMLImportOptions.n = parseInt ($('#musicxml_cpl').val () || 0);
    gMusicXMLImportOptions.c = parseInt ($('#musicxml_crf').val () || 0);
    gMusicXMLImportOptions.d = parseInt ($('#musicxml_den').val () || 4);
    gMusicXMLImportOptions.m = parseInt ($('#musicxml_midi').val () || 0);
    gMusicXMLImportOptions.noped = $('#musicxml_noped').prop ('checked') ? 1 : 0;
    gMusicXMLImportOptions.v1 = $('#musicxml_v1').prop ('checked') ? 1 : 0;
    gMusicXMLImportOptions.stm = $('#musicxml_stems').prop ('checked') ? 1 : 0;
    gMusicXMLImportOptions.mnum = parseInt ($('#musicxml_mnum').val () || -1);
    gMusicXMLImportOptions.addq = $('#musicxml_addq').prop ('checked') ? 1 : 0;
    gMusicXMLImportOptions.q = parseInt ($('#musicxml_q').val () || 100);;

 }

function idleXMLImport(){

	// If allowing linebreaks, can't have end-of-stave numbers
	if (gMusicXMLImportOptions.x == 0){
		gMusicXMLImportOptions.addstavenum = 0;
	}

	$('#musicxml_unfld').prop('checked',(gMusicXMLImportOptions.u == 1));
	$('#musicxml_bpl').val(gMusicXMLImportOptions.b);
	$('#musicxml_cpl').val(gMusicXMLImportOptions.n);
	$('#musicxml_crf').val(gMusicXMLImportOptions.c);
	$('#musicxml_den').val(gMusicXMLImportOptions.d);
	$('#musicxml_midi').val(gMusicXMLImportOptions.m);
	$('#musicxml_nlb').prop('checked',(gMusicXMLImportOptions.x == 1));
	$('#musicxml_noped').prop('checked',(gMusicXMLImportOptions.noped == 1));
	$('#musicxml_v1').prop('checked',(gMusicXMLImportOptions.v1 == 1));
	$('#musicxml_stems').prop('checked',(gMusicXMLImportOptions.stm == 1));
	$('#musicxml_mnum').val(gMusicXMLImportOptions.mnum);
	$('#musicxml_addq').prop('checked',(gMusicXMLImportOptions.addq == 1));
	$('#musicxml_q').val(gMusicXMLImportOptions.q);
	$('#musicxml_addstavenum').prop('checked',(gMusicXMLImportOptions.addstavenum == 1));

};

//
// Reset the MusicXML Import settings
//
function defaultMusicXMLSettings(){

	// Keep track of actions
	sendGoogleAnalytics("action","defaultMusicXMLSettings");

	var thePrompt = "Are you sure you want to reset the MusicXML/MIDI Import Settings to their default values?";

	// Center the string in the prompt
	thePrompt = makeCenteredPromptString(thePrompt);

	DayPilot.Modal.confirm(thePrompt,{ top:180, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

		if (!args.canceled){

		    resetMusicXMLImportOptions();

		    idleXMLImport();

		}

	});
}

function ConfigureMusicXMLImport(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","ConfigureMusicXMLImport");

	const theData = {};

	// Copy the original options object for later possible restore
	var originalMusicXMLImportOptions = JSON.parse(JSON.stringify(gMusicXMLImportOptions));

	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">MusicXML/MIDI Import Settings&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#musicxml" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></p>';

    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">Bars-per-line:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" style="width:60px;" id="musicxml_bpl" type="text" pattern="\d+" title="Default: 3"/></div>\n';
    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">Characters-per-line:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" style="width:60px;" id="musicxml_cpl" type="text" pattern="\d+" title="Default: 0 - ignore"/></div>\n';
    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">Measure numbers:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" style="width:60px;" id="musicxml_mnum" type="text" pattern="\d+" title="-1: No measure numbers, 1..n: Number every n-th measure, 0: Number every system"/></div>\n';
   	modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">Include measure numbers at end of staves:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" id="musicxml_addstavenum" type="checkbox"/></div>\n';
    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">Unfold repeats:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" id="musicxml_unfld" type="checkbox"/></div>\n';
    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">Credit text filter (level 0-6):&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" style="width:60px;" id="musicxml_crf" type="text" pattern="[0123456]" title="0 (Default), 1, 2, 3, 4, 5, 6"/></div>\n';
    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">Denominator unit length for L: tags:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" style="width:60px;" id="musicxml_den" type="text" pattern="\d\d?" title="0 (Automatic), 1, 2, 4, 8, 16, or 32"/></div>\n';
    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">%%MIDI options:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" style="width:60px;" id="musicxml_midi" type="text" pattern="[012]" title="0: No MIDI, 1: Only program, 2: All MIDI"/></div>\n';
    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">No score line breaks:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" id="musicxml_nlb" type="checkbox"/></div>\n';
    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">No pedal directions:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" id="musicxml_noped" type="checkbox"/></div>\n';
    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">All directions to first voice:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" id="musicxml_v1" type="checkbox"/></div>\n';
    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">Translate stem directions:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" id="musicxml_stems" type="checkbox"/></div>\n';
    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">Inject Q: tag if not present:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" id="musicxml_addq" type="checkbox"/></div>\n';
    modal_msg += '<div style="margin-bottom:12px;"><label style="font-size:12pt;font-family:helvetica;">Q: tag value to inject:&nbsp;&nbsp;</label><input onchange="setMusicXMLOptions()" style="width:60px;" id="musicxml_q" type="text" pattern="\d+" title="Default: 100"/></div>\n';
	modal_msg += '<p style="text-align:center;margin-top:22px;"><input id="default_musicxml_settings" class="btn btn-clearbutton default_musicxml_settings" onclick="defaultMusicXMLSettings()" type="button" value="Reset to Default" title="Reset the MusicXML/MIDI import settings to their default values"></p>\n';

	const form = [
	  {html: modal_msg}
	];


	setTimeout(function(){

		idleXMLImport();

	}, 150);


	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 50, width: 500, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){
		
		// Get the results and store them in the global configuration
		if (!args.canceled){

		    // Save the MusicXML settings
		    if (gLocalStorageAvailable){

		        localStorage.musicXMLImportOptionsV6 = JSON.stringify(gMusicXMLImportOptions);

		    }
		}
		else{

			// Restore the original options
			gMusicXMLImportOptions = originalMusicXMLImportOptions;

		}

	});

}

//
// Initialize the Anglo Concertina button naming matrix
//
function resetAngloButtonNames(){

    gAngloButtonNames = [

        // Top row, LH
        "1*",
        "2*",
        "3*",
        "4*",
        "5*",

        // Top row, RH
        "①*",
        "②*",
        "③*",
        "④*",
        "⑤*",

        // Middle row, LH
        "1",
        "2",
        "3",
        "4",
        "5",

        // Middle row, RH
        "①",
        "②",
        "③",
        "④",
        "⑤",

        // Bottom row, LH
        "6",
        "7",
        "8",
        "9",
        "10",

        // Bottom row, RH
        "⑥",
        "⑦",
        "⑧",
        "⑨",
        "⑩"
    ];

}

//
//
// Reset the button naming matrix to the default with confirmation
//
function defaultAngloButtonNames(){

	// Keep track of actions
	sendGoogleAnalytics("action","defaultAngloButtonNames");

	var thePrompt = "Are you sure you want to reset the Anglo Concertina button names to their default values?";

	// Center the string in the prompt
	thePrompt = makeCenteredPromptString(thePrompt);

	DayPilot.Modal.confirm(thePrompt ,{ top:180, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

		if (!args.canceled){

			var i;

		    resetAngloButtonNames();

		    for (i=0;i<10;++i){
		        var id = "r1c"+(i+1);
		        document.getElementById(id).value = gAngloButtonNames[i];
		    }
		    
		    for (i=0;i<10;++i){
		        var id = "r2c"+(i+1);
		        document.getElementById(id).value = gAngloButtonNames[i+10];
		    }

		    for (i=0;i<10;++i){
		        var id = "r3c"+(i+1);
		        document.getElementById(id).value = gAngloButtonNames[i+20];
		    }
		    
		}

	});
}

//
// Init the button naming matrix
//
function initAngloButtonNames(){

    var i;

    for (i=0;i<10;++i){
        var id = "r1c"+(i+1);
        document.getElementById(id).value = gAngloButtonNames[i];
    }
    
    for (i=0;i<10;++i){
        var id = "r2c"+(i+1);
        document.getElementById(id).value = gAngloButtonNames[i+10];
    }

    for (i=0;i<10;++i){
        var id = "r3c"+(i+1);
        document.getElementById(id).value = gAngloButtonNames[i+20];
    }

}

//
// Change handler for Anglo fingerings input fields
//
function angloFingeringsChangeHandler(){

	// Walk the current map and inject the requested note names
    var i;

    for (i=0;i<10;++i){
        var id = "r1c"+(i+1);
        gAngloButtonNames[i] = document.getElementById(id).value;
    }
    
    for (i=0;i<10;++i){
        var id = "r2c"+(i+1);
        gAngloButtonNames[i+10] = document.getElementById(id).value;
    }

    for (i=0;i<10;++i){
        var id = "r3c"+(i+1);
        gAngloButtonNames[i+20] = document.getElementById(id).value;
    }

    // Sanity check the button names
    for (i=0;i<30;++i){

        if (gAngloButtonNames[i] == ""){
            gAngloButtonNames[i] = " ";
        }

    }

}

//
// Configure the Anglo concertina button names
//
function ConfigureAngloFingerings(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","ConfigureAngloFingerings");

	const theData = {};

	// Save off the original fingerings
	var gAngloButtonNamesOriginal = gAngloButtonNames.slice();

	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Configure Anglo Concertina Tablature Button Names&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#injecting_box_or_anglo_concertina_tablature" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>';
	modal_msg += '<div id="anglo-button-names-dialog">';
	modal_msg += '<table style="margin-bottom:24px;text-align:center;">\n';
	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r1c1" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r1c2" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r1c3" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r1c4" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r1c5" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r1c6" style="margin-left:36px" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r1c7" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r1c8" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r1c9" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r1c10" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r2c1" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r2c2" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r2c3" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r2c4" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r2c5" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r2c6" style="margin-left:36px" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r2c7" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r2c8" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r2c9" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r2c10" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '<tr>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r3c1" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r3c2" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r3c3" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r3c4" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r3c5" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r3c6" style="margin-left:36px" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r3c7" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r3c8" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r3c9" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '<td><input class="anglobuttonnames" type="text" id="r3c10" onchange="angloFingeringsChangeHandler()"></td>\n';
	modal_msg += '</tr>\n';
	modal_msg += '</table>\n';
	modal_msg += '</div>\n';
	modal_msg += '<p style="text-align:center;margin-top:22px;"><input id="default_anglo_fingerings" class="btn btn-clearbutton default_anglo_fingerings" onclick="defaultAngloButtonNames()" type="button" value="Reset to Default" title="Reset the Anglo Concertina button names to their default values"></p>\n';

	const form = [
	  {html: modal_msg}
	];


	setTimeout(function(){

		initAngloButtonNames();

	}, 150);


	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 190, width: 800, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){
		
		// Get the results and store them in the global configuration
		if (!args.canceled){

		    // Save the custom button naming map
		    if (gLocalStorageAvailable){

		        localStorage.angloButtonNames2 = JSON.stringify(gAngloButtonNames);

		    }

		}
		else{

			// Cancelled, reset the original values
			gAngloButtonNames = gAngloButtonNamesOriginal;
		}

	});

}


//
// Tablature settings dialog
//
function ConfigureTablatureSettings(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","ConfigureTablatureSettings");

    const box_tab_styles = [
	    { name: "  Default (Uses settings below for push/draw characters and tab location)", id: "0" },
	    { name: "  Push/Draw (Single quote for outside row, tab drawn below notes)", id: "1" },
  	];

    const tab_locations = [
	    { name: "  Above", id: "0" },
	    { name: "  Below", id: "1" },
  	];

	// Setup initial values
	const theData = {
	  configure_font_family: gInjectTab_FontFamily,
	  configure_tab_font_size: gInjectTab_TabFontSize,
	  configure_staffsep: gInjectTab_StaffSep,
	  configure_musicspace: gInjectTab_MusicSpace,
	  configure_tab_location:parseInt(gInjectTab_TabLocation),
	  configure_strip_chords:gInjectTab_StripChords,
	  configure_pushglyph:gInjectTab_PushGlyph,
	  configure_drawglyph:gInjectTab_DrawGlyph,
	  configure_use_bar_for_draw:gInjectTab_UseBarForDraw,
	  configure_box_tab_style:gInjectTab_BoxTabStyle,
    configure_tab_colors:gInjectTab_Colors,
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Tablature Injection Settings&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#tablature_settings" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="font-size:12pt;line-height:18pt;font-family:helvetica"><strong>General Tablature Formatting Settings:</strong></p>'},	  
	  {name: "Font family (Recommended: Palatino):", id: "configure_font_family", type:"text", cssClass:"configure_tab_settings_form_text_wide"},
	  {name: "Tablature/Solfège font size (Recommended: 10):", id: "configure_tab_font_size", type:"text", cssClass:"configure_tab_settings_form_text"},
	  {name: "%%staffsep value (Recommended: 80):", id: "configure_staffsep", type:"text", cssClass:"configure_tab_settings_form_text"},
	  {name: "%%musicspace value (Recommended: 10):", id: "configure_musicspace", type:"text", cssClass:"configure_tab_settings_form_text"},
	  {name: "Tab location relative to notation:", id: "configure_tab_location", type:"select", options:tab_locations, cssClass:"configure_tab_settings_select"},
	  {name: "    Strip all chords and tab before injecting tab (Tab below only. Tab above always strips.)", id: "configure_strip_chords", type:"checkbox", cssClass:"configure_tab_settings_form_text"},
	  {html: '<p style="font-size:12pt;line-height:18pt;font-family:helvetica;margin-top:24px;"><strong>Irish Button Box and Anglo Concertina-specific Tablature Settings:</strong></p>'},	  
	  {name: "Box tab style:", id: "configure_box_tab_style", type:"select", options:box_tab_styles, cssClass:"configure_tab_settings_select_box_style"}, 
	  {name: "Character(s) for Push indication (Clearing this field will reset to ↓ ):", id: "configure_pushglyph", type:"text", cssClass:"configure_tab_settings_form_text"},
	  {name: "Character(s) for Draw indication (Clearing this field will reset to ↑ ):", id: "configure_drawglyph", type:"text", cssClass:"configure_tab_settings_form_text"},
	  {name: "    Use a bar over button name to indicate Draw (overrides Push and Draw characters)", id: "configure_use_bar_for_draw", type:"checkbox", cssClass:"configure_tab_settings_form_text"},
    {name: "    Inject Push and Draw tab colors and CSS", id: "configure_tab_colors", type:"checkbox", cssClass:"configure_tab_settings_form_text"},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 50, width: 720, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			gInjectTab_FontFamily = args.result.configure_font_family;
			gInjectTab_TabFontSize = args.result.configure_tab_font_size;
			gInjectTab_StaffSep = args.result.configure_staffsep;
			gInjectTab_MusicSpace = args.result.configure_musicspace;
			gInjectTab_TabLocation = args.result.configure_tab_location;
			gInjectTab_BoxTabStyle = args.result.configure_box_tab_style;
			gInjectTab_StripChords = args.result.configure_strip_chords;
      gInjectTab_Colors = args.result.configure_tab_colors;

			// Do some sanity checking on the push and draw glyphs
			gInjectTab_PushGlyph = args.result.configure_pushglyph;

			if (gInjectTab_PushGlyph == ""){
				gInjectTab_PushGlyph = "↓";
			}

			gInjectTab_DrawGlyph = args.result.configure_drawglyph;

			if (gInjectTab_DrawGlyph == ""){
				gInjectTab_DrawGlyph = "↑";
			}
			
			gInjectTab_UseBarForDraw =  args.result.configure_use_bar_for_draw;

			// Save the settings, in case they were initialized
			SaveConfigurationSettings();

		}

	});

}

//
// Inject the tab colors
//
function InjectTabColors(val,style){

  // Some tab styles can't have tab colors automatically injected
  if (((style == 1) && (gInjectTab_BoxTabStyle == "1")) || (gInjectTab_UseBarForDraw))  {

    var thePrompt = "Unable to automatically inject Push/Draw colors into this style of tab.";

    // Center the string in the prompt
    thePrompt = makeCenteredPromptString(thePrompt);

    DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

    return val;

  }

  switch (style){
    case 0: // Anglo concertina

      if (!gInjectTab_GaryCoover){

        val = val.replaceAll(gInjectTab_PushGlyph+'"', gInjectTab_PushGlyph+'"!push!')
        val = val.replaceAll(gInjectTab_DrawGlyph+'"', gInjectTab_DrawGlyph+'"!draw!')

      }
      else{

        // Use regular expressions for Gary Coover
        val = val.replace(/("_ ;\d+"|"\^\d+"|"_ ;\d+a"|"\^\d+a")/g, "$1!push!")
        val = val.replace(/("__;\d+"|"___;\d+"|"__;\d+a"|"___;\d+a"|"\^_;\d+"|"\^__;\d+"|"\^_;\d+a"|"\^__;\d+a")/g, "$1!draw!")

      }
      break;

    case 1: // Box
      val = val.replaceAll(gInjectTab_PushGlyph+'"', gInjectTab_PushGlyph+'"!push!')
      val = val.replaceAll(gInjectTab_DrawGlyph+'"', gInjectTab_DrawGlyph+'"!draw!')

    break;
  }

  var theCSS = "% Begin tab color CSS\n%%begincss\n.push {fill:#C00000}\n.draw {fill:#0000C0}\n%%endcss\n% End tab color CSS\n\n";

  val = theCSS + val;

  return val;

}

//
// Inject the harmonica tab colors
//
function InjectHarmonicaTabColors(val){

  // Inject push and draw decorations
  val = val.replaceAll(';+"', ';+"!push!');
  val = val.replaceAll(';-"', ';-"!draw!');

  if (!gHarmonicaPlusSign){
    val = val.replaceAll(';+"', ';"');
  }

  if (!gHarmonicaStacking){

    const suffixes = [
      "",       // e.g. "6;+"
      "'''",    // e.g. "6''';+"
      "''",     // e.g. "6'';+"
      "'",      // e.g. "6';+"
      "o'",     // e.g. "6o';+"
      "o"       // e.g. "6o;+"
    ];

    ["+","-"].forEach(sign => {
      suffixes.forEach(suffix => {
        const escapedSuffix = suffix.replace(/([\\^$*+?.()|[\]{}])/g, '\\$1'); // Escape special chars
        const regex = new RegExp(`(\\d+)${escapedSuffix};+\\${sign}`, 'g');
        const replacement = `${sign}$1${suffix}`;
        val = val.replace(regex, replacement);
      });
    });

    // Remove trailing semicolons
    val = val.replaceAll(';"','"');

  }

  var theCSS = "% Begin tab color CSS\n%%begincss\n.push {fill:#C00000}\n.draw {fill:#0000C0}\n%%endcss\n% End tab color CSS\n\n";

  val = theCSS + val;

  return val;

}

//
// Clean the harmonica tab
//
function CleanHarmonicaTab(val){

  if (gHarmonicaStacking){
    val = val.replace(/"(\^[^"+-]*[^"+-])"/g, '"$1;"');
  }

  return val;

}
//
// Font settings dialog
//

// Holds fonts during the duration of the dialog, global settings not changed unless accepted
var gDialogRenderingFonts;

function idleOpenFonts(){

	if (gIsIOS){

		document.getElementById("load_rendering_fonts_fs").removeAttribute("accept");
	
	}	

	//
	// Setup the file import control
	//
	document.getElementById("load_rendering_fonts_fs").onchange = () => {

		let fileElement = document.getElementById("load_rendering_fonts_fs");

		// check if user had selected a file
		if (fileElement.files.length === 0) {

			var thePrompt = "Please select a font settings file";

			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;

		}

		let file = fileElement.files[0];

		// Read the font settings file
		loadFontSettings(file);

		// Reset file selectors
		fileElement.value = "";

	}

}

//
// Load the font settings from a dialog
//
function loadFontSettings(file){

	// Keep track of actions
	sendGoogleAnalytics("action","loadFontSettings");

	const reader = new FileReader();

	reader.addEventListener('load', (event) => {

		var theText = event.target.result;

		var theParsedFonts = JSON.parse(theText);

		// Sanity check a couple of fields
		if ((!theParsedFonts.titlefont) || (!theParsedFonts.voicefont)){

			var thePrompt = "This is not a valid font settings file.";

			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;

		}

		gDialogRenderingFonts = theParsedFonts;

		// MAE 24 Nov 2023 - For addition of the tab label font
        if (!gDialogRenderingFonts.tablabelfont){

        	gDialogRenderingFonts.tablabelfont = "Trebuchet MS 14";

        }

      	// MAE 26 Nov 2023 - For addition of the tab graces font
        if (!gDialogRenderingFonts.tabgracefont){

        	gDialogRenderingFonts.tabgracefont = "Arial 8";

        }

		// Idle the fonts dialog display showing the new values
		idleFontsDialog();

	});

	reader.readAsText(file);
}


//
// Load the font settings from a dialog
//
function saveFontSettings(){

	// Keep track of actions
	sendGoogleAnalytics("action","saveFontSettings");

	// Default fonts used for rendering
	var theRenderingFonts = {
		titlefont: $('[name="configure_titlefont"]').val(),
		subtitlefont: $('[name="configure_subtitlefont"]').val(),
		infofont: $('[name="configure_infofont"]').val(),
		partsfont: $('[name="configure_partsfont"]').val(),
		tempofont: $('[name="configure_tempofont"]').val(),
		textfont: $('[name="configure_textfont"]').val(),
		composerfont: $('[name="configure_composerfont"]').val(),
		annotationfont: $('[name="configure_annotationfont"]').val(),
		gchordfont: $('[name="configure_gchordfont"]').val(),
		vocalfont: $('[name="configure_vocalfont"]').val(),
		wordsfont: $('[name="configure_wordsfont"]').val(),
		tablabelfont: $('[name="configure_tablabelfont"]').val(),
		tabnumberfont: $('[name="configure_tabnumberfont"]').val(),
		tabgracefont: $('[name="configure_tabgracefont"]').val(),
		historyfont: $('[name="configure_historyfont"]').val(),
		voicefont: $('[name="configure_voicefont"]').val()

	}

	var theRenderingFontsJSON = JSON.stringify(theRenderingFonts);

	saveTextFile("Please enter a filename for your font settings:", "abc_tool_fonts.txt", theRenderingFontsJSON);
	
}


//
// Idle the rendering fonts dialog
// 
function idleFontsDialog(){

	$('[name="configure_titlefont"]').val(gDialogRenderingFonts.titlefont);
	$('[name="configure_subtitlefont"]').val(gDialogRenderingFonts.subtitlefont);
	$('[name="configure_infofont"]').val(gDialogRenderingFonts.infofont);
	$('[name="configure_partsfont"]').val(gDialogRenderingFonts.partsfont);
	$('[name="configure_tempofont"]').val(gDialogRenderingFonts.tempofont);
	$('[name="configure_textfont"]').val(gDialogRenderingFonts.textfont);
	$('[name="configure_composerfont"]').val(gDialogRenderingFonts.composerfont);
	$('[name="configure_annotationfont"]').val(gDialogRenderingFonts.annotationfont);
	$('[name="configure_gchordfont"]').val(gDialogRenderingFonts.gchordfont);
	$('[name="configure_vocalfont"]').val(gDialogRenderingFonts.vocalfont);
	$('[name="configure_wordsfont"]').val(gDialogRenderingFonts.wordsfont);
	$('[name="configure_tablabelfont"]').val(gDialogRenderingFonts.tablabelfont);
	$('[name="configure_tabnumberfont"]').val(gDialogRenderingFonts.tabnumberfont);
	$('[name="configure_tabgracefont"]').val(gDialogRenderingFonts.tabgracefont);
	$('[name="configure_historyfont"]').val(gDialogRenderingFonts.historyfont);
	$('[name="configure_voicefont"]').val(gDialogRenderingFonts.voicefont);
}

//
// Reset the rendering fonts
//

function resetABCRenderingFonts(){

	// Default fonts used for rendering
	gDialogRenderingFonts = {
		titlefont: "Palatino 18",
		subtitlefont: "Palatino 13",
		infofont: "Palatino 13",
		partsfont: "Palatino 13",
		tempofont: "Palatino 13",
		textfont: "Palatino 13",
		composerfont: "Palatino 13",
		annotationfont: "Palatino 13",
		gchordfont: "Verdana 12",
		vocalfont: "Palatino 13",
		wordsfont: "Palatino 13",
		tablabelfont: "Trebuchet MS 14",
		tabnumberfont: "Arial 12",
		tabgracefont: "Arial 8",
		historyfont: "Times New Roman 14",
		voicefont: "Times New Roman 13"

	}
}

//
// Reset the ABC rendering font settings
//
function defaultFontSettings(){

	// Keep track of actions
	sendGoogleAnalytics("action","defaultFontSettings");

	var thePrompt = "Are you sure you want to reset the ABC rendering fonts to their default values?";

	// Center the string in the prompt
	thePrompt = makeCenteredPromptString(thePrompt);

	DayPilot.Modal.confirm(thePrompt,{ top:180, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

		if (!args.canceled){

		    resetABCRenderingFonts();

			// Save the settings, in case they were initialized
			SaveConfigurationSettings();

		    idleFontsDialog();

		}

	});
}

//
// Load the font settings
//
function loadFontSettingsClickHandler(){

	var elem = document.getElementById("load_rendering_fonts_fs");

	elem.click();

}

function ConfigureFonts(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","ConfigureFonts");

	// Setup initial values
	const theData = {
	  configure_titlefont: gRenderingFonts.titlefont,
	  configure_subtitlefont: gRenderingFonts.subtitlefont,
	  configure_infofont: gRenderingFonts.infofont,
	  configure_partsfont: gRenderingFonts.partsfont,
	  configure_tempofont:gRenderingFonts.tempofont,
	  configure_textfont:gRenderingFonts.textfont,
	  configure_composerfont:gRenderingFonts.composerfont,
	  configure_annotationfont:gRenderingFonts.annotationfont,
	  configure_gchordfont:gRenderingFonts.gchordfont,
	  configure_vocalfont:gRenderingFonts.vocalfont,
	  configure_wordsfont:gRenderingFonts.wordsfont,
	  configure_tablabelfont:gRenderingFonts.tablabelfont,
	  configure_tabnumberfont:gRenderingFonts.tabnumberfont,
	  configure_tabgracefont:gRenderingFonts.tabgracefont,
	  configure_historyfont:gRenderingFonts.historyfont,
	  configure_voicefont:gRenderingFonts.voicefont,
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Configure ABC Rendering Fonts&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#configure_fonts" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {name: "Title font (Default: Palatino 18):", id: "configure_titlefont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Subtitle font (Default: Palatino 13):", id: "configure_subtitlefont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Info font (Default: Palatino 13):", id: "configure_infofont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Composer font (Default: Palatino 13):", id: "configure_composerfont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Tempo font (Default: Palatino 13):", id: "configure_tempofont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Guitar chord font (Default: Verdana 12):", id: "configure_gchordfont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Tab label font (Default: Trebuchet MS 14):", id: "configure_tablabelfont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Tab number font (Default: Arial 12):", id: "configure_tabnumberfont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Tab grace font (Default: Arial 8):", id: "configure_tabgracefont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "History font (Default: Times New Roman 14):", id: "configure_historyfont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Text font (Default: Palatino 13):", id: "configure_textfont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Annotation font (Default: Palatino 13):", id: "configure_annotationfont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Voice font (Default: Times New Roman 13):", id: "configure_voicefont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Parts font (Default: Palatino 13):", id: "configure_partsfont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Vocal font (Default: Palatino 13):", id: "configure_vocalfont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {name: "Words font (Default: Palatino 13):", id: "configure_wordsfont", type:"text", cssClass:"configure_font_settings_form_text_wide"},
	  {html: '<p style="text-align:center;margin-top:22px;"><input id="save_rendering_fonts" class="btn btn-top save_rendering_fonts" onclick="saveFontSettings()" type="button" value="Save to File" title="Saves the ABC rendering font settings to a file"><input type="file" id="load_rendering_fonts_fs" accept=".txt,.TXT" hidden/><input class="btn btn-top load_rendering_fonts" type="button" id="load_rendering_fonts" title="Loads the ABC rendering font settings from a file" value="Load from File" onclick="loadFontSettingsClickHandler()"/><input id="default_rendering_fonts" class="btn btn-clearbutton default_rendering_fonts" onclick="defaultFontSettings()" type="button" value="Reset to Default" title="Reset the ABC rendering fonts to their default values"></p>'}
	];
	
	setTimeout(function(){

		idleOpenFonts();

	}, 150);

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 10, width: 600, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			gRenderingFonts.titlefont = args.result.configure_titlefont;
			gRenderingFonts.subtitlefont = args.result.configure_subtitlefont;
			gRenderingFonts.infofont = args.result.configure_infofont;
			gRenderingFonts.partsfont = args.result.configure_partsfont;
			gRenderingFonts.tempofont = args.result.configure_tempofont;
			gRenderingFonts.textfont = args.result.configure_textfont;
			gRenderingFonts.composerfont = args.result.configure_composerfont;
			gRenderingFonts.annotationfont = args.result.configure_annotationfont;
			gRenderingFonts.gchordfont = args.result.configure_gchordfont;
			gRenderingFonts.vocalfont = args.result.configure_vocalfont;
			gRenderingFonts.wordsfont = args.result.configure_wordsfont;
			gRenderingFonts.tablabelfont = args.result.configure_tablabelfont;
			gRenderingFonts.tabnumberfont = args.result.configure_tabnumberfont;
			gRenderingFonts.tabgracefont = args.result.configure_tabgracefont;
			gRenderingFonts.historyfont = args.result.configure_historyfont;
			gRenderingFonts.voicefont = args.result.configure_voicefont;

			// Save the settings, in case they were initialized
			SaveConfigurationSettings();

			RenderAsync(true,null);


		}

	});

}


//
// Sharing controls dialog
//

// Add the autoplay string to the URL
function AddAutoPlay(){

	var theURL = urltextbox.value;

	// Check if a play directive already present
	if (theURL.indexOf("&play=1") == -1){
		theURL += "&play=1";
	}

	urltextbox.value = theURL;

	// Give some feedback
	document.getElementById("addautoplay").value = "Auto-Play Added!";

	setTimeout(function(){

		var elem = document.getElementById("addautoplay");

		if (elem){
			elem.value = "Add Auto-Play";
		}

	},500);

}

// Add the disable editing param to the URL
function AddDisableEditing(){

	var theURL = urltextbox.value;

	// Check if a disable editor directive already present
	if (theURL.indexOf("&dx=1") == -1){
		theURL += "&dx=1";
	}

	urltextbox.value = theURL;

	// Give some feedback
	document.getElementById("adddisableediting").value = "Disable Editing Added!";

	setTimeout(function(){

		var elem = document.getElementById("adddisableediting");

		if (elem){
			elem.value = "Add Disable Editing";
		}

	},500);

}

// Add the open in editor parameter to the URL
function AddOpenInEditor(){

	var theURL = urltextbox.value;

	// Check if a editor directive already present
	if (theURL.indexOf("&editor=1") == -1){
		theURL += "&editor=1";
	}

	urltextbox.value = theURL;

	// Give some feedback
	document.getElementById("addopenineditor").value = "Open in Editor Added!";

	setTimeout(function(){

		var elem = document.getElementById("addopenineditor");

		if (elem){
			elem.value = "Add Open in Editor";
		}

	},500);

}

// Add the noui param to the URL
function AddNoUI(){

	var theURL = urltextbox.value;

	// Check if the noui directive already present
	if (theURL.indexOf("&noui") == -1){
		theURL += "&noui";
	}

	urltextbox.value = theURL;

	// Give some feedback
	document.getElementById("addnoui").value = "Hide UI Added!";

	setTimeout(function(){

		var elem = document.getElementById("addnoui");

		if (elem){
			elem.value = "Add Hide UI";
		}

	},500);

}

function SharingControlsDialog(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","SharingControlsDialog");

	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Sharing Controls&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#sharing_controls" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>';
	modal_msg += '<div id="sharing-controls-dialog">';
	modal_msg += '<p style="margin-top:28px;">';
	modal_msg += '<input id="testurl" class="urlcontrols btn btn-urlcontrols" onclick="TestShareURL()" type="button" value="Test Share URL" title="Opens the Share URL in a new tab">';
	modal_msg += '<input id="copyurl" class="urlcontrols btn btn-urlcontrols" onclick="CopyShareURL()" type="button" value="Copy Share URL" title="Copies the Share URL to the clipboard">';
	modal_msg += '<input id="saveurl" class="urlcontrols btn btn-urlcontrols" onclick="SaveShareURL()" type="button" value="Save Share URL" title="Saves the Share URL to a file">';
	modal_msg += '<input id="shortenurl" class="urlcontrols btn btn-urlcontrols" onclick="ShortenURL(event)" type="button" value="Shorten URL" title="Shortens the Share URL and copies it to the clipboard">';
	modal_msg += '<input id="generateqrcode" class="urlcontrolslast btn btn-urlcontrols" onclick="GenerateQRCode(event)" type="button" value="Generate QR Code" title="Generates a QR Code for the Share URL.&nbsp;&nbsp;Even if this button is greyed-out, Shift-click attempts to generate a QR code from the text in the Share URL box.">';
	modal_msg += '</p>';
	modal_msg += '<p style="margin-top:24px;">';
	modal_msg += '<textarea id="urltextbox" rows="10" cols="80" spellcheck="false" autocorrect="off" autocapitalize="off" placeholder="URL for sharing will appear here" >';
	modal_msg += '</textarea>';
	modal_msg += '</p>';
	modal_msg += '<p id="shareurlcaption">Share URL</p>';
	modal_msg += '<p style="text-align:center;margin-top:36px;"><input id="addautoplay" class="urlcontrols btn btn-urlcontrols" onclick="AddAutoPlay()" type="button" value="Add Auto-Play" title="Adds &play=1 to the ShareURL.&nbsp;&nbsp;Tune will open in the player."><input id="addopenineditor" class="urlcontrols btn btn-urlcontrols" onclick="AddOpenInEditor()" type="button" value="Add Open in Editor" title="Adds &editor=1 to the ShareURL.&nbsp;&nbsp;Share links will load in the editor.&nbsp;&nbsp;This setting overrides Add Auto-Play."><input id="adddisableediting" class="urlcontrols btn btn-urlcontrols" onclick="AddDisableEditing()" type="button" value="Add Disable Editing" title="Adds &dx=1 to the ShareURL.&nbsp;&nbsp;Entering the editor from the full screen tune view will be disabled.&nbsp;&nbsp;Also overrides Add Open in Editor."><input id="addnoui" class="urlcontrolslast btn btn-urlcontrols" onclick="AddNoUI()" type="button" value="Add Hide UI" title="Adds &noui to the ShareURL for responsive iframe embedding.&nbsp;&nbsp;When the link is opened, hides the UI.&nbsp;&nbsp;Overrides Add Open in Editor and Add Auto-Play."></p>';

	modal_msg += '</div>';

	setTimeout(function(){

		CreateURLfromHTML();

	}, 200);


	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 100, width: 800, scrollWithPage: (AllowDialogsToScroll())}).then(function(){

	});

}

//
// PDF Export dialog
//

//
// Add a new ABC tune template, song template, or PDF tunebook annotation template to the current ABC
//
function idlePDFExportDialog(){

	function showHideIncipitsLayout(val){

		if (val != "incipits"){

			var elem = document.getElementsByName("configure_incipitscolumns");
			
			if (elem && (elem.length!=0)){
				elem[0].disabled = true;
				elem[0].style.opacity = 0.4;

			}

		}
		else{

			var elem = document.getElementsByName("configure_incipitscolumns");
			
			if (elem && (elem.length!=0)){
				elem[0].disabled = false;
				elem[0].style.opacity = 1.0;
			}

		}
	}

	// Idle the incipits column selector
	var elem = document.getElementsByName("configure_tunelayout");

	if (elem && (elem.length!=0)){

		// Initial idle of incipits layout selector
		var val = elem[0].value;

		showHideIncipitsLayout(val)

		// Idle the incipits layout selector
		elem[0].onchange = function(){

			// Initial idle of incipits layout selector
			var val = this.value;

			showHideIncipitsLayout(val);

		}

	}
}

function PDFExportDialog(){

	if (!gAllowCopy){
		return;
	}

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	var bShowTopButtons = true;

	if (gIsMaximized){
		bShowTopButtons = false;
	}

	// Keep track of dialogs
	if (bShowTopButtons){
		sendGoogleAnalytics("dialog","PDFExportDialog");
	}
	else{
		sendGoogleAnalytics("dialog","PDFExportDialogFS");
	}

    const papersize_list = [
	    { name: "  Letter", id: "letter" },
	    { name: "  A4", id: "a4" },
  	];

    const orientation_list = [
	    { name: "  Portrait", id: "portrait" },
	    { name: "  Landscape", id: "landscape" },
  	];

  	var tunelayout_list;

  	if (!isMobileBrowser()){
	    tunelayout_list = [
		    { name: "  One Tune per Page", id: "one" },
		    { name: "  Multiple Tunes per Page", id: "multi" },
		    { name: "  Notes Incipits", id: "incipits" },
	 	    { name: "  ABC Text Incipits", id: "incipits_abc" },
		    { name: "  ABC Text Incipits Sorted", id: "incipits_abc_sort" },
		    { name: "  ABC Text Complete Tunes", id: "incipits_abc_full" },
		    { name: "  ABC Text Complete Tunes - Comhaltas ABC", id: "incipits_abc_full_cce" },
		    { name: "  QR Code for Each Tune", id: "all_qr_codes" },
		    { name: "  Notation + QR Code for Each Tune", id: "mixed_notation_qr" },
		    { name: "  Individual PDF File for Each Tune", id: "pdf_per_tune" },
	 	];
	}
	else{
	    tunelayout_list = [
		    { name: "  One Tune per Page", id: "one" },
		    { name: "  Multiple Tunes per Page", id: "multi" },
		    { name: "  Notes Incipits", id: "incipits" },
	 	    { name: "  ABC Text Incipits", id: "incipits_abc" },
		    { name: "  ABC Text Incipits Sorted", id: "incipits_abc_sort" },
		    { name: "  ABC Text Complete Tunes", id: "incipits_abc_full" },
		    { name: "  ABC Text Complete Tunes - Comhaltas ABC", id: "incipits_abc_full_cce" },
		    { name: "  QR Code for Each Tune", id: "all_qr_codes" },
		    { name: "  Notation + QR Code for Each Tune", id: "mixed_notation_qr" },
	 	];
	}

  	const incipits_columns_list = [
	    { name: "  One Column", id: 1 },
	    { name: "  Two Columns", id: 2 },
  	];

  	const pagenumber_list = [
	    { name: "  None", id: "none" },
	    { name: "  Top Left", id: "tl" },
	    { name: "  Top Center", id: "tc" },
	    { name: "  Top Right", id: "tr" },
	    { name: "  Bottom Left", id: "bl" },
	    { name: "  Bottom Center", id: "bc" },
	    { name: "  Bottom Right", id: "br" },
	    { name: "  Alternating Top Left/Right", id: "tlr" },
	    { name: "  Alternating Top Right/Left", id: "trl" },
	    { name: "  Alternating Bottom Left/Right", id: "blr" },
	    { name: "  Alternating Bottom Right/Left", id: "brl" },
	];

  	const fontname_list = [
	    { name: "  Times", id: "Times" },
	    { name: "  Helvetica", id: "Helvetica" },
	    { name: "  Courier", id: "Courier" },
	    { name: "  Noto-Serif", id: "Noto-Serif" },
	    { name: "  Noto-Sans", id: "Noto-Sans" },
	];

  	const fontstyle_list = [
	    { name: "  Normal", id: "Normal" },
	    { name: "  Bold", id: "Bold" },
	    { name: "  Oblique", id: "Oblique" },
	    { name: "  Bold Oblique", id: "BoldOblique" },
	];

	var thePaperSize = "letter";

	var theTuneLayout = getPDFFormat();
	
	if (theTuneLayout.indexOf("a4") != -1){
		thePaperSize = "a4"
		theTuneLayout = theTuneLayout.replace("_a4","");
	}

	var pagenumbers = getPageNumbers();

	var firstpage = getFirstPage();

	var theFirstPage = (firstpage == "yes");

	// Sanity check the PDF font and style
	var dialog_PDFFont = gPDFFont;
	var pdffontlc = dialog_PDFFont.toLowerCase();

	if ((pdffontlc != "times") && (pdffontlc != "helvetica") && (pdffontlc != "courier") && (pdffontlc != "noto-serif") && (pdffontlc != "noto-sans")){
		dialog_PDFFont = "Times";
	}

	if ((pdffontlc == "noto-serif") || (pdffontlc == "noto-sans")){
		dialog_PDFFontStyle = "Normal";
	}

	var dialog_PDFFontStyle = gPDFFontStyle;

	if (dialog_PDFFontStyle == ""){
		dialog_PDFFontStyle = "Normal";
	}
	else{

		var pdffontstylelc = dialog_PDFFontStyle.toLowerCase();

		// Times italic to oblique mapping
		if (dialog_PDFFont == "Times"){

			if (pdffontstylelc == "italic"){
				dialog_PDFFontStyle = "Oblique";
			}

			if (pdffontstylelc == "bolditalic"){
				dialog_PDFFontStyle = "BoldOblique";
			}
		}

		// One last check just in case someone put a bad value in a %pdffont directive

		pdffontstylelc = dialog_PDFFontStyle.toLowerCase();

		if ((pdffontstylelc != "normal") && (pdffontstylelc != "bold") && (pdffontstylelc != "oblique") && (pdffontstylelc != "boldoblique")){
			dialog_PDFFontStyle = "Normal";
		}

	}

	clearGetTuneByIndexCache();

	// Setup initial values
	const theData = {
	  configure_papersize:thePaperSize,
	  configure_tunelayout:theTuneLayout,
	  configure_orientation:gPDFOrientation,
	  configure_incipitscolumns: gIncipitsColumns,
	  configure_pagenumber:pagenumbers,
	  configure_pagenumberonfirstpage:theFirstPage,
	  configure_fontname:dialog_PDFFont,
	  configure_fontstyle:dialog_PDFFontStyle,
	  configure_hidden_titles:gPDFIncludeHiddenTitles,
	  configure_auto_page_numbers:gPDFAutoPageNumbers
	};

	var form;

	if (bShowTopButtons){

		if (isPureDesktopBrowser()){
			form = [
			  {html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Export PDF Tunebook&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#export_pdf_tunebook" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'}, 
			  {html: '<p style="text-align:center;margin-top:24px;"><input id="tunebookbuilder-play" class="advancedcontrols btn btn-injectcontrols-tunebookbuilder-play" onclick="PDFTunebookBuilderPlayOnly();" type="button" value="Inject Only PDF Tunebook Play Features" title="Inject only minimal playback-related instrument and volume commands at the top of your tunebook ABC"><input id="tunebookbuilder" class="advancedcontrols btn btn-injectcontrols-tunebookbuilder" onclick="PDFTunebookBuilder();" type="button" value="Inject All PDF Tunebook Features" title="Inject commands at the top of your tunebook ABC for adding a Title Page, Table of Contents, Index, Page Headers, Page Footers, instruments and volumes for Playback Links, and Custom QR Code"></p>'},
			  {name: "Paper Size:", id: "configure_papersize", type:"select", options:papersize_list, cssClass:"configure_pdf_papersize_select"},
			  {name: "Orientation:", id: "configure_orientation", type:"select", options:orientation_list, cssClass:"configure_pdf_orientation_select"},
			  {name: "Tune Layout:", id: "configure_tunelayout", type:"select", options:tunelayout_list, cssClass:"configure_pdf_tunelayout_select"},
			  {name: "Notes Incipits Columns:", id: "configure_incipitscolumns", type:"select", options:incipits_columns_list, cssClass:"configure_pdf_incipitscolumns_select"},
			  {name: "Page Number Location:", id: "configure_pagenumber", type:"select", options:pagenumber_list, cssClass:"configure_pdf_pagenumber_select"},
			  {name: "            Page Number on First Page", id: "configure_pagenumberonfirstpage", type:"checkbox", cssClass:"configure_pdf_settings_form_text"},
			  {name: "            Inject tune title text for PDF searchability", id: "configure_hidden_titles", type:"checkbox", cssClass:"configure_pdf_settings_form_text"},
			  {name: "            Automatically offset page numbers for Title Page and/or Table of Contents", id: "configure_auto_page_numbers", type:"checkbox", cssClass:"configure_pdf_settings_form_text"},
			  {html: '<p style="margin-top:20px;font-size:12pt;line-height:18px;font-family:helvetica;">Font for Title Page, Table of Contents, Index, Page Headers/Footers, Page Numbers, Text Incipits:</p>'},  
			  {name: "Font:", id: "configure_fontname", type:"select", options:fontname_list, cssClass:"configure_pdf_fontname_select"},
			  {name: "Font Style:", id: "configure_fontstyle", type:"select", options:fontstyle_list, cssClass:"configure_pdf_fontstyle_select"},
			  {html: '<p style="text-align:center;margin-top:36px;"><input id="pdfusebrowserprint" class="advancedcontrols btn btn-browser-pdf-export" onclick="Do_Browser_PDF_Export();return;" type="button" value="Browser Native Print-to-PDF with Play Links" title="Quickly export a PDF tunebook using the browser\'s native Print-to-PDF feature with one tune per page and play links when you click the title.&nbsp;&nbsp;Does not include a Title Page, Table of Contents, Index, or QR Code."><input class="incipitsbuilder btn btn-incipitsbuilder" id="incipitsbuilder" onclick="IncipitsBuilderDialog()" type="button" value="Notes Incipits Builder" title="Formats the ABC for notation incipits PDF export"></p>'},
			];
		}
		else{
			form = [
			  {html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Export PDF Tunebook&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#export_pdf_tunebook" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'}, 
			  {html: '<p style="text-align:center;margin-top:24px;"><input id="tunebookbuilder-play" class="advancedcontrols btn btn-injectcontrols-tunebookbuilder-play" onclick="PDFTunebookBuilderPlayOnly();" type="button" value="Inject Only PDF Tunebook Play Features" title="Inject only minimal playback-related instrument and volume commands at the top of your tunebook ABC"><input id="tunebookbuilder" class="advancedcontrols btn btn-injectcontrols-tunebookbuilder" onclick="PDFTunebookBuilder();" type="button" value="Inject All PDF Tunebook Features" title="Inject commands at the top of your tunebook ABC for adding a Title Page, Table of Contents, Index, Page Headers, Page Footers, instruments and volumes for Playback Links, and Custom QR Code"></p>'},
			  {name: "Paper Size:", id: "configure_papersize", type:"select", options:papersize_list, cssClass:"configure_pdf_papersize_select"},
			  {name: "Orientation:", id: "configure_orientation", type:"select", options:orientation_list, cssClass:"configure_pdf_orientation_select"},
			  {name: "Tune Layout:", id: "configure_tunelayout", type:"select", options:tunelayout_list, cssClass:"configure_pdf_tunelayout_select"},
			  {name: "Notes Incipits Columns:", id: "configure_incipitscolumns", type:"select", options:incipits_columns_list, cssClass:"configure_pdf_incipitscolumns_select"},
			  {name: "Page Number Location:", id: "configure_pagenumber", type:"select", options:pagenumber_list, cssClass:"configure_pdf_pagenumber_select"},
			  {name: "            Page Number on First Page", id: "configure_pagenumberonfirstpage", type:"checkbox", cssClass:"configure_pdf_settings_form_text"},
			  {name: "            Inject tune title text for PDF searchability", id: "configure_hidden_titles", type:"checkbox", cssClass:"configure_pdf_settings_form_text"},
			  {name: "            Automatically offset page numbers for Title Page and/or Table of Contents", id: "configure_auto_page_numbers", type:"checkbox", cssClass:"configure_pdf_settings_form_text"},
			  {html: '<p style="margin-top:20px;font-size:12pt;line-height:18px;font-family:helvetica;">Font for Title Page, Table of Contents, Index, Page Headers/Footers, Page Numbers, Text Incipits:</p>'},  
			  {name: "Font:", id: "configure_fontname", type:"select", options:fontname_list, cssClass:"configure_pdf_fontname_select"},
			  {name: "Font Style:", id: "configure_fontstyle", type:"select", options:fontstyle_list, cssClass:"configure_pdf_fontstyle_select"},
        {html: '<p style="text-align:center;margin-top:36px;"><input class="incipitsbuilder btn btn-incipitsbuilder" id="incipitsbuilder" onclick="IncipitsBuilderDialog()" type="button" value="Notes Incipits Builder" title="Formats the ABC for notation incipits PDF export"></p>'},			  
        {html: '<p style="font-size:3pt;">&nbsp;</p>'}	
			];
		}
	}
	else{
		form = [
		  {html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Export PDF Tunebook&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#export_pdf_tunebook" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'}, 
		  {name: "Paper Size:", id: "configure_papersize", type:"select", options:papersize_list, cssClass:"configure_pdf_papersize_select"},
		  {name: "Orientation:", id: "configure_orientation", type:"select", options:orientation_list, cssClass:"configure_pdf_orientation_select"},
		  {name: "Tune Layout:", id: "configure_tunelayout", type:"select", options:tunelayout_list, cssClass:"configure_pdf_tunelayout_select"},
		  {name: "Notes Incipits Columns:", id: "configure_incipitscolumns", type:"select", options:incipits_columns_list, cssClass:"configure_pdf_incipitscolumns_select"},
		  {name: "Page Number Location:", id: "configure_pagenumber", type:"select", options:pagenumber_list, cssClass:"configure_pdf_pagenumber_select"},
		  {name: "            Page Number on First Page", id: "configure_pagenumberonfirstpage", type:"checkbox", cssClass:"configure_pdf_settings_form_text"},
		  {name: "            Inject tune title text for PDF searchability", id: "configure_hidden_titles", type:"checkbox", cssClass:"configure_pdf_settings_form_text"},
	      {name: "            Automatically offset page numbers for Title Page and/or Table of Contents", id: "configure_auto_page_numbers", type:"checkbox", cssClass:"configure_pdf_settings_form_text"},
		  {html: '<p style="margin-top:20px;font-size:12pt;line-height:18px;font-family:helvetica;">Font for Title Page, Table of Contents, Index, Page Headers/Footers, Page Numbers, Text Incipits:</p>'},  
		  {name: "Font:", id: "configure_fontname", type:"select", options:fontname_list, cssClass:"configure_pdf_fontname_select"},
		  {name: "Font Style:", id: "configure_fontstyle", type:"select", options:fontstyle_list, cssClass:"configure_pdf_fontstyle_select"},
      {html: '<p style="font-size:3pt;">&nbsp;</p>'}
		];

	}

  // Put up zoom info for desktop Safari
  if (gIsSafari && (!isMobileBrowser())){
    form = form.concat([{html: '<p style="margin-top:24px;font-size:12pt;line-height:24px;font-family:helvetica;text-align:center;">On Safari, before clicking <strong>Export</strong>, please set the Zoom level to 100% by pressing ⌘+0 (zero)</p>'}]);
  }
  
	setTimeout(function(){

		idlePDFExportDialog();

	}, 150);

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 25, width: 760, scrollWithPage: (AllowDialogsToScroll()), okText: "Export", autoFocus: false } ).then(function(args){
	
		if (!args.canceled){

			gIncipitsColumns = args.result.configure_incipitscolumns;

			var thePaperSize = args.result.configure_papersize;

			gPDFPaperSize = thePaperSize;

			gPDFIncludeHiddenTitles = args.result.configure_hidden_titles;

			gPDFAutoPageNumbers = args.result.configure_auto_page_numbers;

			var theTuneLayout = args.result.configure_tunelayout;

			if (thePaperSize == "a4"){

				// Map the dialog values to the renderer expectation
				if (theTuneLayout == "incipits_abc"){
					theTuneLayout = "incipits_a4_abc";
				}
				else
				if (theTuneLayout == "incipits_abc_sort"){
					theTuneLayout = "incipits_a4_abc_sort";
				}
				else
				if (theTuneLayout == "incipits_abc_full"){
					theTuneLayout = "incipits_a4_abc_full";
				}					
				else
				if (theTuneLayout == "incipits_abc_full_cce"){
					theTuneLayout = "incipits_a4_abc_full_cce";
				}	
				else				
				if (theTuneLayout == "all_qr_codes"){
					theTuneLayout = "all_qr_codes_a4";
				}					
				else				
				if (theTuneLayout == "mixed_notation_qr"){
					theTuneLayout = "mixed_notation_qr_a4";
				}					
				else{
					theTuneLayout += "_a4";
				}

			}

			gPDFOrientation = args.result.configure_orientation;

			// Keep track of which orientation is being used most often
			sendGoogleAnalytics("pdf_orientation",gPDFOrientation);

			// Rendering width and layout parameters for table of contents and index depends on orientation
			if (gPDFOrientation == "portrait"){

				gRenderPixelRatio = 2.0;

				if (thePaperSize == "letter"){
					gPageWidth = 535;
					gTPTOPOFFSET = 435;
					gINDEXTOPOFFSET = 330; 
					gTOCTOPOFFSET = 330;
					gPAGENUMBERTOP = 296;
					gTEXTINCIPITTOPOFFSET = 330;
				 	gTEXTINCIPITLEFTMARGIN = 45;
				 	gTEXTINCIPITRIGHTMARGIN = 200; 
				}
				else{
					gPageWidth = 535;
					gTPTOPOFFSET = 455;
					gINDEXTOPOFFSET = 350; 
					gTOCTOPOFFSET = 350;
					gPAGENUMBERTOP = 313;
					gTEXTINCIPITTOPOFFSET = 350;
					gTEXTINCIPITLEFTMARGIN = 45;
			 		gTEXTINCIPITRIGHTMARGIN = 195;  
				}
			}
			else{

				gRenderPixelRatio = 3.0;

				if (thePaperSize == "letter"){
					gPageWidth = 718;
					gTPTOPOFFSET = 330;
					gINDEXTOPOFFSET = 265; 
					gTOCTOPOFFSET = 265;
					gPAGENUMBERTOP = 232;
					gTEXTINCIPITTOPOFFSET = 265;
					gTEXTINCIPITLEFTMARGIN = 100;
				 	gTEXTINCIPITRIGHTMARGIN = 250; 
				}
				else{
					gPageWidth = 785;
					gTPTOPOFFSET = 350;
					gINDEXTOPOFFSET = 255; 
					gTOCTOPOFFSET = 255;
					gPAGENUMBERTOP = 232;
					gTEXTINCIPITTOPOFFSET = 255;
					gTEXTINCIPITLEFTMARGIN = 105;
			 		gTEXTINCIPITRIGHTMARGIN = 281; 
				}
			}

			setPDFFormat(theTuneLayout);

			var thePageNumber = args.result.configure_pagenumber;
			setPageNumbers(thePageNumber);

			var thePageNumberOnFirstPage = args.result.configure_pagenumberonfirstpage;
			if (thePageNumberOnFirstPage){
				setFirstPage("yes");
			}
			else{
				setFirstPage("no");
			}

			var theFontName = args.result.configure_fontname;
			gPDFFont = theFontName;

			var theFontStyle = args.result.configure_fontstyle;

			// Force Noto-Sans and Noto-Serif style to Normal
			if ((theFontName == "Noto-Sans") || (theFontName == "Noto-Serif")){

				theFontStyle = "Normal";

			}
			else
			// Remap Normal style to empty for Helvetica and Courier
			if (theFontStyle == "Normal"){

				theFontStyle = "";

			}
			else{

				// Remap Time Oblique style names
				switch (theFontName){
					
					case "Times":
						// Translate Times style description
						if(theFontStyle.toLowerCase() == "oblique"){
							theFontStyle = "Italic";
						}
						else
						if(theFontStyle.toLowerCase() == "boldoblique"){
							theFontStyle = "BoldItalic";
						}
						break;

					case "Helvetica":
					case "Courier":
						break;

				}
			
			}

			gPDFFontStyle = theFontStyle;

			SavePDFSettings();

			clearGetTuneByIndexCache();

			ExportPDF();				
		}

	});
}


//
// Browser-based PDF export with play links
//

//
// Inject the MIDI parameters into this tune
//
function BrowserPDFInjectInstruments(theTune){

	var progNumMelody = gPDFTunebookConfig.melody_instrument;

	var progNumBass = gPDFTunebookConfig.bass_instrument;

	var progNumChord = gPDFTunebookConfig.chord_instrument;

	// Special case for muting voices
	if (progNumMelody == 0){

		progNumMelody = "mute";

	}
	else{

		progNumMelody = progNumMelody - 1;

		if ((progNumMelody < 0) || (progNumMelody > MIDI_PATCH_COUNT)){

			progNumMelody = 0;

		}

	}

	// Special case for muting voices
	if (progNumBass == 0){

		progNumBass = "mute";

	}
	else{

		progNumBass = progNumBass - 1;

		if ((progNumBass < 0) || (progNumBass > MIDI_PATCH_COUNT)){

			progNumBass = 0;

		}

	}

	// Special case for muting voices
	if (progNumChord == 0){

		progNumChord = "mute";

	}
	else{

		progNumChord = progNumChord - 1;

		if ((progNumChord < 0) || (progNumChord > MIDI_PATCH_COUNT)){

			progNumChord = 0;

		}

	}

	var volBass = gPDFTunebookConfig.bass_volume;

	var volChord = gPDFTunebookConfig.chord_volume;

    // Inject soundfont
    switch (gPDFTunebookConfig.sound_font){

        case "fluid":
            theTune = InjectStringBelowTuneHeaderConditional(theTune, "%abcjs_soundfont fluid");
            break;
        case "musyng":
            theTune = InjectStringBelowTuneHeaderConditional(theTune, "%abcjs_soundfont musyng");
            break;
        case "fatboy":
            theTune = InjectStringBelowTuneHeaderConditional(theTune, "%abcjs_soundfont fatboy");
            break;
        case "canvas":
            theTune = InjectStringBelowTuneHeaderConditional(theTune, "%abcjs_soundfont canvas");
            break;
        case "mscore":
            theTune = InjectStringBelowTuneHeaderConditional(theTune, "%abcjs_soundfont mscore");
            break;
        case "arachno":
            theTune = InjectStringBelowTuneHeaderConditional(theTune, "%abcjs_soundfont arachno");
            break;
        case "fluidhq":
            theTune = InjectStringBelowTuneHeaderConditional(theTune, "%abcjs_soundfont fluidhq");
            break;
        default:
            theTune = InjectStringBelowTuneHeaderConditional(theTune, "%abcjs_soundfont fluid");
            break;
    }

    // Inject instrument
    // Offset by one to deal with mute instrument at offset zero
    theTune = InjectStringBelowTuneHeaderConditional(theTune, "%%MIDI program "+progNumMelody);
 
    theTune = InjectStringBelowTuneHeaderConditional(theTune, "%%MIDI bassprog "+progNumBass);
    
    theTune = InjectStringBelowTuneHeaderConditional(theTune, "%%MIDI chordprog "+progNumChord);
   
    // Inject bass volume
    theTune = InjectStringBelowTuneHeaderConditional(theTune, "%%MIDI bassvol "+volBass);

    // Inject chord volume
    theTune = InjectStringBelowTuneHeaderConditional(theTune, "%%MIDI chordvol "+volChord);

    // Inject play link request for tune PDF export
    theTune = InjectStringBelowTuneHeaderConditional(theTune, "%add_all_playback_links");
    
    // Seeing extra linefeeds after the inject
    theTune = theTune.replace("\n\n","");

    return(theTune);

}
function Do_Browser_PDF_Export(){

	// If currently rendering PDF, exit immediately
	if (gRenderingPDF) {
		return;
	}

	// Find the Cancel button

	var theCancelButtons = document.getElementsByClassName("modal_flat_cancel");

	// Find the button that says "OK" to use to close the dialog when changing UI settings
	var theCancelButton = null;
	
	for (var i=0;i<theCancelButtons.length;++i){

		theCancelButton = theCancelButtons[i];

		if (theCancelButton.innerText == "Cancel"){

			break;

		}
	}

	if (theCancelButton){
		theCancelButton.click();
	}
	else{
		return;
	}

	// Keep track of use of the native PDF exporter
	sendGoogleAnalytics("export","PrintToPDF");

	// sound_font was added later, make sure the field is present
	if ((!gPDFTunebookConfig.sound_font) || (gPDFTunebookConfig.sound_font == "")){
		gPDFTunebookConfig.sound_font = "fluid";
	}

	// bass_instrument was added later, make sure the field is present
	if ((!gPDFTunebookConfig.bass_instrument) || (gPDFTunebookConfig.bass_instrument == "")){
		gPDFTunebookConfig.bass_instrument = 1;
	}

	// bass and chord volume was added later, make sure the field is present
	if ((!gPDFTunebookConfig.bass_volume) || (gPDFTunebookConfig.bass_volume == "")){
		gPDFTunebookConfig.bass_volume = "64";
	}

	if ((!gPDFTunebookConfig.chord_volume) || (gPDFTunebookConfig.chord_volume == "")){
		gPDFTunebookConfig.chord_volume = "64";
	}

	var midi_program_list = [];

  	for (var i=0;i<=MIDI_PATCH_COUNT;++i){
  		midi_program_list.push({name: "  "+ generalMIDISoundNames[i], id: i });
  	}

 	const sound_font_options = [
	    { name: "  Fluid", id: "fluid" },
	    { name: "  Musyng Kite", id: "musyng" },
	    { name: "  FatBoy", id: "fatboy" },
 	    { name: "  Canvas", id: "canvas" },
 	    { name: "  MScore", id: "mscore" },
 	    { name: "  Arachno", id: "arachno" },
 	    { name: "  FluidHQ", id: "fluidhq"}
 	];

  	for (var i=0;i<=MIDI_PATCH_COUNT;++i){
  		midi_program_list.push({name: "  "+ generalMIDISoundNames[i], id: i });
  	}

	var form = [
	  {html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;margin-bottom:36px">Browser Native Print-to-PDF with Play Links&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#browser_print_to_pdf" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},  
      {html: '<p style="margin-top:10px;margin-bottom:30px;font-size:12pt;line-height:18pt;font-family:helvetica">Clicking "Export" will use the browser\'s native PDF exporter to export a PDF with play links on each tune using the playback instruments and volumes selected below:</p>'},  
	  {name: "Soundfont for playback links:", id: "sound_font", type:"select", options:sound_font_options, cssClass:"configure_nativepdftunebook_midi_program_select"},
	  {name: "Melody instrument for playback links:", id: "melody_instrument", type:"select", options:midi_program_list, cssClass:"configure_nativepdftunebook_midi_program_select"},
	  {name: "Bass instrument for playback links:", id: "bass_instrument", type:"select", options:midi_program_list, cssClass:"configure_nativepdftunebook_midi_program_select"},
	  {name: "Bass volume (0-127):", id: "bass_volume", type:"number", cssClass:"configure_nativepdftunebook_form_text"},
	  {name: "Chord instrument for playback links:", id: "chord_instrument", type:"select", options:midi_program_list, cssClass:"configure_nativepdftunebook_midi_program_select"},
	  {name: "Chord volume (0-127):", id: "chord_volume", type:"number", cssClass:"configure_nativepdftunebook_form_text"},
	];

	const modal = DayPilot.Modal.form(form, gPDFTunebookConfig, { theme: "modal_flat", top: 100, width: 690, scrollWithPage: (AllowDialogsToScroll()), okText: "Export", autoFocus: false } ).then(function(args){
	
		if (!args.canceled){

			gPDFTunebookConfig.sound_font = args.result.sound_font;

			// Melody Instrument
			gPDFTunebookConfig.melody_instrument = args.result.melody_instrument;

			// Bass Instrument
			gPDFTunebookConfig.bass_instrument = args.result.bass_instrument;

			// Bass volume
			gPDFTunebookConfig.bass_volume = args.result.bass_volume;

			// Chord Instrument
			gPDFTunebookConfig.chord_instrument = args.result.chord_instrument;

			// Chord volume
			gPDFTunebookConfig.chord_volume = args.result.chord_volume;

			// Save the settings
			SaveConfigurationSettings();

			setTimeout(function(){

				// Get all the tune Hyperlinks

				// Make sure there are tunes to convert
				var nTunes = CountTunes();

				if (nTunes == 0){
					return;
				}

				clearGetTuneByIndexCache();

				var theJSON = [];

				for (var i=0;i<nTunes;++i){

					var thisTune = getTuneByIndex(i);

					var title = GetTuneAudioDownloadName(thisTune,"");

					//debugger;

			        // If section header, strip the *
			        if (title.startsWith('*')) {
			            title = title.substring(1);
			        }

			        // Inject the playback instruments
            		thisTune = BrowserPDFInjectInstruments(thisTune);

            		thisTune = GetABCFileHeader() + thisTune;

					var theURL = FillUrlBoxWithAbcInLZW(thisTune,false);

					var titleURL = title.replaceAll(" ","_");
					titleURL = titleURL.replaceAll("#","^");

					theURL = theURL.replaceAll("&","&amp;");
					theURL+="&amp;name="+titleURL+"&amp;play=1";

					// For testing
					//theURL = theURL.replace("https://michaeleskin.com/abctools/abctools.html","https://michaeleskin.com/abctools2/abctools.html");

					//console.log("theURL: "+theURL);
					
					theJSON.push({Name:title,URL:theURL});

				}

				for (var i=0;i<nTunes;++i){

					var div = document.getElementById('notation'+i);

					// Find all SVG elements within the div
					var svgs = div.querySelectorAll('svg');

					var theSVG = svgs[0];
				    
				    if (theSVG) {

				        // Create the <a> element
				        const link = document.createElement('a');

				        link.href = theJSON[i].URL;

				        link.style.textDecoration = "none";
				        
				        // Insert the <a> before the textElement and move the textElement inside the <a>
				        theSVG.parentNode.insertBefore(link, theSVG);

				        link.appendChild(theSVG);
				    }

				}

				setTimeout(function(){

					window.print();

					// Clean up the injected links fromthe SVG
					setTimeout(function(){

						//debugger;

						clearGetTuneByIndexCache();

						for (var i=0;i<nTunes;++i){

							var div = document.getElementById('notation'+i);

						    // Find all <a> elements that contain a svg element inside
						    var links = div.querySelectorAll('a > svg');

						    //debugger;

						    links.forEach(theSVG => {

						    	//debugger;

						        var link = theSVG.parentNode;
						        
						        // Move the svg element outside the <a> tag (replace <a> with its content)
						        link.parentNode.insertBefore(theSVG, link);
						        
						        // Remove the <a> tag
						        link.remove();

						    });
						}

					},100);
					    
				},100);

			},100);
		};
	});
}

//
// Advanced controls dialog
//
//

// Add an ABC file, sample tune, or template
//
var gMoreABCToolsOKButton = null;

function Configure_AdvancedControlsDialog_UI(){

	//console.log("Configure_AdvancedControlsDialog_UI");

	var old_gFeaturesShowTablatures = gFeaturesShowTablatures;
	var old_gFeaturesShowExplorers = gFeaturesShowExplorers;
	var old_gFeaturesShowExport = gFeaturesShowExport;
	var old_gFeaturesShowBagpipeDrones = gFeaturesShowBagpipeDrones;

	// Setup initial values
	const theData = {
	  showtablatures: gFeaturesShowTablatures,
	  showexplorers: gFeaturesShowExplorers,
	  showexport: gFeaturesShowExport,
	  showbagpipedrones: gFeaturesShowBagpipeDrones
	};

	var form = [
	  {html: '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-left:15px;">More ABC Tools Feature Options</p>'},  
	  {name: "          Show Tablature Injectors", id: "showtablatures", type:"checkbox", cssClass:"configure_ui_options_form_text"},
	  {name: "          Show MIDI, Swing, Grace, Roll, and Reverb Explorers", id: "showexplorers", type:"checkbox", cssClass:"configure_ui_options_form_text"},
	];

	if (isDesktopBrowser()){
		form.push({name: "          Show Export All Tunes and Sort by Tag", id: "showexport", type:"checkbox", cssClass:"configure_ui_options_form_text"});
	}
	else{
		form.push({name: "          Show Sort by Tag", id: "showexport", type:"checkbox", cssClass:"configure_ui_options_form_text"});		
	}

	form.push({name: "          Show Transpose to Key and Inject Bagpipe Sounds", id: "showbagpipedrones", type:"checkbox", cssClass:"configure_ui_options_form_text"});

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 100, width: 500, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){
		
		if (!args.canceled){

			gFeaturesShowTablatures = args.result.showtablatures;

			gFeaturesShowExplorers = args.result.showexplorers;

			gFeaturesShowExport = args.result.showexport;

			gFeaturesShowBagpipeDrones = args.result.showbagpipedrones;

			// No change, just return;
			if ((gFeaturesShowTablatures == old_gFeaturesShowTablatures) && 
				(gFeaturesShowExplorers == old_gFeaturesShowExplorers) && 
				(gFeaturesShowExport == old_gFeaturesShowExport) &&
				(gFeaturesShowBagpipeDrones == old_gFeaturesShowBagpipeDrones)
				){
				
				//console.log("Configure_AdvancedControlsDialog_UI - No change in settings");

				return;

			}

			// Save the settings
			SaveConfigurationSettings();

			// Close the ABC tools dialog
			gMoreABCToolsOKButton.click();

			// And relaunch it after a short delay
			setTimeout(function(){

				AdvancedControlsDialog();

			},250);
		}

	});
}

// Find the OK button for the options dialog use
function IdleMoreABCTools(){

	// Find the OK button
	var theOKButtons = document.getElementsByClassName("modal_flat_ok");

	// Find the button that says "OK" to use to close the dialog when changing UI settings
	var theOKButton = null;

	for (var i=0;i<theOKButtons.length;++i){

		theOKButton = theOKButtons[i];

		if (theOKButton.innerText == "OK"){

			//console.log("Found OK button");
			gMoreABCToolsOKButton = theOKButton;

			break;

		}
	}
}

function AdvancedControlsDialog(){

	// Keep track of advanced controls dialog
	sendGoogleAnalytics("dialog","AdvancedControlsDialog");

	// Moving the advanced controls to their own dialog
	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">More ABC Tools&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#more_tools" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span><img id="moreabctoolssettings" class="moreabctoolssettings moresettingsbutton" src="img/settings.png" title="More ABC Tools Settings" onclick="Configure_AdvancedControlsDialog_UI();"</img></p>';
	modal_msg += '<div id="advanced-controls-dialog">';
	
	modal_msg  += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:22px;">Show/Hide ABC Features</p>'
	modal_msg  += '<p style="text-align:center;">'
	modal_msg  += '<input id="toggleannotations" class="advancedcontrolsdisabled btn btn-advancedcontrols" onclick="ToggleAnnotations(false)" type="button" value="Hide Annotations" title="Hides/Shows all common annotations in the ABC">';
	modal_msg  += 	'<input id="toggletext" class="advancedcontrolsdisabled btn btn-advancedcontrols" onclick="ToggleTextAnnotations(false)" type="button" value="Hide Text" title="Hides/Shows all text in the ABC">';
	modal_msg  += 	'<input id="togglechords" class="advancedcontrolsdisabled btn btn-advancedcontrols" onclick="ToggleChords(false)" type="button" value="Hide Chords" title="Hides/Shows all chords in the ABC">';
	modal_msg  += 	'<input id="toggletab" class="advancedcontrolsdisabled btn btn-advancedcontrols" onclick="ToggleTab(false)" type="button" value="Hide Injected Tab" title="Hides/Shows all injected tablature in the ABC">';
	modal_msg  += 	'<input id="toggleornaments" class="advancedcontrolsdisabled btn btn-advancedcontrols" onclick="ToggleOrnaments(false)" type="button" value="Hide Ornaments" title="Hides/Shows all ~ and {} style ornaments in the ABC">';
	modal_msg  += '</p>';
	
	modal_msg += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:22px;">Strip ABC Features</p>'
	modal_msg  += '<p style="text-align:center;">';
	modal_msg  += '<input id="stripannotations" class="advancedcontrolsdisabled btn btn-injectcontrols" onclick="ToggleAnnotations(true)" type="button" value="Strip Annotations" title="Strips all common annotations from the ABC">';
	modal_msg  += 	'<input id="striptext" class="advancedcontrolsdisabled btn btn-injectcontrols" onclick="ToggleTextAnnotations(true)" type="button" value="Strip Text" title="Strips all text from the ABC">';
	modal_msg  += 	'<input id="stripchords" class="advancedcontrolsdisabled btn btn-injectcontrols" onclick="ToggleChords(true)" type="button" value="Strip Chords" title="Strips all chords from the ABC">';
	modal_msg  += 	'<input id="striptab" class="advancedcontrolsdisabled btn btn-injectcontrols" onclick="ToggleTab(true)" type="button" value="Strip Injected Tab" title="Strips all injected tablature from the ABC">';
	modal_msg  += 	'<input id="stripornaments" class="advancedcontrolsdisabled btn btn-injectcontrols" onclick="ToggleOrnaments(true)" type="button" value="Strip Ornaments" title="Strips all injected ~ and {} style ornaments from the ABC">';
	modal_msg  += '</p>';
	modal_msg += '<p style="text-align:center;font-size:14pt;font-family:helvetica;margin-top:22px;">ABC Injection Features</p>'
	modal_msg  += '<p style="text-align:center;">'
	modal_msg  += '<input id="injecttunenumbers" class="advancedcontrols btn btn-injectcontrols-headers" onclick="TuneTitlesNumbersDialog()" type="button" value="Inject Tune Title Numbers" title="Opens a dialog where you can add or remove numbers on the tune titles">';	
	modal_msg  += '<input id="injectsectionheader" class="advancedcontrols btn btn-injectcontrols-headers" onclick="InjectSectionHeader()" type="button" value="Inject PDF Section Header" title="Injects a PDF section header placeholder tune at the cursor insertion point">';
	modal_msg  += '<input id="injectfontsettings" class="advancedcontrols btn btn-injectcontrols-headers" onclick="InjectFontSettings()" type="button" value="Inject Font Settings" title="Injects all ABC font directives at the top of the current or all tunes from the current font settings">'
	modal_msg  += '</p>';
	modal_msg  += '<p style="text-align:center;margin-top:22px;">';
	modal_msg  += '<input id="injectallmidiparams" class="advancedcontrols btn btn-injectcontrols-headers" onclick="InjectAllMIDIParams()" type="button" value="Inject MIDI Programs and Volumes" title="Injects MIDI Soundfont, Melody program, Bass program, Chord program, and volume annotations into one or all tunes">';
	modal_msg  += '<input id="injectmetronome" class="advancedcontrols btn btn-injectcontrols-headers" onclick="InjectMetronome()" type="button" value="Inject Metronome" title="Injects ABC for a metronome into one or all tunes">';
	modal_msg  += '<input id="injectclicktrackall" class="advancedcontrols btn btn-injectcontrols-headers" onclick="InjectRepeatsAndClickTrackAll()" type="button" value="Inject Repeats + Intros" title="Injects repeated copies of tunes and optional style-adaptive two-bar click intros into every tune">';	
	modal_msg  += '</p>';
	modal_msg  += '<p style="text-align:center;margin-top:22px;">';
	modal_msg  += '<input id="injectheaderstring" class="advancedcontrols btn btn-injectcontrols-headers" onclick="InjectHeaderString()" type="button" value="Inject ABC Header Text" title="Injects text at the top or bottom of the ABC header for one or all tunes">';	
	modal_msg  += '<input id="injectstaffwidth" class="advancedcontrols btn btn-injectcontrols-headers" onclick="InjectCustomStringedInstrumentTab()" type="button" value="Custom Stringed Instrument Tab" title="Injects a custom tablature description for stringed instruments">';
	modal_msg  += '<input id="injectlargeprint" class="advancedcontrols btn btn-injectcontrols-headers" onclick="NotationSpacingExplorer()" type="button" value="Notation Spacing Explorer" title="Find the right spacing and scale values for your notation">';
	modal_msg  += '</p>';

	// Showing tablature injectors?
	if (gFeaturesShowTablatures){
		modal_msg  += '<p style="text-align:center;margin-top:22px;">'
		modal_msg  += '<input id="injectharmonicatab" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectHarmonicaTab()" type="button" value="Inject Harmonica Tab" title="Injects 10-hole diatonic harmonica tablature into the ABC">';
		modal_msg  += '<input id="injectboxtab" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectBoxTablature()" type="button" value="Inject Irish Button Box Tab" title="Injects B/C or C#/D box tablature into the ABC">';
		modal_msg  += '<input id="injectanglotab" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectTablature_Anglo()" type="button" value="Inject Anglo Concertina Tab" title="Injects Anglo Concertina tablature into the ABC">';
		modal_msg  += '</p>';
		modal_msg  += '<p style="text-align:center;margin-top:22px;">'
		modal_msg  += '<input id="injectfiddlefingerings" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectTablature_Fiddle_Fingerings_Dialog()" type="button" value="Inject Fiddle Fingerings" title="Injects Fiddle fingerings tablature with either finger numbers or string names and finger numbers into the ABC">';
		modal_msg  += '<input id="injectmd" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectTablature_MD()" type="button" value="Inject Dulcimer Tab" title="Injects Mountain Dulcimer tablature into the ABC">';
		modal_msg  += '<input id="injectbambooflute" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectTablature_Bamboo_Flute()" type="button" value="Inject Bamboo Flute Tab" title="Injects Bamboo flute tablature into the ABC">';
		modal_msg  += '</p>';
		modal_msg  += '<p style="text-align:center;margin-top:22px;"><input id="ceoltastransform" style="margin-right:18px;" class="advancedcontrols btn btn-injectcontrols" onclick="DoCeoltasTransformDialog()" type="button" value="Comhaltas Transform" title="Brings up a dialog where you can transform the ABC to/from Comhaltas format"><input id="injectshapenotes" style="margin-right:18px;" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectTablature_ShapeNotes()" type="button" value="Inject Note Names/Shapes/Solfège" title="Injects note names (Pitch Names, Standard ABC, Comhaltas ABC), Shape Note shapes, or Solfège note names into the ABC"><input id="injectcustomtab" style="margin-right:18px;" class="advancedcontrols btn btn-injectcontrols" onclick="DoInjectCustomTab()" type="button" value="Inject Custom Tab" title="Injects custom tablature into the ABC"></p>';	
	}

	// Showing explorers?
	if (gFeaturesShowExplorers){
		modal_msg  += '<p style="text-align:center;margin-top:22px;"><input id="configure_instrument_explorer" class="configure_instrument_explorer button btn btn-instrumentexplorer" onclick="InstrumentExplorer();" type="button" value="MIDI Instrument Explorer" title="Brings up a tune player where you can experiment playing the current tune with different MIDI soundfonts and melody/chord instruments"><input id="configure_swing_explorer" class="btn btn-swingexplorer configure_swing_explorer " onclick="SwingExplorer()" type="button" value="Swing Explorer" title="Brings up a tune player where you can experiment with different swing factor settings"><input id="configure_grace_explorer" class="btn btn-graceexplorer configure_grace_explorer " onclick="GraceExplorer()" type="button" value="Grace Duration Explorer" title="Brings up a tune player where you can experiment with different grace note duration settings"><input id="configure_roll_explorer" class="btn btn-rollexplorer configure_roll_explorer " onclick="RollExplorer()" type="button" value="Roll Explorer" title="Brings up a tune player where you can experiment with different roll parameters"></p>';
	}

	// Showing export and explorers?
	if (gFeaturesShowExport && gFeaturesShowExplorers){
		modal_msg  += '<p style="text-align:center;margin-top:22px;"><input id="configure_reverb_explorer" class="btn btn-reverbexplorer configure_reverb_explorer " onclick="ReverbExplorer()" type="button" value="Reverb Explorer" title="Brings up a tune player where you can experiment with different reverb parameters"><input id="configure_batch_mp3_export" class="btn btn-batchmp3export configure_batch_mp3_export " onclick="ExportAll()" type="button" value="Export All Tunes" title="Exports all the tunes in the ABC text area as audio, image, MusicXML, and other formats"><input class="sortbutton btn btn-sortbutton" id="sortbutton" onclick="SortDialog()" type="button" value="Sort by Tag" title="Brings up the Sort by Specific Tag dialog"></p>';
	}
	else
	if ((!gFeaturesShowExport) && gFeaturesShowExplorers){
		modal_msg  += '<p style="text-align:center;margin-top:22px;"><input id="configure_reverb_explorer" class="btn btn-reverbexplorer configure_reverb_explorer " style="margin-right:0px" onclick="ReverbExplorer()" type="button" value="Reverb Explorer" title="Brings up a tune player where you can experiment with different reverb parameters"></p>';
	}
	else
	if (gFeaturesShowExport && (!gFeaturesShowExplorers)){
		modal_msg  += '<p style="text-align:center;margin-top:22px;"><input id="configure_batch_mp3_export" class="btn btn-batchmp3export configure_batch_mp3_export " onclick="ExportAll()" type="button" value="Export All Tunes" title="Exports all the tunes in the ABC text area as audio, image, MusicXML, and other formats"><input class="sortbutton btn btn-sortbutton" id="sortbutton" onclick="SortDialog()" type="button" value="Sort by Tag" title="Brings up the Sort by Specific Tag dialog"></p>';

	}

	// Showing only bagpipes drones/tranpose tools?
	if (gFeaturesShowBagpipeDrones){
		modal_msg  += '<p style="text-align:center;margin-top:22px;"><input class="transposetokey btn btn-transposetokey" id="transposetokey" onclick="TransposeToKeyDialog()" type="button" value="Transpose to Key" title="Transposes one or all the tunes to a specific key"><input id="injectbagpipedrones" class="advancedcontrols btn btn-injectcontrols" onclick="InjectBagpipeSounds()" type="button" value="Inject Bagpipe Sounds" title="Changes the melody sound to one of several bagpipe instruments and inject drones as a second voice of the tune(s)"></p>';
	}

	modal_msg += '</div>';

	var format = GetRadioValue("notenodertab");

	// Find the OK button for the settings dialog
	setTimeout(function(){

		IdleMoreABCTools();
	
	},25);
	
	setTimeout(function(){

		// Do an initial idle on the controls
		IdleAdvancedControls(true);

		// Idle the show tab names control
		IdleAllowShowTabNames();

	}, 50);


	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 20, width: 740,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){
					
		});

	// Change button label for export all for whistle

	var elem = document.getElementById("configure_batch_mp3_export");

	if (elem){
		// Hide the batch exporter button on mobile
		if (isMobileBrowser()){
			document.getElementById("configure_batch_mp3_export").style.display = "none";
		}
	}
}

//
// Advanced tool settings
// This is used for less-commonly access settings and options
//

// Reset the default roll parameter strings
function ResetRollDefaultParams(){

	$('[name="configure_roll2_default"]').val("0.95 0.8 1.0 0.75 0.9 1.0 0.75 1.0");
	$('[name="configure_roll3_default"]').val("1.45 0.6 1.0 0.75 0.9 1.0 0.75 1.0");

}

//
//  Read a custom reverb impulse .wav file
//
// Function to read a .wav file and convert it to an ArrayBuffer
function readWavFile(file) {

  return new Promise((resolve, reject) => {
    
    const reader = new FileReader();
    
    reader.onload = () => {
      resolve(reader.result);
    };
    
    reader.onerror = reject;
    
    reader.readAsArrayBuffer(file);

  });
}

//
// Add a new ABC tune template, song template, or PDF tunebook annotation template to the current ABC
//
function idleAdvancedSettings(){

	if (gIsIOS){

		document.getElementById("loadimpulsebutton").removeAttribute("accept");
	
	}	

	//
	// Setup the file import control
	//
	document.getElementById("loadimpulsebutton").onchange = async () => {

		let fileElement = document.getElementById("loadimpulsebutton");

		// check if user had selected a file
		if (fileElement.files.length === 0) {

			var thePrompt = "Please select an custom reverb impulse .wav file";
			
			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;

		}

		let file = fileElement.files[0];

		if (file) {

			try {

				const theBuffer = await readWavFile(file);

				// Save the impulse in the database
				saveImpulse_DB("custom", theBuffer);

				var thePrompt = "Custom reverb impulse file load successful!";

				// Clear any old custom impulse in the cache
			   	var newKernels = [];

				var nKernels = gReverbKernels.length;

				var i;

				// Replace any existing custom kernel
				for (i=0;i<nKernels;++i){

					var thisKernel = gReverbKernels[i]

					if (thisKernel.style != "custom"){

					 	newKernels.push(thisKernel);

					}
				}

				gReverbKernels = newKernels;
				
				// Center the string in the prompt
				thePrompt = makeCenteredPromptString(thePrompt);

				DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 300, scrollWithPage: (AllowDialogsToScroll()) });

			    // Force a reload of the reverb convolution kernels
				gSoundsCacheABCJS = {};

			} catch (error) {

			 	//console.log('Error reading reverb impulse .wav file:', error);

				var thePrompt = "There was an issue reading the custom reverb impulse file.";
				
				// Center the string in the prompt
				thePrompt = makeCenteredPromptString(thePrompt);

				DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 300, scrollWithPage: (AllowDialogsToScroll()) });

				return;

			}
		}

		// Reset file selectors
		fileElement.value = "";

	}

}

//
// Show some info on the browser
//
function ShowBrowserInfo(){

   	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica">Browser Information</p>';
    modal_msg  += '<p style="font-size:12pt;line-height:20pt;font-family:helvetica">navigator.userAgent: '+navigator.userAgent+'</p>'; 
    modal_msg  += '<p style="font-size:12pt;line-height:20pt;font-family:helvetica">navigator.platform: '+navigator.platform+'</p>'; 
    modal_msg  += '<p style="font-size:12pt;line-height:20pt;font-family:helvetica">navigator.vendor: '+navigator.vendor+'</p>'; 
    modal_msg  += '<p style="font-size:12pt;line-height:20pt;font-family:helvetica">navigator.maxTouchPoints: '+navigator.maxTouchPoints+'</p>'; 
    modal_msg  += '<p style="font-size:12pt;line-height:20pt;font-family:helvetica">gIsIOS: '+gIsIOS+'</p>'; 
    modal_msg  += '<p style="font-size:12pt;line-height:20pt;font-family:helvetica">gIsIPhone: '+gIsIPhone+'</p>'; 
    modal_msg  += '<p style="font-size:12pt;line-height:20pt;font-family:helvetica">gIsIPad: '+gIsIPad+'</p>'; 
    modal_msg  += '<p style="font-size:12pt;line-height:20pt;font-family:helvetica">gIsAndroid: '+gIsAndroid+'</p>'; 
    modal_msg  += '<p style="font-size:12pt;line-height:20pt;font-family:helvetica">localStorage available: '+gLocalStorageAvailable+'</p>'; 


	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 100, scrollWithPage: (AllowDialogsToScroll()) });

}

function AdvancedSettings(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","AdvancedSettings");

	var oldHighlightColor = gRawHighlightColor;

	var oldDiagnostics = gShowDiagnostics;

	// Setup initial values
	const theData = {
  	configure_fullscreen_scaling: gFullScreenScaling,
		configure_highlight_color: gRawHighlightColor,
		configure_player_status_on_left: gPlayerStatusOnLeft,
		configure_large_player_controls: gLargePlayerControls,
		configure_autoscrollplayer: gAutoscrollPlayer,
		configure_autoscrollsmooth: gAutoscrollSmooth,
		configure_autoscrolltarget: gAutoscrollTarget,
		configure_trainer_touch_controls: gTrainerTouchControls,
		configure_mp3_bitrate: gMP3Bitrate,
		configure_export_delayms: gBatchExportDelayMS,
		configure_mp3export_delayms: gBatchMP3ExportDelayMS,
		configure_roll2_default: gRoll2DefaultParams,
		configure_roll3_default: gRoll3DefaultParams,
		configure_DisableRendering: gDisableNotationRendering,
		configure_disable_selected_play:gDisableSelectedPlay,
		configure_show_diagnostics: gShowDiagnostics,
		configure_reverb: gReverbString,
		configure_tinyurl: gTinyURLAPIKeyOverride,
		configure_confirm_clear: gConfirmClear,
		configure_show_render_progress: gShowABCJSRenderProgress,
		configure_clean_smartquotes: gCleanSmartQuotes,
	};

	var form = [
		{html: '<p style="text-align:center;font-size:16pt;font-family:helvetica;margin-bottom:24px;margin-left:15px;">Advanced Settings&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#advanced_settings" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
		{html: '<p style="font-size:12pt;line-height:12px;font-family:helvetica;"><strong>Only change these values if you know what you are doing!</strong></p>'},
	];

	form = form.concat([
		{name: "          Always confirm before deletion when clicking Clear", id: "configure_confirm_clear", type:"checkbox", cssClass:"advanced_settings2_form_text_checkbox"},
		{name: "          Always replace curly single and double quotes with standard versions on Open or Paste", id: "configure_clean_smartquotes", type:"checkbox", cssClass:"advanced_settings2_form_text_checkbox"},
		{name: "          Show ABC syntax validation panel", id: "configure_show_diagnostics", type:"checkbox", cssClass:"advanced_settings2_form_text_checkbox"},
		{name: "          Show tune rendering progress in Javascript console", id: "configure_show_render_progress", type:"checkbox", cssClass:"advanced_settings2_form_text_checkbox"},
		{name: "    Disable abcjs notation rendering", id: "configure_DisableRendering", type:"checkbox", cssClass:"advanced_settings2_form_text_checkbox"},
		{name: "    Autoscroll player when playing", id: "configure_autoscrollplayer", type:"checkbox", cssClass:"advanced_settings2_form_text_checkbox"},
		{name: "    Smooth autoscroll when playing (when Autoscroll player is enabled)", id: "configure_autoscrollsmooth", type:"checkbox", cssClass:"advanced_settings2_form_text_checkbox"},
		{name: "    Player autoscroll vertical position target percentage (default is 66):", id: "configure_autoscrolltarget", type:"text", cssClass:"advanced_settings2_form_text"},
		{name: "    Player/Tune Trainer always plays full tune even if there is a selection region", id: "configure_disable_selected_play", type:"checkbox", cssClass:"advanced_settings2_form_text_checkbox"},
		{name: "    Player uses large controls (easier to touch on phone/tablet)", id: "configure_large_player_controls", type:"checkbox", cssClass:"advanced_settings2_form_text_checkbox"},
		{name: "    Player tunebook navigation controls on left side", id: "configure_player_status_on_left", type:"checkbox", cssClass:"advanced_settings2_form_text_checkbox"},
		{name: "    Player/Tune Trainer uses label L/R side click to decrement/increment values", id: "configure_trainer_touch_controls", type:"checkbox", cssClass:"advanced_settings2_form_text_checkbox"},
  	{name: "Full screen tune display width scaling (percentage) (default is 50):", id: "configure_fullscreen_scaling", type:"number", cssClass:"advanced_settings2_form_text"},
	]);

	// Only show batch export delays on desktop
	if (isPureDesktopBrowser()){
		form = form.concat([
			{name: "Highlighting color (HTML format) (default is #F00000):", id: "configure_highlight_color", type:"text", cssClass:"advanced_settings2_form_text"}
		]);
	}
	
	form = form.concat([
		{name: "Default %reverb annotation (blank = no reverb):", id: "configure_reverb", type:"text", cssClass:"advanced_settings2_reverb_text"},
		{name: "MP3 audio export bitrate (kbit/sec) (default is 224):", id: "configure_mp3_bitrate", type:"number", cssClass:"advanced_settings2_form_text"},
	]);

	// Only show batch export delays on desktop 
	if (isPureDesktopBrowser()){ 
		form = form.concat([
			{name: "Image/ABC Batch Export Delay in milliseconds (default is 200):", id: "configure_export_delayms", type:"text", cssClass:"advanced_settings2_form_text"},
			{name: "MP3 Batch Export Delay in milliseconds (default is 250):", id: "configure_mp3export_delayms", type:"text", cssClass:"advanced_settings2_form_text"},
		]);
	}

	form = form.concat([
		{name: "Default %roll_2_params:", id: "configure_roll2_default", type:"text", cssClass:"advanced_settings2_roll_text"},
		{name: "Default %roll_3_params:", id: "configure_roll3_default", type:"text", cssClass:"advanced_settings2_roll_text"},
		{name: "Private TinyURL API Token:", id: "configure_tinyurl", type:"text", cssClass:"advanced_settings2_tinyurl_text"},

		{html: '<p style="text-align:center;margin-top:18px;margin-bottom:6px"><input id="reset_roll_parameters" class="btn btn-subdialog reset_roll_parameters" onclick="ResetRollDefaultParams()" type="button" value="Reset Roll Parameter Strings to Defaults" title="Resets the roll parameter strings to known good default values"><label class="loadimpulsebutton btn btn-subdialog " for="loadimpulsebutton" title="Load a custom reverb convolution impulse .wav file">Load Custom Reverb Impulse <input type="file" id="loadimpulsebutton"  accept=".wav,.WAV" hidden/></label><input id="resetsettings" class="btn btn-resetsettings resetsettings" onclick="ResetSettingsDialog()" type="button" value="Reset Settings" title="Opens a dialog where you can reset all tool settings to the default and/or clear the instrument notes, reverb settings, and tune search engine collection databases"></p><p style="font-size:10pt;line-height:14pt;font-family:helvetica;color:grey;position:absolute;left:20px;bottom:30px;margin:0px;cursor:pointer;" onclick="ShowBrowserInfo();" title="Click to show browser information">Click to show browser info<br/>Installed version: '+gVersionNumber+'</p>'},
	]);

	// Set up the reverb impulse load callback
	setTimeout(function(){

		idleAdvancedSettings();

	}, 25);

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 10, width: 800, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			// Confirm clear
			gConfirmClear = args.result.configure_confirm_clear;

			// Clean smart quotes
			gCleanSmartQuotes = args.result.configure_clean_smartquotes;

			// Show/hide the diagnostics panel
			gShowDiagnostics = args.result.configure_show_diagnostics;
			updateDiagnostics();

			// Disable rendering? (not persistent)
			gDisableNotationRendering = args.result.configure_DisableRendering;

			if (gDisableNotationRendering){

				// Keep track of dialogs
				sendGoogleAnalytics("action","RenderDisable");

				// Clear the div
				var notationHolder = gTheNotation;
				notationHolder.innerHTML = "";

				// Disable raw mode
				var elem = document.getElementById("rawmodebutton");
				
				gRawLastIndex = -1;

				elem.value = "Highlighting";

				elem.classList.add("btn-rawmode-off");
				elem.classList.remove("btn-rawmode-on");
				
				gTheABC.style.backgroundColor = "white";

				gRawMode = false;

			}

			// Show render progress in the Javascript console? (not persistent)
			gShowABCJSRenderProgress = args.result.configure_show_render_progress;

			// Sanity check the full screen scaling setting
			gFullScreenScaling = args.result.configure_fullscreen_scaling;

			gFullScreenScaling = gFullScreenScaling.replace("%","");
			
			if (isNaN(parseInt(gFullScreenScaling))){
				gFullScreenScaling = 50;
			}
			else{
				gFullScreenScaling = parseInt(gFullScreenScaling);
			}

			if (gFullScreenScaling < 25){
				gFullScreenScaling = 25;

			}

			if (gFullScreenScaling > 100){
				gFullScreenScaling = 100;
			}

			gPlayerStatusOnLeft = args.result.configure_player_status_on_left;

			gLargePlayerControls = args.result.configure_large_player_controls;

			gAutoscrollPlayer = args.result.configure_autoscrollplayer;

			gAutoscrollSmooth = args.result.configure_autoscrollsmooth;

			var val = parseFloat(args.result.configure_autoscrolltarget);
			if (!isNaN(val)){
				if ((gAutoscrollTarget >= 0) && (gAutoscrollTarget <= 100)){
					gAutoscrollTarget = val;
				}
			}

			gTrainerTouchControls = args.result.configure_trainer_touch_controls;

			gDisableSelectedPlay = args.result.configure_disable_selected_play;

			gReverbString = args.result.configure_reverb;

			var testMP3Bitrate = parseInt(args.result.configure_mp3_bitrate);
		
			if (!isNaN(testMP3Bitrate)){

				gMP3Bitrate = testMP3Bitrate;

				if (gMP3Bitrate < 96){
					gMP3Bitrate = 96;
				}

				if (gMP3Bitrate > 384){
					gMP3Bitrate = 384;
				}
			}

			var the_roll2_raw = args.result.configure_roll2_default;
			the_roll2_raw = the_roll2_raw.trim();

			var the_roll3_raw = args.result.configure_roll3_default;
			the_roll3_raw = the_roll3_raw.trim();

			// Validate the roll values
			var roll2 = validate_roll_2_params(the_roll2_raw,false);
			var roll3 = validate_roll_3_params(the_roll3_raw,false);

			if (!(roll2 && roll3)){
				
				// Show issue with the roll parameters
				RollParameterIssueAlert(

					function(){
						setTimeout(function(){
							AdvancedSettings();
						},250);
					}
				);

			}
			else{	

				// Set the new roll parameters
				roll2 = validate_roll_2_params(the_roll2_raw,true);
				roll3 = validate_roll_3_params(the_roll3_raw,true);

				// And save the default roll parameter string
				gRoll2DefaultParams = the_roll2_raw;
				gRoll3DefaultParams = the_roll3_raw;

			}

			// Save the TinyURL API key
			var theTinyURLKey = args.result.configure_tinyurl;

			if (theTinyURLKey){
				theTinyURLKey = theTinyURLKey.trim();
			}
			
			if (theTinyURLKey && (theTinyURLKey != "")){

				if (!gDoTinyURLAPIKeyOverride){
					sendGoogleAnalytics("sharing","custom_tinyurl_token_entered");
				}

				gTinyURLAPIKeyOverride = theTinyURLKey;
				gDoTinyURLAPIKeyOverride = true;
			}
			else{
				gTinyURLAPIKeyOverride = "";
				gDoTinyURLAPIKeyOverride = false;
			}

			IdleAllowShowTabNames();

			if (isPureDesktopBrowser()){

				gRawHighlightColor = args.result.configure_highlight_color;

				val = args.result.configure_export_delayms;

				val = parseInt(val);

				if (!isNaN(val)){
					if (val >= 0){
						gBatchExportDelayMS = val;
					}
				}

				val = args.result.configure_mp3export_delayms;

				val = parseInt(val);

				if (!isNaN(val)){
					if (val >= 0){
						gBatchMP3ExportDelayMS = val;
					}
				}

				// Do we need to re-render?
				if (gRawMode && (gRawHighlightColor != oldHighlightColor)){
					
					RenderAsync(true,null);
					
				}
			}

			// Need to adjust the editor size on diagnostics show/hide
			if (oldDiagnostics != gShowDiagnostics){
				HandleWindowResize();
			}

			// Save the settings, in case they were initialized
			SaveConfigurationSettings();
		}

	});

}

//
// Configure default instruments and volumes for the player
//
function ConfigurePlayerSettings(player_callback) {

	// Keep track of advanced controls dialog
	sendGoogleAnalytics("dialog","ConfigurePlayerSettings");

    var midi_program_list = [];

  	for (var i=0;i<=MIDI_PATCH_COUNT;++i){
  		midi_program_list.push({name: "  "+ generalMIDISoundNames[i], id: i });
  	}

	var theOldSoundFont = gDefaultSoundFont;

	var theMelodyProgram = gTheMelodyProgram;

	var selectedMelodyProgram;
	if (theMelodyProgram == "mute"){
		selectedMelodyProgram = 0;
	}
	else{
		selectedMelodyProgram = parseInt(theMelodyProgram)+1;
	}

	var theChordProgram = gTheChordProgram;

	var selectedChordProgram;
	if (theChordProgram == "mute"){
		selectedChordProgram = 0;
	}
	else{
		selectedChordProgram = parseInt(theChordProgram)+1;
	}

	var theBassProgram = gTheBassProgram;

	var selectedBassProgram;
	if (theBassProgram == "mute"){
		selectedBassProgram = 0;
	}
	else{
		selectedBassProgram = parseInt(theBassProgram)+1;
	}

	var theBassVolume = gTheBassVolume;

	var theChordVolume = gTheChordVolume;

	var bOverridePlayMIDIParams = gOverridePlayMIDIParams;

	// Setup initial values
	const theData = {
		configure_soundfont: gDefaultSoundFont,
		configure_melody_program: selectedMelodyProgram,
		configure_bass_program: selectedBassProgram,
		configure_chord_program: selectedChordProgram,
		configure_bass_volume: theBassVolume,
		configure_chord_volume: theChordVolume,
		configure_override_play_midi_params: bOverridePlayMIDIParams,
		configure_player_scaling: gPlayerScaling,
		configure_always_play_alternate_chords:gPlayAlternateChordsOverride,
    configure_metronome_high_sound:gMetronomeHighSound,
    configure_metronome_low_sound:gMetronomeLowSound,
    configure_metronome_high_volume:gMetronomeHighVolume,
    configure_metronome_low_volume:gMetronomeLowVolume,
    configure_wide_playback_cursor:gUseWidePlayCursor
	};

 	const sound_font_options = [
	    { name: "  Fluid", id: "https://paulrosen.github.io/midi-js-soundfonts/FluidR3_GM/" },
	    { name: "  Musyng Kite", id: "https://paulrosen.github.io/midi-js-soundfonts/MusyngKite/" },
	    { name: "  FatBoy", id: "https://michaeleskin.com/abctools/soundfonts/fatboy_4/" },
 	    { name: "  Canvas", id: "https://michaeleskin.com/abctools/soundfonts/canvas/" },
 	    { name: "  MScore", id: "https://michaeleskin.com/abctools/soundfonts/mscore_2/" },
 	    { name: "  Arachno", id: "https://michaeleskin.com/abctools/soundfonts/arachno_3/" },
  	  { name: "  FluidHQ", id: "https://michaeleskin.com/abctools/soundfonts/fluidhq_1/" },
	];

  const metronome_sound_options = [
      { name: " Acoustic Bass Drum", id: "35"},
      { name: " Bass Drum", id: "36"}, 
      { name: " Side Stick", id: "37"}, 
      { name: " Acoustic Snare", id: "38"}, 
      { name: " Hand Clap", id: "39"}, 
      { name: " Electric Snare", id: "40"}, 
      { name: " Low Floor Tom", id: "41"}, 
      { name: " Closed Hi-Hat", id: "42"}, 
      { name: " High Floor Tom", id: "43"}, 
      { name: " Pedal Hi-Hat", id: "44"}, 
      { name: " Low Tom", id: "45"},
      { name: " Open Hi-Hat", id: "46"}, 
      { name: " Low Mid Tom", id: "47"}, 
      { name: " High Mid Tom", id: "48"}, 
      { name: " Crash Cymbal 1", id: "49"}, 
      { name: " High Tom", id: "50"},
      { name: " Ride Cymbal 1", id: "51"}, 
      { name: " Chinese Cymbal", id: "52"}, 
      { name: " Ride Bell", id: "53"}, 
      { name: " Tambourine", id: "54"}, 
      { name: " Splash Cymbal", id: "55"}, 
      { name: " Cowbell", id: "56"}, 
      { name: " Crash Cymbal 2", id: "57"}, 
      { name: " Vibraslap", id: "58"},
      { name: " Ride Cymbal 2", id: "59"},
      { name: " High Bongo", id: "60"},
      { name: " Low Bongo", id: "61"},
      { name: " Mute High Conga", id: "62"},
      { name: " Open High Conga", id: "63"},
      { name: " Low Conga", id: "64"},
      { name: " High Timbale", id: "65"},
      { name: " Low Timbale", id: "66"},
      { name: " High Agogo", id: "67"},
      { name: " Low Agogo", id: "68"},
      { name: " Cabasa", id: "69"},
      { name: " Maracas", id: "70"},
      { name: " Short Whistle", id: "71"},
      { name: " Long Whistle", id: "72"},
      { name: " Short Guiro", id: "73"},
      { name: " Long Guiro", id: "74"},
      { name: " Claves", id: "75"},
      { name: " High Wood Block", id: "76"},
      { name: " Low Wood Block", id: "77"},
      { name: " Mute Cuica", id: "78"},
      { name: " Open Cuica", id: "79"},
      { name: " Mute Triangle", id: "80"},
      { name: " Open Triangle", id: "81"}
    ]

  	var form = [
		{html: '<p style="text-align:center;font-size:16pt;font-family:helvetica;margin-left:15px;">Player Instrument Settings&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#default_player_settings" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
		{html: '<p class="configure_settings_form_text_fs">The following values are used as the instrument and volume defaults if not already specified in a tune:</p>'},
		{name: "Default MIDI Soundfont:", id: "configure_soundfont", type:"select", options:sound_font_options, cssClass:"configure_settings_select_fs"}, 
		{name: "Default Melody MIDI program:", id: "configure_melody_program", type:"select", options:midi_program_list, cssClass:"configure_midi_program_form_select"},
		{name: "Default Bass MIDI program:", id: "configure_bass_program", type:"select", options:midi_program_list, cssClass:"configure_midi_program_form_select"},
		{name: "Default Chords MIDI program:", id: "configure_chord_program", type:"select", options:midi_program_list, cssClass:"configure_midi_program_form_select"},
		{name: "Default Bass MIDI volume (0-127):", id: "configure_bass_volume", type:"number", cssClass:"configure_settings_form_text_fs"},
		{name: "Default Chords MIDI volume (0-127):", id: "configure_chord_volume", type:"number", cssClass:"configure_settings_form_text_fs"},
		{html: '<p class="configure_settings_form_text_fs">Check the following box if you want the above values to override any instruments or volumes already specified in a tune when playing.</p>'},
		{name: "            Override all MIDI programs and volumes in the ABC with the defaults when playing tunes", id: "configure_override_play_midi_params", type:"checkbox", cssClass:"configure_settings_form_text_checkbox_fs"},
		{name: "            Always play alternate chords wrapped in parenthesis (examples:  \"(Gm7)\"  \"G(Dm7)\")", id: "configure_always_play_alternate_chords", type:"checkbox", cssClass:"configure_settings_form_text_checkbox_fs2"},
    {name: "Metronome first beat sound (default is High Wood Block):  ", id: "configure_metronome_high_sound", type:"select", options:metronome_sound_options, cssClass:"configure_midi_program_form_select"}, 
    {name: "Metronome first beat volume (0-127, default is 64):", id: "configure_metronome_high_volume", type:"text", cssClass:"configure_settings_form_text_fs"},
    {name: "Metromone other beats sound (default is Low Wood Block):", id: "configure_metronome_low_sound", type:"select", options:metronome_sound_options, cssClass:"configure_midi_program_form_select"}, 
    {name: "Metronome other beats volume (0-127, default is 48):", id: "configure_metronome_low_volume", type:"text", cssClass:"configure_settings_form_text_fs"},
	];
	
	if (player_callback){
  		form = form.concat([
		  		{name: "Player screen width (percentage) (min is 50, max is 100):", id: "configure_player_scaling", type:"number", cssClass:"configure_settings_form_text_fs"},
		  	]);
	}

  form = form.concat([
      {name: "            Player uses wide note highlight cursor", id: "configure_wide_playback_cursor", type:"checkbox", cssClass:"configure_settings_form_text_checkbox_fs"},
      ]);

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 50, width: 790, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			// Do rescale from player
			if (player_callback){

				// Sanity check the player scaling
				gPlayerScaling = args.result.configure_player_scaling;

				gPlayerScaling = gPlayerScaling.replace("%","");
				
				if (isNaN(parseInt(gPlayerScaling))){
					if (gIsIPad){
						gPlayerScaling = 60;
					}
					else{
						gPlayerScaling = 50;
					}
				}
				else{
					gPlayerScaling = parseInt(gPlayerScaling);
				}

				if (gPlayerScaling < 50){
					gPlayerScaling = 50;

				}

				if (gPlayerScaling > 100){
					gPlayerScaling = 100;
				}
			}

			gDefaultSoundFont = args.result.configure_soundfont;

			if (theOldSoundFont != gDefaultSoundFont ){

				// Reset the current soundfont to the selected font
				gTheActiveSoundFont = gDefaultSoundFont;

				// Reset the abcjs sounds cache
				gSoundsCacheABCJS = {};

			}

			gTheMelodyProgram = args.result.configure_melody_program;
			
			gTheBassProgram = args.result.configure_bass_program;

			gTheChordProgram = args.result.configure_chord_program;

			if (gTheMelodyProgram == 0){
				gTheMelodyProgram = "mute";
			}
			else{
				gTheMelodyProgram--;
			}

			if (gTheMelodyProgram != "mute"){

				// Sanity check the values
				if (isNaN(parseInt(gTheMelodyProgram))){
					gTheMelodyProgram = 0;
				}

				if (gTheMelodyProgram < 0){
					gTheMelodyProgram = 0;
				}

				if (gTheMelodyProgram > MIDI_PATCH_COUNT){
					gTheMelodyProgram = MIDI_PATCH_COUNT;
				}
			}

			if (gTheBassProgram == 0){
				gTheBassProgram = "mute";
			}
			else{
				gTheBassProgram--;
			}

			if (gTheBassProgram != "mute"){

				if (isNaN(parseInt(gTheBassProgram))){
					gTheBassProgram = 0;
				}

				if (gTheBassProgram < 0){
					gTheBassProgram = 0;
				}

				if (gTheBassProgram > MIDI_PATCH_COUNT){
					gTheBassProgram = MIDI_PATCH_COUNT;
				}
			}	

			if (gTheChordProgram == 0){
				gTheChordProgram = "mute";
			}
			else{
				gTheChordProgram--;
			}

			if (gTheChordProgram != "mute"){

				if (isNaN(parseInt(gTheChordProgram))){
					gTheChordProgram = 0;
				}

				if (gTheChordProgram < 0){
					gTheChordProgram = 0;
				}

				if (gTheChordProgram > MIDI_PATCH_COUNT){
					gTheChordProgram = MIDI_PATCH_COUNT;
				}
			}
			
			gTheBassVolume = args.result.configure_bass_volume;
			
			gTheChordVolume = args.result.configure_chord_volume;

			if (isNaN(parseInt(gTheBassVolume))){
				gTheBassVolume = 0;
			}

			if (gTheBassVolume < 0){
				gTheBassVolume = 0;
			}

			if (gTheBassVolume > 127){
				gTheBassVolume = 127;
			}

			if (isNaN(parseInt(gTheChordVolume))){
				gTheChordVolume = 0;
			}

			if (gTheChordVolume < 0){
				gTheChordVolume = 0;
			}

			if (gTheChordVolume > 127){
				gTheChordVolume = 127;
			}

			gOverridePlayMIDIParams = args.result.configure_override_play_midi_params;

			gPlayAlternateChordsOverride = args.result.configure_always_play_alternate_chords;

      // Metronome settings
      gMetronomeHighSound = args.result.configure_metronome_high_sound;
      gMetronomeLowSound = args.result.configure_metronome_low_sound;

      var val = args.result.configure_metronome_high_volume;

      val = parseInt(val);

      if (!isNaN(val)){
        if ((val >= 0) && (val < 128)){
          gMetronomeHighVolume = val;
        }
      }

      val = args.result.configure_metronome_low_volume;

      val = parseInt(val);

      if (!isNaN(val)){
        if ((val >= 0) && (val < 128)){
          gMetronomeLowVolume = val;
        }
      }

      // Wide cursor setting
      gUseWidePlayCursor = args.result.configure_wide_playback_cursor;
      document.querySelectorAll('style[custom_cursor_definition="true"]').forEach(el => el.remove());
      if (gUseWidePlayCursor){
        const style = document.createElement("style");
        style.setAttribute("custom_cursor_definition", "true");
        style.textContent = ".abcjs-cursor{stroke:#00F000;stroke-width:12px;stroke-opacity:0.25;transform:translate(7px,0px);}"
        document.head.appendChild(style);
      }

			// Update local storage
			SaveConfigurationSettings();

			// Need to reload player
			if (player_callback){
				player_callback(true);
			}

		}
		else{

		    // Focus after operation
		    FocusAfterOperation();

		    // No need to reload player
		    if (player_callback){
				player_callback(false);
			}


		}


	});

}

//
// Configuration settings dialog
//
function ConfigureToolSettings() {

	// Keep track of advanced controls dialog
	sendGoogleAnalytics("dialog","ConfigureToolSettings");

	var theOldSaveLastAutoSnapShot = gSaveLastAutoSnapShot;

	var theOldStaffSpacing = gStaffSpacing - STAFFSPACEOFFSET;

	var theOldShowTabNames = gShowTabNames;

	var theOldCapo = gCapo;

	var theOldUseCustomGMSounds = gUseCustomGMSounds;

	var theOldAllowMIDIInput = gAllowMIDIInput;

	var theOldFeaturesShowTabButtons = gFeaturesShowTabButtons;

	var theOldComhaltas = gUseComhaltasABC;

	var theOldForceComhaltas = gForceComhaltasABC;

	var oldiPadTwoColumn = giPadTwoColumn;

	var oldRecorderTab = gShowRecorderTab;

	var oldTabSelected = GetRadioValue("notenodertab");

	var oldForceAndroid = gForceAndroid;

	var oldDisableAndroid = gDisableAndroid;

  var oldRecorderFingeringGerman = gRecorderFingeringGerman;

	// Setup initial values
	const theData = {
		configure_save_exit_snapshot: gSaveLastAutoSnapShot,
		configure_editor_fontsize: gABCEditorFontsize,
		configure_staff_spacing: theOldStaffSpacing,
		configure_capo: gCapo,
		configure_show_tab_names: gShowTabNames,
		configure_use_custom_gm_sounds: gUseCustomGMSounds,
		configure_open_links_in_trainer: gOpenLinksInTrainer,
		configure_auto_swing_hornpipes: gAutoSwingHornpipes,	  
		configure_auto_swing_factor: gAutoSwingFactor,	
		configure_allow_midi_input: gAllowMIDIInput,
		configure_midi_chromatic: gMIDIChromatic,
		configure_show_tab_buttons: gFeaturesShowTabButtons,
		configure_show_dgdae: gShowDGDAETab,
		configure_show_cgda: gShowCGDATab,
		configure_show_recorder: gShowRecorderTab,
    configure_recorder_german: gRecorderFingeringGerman,
		configure_comhaltas: gUseComhaltasABC,	
		configure_RollUseRollForIrishRoll: gRollUseRollForIrishRoll,
		configure_allow_offline_instruments: gAllowOfflineInstruments,
		configure_ipad_two_column: giPadTwoColumn,
		configure_player_scaling: gPlayerScaling,
		configure_force_android: gForceAndroid,
		configure_disable_android: gDisableAndroid,
		
	};

	var form = [
			{html: '<p style="text-align:center;font-size:16pt;font-family:helvetica;margin-left:15px;">ABC Transcription Tools Settings&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#settings_dialog" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	];

	// Only show batch export delays on desktop
	if (gIsIPad){
		form = form.concat([
			{name: "    iPad Side-by-Side view (similar to desktop)", id: "configure_ipad_two_column", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"}
 		]);
	}

   form = form.concat([
  		{name: "Player screen width (percentage) (min is 50, max is 100):", id: "configure_player_scaling", type:"number", cssClass:"configure_settings_form_text"},
		{name: "          Show instrument tablature button bar below ABC editor", id: "configure_show_tab_buttons", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"},
	]);

  	// Disallowing auto snapshots on mobile
	if (isPureDesktopBrowser()){
		form.push({name: "   Save an Auto-Snapshot on browser tab close or reload (Restore it from the Add dialog)", id: "configure_save_exit_snapshot", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"});
	}

	if (isDesktopBrowser()){
		form.push({name: "ABC Editor Font Size (default is 13):", id: "configure_editor_fontsize", type:"number", cssClass:"configure_settings_form_text"});
	}

	form = form.concat([
		{name: "Space between the staves (default is 10, minimum is -40):", id: "configure_staff_spacing", type:"number", cssClass:"configure_settings_form_text"},
		{name: "    Note name tablature uses Comhaltas style ABC (D' E' F' instead of d e f for octave notes)", id: "configure_comhaltas", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"},
		{name: "          Show CGDA as the 4-string tab option (default is GDAD)", id: "configure_show_cgda", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"},
		{name: "          Show DGDAE as the 5-string tab option (default is CGDAE)", id: "configure_show_dgdae", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"},
		{name: "Stringed instrument capo fret position:", id: "configure_capo", type:"number", cssClass:"configure_settings_form_text"},
		{name: "    Show stringed instrument names on tablature (single-voice tunes only, not shown in the Player)", id: "configure_show_tab_names", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"},
		{name: "          Show Recorder tab button instead of the Whistle tab button", id: "configure_show_recorder", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"},
    {name: "          Use German Recorder fingerings (default is Baroque Recorder fingerings)", id: "configure_recorder_german", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"},
		{html: '<p style="text-align:center;"><input id="abcplayer_settingsbutton" style="margin-left:0px" class="abcplayer_settingsbutton btn btn-configuresettingsfromhelp" onclick="ConfigurePlayerSettings(null);" type="button" value="Select Default Player Instruments and Volumes" title="Brings up the Player Instrument Settings dialog where you can select the default MIDI soundfont, MIDI instruments, and MIDI volumes to use when playing tunes"><input id="managedatabases" class="btn btn-managedatabases managedatabases" onclick="ManageDatabasesDialog()" type="button" value="Manage Notes, Reverb, and Tune Search Databases" title="Opens a dialog where you can manage the instrument notes, reverb settings, and tune search engine collection databases"></p>'},
		{name: "    Allow instrument notes and reverb settings database to be used offline", id: "configure_allow_offline_instruments", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"},
		{name: "    Use custom sounds for Dulcimer, Accordion, Flute, Whistle, Banjo, Bagpipe, Fiddle, and Bodhran", id: "configure_use_custom_gm_sounds", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"},
		{name: "            Automatically swing Hornpipes when playing (enabled if R:Hornpipe is found in the tune)", id: "configure_auto_swing_hornpipes", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"},
		{name: "Auto-swing scale factor (range is -0.9 to 0.9, default for Hornpipes is 0.25):", id: "configure_auto_swing_factor", type:"number", cssClass:"configure_settings_form_text"},
		{name: "    Rolls indicated in the ABC with ~ use the custom abcjs roll playback solution", id: "configure_RollUseRollForIrishRoll", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"},
		{name: "            Open exported PDF and Website play links in the Tune Trainer", id: "configure_open_links_in_trainer", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"},
	]);

	if (browserSupportsMIDI()){
		form.push({name: "    Allow MIDI input for ABC text entry", id: "configure_allow_midi_input", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"});
		form.push({name: "    MIDI input is key and mode aware (if unchecked, enters note names with no accidentals)", id: "configure_midi_chromatic", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"});
	};

	if ((!gIsIOS) && (!gIsIPad)){
		form = form.concat([
			{name: "    Force Android phone UI (If mobile browser doesn't identify as Android)", id: "configure_force_android", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"}
 		]);
	}

	if ((!gIsIOS) && (!gIsIPad)){
		form = form.concat([
			{name: "    Disable Android phone UI (If mobile browser does identify as Android)", id: "configure_disable_android", type:"checkbox", cssClass:"configure_settings_form_text_checkbox"}
 		]);
	}

	// For testing
	// gUpdateAvailable = true;
	// gVersionNumber = "2209_122824_0930"
	// gUpdateVersion = "2211_122924_0300";

	if (gUpdateAvailable){

		form.push({html: '<p style="text-align:center;"><input id="configure_fonts" class="btn btn-subdialog configure_fonts" onclick="ConfigureFonts()" type="button" value="Font Settings" title="Configure the fonts used for rendering the ABC"><input id="configure_box" class="btn btn-subdialog configure_box" onclick="ConfigureTablatureSettings()" type="button" value="Tablature Injection Settings" title="Configure the tablature injection settings"><input id="configure_musicxml_import" class="btn btn-subdialog configure_musicxml_import" onclick="ConfigureMusicXMLImport()" type="button" value="MusicXML/MIDI Settings" title="Configure MusicXML/MIDI import settings"><input id="configure_developer_settings" class="btn btn-subdialog configure_developer_settings" onclick="AdvancedSettings()" type="button" value="Advanced Settings" title="Configure low level tool settings"></p><p style="font-size:10pt;font-family:helvetica;line-height:14pt;color:red;position:absolute;left:20px;bottom:20px;margin:0px;cursor:pointer;" title="Click to update to the latest version of the tool" onclick="UpdateToLatestVersion();">Click here to update to the latest version<br/>Latest version: '+gUpdateVersion+'<br/>Installed version: '+gVersionNumber+'</p>'});	
	}
	else{
	
		form.push({html: '<p style="text-align:center;"><input id="configure_fonts" class="btn btn-subdialog configure_fonts" onclick="ConfigureFonts()" type="button" value="Font Settings" title="Configure the fonts used for rendering the ABC"><input id="configure_box" class="btn btn-subdialog configure_box" onclick="ConfigureTablatureSettings()" type="button" value="Tablature Injection Settings" title="Configure the tablature injection settings"><input id="configure_musicxml_import" class="btn btn-subdialog configure_musicxml_import" onclick="ConfigureMusicXMLImport()" type="button" value="MusicXML/MIDI Settings" title="Configure MusicXML/MIDI import settings"><input id="configure_developer_settings" class="btn btn-subdialog configure_developer_settings" onclick="AdvancedSettings()" type="button" value="Advanced Settings" title="Configure low level tool settings"></p><p style="font-size:10pt;font-family:helvetica;line-height:14pt;color:grey;position:absolute;left:20px;bottom:20px;margin:0px;cursor:pointer;" title="Click to update to the latest version" onclick="UpdateToLatestVersion();">You have the latest version<br/>Version: '+gVersionNumber+'<br>Click here to force an update</p>'});	
	}

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 10, width: 790, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			if (isPureDesktopBrowser()){

				gSaveLastAutoSnapShot = args.result.configure_save_exit_snapshot;

				// Clear any existing auto snapshot if not requested
				if (!gSaveLastAutoSnapShot){

					if (gLocalStorageAvailable){

						localStorage.LastAutoSnapShot = "";

					}

					// Was on before, now is off
					if (theOldSaveLastAutoSnapShot != gSaveLastAutoSnapShot){

						RemoveTabCloseListener();

					}

				}
				else
				{
					// Was off, now is on
					if (theOldSaveLastAutoSnapShot != gSaveLastAutoSnapShot){

						AddTabCloseListener();

					}
				}

			}
			else{
			
				gSaveLastAutoSnapShot = false;
			
			}

			if (!gIsIOS){

				// Force Android
				gForceAndroid = args.result.configure_force_android;

				// Disable Android
				gDisableAndroid = args.result.configure_disable_android;
			}

			if (gIsIPad){

				// Two column display for iPad?
				giPadTwoColumn = args.result.configure_ipad_two_column;

			}

			// Sanity check the player scaling
			gPlayerScaling = args.result.configure_player_scaling;

			gPlayerScaling = gPlayerScaling.replace("%","");
			
			if (isNaN(parseInt(gPlayerScaling))){
				if (gIsIPad){
					gPlayerScaling = 60;
				}
				else{
					gPlayerScaling = 50;
				}
			}
			else{
				gPlayerScaling = parseInt(gPlayerScaling);
			}

			if (gPlayerScaling < 50){
				gPlayerScaling = 50;

			}

			if (gPlayerScaling > 100){
				gPlayerScaling = 100;
			}

			// Allow offline instruments?
			gAllowOfflineInstruments = args.result.configure_allow_offline_instruments;

			// Save the tab button hide preference 
			gFeaturesShowTabButtons = args.result.configure_show_tab_buttons;

			if ((theOldFeaturesShowTabButtons == true) && (gFeaturesShowTabButtons == false)){
				sendGoogleAnalytics("action","HidingTabButtonBar");
			}

			if ((theOldFeaturesShowTabButtons == false) && (gFeaturesShowTabButtons == true)){
				sendGoogleAnalytics("action","ShowingTabButtonBar");
			}

			// Validate the staff spacing value
			var testStaffSpacing = args.result.configure_staff_spacing;

			testStaffSpacing = parseInt(testStaffSpacing);

			if (!((isNaN(testStaffSpacing)) || (testStaffSpacing == undefined))){

				// Limit is the negative staffsep offset
				if (testStaffSpacing < (-1*STAFFSPACEOFFSET)){
					testStaffSpacing = (-1*STAFFSPACEOFFSET);
				}
			}
			else{
				testStaffSpacing = gStaffSpacing - STAFFSPACEOFFSET;
			}

			if (!isNaN(testStaffSpacing)){

				if (testStaffSpacing != theOldStaffSpacing){

					gStaffSpacing = testStaffSpacing + STAFFSPACEOFFSET;

				}

			}

			// Sanity check the new capo value
			var testCapo = args.result.configure_capo;

			if (!isNaN(parseInt(testCapo))){

				var theCapo = parseInt(testCapo);
				if ((theCapo >= 0) && (theCapo <= 12)){

					gCapo = parseInt(testCapo);

				}
			}

			gShowTabNames = args.result.configure_show_tab_names;

			gUseCustomGMSounds = args.result.configure_use_custom_gm_sounds;

			// If changing the custom GM sounds setting, clear the abcjs sample cache
			if (gUseCustomGMSounds != theOldUseCustomGMSounds){

				// Reset the abcjs sounds cache
				gSoundsCacheABCJS = {};				
			}

			gOpenLinksInTrainer = args.result.configure_open_links_in_trainer;

			gAutoSwingHornpipes = args.result.configure_auto_swing_hornpipes;

			// Sanity check the autoswing factor value
			var testSwing = args.result.configure_auto_swing_factor;

			if (!isNaN(parseFloat(testSwing))){

				var theSwing = parseFloat(testSwing);

				if ((theSwing >= -0.9) && (theSwing <= 0.9)){

					gAutoSwingFactor = theSwing;

				}
			}

			// Allow MIDI input if enabled
			if (browserSupportsMIDI()){

				gAllowMIDIInput = args.result.configure_allow_midi_input;
				gMIDIChromatic = args.result.configure_midi_chromatic;

				// If they've allowed MIDI input, and not currently using it
				if (theOldAllowMIDIInput != gAllowMIDIInput){

					if (gAllowMIDIInput){

						sendGoogleAnalytics("action","enable_MIDI");

						initMIDI();

            enableMIDIMute();

					}
          else{

            disableMIDIMute();

          }

				}
			}

			// Setup alternate tab buttons if requested

			// For tab format change detect
			var oldCGDA = gShowCGDATab;

			gShowCGDATab = args.result.configure_show_cgda;

			if (gShowCGDATab){
				setupCGDA();
			}
			else{
				setupGDAD();				
			}

			// For tab format change detect
			var oldDGDAE = gShowDGDAETab;

			gShowDGDAETab = args.result.configure_show_dgdae;

			if (gShowDGDAETab){
				setupDGDAE();
			}
			else{
				setupCGDAE();				
			}

      // Recorder fingering
      gRecorderFingeringGerman = args.result.configure_recorder_german;      

			// For tab format change detect
			gShowRecorderTab = args.result.configure_show_recorder;

			if (gShowRecorderTab){
				setupRecorderTab();
			}
			else{
				setupWhistleTab();				
			}

			if (gShowRecorderTab != oldRecorderTab){
				
				gWhistleFontPrepared = false;
				gRecorderFontPrepared = false;

				if ((oldTabSelected == "whistle") && (gShowRecorderTab)){
					SetRadioValue("notenodertab", "recorder");
					gCurrentTab = "recorder";	
					PrepareRecorderFont();
				}
				else{
					if ((oldTabSelected == "recorder") && (!gShowRecorderTab)){
						SetRadioValue("notenodertab", "whistle");
						gCurrentTab = "whistle";
						PrepareWhistleFont();
					}
				}
			}

			// If the user goes into the controls, the setting value overrides the share override
			gForceComhaltasABC = false;

			gUseComhaltasABC = args.result.configure_comhaltas;
			
			gRollUseRollForIrishRoll = args.result.configure_RollUseRollForIrishRoll;

			// If was from a share, no matter what, if on the multi tab option buttons, force a redraw to keep everything in sync.
			var tabs = GetRadioValue("notenodertab");

			var bTabForceRedraw = gIsFromShare && ((tabs == "gdad") || (tabs == "cgda") || (tabs == "dgdae") || (tabs == "cgdae") || (tabs == "whistle") || (tabs == "recorder"));
			
			IdleAllowShowTabNames();

			if (isDesktopBrowser()){

				var testEditorFontSize = args.result.configure_editor_fontsize;

				testEditorFontSize = parseInt(testEditorFontSize);

				if (!isNaN(testEditorFontSize)){

					// Sanity check the font size value
					if ((testEditorFontSize >= 6) && (testEditorFontSize <= 36)){

						gABCEditorFontsize = testEditorFontSize;

						updateABCEditorFont();

						// MAE 14 Jul 2024 - Need to resize text area after font size change
						HandleWindowResize();

					}	

				}
			}

			// Force change of saved staff spacing if user modifies it in the dialog
			// Related to avoiding resetting of saved staff spacing if changed by a shared file
			if (gLocalStorageAvailable){

				localStorage.abcStaffSpacing = testStaffSpacing;

			}

			if (gIsIPad){

				// If changing the display mode on iPad, force large player controls
				if (oldiPadTwoColumn != giPadTwoColumn){

					if (giPadTwoColumn){
						gLargePlayerControls = true;
						sendGoogleAnalytics("action","iPad_Two_Column");
					}
					else{

						gLargePlayerControls = false;				
						sendGoogleAnalytics("action","iPad_One_Column");
					}
			
				}
			}

			// Allow abcjs to process the file header?
			gProcessABCFileHeader = args.result.configure_process_abc_file_header; 

			// Update local storage
			SaveConfigurationSettings();

			if (gIsIPad){

				// If changing the display mode on iPad, let the user know about restarting the tool
				if (oldiPadTwoColumn != giPadTwoColumn){

					var thePrompt;

					if (giPadTwoColumn){
						thePrompt = "The tool will restart to switch to two-column display.";
					}
					else{
						thePrompt = "The tool will restart to switch to single-column display.";	
					}
			
					// Center the string in the prompt
					thePrompt = makeCenteredPromptString(thePrompt);
					
					DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

						window.location.reload();

					});

					return;
				}
			}

			if (!gIsIOS){

				if (oldForceAndroid != gForceAndroid){

					var thePrompt = "The tool will restart since the forcing Android setting changed.";

					// Center the string in the prompt
					thePrompt = makeCenteredPromptString(thePrompt);
					
					DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

						window.location.reload();

					});

					return;					
				}

				if (oldDisableAndroid != gDisableAndroid){

					var thePrompt = "The tool will restart since the disabling Android setting changed.";

					// Center the string in the prompt
					thePrompt = makeCenteredPromptString(thePrompt);
					
					DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

						window.location.reload();

					});

					return;					
				}
			}

			// If the user requested hiding of the tab buttons, hide them now
			ShowHideTabButtons();

			var radiovalue = GetRadioValue("notenodertab");

			// Do we need to re-render?
			if ((testStaffSpacing != theOldStaffSpacing) || (theOldShowTabNames != gShowTabNames) || (gAllowShowTabNames && (gCapo != theOldCapo)) || (oldCGDA != gShowCGDATab) || (oldDGDAE != gShowDGDAETab) || (oldRecorderTab != gShowRecorderTab) || (oldRecorderFingeringGerman != gRecorderFingeringGerman) || bTabForceRedraw
				|| ((radiovalue == "notenames") && ((gUseComhaltasABC != theOldComhaltas) || (theOldForceComhaltas && (!gUseComhaltasABC))))){
				
				RenderAsync(true, null, function(){

				    // Focus after operation
				    FocusAfterOperation();

				});
			}
		}
		else{

		    // Focus after operation
		    FocusAfterOperation();

		}

	});

}

// 
// Is a file XML data
//
function isXML(theText){

   	var xs = theText.slice (0, 100);   // only look at the beginning of the file

    if (xs.indexOf ('<?xml') != -1) { 
    	return true; 
    }

    return false;
}

// 
// Is a file BWW data
//
function isBWWFile(theText){

   	var xs = theText.slice (0, 100);   // only look at the beginning of the file

   	xs = xs.trim();

    if ((xs.indexOf ('Bagpipe Reader') == 0) || (xs.indexOf ('Bagpipe Music Writer') == 0)){ 
    	return true; 
    }

    return false;
}

//
// Inject a Q tag into the ABC
//
function InjectQTag(theTune,theTempo){

	const qtaginject_list = [
	    { name:"C|",  pattern:"1/2"}, 
	    { name:"C",   pattern:"1/2"}, 
	   	{ name:"2/2", pattern:"1/2"},
	   	{ name:"3/2", pattern:"1/2"},
	    { name:"2/4", pattern:"1/4"}, 
	    { name:"3/4", pattern:"1/4"}, 
	    { name:"4/4", pattern:"1/2"}, 
	    { name:"5/4", pattern:"1/4"}, 
	    { name:"6/4", pattern:"1/2"}, 
	    { name:"7/4", pattern:"1/4"}, 
	    { name:"2/8", pattern:"1/8"}, 
	    { name:"3/8", pattern:"3/8"}, 
	    { name:"5/8", pattern:"1/8"},
	    { name:"6/8", pattern:"3/8"}, 
	    { name:"7/8", pattern:"1/8"}, 
	    { name:"9/8", pattern:"3/8"},
	    { name:"10/8", pattern:"1/8"},
	    { name:"11/8", pattern:"1/8"},
	    { name:"12/8", pattern:"3/8"}
	];

	var theLines = theTune.split("\n");

	var nLines = theLines.length;

	// Does the tune already have a Q: tag at the start of a line?
	for (var j=0;j<nLines;++j){

		if (theLines[j].trim().indexOf("Q:") == 0){

			// Yes, nothing to inject
			return theTune;

		}

	}

	// No Q: tag found, find the M: tag, and inject there

	// Find the Meter
	var theMeterLine = "";
	var theMeter = null;

	var bFoundMeter = false;

	// Find the first line of the tune that has measure separators
	for (var j=0;j<nLines;++j){

		theMeterLine = theLines[j];

		if (theMeterLine.trim().indexOf("M:") == 0){

			bFoundMeter = true;

			// Put it after the M: tag line if not at the end of the ABC
			if (j<(nLines-1)){

				theMeter = theLines[j].replace("M:","");

				theMeter = theMeter.trim();

				theMeterLine = theLines[j+1];

			}
			break;
		}

	}

	if (bFoundMeter){

		//console.log("theMeter: "+theMeter);

		var meterIndex = theTune.indexOf(theMeterLine);

		var leftSide = theTune.substring(0,meterIndex);
		var rightSide = theTune.substring(meterIndex);

		var theQTagTemplate = "";

		// Lets see if we have a supported meter
		for (var i=0;i<qtaginject_list.length;++i){

			if (theMeter == qtaginject_list[i].name){

				theQTagTemplate = qtaginject_list[i].pattern;

				//console.log("theQTagTemplate: "+theQTagTemplate);
							
				break;
			}

		}

		if (theQTagTemplate != ""){
		
			theTune = leftSide + "Q:" + theQTagTemplate + "=" + theTempo + "\n" + rightSide;

		}
		else{

			theTune = leftSide + "Q:" + theTempo + "\n" + rightSide;

		}

	}
	else{

		// Just in case there is no M: tag. Almost certainly never will happen.
		// In this case, put it behind the K: tag
		// If no K: tag, just punt

		// Find the Key
		var theKeyLine = "";

		var bFoundKey = false;

		// Find the first line of the tune that has measure separators
		for (var j=0;j<nLines;++j){

			theKeyLine = theLines[j];

			if (theKeyLine.trim().indexOf("K:") == 0){

				bFoundKey = true;
				break;
			}

		}

		if (bFoundKey){

			var keyIndex = theTune.indexOf(theKeyLine);

			var leftSide = theTune.substring(0,keyIndex);
			var rightSide = theTune.substring(keyIndex);

			theTune = leftSide + "Q:" + theTempo + "\n" + rightSide;

		}

	}

	return theTune;

}

/*
 * Title Caps
 * 
 * Ported to JavaScript By John Resig - http://ejohn.org/ - 21 May 2008
 * Original by John Gruber - http://daringfireball.net/ - 10 May 2008
 * License: http://www.opensource.org/licenses/mit-license.php
 */

function doTitleCaps(title){

	var small = "(a|an|and|as|at|but|by|en|for|if|in|of|on|or|the|to|v[.]?|via|vs[.]?)";
	var punct = "([!\"#$%&'()*+,./:;<=>?@[\\\\\\]^_`{|}~-]*)";
  
	function titleCaps(title){
		var parts = [], split = /[:.;?!] |(?: |^)["Ò]/g, index = 0;
		
		while (true) {
			var m = split.exec(title);

			parts.push( title.substring(index, m ? m.index : title.length)
				.replace(/\b([A-Za-z][a-z.'Õ]*)\b/g, function(all){
					return /[A-Za-z]\.[A-Za-z]/.test(all) ? all : upper(all);
				})
				.replace(RegExp("\\b" + small + "\\b", "ig"), lower)
				.replace(RegExp("^" + punct + small + "\\b", "ig"), function(all, punct, word){
					return punct + upper(word);
				})
				.replace(RegExp("\\b" + small + punct + "$", "ig"), upper));
			
			index = split.lastIndex;
			
			if ( m ) parts.push( m[0] );
			else break;
		}
		
		return parts.join("").replace(/ V(s?)\. /ig, " v$1. ")
			.replace(/(['Õ])S\b/ig, "$1s")
			.replace(/\b(AT&T|Q&A)\b/ig, function(all){
				return all.toUpperCase();
			});
	};
    
	function lower(word){
		return word.toLowerCase();
	}
    
	function upper(word){
	  return word.substr(0,1).toUpperCase() + word.substr(1);
	}

	return titleCaps(title);

}

// Does the lines start with an ABC tag or %
function isTagLine(text) {
  const prefixes = ["X:","T:","M:","K:","L:","Q:","W:","Z:","R:","C:","A:","O:","P:","N:","G:","H:","B:","D:","F:","S:","I:","V:","%"];
  for (const prefix of prefixes) {
      if (text.startsWith(prefix)) {
          return true;
      }
  }
  return false;
}

function splitTextAtLineBreak(input, lbChar) {
// Split the input text at each $ character
const splits = input.split(lbChar);

// Initialize an array to hold the resulting substrings
let resultArray = [];

// Loop through each split substring
for (let split of splits) {
  // Trim the split substring to remove any leading or trailing whitespace
  let trimmedSplit = split.trim();

  // Push the trimmed substring to the result array if it's not empty
  if (trimmedSplit) {
    resultArray.push(trimmedSplit);
  }
}

return resultArray;
}

// Split the ABC music only at the linebreaks
function replaceLineBreaks(input, lbChar) {

// Split the input text into an array of lines
const lines = input.split('\n');

// Initialize an array to hold the combined lines
let combinedLines = [];
let currentLine = '';

var gotLB = false;
// Loop through each line in the input text
for (let line of lines) {

  // Check if the line starts with a tag
  if (!(/^(X:|T:|M:|K:|L:|Q:|W:|Z:|R:|C:|A:|O:|P:|N:|G:|H:|B:|D:|F:|S:|I:|V:|w:|%)/.test(line))) {

    if (line.indexOf(lbChar) != -1){
      gotLB = true;
      break;
    }
  }
}

// Line breaks requested, but none detected, just return the original split text
if (!gotLB){
  return input;
}

// Line breaks detected, pass through the tag lines but combine and split the ABC notes

// Loop through each line in the input text
for (let line of lines) {

  // Check if the line starts with A:, B:, C:, or %
  if (/^(X:|T:|M:|K:|L:|Q:|W:|Z:|R:|C:|A:|O:|P:|N:|G:|H:|B:|D:|F:|S:|I:|V:|w:|%)/.test(line)) {

    // If currentLine is not empty, push it to combinedLines and reset it
    if (currentLine) {
      combinedLines.push(currentLine);
      currentLine = '';
    }
    // Push the current line as it starts with a tag
    combinedLines.push(line);

  } else {

    // Append the line to currentLine if it doesn't start with a tag
    currentLine += (currentLine ? ' ' : '') + line;

  }

}

// Push the last combined line if it exists
if (currentLine) {
  combinedLines.push(currentLine);
}

var newLines = [];

// Iterate over each line
const modifiedLines = combinedLines.map(line => {

  // Check if the line is a tag
  if (isTagLine(line)) {
    // Return the line unchanged if it matches the condition
    return newLines.push(line);
  }
  else 
  {
    var theSplits =  splitTextAtLineBreak(line,lbChar);

    var nSplits = theSplits.length;
    
    for (var j=0;j<nSplits;++j){
      var thisSplit = theSplits[j];
      thisSplit = thisSplit.trim();
      if (thisSplit != ""){
        // Include the split marks at the end of the lines
        newLines.push(thisSplit);
      }
    }
    
  }
});

return newLines.join("\n");

}

function removeLinesStartingWithILinebreak(text) {
    // Split the text into an array of lines
    let lines = text.split('\n');

    // Filter out lines that start with 'I:linebreak'
    lines = lines.filter(line => !line.startsWith('I:linebreak'));

    // Join the remaining lines back into a single string
    return lines.join('\n');
}

//
// Import MusicXML format
//
function importMusicXML(theXML,fileName){
 
    var xmldata = $.parseXML (theXML);    // abc_code is a (unicode) string with one abc tune.

    // var options = { u:0, b:4, n:0,  // unfold repeats (1), bars per line, chars per line
    //                 c:0, v:0, d:0,  // credit text filter level (0-6), no volta on higher voice numbers (1), denominator unit length (L:)
    //                 m:0, x:0, t:0,  // no midi, minimal midi, all midi output (0,1,2), no line breaks (1), perc, tab staff -> voicemap (1)
    //                 v1:0, noped:0,  // all directions to first voice of staff (1), no pedal directions (1)
    //                 stm:0,          // translate stem elements (stem direction)
    //                 p:'', s:0,   // page format: scale (1.0), width, left- and right margin in cm, shift note heads in tablature (1)
    //                 addstavenum:1 };  // Add stave numbers at the end of the staves

    // Suppress stave measure numbers if doing linebreaks
    var replacedStaveNum = false;

    if ((gMusicXMLImportOptions.x == 0) && (gMusicXMLImportOptions.addstavenum == 1)){
    	replacedStaveNum = true;
    	gMusicXMLImportOptions.addstavenum = 0;
    }

    var result = vertaal (xmldata, gMusicXMLImportOptions);

    if (replacedStaveNum){
    	gMusicXMLImportOptions.addstavenum = 1;
    }

    var abcText = result [0];               // the translation (string)

    // Strip out extra clef indications
    abcText = abcText.replaceAll("[K:treble]","");
    abcText = abcText.replaceAll("[K:alto]","");
    abcText = abcText.replaceAll("[K:alto1]","");
    abcText = abcText.replaceAll("[K:alto2]","");
    abcText = abcText.replaceAll("[K:tenor]","");
    abcText = abcText.replaceAll("[K:bass]","");
    abcText = abcText.replaceAll("[K:bass3]","");

    // Inject Q: tag?
    if (gMusicXMLImportOptions.addq == 1){

    	var theTempoToInject = gMusicXMLImportOptions.q;

    	abcText = InjectQTag(abcText,theTempoToInject);

    }

    // If no title in the XML after conversion, inject the filename instead
    if (abcText.indexOf("T:Title")!= -1){

    	// Strip the extension
		fileName = fileName.replace(".mxl","");
		fileName = fileName.replace(".xml","");
		fileName = fileName.replace(".musicxml","");
		fileName = fileName.replace(".MXL","");
		fileName = fileName.replace(".XML","");
		fileName = fileName.replace(".MUSICXML","");

		// Replace any _ or - with spaces
		fileName = fileName.replaceAll("_"," ");
		fileName = fileName.replaceAll("-"," ");
		fileName = fileName.replaceAll("  "," ");

		// Intelligent title capitalize
		fileName = doTitleCaps(fileName);

    	abcText = abcText.replace("T:Title","T:"+fileName);
    }

    // MAE 15 Jun 2024 - Is there a linebreak character request
    var searchRegExp = /^I:linebreak.*$/m

    // Detect linebreak character request
    var doLBReplacement = false;
    var gotLineBreakRequest = abcText.match(searchRegExp);
    var theLBchar = "";

    if ((gotLineBreakRequest) && (gotLineBreakRequest.length > 0)){

      theLBchar = gotLineBreakRequest[0].replace("I:linebreak","");
      
      theLBchar = theLBchar.trim();

      if ((theLBchar.length > 0) && ((theLBchar == "!") || (theLBchar == "$"))){
        doLBReplacement = true;
        theLBchar = theLBchar[0];
      }
    }

    // Do the line break replacement?
    if (doLBReplacement){

      //console.log("Doing LB replacement, theLBchar: "+theLBchar);
      abcText = replaceLineBreaks(abcText,theLBchar);
     
    }

    // Remove the linebreak request from the ABC
    abcText = removeLinesStartingWithILinebreak(abcText);

    return abcText;

}

//
// Common file read routine for Open and Drop
//

//
// Shared functionality for all file reads
//
function DoReadCommon(theText,callback){
  
  gImportAccumulator.push(theText);

	setTimeout(function() {

		// Mark that this ABC was from a file
		gABCFromFile = true;

		// Not from share
		gIsFromShare = false;

    // If loading multiple files, there will be a callback
    if (typeof callback === "function") {
        callback();
    }   

    return;    

	}, 10);
}

function DoFileRead(file, callback) {

  // Check the filename extension
  if (ensureABCFile(file.name)) {

    var isMIDI = (file.name.toLowerCase().indexOf(".mid") != -1);

    var isMXL = (file.name.toLowerCase().indexOf(".mxl") != -1);

    var isMusicXML = (file.name.toLowerCase().indexOf(".xml") != -1) || (file.name.toLowerCase().indexOf(".musicxml") != -1)

    // Show the loading status
    var fileSelected = document.getElementById('abc-selected');

    if (isMIDI){
      fileSelected.innerText = "Converting MIDI to ABC: " + file.name;
    }
    else
    if (isMXL || isMusicXML){
      fileSelected.innerText = "Converting MusicXML to ABC: " + file.name;
    }
    else {
      fileSelected.innerText = "Loading: " + file.name;
    }

    // Save the filename
    gDisplayedName = file.name;

    // If this is a .mxl file, need to unzip first
    if (isMXL) {

      var zip = new JSZip();

      zip.loadAsync(file)
        .then(function(zip) {

          // Read the META-INF metadata
          var fname = "META-INF/container.xml";

          zip.files[fname].async("string")
            .then(function(theXML) {

              // Need to parse the container.xml to find the root file
              var xmldata = $.parseXML(theXML);

              var rootfile = xmldata.getElementsByTagName('rootfile')[0];

              // Get the main MusicXML file name in the zipfile
              var fname = rootfile.getAttribute("full-path");

              zip.files[fname].async("string")
                .then(function(theText) {

                  // Check for MusicXML format
                  if (isXML(theText)) {

                    // Keep track of actions
                    //sendGoogleAnalytics("action", "DoFileRead_MXL");

                    theText = importMusicXML(theText, gDisplayedName);

                  } else {

                    // Center the string in the prompt
                    var thePrompt = file.name + " is not a valid MusicXML file.";
                    thePrompt = makeCenteredPromptString(thePrompt);

                    DayPilot.Modal.alert(thePrompt, {
                      theme: "modal_flat",
                      top: 100,
                      scrollWithPage: (AllowDialogsToScroll())
                    }).then(function(){

                      // Issue with file, just callback
                      if (typeof callback === "function") {
                          callback();
                      }   

                    });

                    return;

                  }

                  DoReadCommon(theText, callback);

                });

              return;

            }, function() {

              var thePrompt = file.name + " is not a valid MusicXML file.";

              thePrompt = makeCenteredPromptString(thePrompt);

              DayPilot.Modal.alert(thePrompt, {
                theme: "modal_flat",
                top: 100,
                scrollWithPage: (AllowDialogsToScroll())
              }).then(function(){

                // Issue with file, just callback
                if (typeof callback === "function") {
                    callback();
                }   
                
              });

              return;

            });

          return;

        }, function() {

          var thePrompt = file.name + " is not a valid MusicXML file.";

          thePrompt = makeCenteredPromptString(thePrompt);

          DayPilot.Modal.alert(thePrompt, {
            theme: "modal_flat",
            top: 100,
            scrollWithPage: (AllowDialogsToScroll())
          }).then(function(){

            // Issue with file, just callback
            if (typeof callback === "function") {
                callback();
            }   
            
          });

          return;

        });

      return;
    }

    if (isMIDI) {

      // Don't allow MIDI import while offline
      if (!navigator.onLine) {

        var thePrompt = "MIDI import not available while offline.";

        // Center the string in the prompt
        thePrompt = makeCenteredPromptString(thePrompt);

        DayPilot.Modal.alert(thePrompt, {
          theme: "modal_flat",
          top: 200,
          scrollWithPage: (AllowDialogsToScroll())
        }).then(function(){

          // Issue with file, just callback
          if (typeof callback === "function") {
              callback();
          }   
          
        });

        return;
      }

      // First time MIDI import warning
      if (!gMIDIImportWarned) {

        var modal_msg = '<p style="text-align:center;font-size:16pt;font-family:helvetica">First Time Use Notes on MIDI Import</p>';
        modal_msg += '<p style="font-size:12pt;line-height:18pt;font-family:helvetica">MIDI Import is an experimental feature that depends on an external service.</p>';
        modal_msg += '<p style="font-size:12pt;line-height:18pt;font-family:helvetica">It may sometimes produce complete garbage, odd results, fail, or even crash or lock up the tool.</p>';
        modal_msg += '<p style="font-size:12pt;line-height:18pt;font-family:helvetica">If the tool crashes during notation rendering after MIDI import is complete, reload the page to restart.</p>';
        modal_msg += '<p style="font-size:12pt;line-height:18pt;font-family:helvetica">Imported notes are quantized to sixteenth note durations.</p>';
        modal_msg += '<p style="font-size:12pt;line-height:18pt;font-family:helvetica">MIDI Import is limited to a maximum file length of 40960 bytes.</p>';

        gMIDIImportWarned = true;

        if (gLocalStorageAvailable) {

          localStorage.MIDIImportWarned = true;

        }

        DayPilot.Modal.alert(modal_msg, {
          theme: "modal_flat",
          top: 25,
          scrollWithPage: (AllowDialogsToScroll())
        }).then(function(args) {

          MIDIImportCommon();

        });

      } else {

        // Just do the import
        MIDIImportCommon();

      }

      function MIDIImportCommon() {

        const reader = new FileReader();

        reader.onload = function(event) {

          const midiData = event.target.result;

          if (midiData.byteLength > 40960) {

            var thePrompt = file.name +" file size is "+midiData.byteLength+" bytes.<br/><br/>MIDI file import is limited to a maximum file size of 40960 bytes.";

            thePrompt = makeCenteredPromptString(thePrompt);

            DayPilot.Modal.alert(thePrompt, {
              theme: "modal_flat",
              top: 100,
              scrollWithPage: (AllowDialogsToScroll())
            }).then(function(){

              // Issue with file, just callback
              if (typeof callback === "function") {
                  callback();
              }   
              
            });

            return;

          }

          // Keep track of actions
          //sendGoogleAnalytics("action", "DoFileRead_MIDI");

          // Send MIDI data to web service
          sendMIDIToWebService(midiData);

        };

        reader.onerror = function() {

          var thePrompt = "There was an issue converting the MIDI file:<br/><br/>"+file.name;

          thePrompt = makeCenteredPromptString(thePrompt);

          DayPilot.Modal.alert(thePrompt, {
            theme: "modal_flat",
            top: 100,
            scrollWithPage: (AllowDialogsToScroll())
          }).then(function(){

            // Issue with file, just callback
            if (typeof callback === "function") {
                callback();
            }   
            
          });

          return;

        };

        reader.readAsArrayBuffer(file);

        function sendMIDIToWebService(midiData) {

          //debugger;

          // Create a Blob from the ArrayBuffer
          var blob = new Blob([midiData]);

          // Create a FormData object
          var formData = new FormData();
          formData.append('array_buffer', blob, 'midi.mid');

          fetch(`https://seisiuneer.pythonanywhere.com/midi2xml`, {
              method: 'POST',
              body: formData
            })
            .then(response => {

              //debugger;

              if (!response.ok) {

                if (!response.ok) {
                  throw new Error('Failed to upload MIDI file');
                }

              }

              return response.text();

            })
            .then(data => {

              // Strip the extension
              var fileName = file.name.replace(".midi", "");
              fileName = fileName.replace(".MIDI", "");
              fileName = fileName.replace(".mid", "");
              fileName = fileName.replace(".MID", "");

              // Replace any _ or - with spaces
              fileName = fileName.replaceAll("_", " ");
              fileName = fileName.replaceAll("-", " ");
              fileName = fileName.replaceAll("  ", " ");

              // Intelligent title capitalize
              fileName = doTitleCaps(fileName);

              data = data.replaceAll("Music21 Fragment", fileName);
              data = data.replaceAll("Music21", "");

              // Handle response from server
              var theText = importMusicXML(data, gDisplayedName);

              DoReadCommon(theText, callback);

            })
            .catch(error => {

              var thePrompt = "There was an issue converting the MIDI file:<br/><br/>"+file.name;

              thePrompt = makeCenteredPromptString(thePrompt);

              DayPilot.Modal.alert(thePrompt, {
                theme: "modal_flat",
                top: 100,
                scrollWithPage: (AllowDialogsToScroll())
              }).then(function(){

                // Issue with file, just callback
                if (typeof callback === "function") {
                    callback();
                }   
                
              });

            });
        }
      }

      return;

    }

    // Not MXL or MIDI, just read the file
    // If XML, decode
    const reader = new FileReader();

    reader.addEventListener('load', (event) => {

      var theText = event.target.result;

      // Check for MusicXML format
      if (isXML(theText)) {

        // Keep track of actions
        //sendGoogleAnalytics("action", "DoFileRead_XML");

        theText = importMusicXML(theText, gDisplayedName);

      } else
        // Importing BWW?
        if (isBWWFile(theText)) {

          // Keep track of actions
          //sendGoogleAnalytics("action", "DoFileRead_BWW");

          theText = convert_bww_to_abc(theText);

        }
      // else {
      //   // Keep track of actions
      //   sendGoogleAnalytics("action", "DoFileRead_ABC");
      // }

      DoReadCommon(theText, callback);

    });

    reader.readAsText(file);
  }
  else{
    // Unsupported file extension, just callback immediately
    if (typeof callback === "function") {
        callback();
    }   
  }
}

//
// Toggle the top bar
//
//

function ShowTopBar(){

	var elem = document.getElementById("topbar");

	elem.style.display = "block";
	elem.style.opacity = 1.0;

	gTopBarShowing = true;

	// Move the title down a bit
	var elem = document.getElementById("abc-selected");
	elem.style.marginTop = "15px";
	elem.style.marginBottom = "1px";
		
	// Also shows the controls if allowed
	if(gAllowControlToggle){
		ShowAllControls();
	}


}

function HideTopBar(){

	var elem = document.getElementById("topbar");

	elem.style.display = "none";

	gTopBarShowing = false;

	// Move the title up a bit
	var elem = document.getElementById("abc-selected");

	if (gIsIPhone || gIsAndroid){
		elem.style.marginTop = "18px";
		elem.style.marginBottom = "38px";
	}
	else{
		elem.style.marginTop = "4px";
	}

	// Also hides the controls
	if(gAllowControlToggle){
		HideAllControls();
	}

}

function ToggleTopBar(){


	if (gTopBarShowing){

		HideTopBar();

	}
	else{

		ShowTopBar();
		
	}

	// Resize the notation spacer
	UpdateNotationTopPosition();

	// Force a rescroll for one column view
	if (gIsOneColumn){

		MakeTuneVisible(true);

	}
	
	// If available, save all the app settings to local storage
	UpdateLocalStorage();

}


//
// Is this the first run?
// 
// Check for local storage use
//
function isFirstRun(){

	if (gLocalStorageAvailable){

		// Display mode
		var theTab = localStorage.abcTab;

		if (theTab){

			return false;

		}

		// PDF Tunes/page
		var theTunesPerPage = localStorage.abcTunesPerPage;

		if (theTunesPerPage){

			return false;

		}

		// Page number
		var thePageNumberLocation = localStorage.abcPageNumberLocation;

		if (thePageNumberLocation){

			return false;

		}

		// Page number on first page
		var thePageNumberOnPageOne = localStorage.abcPageNumberOnPageOne;

		if (thePageNumberOnPageOne){

			return false;

		}

		// Staff spacing
		var theStaffSpacing = localStorage.abcStaffSpacing;

		if (theStaffSpacing){

			return false;

		}

		// Top bar
		var theHideTopBar = localStorage.abcHideTopBar;

		if (theHideTopBar){

			return false;
		}

		return true;

	}
	else{

		return false;

	}
}

// 
// Restore the application state from local storage
//
function restoreStateFromLocalStorage(){

	if (!gLocalStorageAvailable){
		return;
	}

	// Display mode
	var theTab = localStorage.abcTab;

	if (theTab){

		// Case where user came in from a recorder share link previously, but doesn't want recorder tab in general
		if ((theTab == "recorder") && (!gShowRecorderTab)){

			theTab = "whistle";
			
		}

		SetRadioValue("notenodertab", theTab);


		if (theTab == "whistle"){

			// If first time using the whistle tab, prep the tin whistle font for embedded SVG styles
			PrepareWhistleFont();
			
		}

		if (theTab == "recorder"){

			// If first time using the recorder tab, prep the recorder font for embedded SVG styles
			PrepareRecorderFont();
			
		}


		gCurrentTab = theTab;

	}

	// PDF Tunes/page
	var theTunesPerPage = localStorage.abcTunesPerPage;

	if (theTunesPerPage){

		setPDFFormat(theTunesPerPage);

	}

	// Page number
	var thePageNumberLocation = localStorage.abcPageNumberLocation;

	if (thePageNumberLocation){

		setPageNumbers(thePageNumberLocation);

	}

	// Page number on first page
	var thePageNumberOnPageOne = localStorage.abcPageNumberOnPageOne;

	if (thePageNumberOnPageOne){

		setFirstPage(thePageNumberOnPageOne);

	}

	// Capo
	var theCapo = localStorage.abcCapo;

	if (theCapo){

		var testCapo = parseInt(theCapo);

		if (!isNaN(testCapo)){

			gCapo = testCapo;

		}
		else{

			gCapo = 0;

		}

	}

	// Staff spacing
	var theStaffSpacing = localStorage.abcStaffSpacing;

	if (theStaffSpacing){

		var testSpacing = parseInt(theStaffSpacing);

		if (!isNaN(testSpacing)){

			gStaffSpacing = STAFFSPACEOFFSET + testSpacing;

		}
		else{

			gStaffSpacing = STAFFSPACEOFFSET + STAFFSPACEDEFAULT;

		}


	}

	// Top bar
	var theHideTopBar = localStorage.abcHideTopBar;

	if (theHideTopBar){

		if (theHideTopBar == "true"){

			HideTopBar();

		}
	}

	// If first time, show a welcome message
	if (gIsFirstRun){

		UpdateLocalStorage();

		showWelcomeScreen();

	}

}

// 
// Restore the application state from local storage on share link open
//
function restorePDFStateFromLocalStorage(){

	if (!gLocalStorageAvailable){
		return;
	}

	// PDF Tunes/page
	var theTunesPerPage = localStorage.abcTunesPerPage;

	if (theTunesPerPage){

		setPDFFormat(theTunesPerPage);

	}

	// Page number
	var thePageNumberLocation = localStorage.abcPageNumberLocation;

	if (thePageNumberLocation){

		setPageNumbers(thePageNumberLocation);

	}

	// Page number on first page
	var thePageNumberOnPageOne = localStorage.abcPageNumberOnPageOne;

	if (thePageNumberOnPageOne){

		setFirstPage(thePageNumberOnPageOne);

	}

}

//
// Common multi-file reader with progress bar overlay
//
function DoMultiReadCommon(the_files, fileElement) {

	if (gImportRunning) {
		if (fileElement) fileElement.value = "";
		return;
	}

  var isBannerHidden = true;
  let zoomBanner = document.getElementById('zoombanner');

  if (zoomBanner && (getComputedStyle(zoomBanner).display !== 'none')) {
    //console.log('Zoom banner is showing');
    isBannerHidden = false;
  } else {
    //console.log('Zoom banner is hidden');
    isBannerHidden = true;
  }

  // Odd case for iOS
  if (isMobileBrowser()){
    isBannerHidden = true;
  }
  
  UpdateNotationTopPosition();

	showTheSpinner();

	gImportRunning = true;
	gImportAccumulator = [gTheABC.value];

  // Clear cancel request
  gImportCancelRequested = false;

	const totalFiles = the_files.length;

	let index = 0;

	// Create progress overlay
	const fileSelected = document.getElementById('abc-selected');

	var overlay;
	var progressBarContainer;
	var progressBar;

	// Only show the progress bar for multiple files and if the top banner is hidden
	if (isBannerHidden && (totalFiles > 1)) {

		overlay = document.createElement('div');
		overlay.style.position = "absolute";
    overlay.style.top = fileSelected.offsetTop + 9 + "px";
    overlay.style.left = fileSelected.offsetLeft + "px";
		overlay.style.width = fileSelected.offsetWidth + "px";
		overlay.style.height = fileSelected.offsetHeight + "px";
		overlay.style.background = "#ffffff00";
		overlay.style.display = "flex";
		overlay.style.flexDirection = "column";
		overlay.style.alignItems = "center";
		overlay.style.justifyContent = "center";
		overlay.style.zIndex = 9999;
		overlay.style.color = "#fff";
		overlay.style.fontWeight = "bold";

		progressBarContainer = document.createElement('div');
		progressBarContainer.style.width = "80%";
		progressBarContainer.style.height = "7px";
		progressBarContainer.style.background = "#EEE";
		progressBarContainer.style.borderRadius = "6px";
		progressBarContainer.style.overflow = "hidden";
		progressBarContainer.style.marginTop = "8px";

		progressBar = document.createElement('div');
		progressBar.style.width = "0%";
		progressBar.style.height = "100%";
		progressBar.style.background = "#00cc66";
		progressBar.style.transition = "width 0.2s ease";

		progressBarContainer.appendChild(progressBar);
		overlay.appendChild(progressBarContainer);

    // Cancel button (fixed to right side of overlay)
    const cancelBtn = document.createElement('button');
    cancelBtn.setAttribute('aria-label', 'Stop import after current file');
    cancelBtn.setAttribute('title', 'Stop import after current file'); 

    if (gIsSafari || gIsIOS){
      cancelBtn.style.cssText = `
            position: absolute;
            top: 100%;
            right: 49px; /* Push to the right of overlay */
            transform: translateY(-100%);
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: #e02424;
            color: #fff;
            font-size: 22px;
            border: none;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0,0,0,0.3);
            display: flex;
            align-items: center;
            justify-content: center;
          `;
    }
    else{
      cancelBtn.style.cssText = `
            position: absolute;
            top: 100%;
            right: 49px; /* Push to the right of overlay */
            transform: translateY(-100%);
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: #e02424;
            color: #fff;
            font-size: 14px;
            border: none;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0,0,0,0.3);
            display: flex;
            align-items: center;
            justify-content: center;
          `;

    }

    cancelBtn.textContent = '✕';

    // Cancel button click handler
    cancelBtn.addEventListener('click', () => {
      gImportCancelRequested = true;
    });

    overlay.appendChild(cancelBtn);

    // Attach overlay to DOM
		fileSelected.parentElement.style.position = "relative";
		fileSelected.parentElement.appendChild(overlay);

	}

	function updateProgress() {
		const percent = Math.round((index / totalFiles) * 100);
		progressBar.style.width = percent + "%";
	}

	function processNextFile() {

		if ((index >= totalFiles) || gImportCancelRequested){

      gImportCancelRequested = false;

			if (isBannerHidden && (totalFiles > 1)) {
				overlay.remove();
			}

      // Join the tune buffers
      var importedTunes = gImportAccumulator
        .map(s => s.trim())        // trim whitespace
        .filter(s => s.length)     // remove blank/empty entries
        .join("\n\n");          // ensure exactly one blank line between

      importedTunes += "\n";

      // Clear the accumulator
      gImportAccumulator = [];

			var nTunes = CountTunesInBuffer(importedTunes);

			if (gIsQuickEditor) {
				if (importedTunes !== "" && nTunes > 0) {
					fileSelected.innerText = nTunes + " tunes loaded. Processing ABC and rendering notation for the last tune...";
				}
			} else {
				if (importedTunes !== "" && nTunes > 0) {
					fileSelected.innerText = nTunes === 1 ?
						"Processing ABC and rendering notation for 1 tune..." :
						"Processing ABC and rendering notation for " + nTunes + " tunes...";
				}
			}

			setTimeout(function() {

				// Set the final editor text
				setABCEditorText(importedTunes);

				// Clean any smart quotes
				CleanSmartQuotes();

				// Reset the tune cache
				clearGetTuneByIndexCache();

				// Restore settings
				RestoreDefaults();

				// If was from a share, fix the spacing
				RestoreSavedStaffSpacing();

				// Render the tunes
				RenderAsync(true, null, function() {

					UpdateNotationTopPosition();

					var nTunes = CountTunes();
					var theTune = getTuneByIndex(nTunes - 1);
					var tuneOffset = gTheABC.value.length - theTune.length;

					if (!gIsMaximized) {

						ScrollABCTextIntoView(gTheABC, tuneOffset, tuneOffset, 10);

						if (!isMobileBrowser) {
							gTheABC.blur();
							gTheABC.focus();
						}

					}

					MakeTuneVisible(true);

					hideTheSpinner();

				});
			}, 10);

			if (fileElement) fileElement.value = "";
			
      gImportRunning = false;

			return;
		}

		const file = the_files[index++];

		if (isBannerHidden && (totalFiles > 1)) {
			updateProgress();
		}

		DoFileRead(file, processNextFile);

	}

	processNextFile();

}


//
// Drag/drop handler
//
function DoDrop(e) {

    e.stopPropagation();
    e.preventDefault();

    const drop_files = Array.from(e.dataTransfer.files);

    DoMultiReadCommon(drop_files,null);

}

//
// Hide the Zoom out suggestion banner, save that it was hidden manually
//
function HideZoomBanner(){

	// Hide the banner
	document.getElementById("zoombanner").style.display = "none";

	// Won't show the banner again this session
	gZoomBannerHidden = true;

	// Update the top position of the notation since the banner shifts the UI up
	UpdateNotationTopPosition();

}

function HideZoomBannerForever(e){

	e.stopPropagation();

	var thePrompt = "Are you sure you want to hide the Zoom out banner forever?<br/></br/>If you click OK, there is no way to turn it back on.";

	// Center the string in the prompt
	thePrompt = makeCenteredPromptString(thePrompt);

	DayPilot.Modal.confirm(thePrompt ,{ top:180, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

		if (!args.canceled){

			// Hide the banner
			document.getElementById("zoombanner").style.display = "none";

			// Won't show the banner again this session
			gZoomBannerHidden = true;

			gZoomBannerAlwaysHidden = true;

			if (gLocalStorageAvailable){

				localStorage.ZoomBannerAlwaysHidden = true;

			}

			// Update the top position of the notation since the banner shifts the UI up
			UpdateNotationTopPosition();

		}
	});

}


//
// Set the margins on window resize
//
function HandleWindowResize(){

	// Only executed on responsive desktop browsers

	if (isDesktopBrowser()){

		if (!gIsMaximized){

			var windowWidth = window.innerWidth;

			// Offset required to avoid left side stack
			if (windowWidth < 1798){

				// One column display

				var marginLeft = (windowWidth - 850)/2;

				var elem = document.getElementById("app-container");
				
				elem.style.marginLeft = marginLeft+"px";

				// Reset the number of rows in the ABC editor
				gTheABC.rows = 12;

				gIsOneColumn = true;

				// If they haven't dismissed the zoom suggestion banner before, show it now
				if (!gZoomBannerHidden){

					if (!gZoomBannerAlwaysHidden){

						document.getElementById("zoombanner").style.display = "block";

					}
				}

				elem = document.getElementById("notation-placeholder-text");
				elem.style.marginTop = "64px";


			}
			else{
				
				// Two column display

				var elem = document.getElementById("app-container");

				var marginLeft = (windowWidth - 1700)/2;
				
				elem.style.marginLeft = marginLeft+"px";

				// We should have more room, resize the editor
				var windowHeight = window.innerHeight;

				// Fix odd display after rotation on iPad
				if (giPadTwoColumn){

					if (!isLandscapeOrientation()){
						windowHeight -= 200;
					}
				}

				// Leave some room for tools
				if (!gIsQuickEditor){
					windowHeight -= 375; // MAE was 540
				}
				else{
					windowHeight -= 440; // MAE was 540
				}

				// Diagnostics showing?
				if (gShowDiagnostics){
					windowHeight -= 90;
				}

				// Adapt the text area size
				elem = document.getElementById("abc");
				const style = getComputedStyle(elem);
				const fontSize = parseFloat(style.fontSize);
				const lineHeight = parseFloat(style.lineHeight) || fontSize * 1.2; // Fallback to 1.2 * fontSize if line-height is not explicitly set

				var nRows = Math.floor(windowHeight / lineHeight);

				// Resize the text box
				gTheABC.rows = nRows;

				gIsOneColumn = false;

				// Hide the zoom suggestion banne
				document.getElementById("zoombanner").style.display = "none";

				elem = document.getElementById("notation-placeholder-text");
				elem.style.marginTop = "136px";


			}

			if (giPadTwoColumn){

				var iconSize;
				var iconOffset;

				if (!isLandscapeOrientation()){

					iconSize = "80px";
					iconOffset = "8px";

				}
				else{
					iconSize = "54px";
					iconOffset = "16px";
				}

				document.getElementById("zoombutton").style.width = iconSize;
				document.getElementById("zoombutton").style.height = iconSize;
				document.getElementById("zoombutton").style.top = iconOffset;
				document.getElementById("zoombutton").style.right = iconOffset;

				document.getElementById("helpbutton").style.width = iconSize;
				document.getElementById("helpbutton").style.height = iconSize;
				document.getElementById("helpbutton").style.top = iconOffset;
				document.getElementById("helpbutton").style.left = iconOffset;

				document.getElementById("playbuttonicon").style.width = iconSize;
				document.getElementById("playbuttonicon").style.height = iconSize;
				document.getElementById("playbuttonicon").style.bottom = iconOffset;
				document.getElementById("playbuttonicon").style.right = iconOffset;

				if (!gIsQuickEditor){

					document.getElementById("pdfbuttonicon").style.width = iconSize;
					document.getElementById("pdfbuttonicon").style.height = iconSize;
					document.getElementById("pdfbuttonicon").style.bottom = iconOffset;
					document.getElementById("pdfbuttonicon").style.left = iconOffset;

				}
			}

		}
		else{

			var elem = document.getElementById("app-container");
			
			elem.style.marginLeft = "0px";

			if (giPadTwoColumn){
				
				var iconSize;
				var iconOffset;

				if (!isLandscapeOrientation()){

					iconSize = "80px";
					iconOffset = "8px";

				}
				else{
					iconSize = "54px";
					iconOffset = "16px";
				}

				document.getElementById("zoombutton").style.width = iconSize;
				document.getElementById("zoombutton").style.height = iconSize;
				document.getElementById("zoombutton").style.top = iconOffset;
				document.getElementById("zoombutton").style.right = iconOffset;

				document.getElementById("helpbutton").style.width = iconSize;
				document.getElementById("helpbutton").style.height = iconSize;
				document.getElementById("helpbutton").style.top = iconOffset;
				document.getElementById("helpbutton").style.left = iconOffset;

				document.getElementById("playbuttonicon").style.width = iconSize;
				document.getElementById("playbuttonicon").style.height = iconSize;
				document.getElementById("playbuttonicon").style.bottom = iconOffset;
				document.getElementById("playbuttonicon").style.right = iconOffset;

				if (!gIsQuickEditor){
					document.getElementById("pdfbuttonicon").style.width = iconSize;
					document.getElementById("pdfbuttonicon").style.height = iconSize;
					document.getElementById("pdfbuttonicon").style.bottom = iconOffset;
					document.getElementById("pdfbuttonicon").style.left = iconOffset;
				}
			}

		}
	}
}

//
// MIDI data to note mapper
//
function getMIDI_note_name(note){

	var MIDI_note_map = {
		// Special common ABC macros for WARBL and other controllers
        "24":" ", 	// C,,,
        "25":"BACKSPACE", // ^C,,,
        "26":"|",   // D,,,
        "27":"/", 	// ^D,,,
        "28":"2", 	// E,,,
        "29":"3", 	// F,,,
        "30":"4", 	// ^F,,,
        "31":"(3", 	// G,,,
        "32":"|:", 	// ^G,,,
        "33":":|", 	// A,,,
        "34":"||", 	// ^A,,,
        "35":"|]",	// B,,,
        "36":"C,,",
        "37":"C,,",
        "38":"D,,",
        "39":"D,,",
        "40":"E,,",
        "41":"F,,",
        "42":"F,,",
        "43":"G,,",
        "44":"G,,",
        "45":"A,,",
        "46":"A,,",
        "47":"B,,", 
        "48":"C,",
        "49":"C,",
        "50":"D,",
        "51":"D,",
        "52":"E,",
        "53":"F,",
        "54":"F,",
        "55":"G,",
        "56":"G,",
        "57":"A,",
        "58":"A,",
        "59":"B,", 
        "60":"C",
        "61":"C",
        "62":"D",
        "63":"D",
        "64":"E",
        "65":"F",
        "66":"F",
        "67":"G",
        "68":"G",
        "69":"A",
        "70":"A",
        "71":"B",
        "72":"c",
        "73":"c",
        "74":"d",
        "75":"d",
        "76":"e",
        "77":"f",
        "78":"f",
        "79":"g",
        "80":"g",
        "81":"a",
        "82":"a",
        "83":"b",
        "84":"c'",
        "85":"c'",
        "86":"d'",
        "87":"d'",
        "88":"e'",
        "89":"f'",
        "90":"f'",
        "91":"g'",
        "92":"g'",
        "93":"a'",
        "94":"a'",
        "95":"b'",
        "96":"c''"
    };

	var result = MIDI_note_map[""+note];

	return result;
}

const sharpNotes= ["c", "^c", "d", "^d", "e", "f", "^f", "g", "^g", "a", "^a", "b" ]
const flatNotes= ["c", "_d", "d", "_e", "e", "f", "_g", "g", "_a", "a", "_b", "b" ]

const sharps= [6,1,8,3,10,5]
const flats= [10,3,8,1,6,11]

// Determines the key signature
// abcInput: ABC input string
// returns: key signature map to use, or null on error.
function midiFindKeySignature(abcInput) {

    var myMap = null;

    var keyMatch = abcInput.match(/^K: *([A-G])([b#])? *(.*?)$/m);
    if (keyMatch == null || keyMatch.length < 3) {
        return null;
    }

    var keySignatureBase;
    var keyExtra;

    if (keyMatch[2] == undefined) {
        keySignatureBase = keyMatch[1];
    } else {
        keySignatureBase = keyMatch[1] + keyMatch[2];
    }
    keyExtra = keyMatch[3].toLowerCase();

    // Strip any trailing comments
    var searchExp = /%.*/
    keyExtra = keyExtra.replace(searchExp,"");
    keyExtra = keyExtra.trim();

    //console.log("Got base key of '" + keySignatureBase + "' and extra of '" + keyExtra + "'");
    
    // Determine musical mode
    if (keyExtra == "" ||
        keyExtra.search("maj") != -1 ||
        keyExtra.search("ion") != -1) {
        //console.log("Mode: Ionian (major)");
        myMap = midiKeySignatureMap(keySignatureBase, 0);
    } else if (keyExtra.search("mix") != -1) {
        //console.log("Mode: Mixolydian");
        myMap = midiKeySignatureMap(keySignatureBase, 1);
    } else if (keyExtra.search("dor") != -1) {
        //console.log("Mode: Dorian");
        myMap = midiKeySignatureMap(keySignatureBase, 2);
    } else if ((keyExtra.search("m") != -1 && keyExtra.search("mix") == -1) ||
        keyExtra.search("min") != -1 ||
        keyExtra.search("aeo") != -1) {
        //console.log("Mode: Aeolian (minor)");
        myMap = midiKeySignatureMap(keySignatureBase, 3);
    } else if (keyExtra.search("phr") != -1) {
        //console.log("Mode: Phrygian");
        myMap = midiKeySignatureMap(keySignatureBase, 4);
    } else if (keyExtra.search("loc") != -1) {
        //console.log("Mode: Locrian");
        myMap = midiKeySignatureMap(keySignatureBase, 5);
    } else if (keyExtra.search("lyd") != -1) {
        //console.log("Mode: Lydian");
        myMap = midiKeySignatureMap(keySignatureBase, -1);
    } else if (keyExtra.search("exp") != -1) {
        //console.log("(Accidentals to be explicitly specified)");
        myMap = midiKeySignatureMap("C", 0);
    } else {
        // Unknown
        //console.log("Failed to determine key signature mode");
        myMap = null;
    }

    if (myMap == null) {
        return myMap;
    }

    // Handle explicit accidentals
    var explicitFlats = keyExtra.match(/_./g);
    var explicitSharps = keyExtra.match(/\^./g);

    for (note in explicitFlats) {
        myMap.flats += explicitFlats[note][1].toUpperCase();
    }

    for (note in explicitSharps) {
        myMap.sharps += explicitSharps[note][1].toUpperCase();
    }

    return myMap;

}

// Calculates a key signature map given a tonic and a mode
function midiKeySignatureMap(tonic, modeFlatness) {

    var circleOfFifths = "FCGDAEB";

    var signature = {
        sharps: "",
        flats: ""
    };

    var baseSharpness = circleOfFifths.indexOf(tonic[0]) - 1;

    if (baseSharpness == -2) {
        //console("Bad tonic: " + tonic);
        return null;
    }

    if (tonic.slice(1) == "b") {
        baseSharpness -= 7;
    } else if (tonic.slice(1) == "#") {
        baseSharpness += 7;
    }

    var totalSharpness = baseSharpness - modeFlatness;

    if (totalSharpness > 7) {
        //console.log("Too many sharps: " + totalSharpness);
        return null;
    } else if (totalSharpness < -7) {
        //console.log("Too many flats: " + (totalSharpness * -1));
        return null;
    } else if (totalSharpness > 0) {
        signature.sharps = circleOfFifths.slice(0, totalSharpness);
    } else if (totalSharpness < 0) {
        signature.flats = circleOfFifths.slice(totalSharpness);
    }

    signature.accidentalSharps = "";
    signature.accidentalFlats = "";
    signature.accidentalNaturals = "";

    return signature;
}


////////////////////////////////////////////////////////////
//
// translate from MIDI index to ABC note
//
////////////////////////////////////////////////////////////
function lookupAbcNote(index, useFlat) {

    var pos= index % 12 // numerical note in the octave
    var octave= Math.floor(index/12) // C0 = 0
 
    var note= useFlat ? flatNotes[pos] : sharpNotes[pos]

    if (octave < 5) {
        note= note.toUpperCase()
        var commas= 4-octave
        note= note + ",".repeat(commas)
    }
    else {
        var apos= octave - 5
        note= note + "'".repeat(apos)
    }

    return note
}

//
// Key and mode aware MIDI note names solution
// 
function getMIDI_note_name_chromatic(note) {

	var MIDI_note_map = {
		// Special common ABC macros for WARBL and other controllers
        "24":" ", 	// C,,
        "25":"BACKSPACE", // ^C,,
        "26":"|",   // D,,
        "27":"/", 	// ^D,,
        "28":"2", 	// E,,
        "29":"3", 	// F,,
        "30":"4", 	// ^F,,
        "31":"(3", 	// G,,
        "32":"|:", 	// ^G,,
        "33":":|", 	// A,,
        "34":"||", 	// ^A,,
        "35":"|]",	// B,,
    };

    if (note < 24){
    	console.log("out of range");
    	return;
    }

    if ((note >= 24) && (note <= 35)){

    	return MIDI_note_map[note];

    }

    //console.log("Note index: " + note)

    // MAE 4 Feb 2024 - This locates the current tune
    var thisTuneIndex = findSelectedTuneIndex();
    var thisTune = getTuneByIndex(thisTuneIndex);

    // This returns a structure that includes the sharps and flats for the current key and mode
    // You can use this instead of your current system for sharp and flat parsing
    // Structure includes sharps and flats as a string
    var theKeySignature = midiFindKeySignature(thisTune);

    // No key signature found
    if (theKeySignature == null){
    	theKeySignature = {sharps:"", flats:""};
    }

    //debugger;
    
    // The rest is your original code...
    
    var index= (parseInt(note) -12) // start from C0
    var pos= index % 12 // numerical note in the octave

    var modifier= 0;
    var prefix= "";

    var isSharpKey = true;
    var isFlatKey = false;

    if (theKeySignature.flats != ""){
        isSharpKey = false;
        isFlatKey = true;
    }

    if (isSharpKey) {

        var nSharps=theKeySignature.sharps.length;

        var shs= sharps.slice(0,nSharps) // get the sharps for this sig

        if (shs.includes(pos)) 
            modifier-- // remove sharp since it's already in the sig
        else if (shs.includes(pos+1)) // naturals precede sharps
            prefix="=" // add natural to override the sig
  
    }
    else{

        var nFlats = theKeySignature.flats.length;

        var fls= flats.slice(0,nFlats) // get the flats for this sig

        if (fls.indexOf(pos)!=-1)
            modifier++ // remove flat since it's already in the sig
        else if (fls.includes(pos-1)) // naturals follow flats
            prefix="=" // add natural to override the sig
  
    }

    var result= prefix+ lookupAbcNote (index + modifier, isFlatKey)
    
    //console.log("MIDI index: " + index + 
    //            "   Original note: " + lookupAbcNote (index, isFlatKey) + 
    //            "   in signature: " + result)
                        
    return result
}


//
// MIDI input handler
//
var gMIDIAccess = null;

function MIDI_NoteOn(data){
	
	//console.log("MIDI_NoteOn data:"+data);

	var theNoteName;

	if (gMIDIChromatic){
		theNoteName = getMIDI_note_name_chromatic(data);
	}
	else{
		theNoteName = getMIDI_note_name(data);
	}

	if (theNoteName){

		//console.log("getMIDI_note_name: "+theNoteName);

		var theSelectionStart = gTheABC.selectionStart;
		
		var theSelectionEnd = gTheABC.selectionEnd;

		if (theNoteName != "BACKSPACE"){

			// console.log("theSelectionStart before: "+theSelectionStart);
			// console.log("theSelectionEnd before: "+theSelectionEnd);

			var leftSide = gTheABC.value.substring(0,theSelectionStart);
			
			var rightSide = gTheABC.value.substring(theSelectionEnd);

			setABCEditorText(leftSide + theNoteName + rightSide);
			
			// Set dirty
			gIsDirty = true;

			gTheABC.selectionStart = theSelectionStart + theNoteName.length;

			gTheABC.selectionEnd = gTheABC.selectionStart;

			OnABCTextChange();

			// theSelectionStart = gTheABC.selectionStart;
			// theSelectionEnd = gTheABC.selectionEnd;

			// console.log("theSelectionStart after: "+theSelectionStart);
			// console.log("theSelectionEnd after: "+theSelectionEnd);
		}
		else{

			// Delete the last character
			if (theSelectionStart != 0){

				var leftSide = gTheABC.value.substring(0,theSelectionStart-1);
			
				var rightSide = gTheABC.value.substring(theSelectionEnd);

				setABCEditorText(leftSide + rightSide);

				// Set dirty
				gIsDirty = true;

				gTheABC.selectionStart = theSelectionStart - 1;

				gTheABC.selectionEnd = gTheABC.selectionStart;

				OnABCTextChange();
			
			}
		}

	}

}

// MIDI input muting handlers
function toggleMIDIMute(){

   //console.log("Toggling MIDI mute");
    gMIDIMute = !gMIDIMute;

    // Give some feedback
    var elem = document.getElementById("toolpagetitle");

    if (gMIDIMute){
      elem.innerHTML = "<span style='color:red'>MIDI Input Muted</span>";
    }else{
      // Reset title
      setOnlineTitle();
    }

}

function enableMIDIMute(){

      var elem = document.getElementById("toolpagetitle");
      elem.onclick = toggleMIDIMute;
      
      gMIDIMute = false;
      
      // Reset title
      setOnlineTitle();

}

function disableMIDIMute(){

      var elem = document.getElementById("toolpagetitle");
      elem.onclick = null;

      gMIDIMute = false;

      // Reset title
      setOnlineTitle();


}


function MIDI_Receive(event) {
	
	//console.log("MIDI_Receive");

	if (!gAllowMIDIInput){
		return;
	}

  // Added 1 Jun 2025
  if (gMIDIMute){
    return;
  }
		
	var data0 = event.data[0];
	var data1 = event.data[1];
	var data2 = event.data[2];
	
	// console.log("MIDI_Receive");
	// console.log("MIDI_Receive target = "+event.target.name);
	// console.log("MIDI_Receive: "+data0+" "+data1+" "+data2);

	// Mask off the lower nibble (MIDI channel, which we don't care about yet)
	switch (data0 & 0xf0) {

		case 0x90:

			if (data2 != 0){

				MIDI_NoteOn(data1);

			}

			break;
	}

}

function midiOnStateChange(event) {
	
	console.log("midiOnStateChange");

	var inputs = gMIDIAccess.inputs.values();

	for (var input = inputs.next(); input && !input.done; input = inputs.next()) {
		
		//console.log("Adding MIDI input...");

		input.value.onmidimessage = MIDI_Receive;

	}
}

//
// Callback when first requesting WebMIDI support
//
function onMIDIInit(midi) {

	//debugger;

	console.log("onMIDIInit");

  enableMIDIMute();

	// Save off the MIDI access object
	gMIDIAccess = midi;
	
	// Walk the inputs
	var inputs = gMIDIAccess.inputs.values();

	for (var input = inputs.next(); input && !input.done; input = inputs.next()) {
		
		//console.log("Adding MIDI input...");

		input.value.onmidimessage = MIDI_Receive;

	}

	midi.onstatechange = midiOnStateChange;

}

//
// Callback if MIDI start fails
//
function onMIDIReject(err) {

	//console.log("onMIDIReject");

	sendGoogleAnalytics("action","onMIDIReject");

	var thePrompt = "The MIDI input system failed to start. MIDI input will be disabled.";
	thePrompt = makeCenteredPromptString(thePrompt);

	DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

	// Reset the saved state so the message doesn't come up again on launch
	if (gLocalStorageAvailable){

		gAllowMIDIInput = false;
		localStorage.AllowMIDIInput = false;

	}

}

// 
// Does the browser support MIDI access?
//
function browserSupportsMIDI(){
	if (navigator.requestMIDIAccess){
		return true;
	}
	else{
		return false;
	}
}

function initMIDI(){

	if (browserSupportsMIDI()){

		// Don't do this more than once per session
		if (gMIDIAccess == null){

			//console.log("initMIDI");

			// If available in the browser, request MIDI access with sysex support
			if (navigator.requestMIDIAccess)

				navigator.requestMIDIAccess({
					sysex: false
				}).then(onMIDIInit, onMIDIReject);

			else{

				var thePrompt = "This browser does not support MIDI input.";
				thePrompt = makeCenteredPromptString(thePrompt);

				DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

				// Reset the saved state so the message doesn't come up again on launch
				if (gLocalStorageAvailable){

					gAllowMIDIInput = false;
					localStorage.AllowMIDIInput = false;

				}

			}
		}

	}

}

//
// Show the first run welcome screen
//
function showWelcomeScreen(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","showWelcomeScreen");

    var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica">Welcome to My ABC Transcription Tools!</p>';
	   modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica"><strong>Please visit my <a href="userguide.html" target="_blank" title="ABC Transcription Tools User Guide">User Guide</a> page for complete instructions and demo videos on how to use the tools.</strong></p>';
	   if (gIsQuickEditor){
			modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">The Quick Editor is optimized for editing and playback of larger tunebooks.</p>';
   		}

	   modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">To begin, type or paste tunes in ABC format into the text area.</p>'; 
	   modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Each ABC tune <strong>must</strong> begin with an X: tag.</p>'; 
	   modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Notation updates instantly as you make changes to the ABC.</p>'; 
	   modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Click "Open" to open ABC, MusicXML, BWW, or MIDI files from your system.</p>';
	   modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Click "Add" to add ABC MusicXML, BWW, or MIDI files or tune templates.</p>';
	   if (isPureDesktopBrowser()){
	   		modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">You may drag-and-drop ABC, MusicXML, BWW, or MIDI files onto the editor area to add them.</p>';
	   }
	   modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Click "Search for Tunes" to find tunes by name.</p>';
	   modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica"><strong>Once ABC has been entered and notation is displayed:</strong></p>';
	   modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">• Click the Zoom-Out arrows at the top-right to view the notation full screen.</p>';
	   modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">• Click "Save" to save all the ABC text to an ABC text file.</p>';
	   if (!gIsQuickEditor){
			modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">• Click "Export PDF" to export your tunebook in PDF format.</p>';
      modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">• Click "Export Website" to export your tunebook as a website.</p>';
   	 }
		modal_msg += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">• Click "Play" to play or train on the tune currently being edited.</p>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 50, scrollWithPage: (AllowDialogsToScroll()) });

}

//
// Show the first run zoom screen
//
function showZoomInstructionsScreen(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","showZoomInstructionsScreen");

   	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica">Welcome to My ABC Transcription Tools!</p>';
   	    modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Since this is your first time using the tools, here is some useful information to help you get started:</p>';
   	    modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">In this view, you may scroll through the tune notation.</p>';

  		if (!gIsQuickEditor){
  			modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Click the Play button at the bottom-right to play or train on the current tune.</p>';
  			modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">From the Player you can also export the tune image or audio in multiple formats.</p>';
  			modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Click the PDF button at the bottom-left to export the tunes in PDF format.</p>';
  		}

 	   if (!gDisableEditFromPlayLink){

	       modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">If you would like to edit the ABC for these tunes:</p>';
	  	   modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Click the Zoom-In arrows at the top-right to close the full screen notation view and open the ABC editor.</p>';
	  	   modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">The ABC for all the tunes will be loaded in the editor.</p>';
	   	   modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">In the ABC editor, click the Zoom-Out arrows at the top-right to view notation full screen.</p>';
	   }

	   modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Please visit my <a href="userguide.html" target="_blank" title="ABC Transcription Tools User Guide">User Guide</a> page for complete instructions and demo videos on how to use the tools.</p>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 50, scrollWithPage: (AllowDialogsToScroll()) });

}

//
// Show the tip jar reminder
//
function TipJarReminderDialog(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","TipJarReminderDialog");

    var modal_msg  = '<p style="text-align:center;font-size:22pt;font-family:helvetica">Thank You!</p>';
 	   modal_msg += '<p style="font-size:14pt;line-height:18pt;font-family:helvetica;text-align:center;">I hope my ABC Transcription Tools have been useful to you!</p>';
	   modal_msg += '<p style="font-size:14pt;line-height:18pt;font-family:helvetica;text-align:center;margin-top:36px;">If so, please consider dropping something in one of my </p>';
	   modal_msg += '<p style="font-size:14pt;line-height:18pt;font-family:helvetica;text-align:center;"><strong><a href="tipjars.html" target="_blank" title="My Virtual Tip Jars">Virtual Tip Jars</a></strong></p>';
	   modal_msg += '<p style="font-size:14pt;line-height:18pt;font-family:helvetica;text-align:center;margin-top:36px;">Cheers and thanks!</p>';
	   modal_msg += '<div style="text-align:center"><img style="width:150px;" src="img/michael2.jpg"/></div>';
	   modal_msg += '<p style="font-size:14pt;line-height:18pt;font-family:helvetica;text-align:center;">Michael Eskin</p>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 75, scrollWithPage: (AllowDialogsToScroll()) });

}

//
// Show the TinyURL reminder
//
function TinyURLReminderDialog(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","TinyURLReminderDialog");

    var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica">TinyURL Use Request</p>';
	   modal_msg += '<p style="font-size:12pt;line-height:14pt;font-family:helvetica;text-align:center;margin-top:32px;">I get a limited number of free shortened URLs from TinyURL each month.</p>';
	   modal_msg += '<p style="font-size:12pt;line-height:18pt;font-family:helvetica;text-align:center;">If you plan on creating many shortened URLs, please sign up<br/>for your own free or paid TinyURL account at:</p>';
	   modal_msg += '<p style="font-size:12pt;line-height:14pt;font-family:helvetica;text-align:center;"><strong><a href="https://tinyurl.com" target="_blank" title="TinyURL">TinyURL</a></strong></p>';
	   modal_msg += '<p style="font-size:12pt;line-height:14pt;font-family:helvetica;text-align:center;">After signing up, you can obtain a private API token from:</p>';
	   
	   modal_msg += '<p style="font-size:12pt;line-height:14pt;font-family:helvetica;text-align:center;"><strong><a href="https://tinyurl.com/app/settings/api" target="_blank" title="TinyURL API">TinyURL API Settings</a></strong></p>';
	   modal_msg += '<p style="font-size:12pt;line-height:14pt;font-family:helvetica;text-align:center;">And then enter it on the <strong>Advanced Settings</strong> dialog.</p>';
	   modal_msg += '<p style="font-size:12pt;line-height:14pt;font-family:helvetica;text-align:center;">More details here:</p>';
	   modal_msg += '<p style="font-size:12pt;line-height:14pt;font-family:helvetica;text-align:center;"><strong><a href="https://michaeleskin.com/abctools/userguide.html#private_tinyurl_token" target="_blank" title="Private TinyURL Token">Using a Private TinyURL API Token</a></strong></p>';
	   modal_msg += '<p style="font-size:12pt;line-height:14pt;font-family:helvetica;text-align:center;margin-top:36px;">Cheers and thanks!</p>';
	   modal_msg += '<div style="text-align:center"><img style="width:150px;" src="img/michael2.jpg"/></div>';
	   modal_msg += '<p style="font-size:12pt;line-height:14pt;font-family:helvetica;text-align:center;">Michael Eskin</p>';

	DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 25, scrollWithPage: (AllowDialogsToScroll()) });

}
//
// Show help when in fullscreen mode
//
function ShowHelp(){

	// Keep track of dialogs
	sendGoogleAnalytics("dialog","ShowHelp");

	if (gIsMaximized){

	   	var modal_msg  = '<p style="text-align:center;font-size:16pt;font-family:helvetica">About the Full Screen Notation View</p>';

   	   	modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">In this view, you may scroll through the tune notation.</p>';
  	   	modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Click the Play button at the bottom-right to play or train on the current tune.</p>';
  	   	modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">From the Player you can also export the tune image or audio in multiple formats.</p>';
	   	modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Click the PDF button at the bottom-left to export the tunes in PDF format.</p>';

  	   	if (!gDisableEditFromPlayLink){
	       modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">If you would like to edit the ABC for these tunes:</p>';
	  	   modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Click the Zoom-In arrows at the top-right to close the full screen notation view and open the tunes in the ABC editor.</p>';
	  	   modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">The ABC for all the tunes will be loaded in the editor.</p>';
	   	   modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">In the ABC editor, click the Zoom-Out arrows at the top-right to view the notation full screen.</p>';
	   	}	
	   
	   	modal_msg  += '<p style="font-size:12pt;line-height:16pt;font-family:helvetica">Please visit the <a href="userguide.html" target="_blank" title="ABC Transcription Tools User Guide">User Guide</a> page for complete instructions and demo videos on how to use the tools.</p>';

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 50, scrollWithPage: (AllowDialogsToScroll()) });
	}
	else{
		// Open the user guide in a new tab
		window.open("https://michaeleskin.com/abctools/userguide.html");
	}

}

//
// Text Area resize observer
// 
// Try to restrict the recalc rate to something reasonable
//
var RESIZETEXTBOX_DEBOUNCEMS = 20;

var gLastResizeTextboxTime = 0;

function ResizeTextBox(){

	if (gIsMaximized){
		return;
	}

	var theTime = Date.now();

	var deltaTime = theTime - gLastResizeTextboxTime;

	if (deltaTime > RESIZETEXTBOX_DEBOUNCEMS) {

		gLastResizeTextboxTime = theTime;
		
		//console.log("ResizeTextBox");

		// console.log("Initial width = "+gInitialTextBoxWidth);
		// console.log("Initial container width = "+gInitialTextBoxContainerWidth);
		// console.log("Initial container left = "+gInitialTextBoxContainerLeft);

		var currentWidth = gTheABC.offsetWidth;

		// console.log("current width = "+gTheABC.offsetWidth);
		// console.log("containerWidth = "+gInitialTextBoxContainerWidth);

		var theOffset = (gInitialTextBoxContainerWidth - gInitialTextBoxWidth)/2;

		// console.log("theOffset = "+theOffset);

		if ((currentWidth > gInitialTextBoxContainerWidth) && (!giPadTwoColumn)){

			// console.log("Setting the marginLeft for stretch");

			var theDelta = ((currentWidth - gInitialTextBoxWidth)/2)-theOffset;

			if (theDelta <= gInitialTextBoxContainerLeft){

				gTheABC.style.marginLeft = -theDelta+"px";

				if (!gIsOneColumn){

					//debugger;

					var theAppContainer = document.getElementById("app-container");

					var theAppContainerMargin = theAppContainer.style.marginLeft;

					if (theAppContainerMargin){

						theAppContainerMargin = theAppContainer.style.marginLeft.replace("px","");

						theAppContainerMarginFloat = parseFloat(theAppContainerMargin);

						if (!isNaN(theAppContainerMarginFloat)){

							// There is some edge delta factor
							theAppContainerMarginFloat -= 48;

							if (theDelta < theAppContainerMarginFloat){

								// Slide the notation to the right but don't allow wrapping
								gTheNotation.style.marginLeft = theDelta+"px";

							}
						}

					}

				}

			}

		}
		else{

			// console.log("Setting the marginLeft to 0px");

			gTheABC.style.marginLeft = "0px";

			// Reset the notation left margin
			gTheNotation.style.marginLeft = theDelta+"px";

		}
	}
}

//
// Allow tall dialogs to scroll on mobile and short screens
//
function AllowDialogsToScroll(){
	
	if (isMobileBrowser()){

		return true;

	}

    // Try to make the app more usable at short window heights
    var windowHeight = window.innerHeight;

    if (windowHeight < 950){

    	return true;

    }
	
	return false;

}

//
// Clean "smart quotes" from the ABC
//
function CleanSmartQuotes(){

	// Smart quote cleaning disabled
	if (!gCleanSmartQuotes){
		return;
	}

	var val = gTheABC.value;

	// Double quotes
	val = val.replaceAll('“','"');
	val = val.replaceAll('”','"');

	// Single quotes
	val = val.replaceAll('‘',"'");
	val = val.replaceAll('’',"'");
	
	setABCEditorText(val);

	// Also clear the diagnostics area
    elem = document.getElementById("diagnostics");
    elem.innerHTML = "";		


}

//
// Update the editor font size
//
function updateABCEditorFont(){

	// Make sure the default still looks the same
	if (gABCEditorFontsize == 13){
		gTheABC.style.fontSize = "13pt";
		gTheABC.style.lineHeight = "16pt";
	}
	else{
		// Scale the line height based on the font size
		gTheABC.style.fontSize = gABCEditorFontsize + "pt";
		gTheABC.style.lineHeight = (gABCEditorFontsize+(gABCEditorFontsize*.23)) + "pt";
	}
}

//
// Show or hide the diagnostics
//
function updateDiagnostics(){

	var elem = document.getElementById("diagnostics");

	if (gShowDiagnostics){
		elem.style.display = "block";
	}
	else{
		elem.style.display = "none";		
	}
}

//
// Disallow Facebook iOS webview
//
//
var gIsFacebook = false;

function CheckFacebook_iOS(){

    gIsFacebook = false;

	if (!gIsIOS){
		return;
	}

	var UA = navigator.userAgent;

	if ((UA.indexOf("FBIOS") != -1) || ((UA.indexOf("FBAV") != -1))){
		gIsFacebook = true;
	}

	if (gIsFacebook){

		// If on iOS 17 or 18, put up button to launch into Safari
		if ((UA.indexOf("Version/17") != -1) || (UA.indexOf("OS 17") != -1) || (UA.indexOf("Version/18") != -1) || (UA.indexOf("OS 18") != -1)){

	        try{

				var the_href = window.top.location.href;

				if (the_href){
				
					the_href = "x-safari-"+the_href;
				  	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-top:60px;">Facebook iOS App Browser Issue</p>';
				    modal_msg  += '<p style="font-size:12pt;line-height:30pt;font-family:helvetica;">The Facebook iOS app browser does not support running the ABC Tools.</p>'; 

				    modal_msg  += '<p style="font-size:12pt;line-height:20pt;font-family:helvetica">Open the ABC Transcription Tools in Safari by clicking the button below:</p>'; 
					
					modal_msg += '<p style="text-align:center"><a style="display: inline-block; padding: 10px 20px; margin-top:40px; font-size: 18px; color: white; background-color: #007BFF; text-align: center; text-decoration: none; border-radius: 5px; transition: background-color 0.3s ease;" href='+the_href+'>Click here to open in Safari</a></p>';
				}
			}
			catch(error){

				// Cross-domain issue

			  	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-top:40px;">Facebook iOS App Browser Issue</p>';
			    modal_msg  += '<p style="font-size:12pt;line-height:30pt;font-family:helvetica;">The Facebook iOS app browser does not support running the ABC Tools.</p>'; 
				modal_msg  += '<p style="font-size:12pt;line-height:18pt;font-family:helvetica;margin-top:36px;">To open the ABC Transcription Tools in Safari from this view:</p>';
			    modal_msg  += '<p style="font-size:12pt;line-height:20pt;font-family:helvetica">1) Click the&nbsp;&nbsp;<strong><span style="font-size:18pt">...</span></strong>&nbsp;&nbsp;at the top-right of the screen</p>'; 
			    modal_msg  += '<p style="font-size:12pt;line-height:12pt;font-family:helvetica">2) Click <strong>Open in external browser</strong></p>'; 

			}

		}
		else{

			// Instructions for iOS 16 and before
			var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-top:40px;">Facebook iOS App Browser Issue</p>';
	        modal_msg  += '<p style="font-size:12pt;line-height:30pt;font-family:helvetica;">The Facebook iOS app browser does not support running the ABC Tools.</p>'; 
			modal_msg  += '<p style="font-size:12pt;line-height:18pt;font-family:helvetica">To open the ABC Transcription Tools in Safari from this view:</p>';
		    modal_msg  += '<p style="font-size:12pt;line-height:20pt;font-family:helvetica">1) Click the&nbsp;&nbsp;<strong><span style="font-size:18pt">...</span></strong>&nbsp;&nbsp;at the top-right of the screen</p>'; 
		    modal_msg  += '<p style="font-size:12pt;line-height:12pt;font-family:helvetica">2) Click <strong>Open in external browser</strong></p>'; 

		}

		DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 100, scrollWithPage: (AllowDialogsToScroll()) });

		setTimeout(function(){

		    var theOKButtons = document.getElementsByClassName("modal_flat_ok");

			// Find the button that says "OK" and hide it
			var theOKButton = null;
			
			for (var i=0;i<theOKButtons.length;++i){

				theOKButton = theOKButtons[i];

				if (theOKButton.innerText == "OK"){

					//console.log("Found OK button");
					theOKButton.style.display = "none";

					break;

				}
			}

		},10);
	}
}


//
// Fix the iOS 17 URL encoded paste issue
//
function FixIOS17(){

	// Restrict to iOS 17+

	var UA = navigator.userAgent;
	
	//alert("navigator.userAgent: "+UA);

	// Checking both Safari as well as Chrome/Firefox user agent strings
	if ((UA.indexOf("Version/17") != -1) || (UA.indexOf("OS 17") != -1) || (UA.indexOf("Version/18") != -1) || (UA.indexOf("OS 18") != -1) || (UA.indexOf("FxiOS") != -1)){

		//alert("Doing iOS 17 fix");

		var val = gTheABC.value;

		try{
			
			val = decodeURI(val);

			try{

				val = decodeURI(val);

			}
			catch(err){

				//console.log("FixIOS17 catch 2");

			}
		}
		catch(err){

			//console.log("FixIOS17 catch 1");

		}

		val = val.replaceAll("%3A",":")		
		val = val.replaceAll("x:","X:");

		setABCEditorText(val);
		
	}

}

//
// Add tab close listener
//
function theTabCloseListener(e){

	DoSaveLastAutoSnapShot();

	return;

}

function AddTabCloseListener(){

	if (isPureDesktopBrowser()){

		//console.log("Adding tab close listener")

	    window.addEventListener('beforeunload',theTabCloseListener);

	}
}


//
// File open intercept alert
//
function fileOpenIntercept(e){

	var elem = document.getElementById("selectabcfile");

	if (gIsDirty){

		var thePrompt = '<p style="font-size:18pt;line-height:20pt;text-align:center;">You Have Unsaved Changes</p><p style="font-size:13pt;line-height:16pt;text-align:center;margin-top:30px;">Click "OK" to abandon your work and open a new file.<br/><br/>Click "Cancel" to go back.</p>';

		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);

		DayPilot.Modal.confirm(thePrompt,{ top:200, theme: "modal_flat", scrollWithPage: (AllowDialogsToScroll()) }).then(function(args){

			if (!args.canceled){

				// Click the file open input element
				setTimeout(function(){

					elem.click();

				},100);

			}
		});
	}
	else{

		elem.click();

	}
}

//
// Remove tab close listener
//
function RemoveTabCloseListener(){

	if (isPureDesktopBrowser()){

		//console.log("Removing tab close listener")

	    window.removeEventListener('beforeunload',theTabCloseListener);
	}
}

//
// Hide or show the tab buttons based on the state of gFeaturesShowTabButtons
//
function ShowHideTabButtons(){
	
	var elem = document.getElementById("tabs-selection");

	if (gFeaturesShowTabButtons){

		elem.style.display = "flex";

		elem = document.getElementById("transpose-controls");

		elem.style.marginTop = "18px";

	}
	else{

		elem.style.display = "none";

		elem = document.getElementById("transpose-controls");

		elem.style.marginTop = "0px";

	}

	// Recalculate the notation top position
	UpdateNotationTopPosition();


}


//
// Returns true if on a Mac
//
function isMac(){

	return (navigator.userAgent.indexOf('Macintosh') !== -1 || navigator.userAgent.indexOf('Mac OS X') !== -1);

}

//
// Returns true if on desktop, not mobile
// Two column iPad is treated mostly like desktop for many features
//
function isDesktopBrowser(){

	if (giPadTwoColumn){
		return true;
	}

	return (!(gIsIOS || gIsAndroid));

}

//
// Returns true if on mobile, not desktop
//
function isMobileBrowser(){

	return (gIsIOS || gIsAndroid);

}
// 
// Returns true if it's really a desktop browser and not a two-column iPad
//
function isPureDesktopBrowser(){

	return (isDesktopBrowser() && (!isMobileBrowser()));

}

//
// Create a centered prompt string
//
function makeCenteredPromptString(thePrompt){
	return '<p style="font-size:12pt;line-height:18pt;font-family:helvetica;text-align:center">'+thePrompt+'</p>';
}

//
// Send a Google analytics event
//
function sendGoogleAnalytics(theCategory,theAction,theLabel){

	// Don't send analytics if offline
	if (!navigator.onLine){
		//console.log("sendGoogleAnalytics - Offline: Not sending info ")
		return;
	}

	// Don't send analytics on iOS Safari
	if (gIsIOS){
		return;
	}

	// Don't send analytics if local storage not available
	if (!gLocalStorageAvailable){
		return;
	}

	if (typeof gtag !== "undefined"){

		if ((gtag) && (gtag instanceof Function)){

			if (!theLabel){
				theLabel = "none";
			}

			//console.log("sendGoogleAnalytics - Online: Sending gtag abctools event_category: "+theCategory+" event_action: "+theAction+" event_label: "+theLabel);

			if (!gIsQuickEditor){
				gtag('event', 'abc_'+theCategory+"_"+theAction, { event_category: theCategory, event_action: theAction, event_label: theLabel});
			}
			else{
				gtag('event', 'q_abc_'+theCategory+"_"+theAction, { event_category: theCategory, event_action: theAction, event_label: theLabel});
			}

		}
	}
	// else{

	// 	//console.log("sendGoogleAnalytics - gtag not defined ")

	// }

}

//
// Are we on iOS?
//
function isIOS() {
	if (/iPad|iPhone|iPod/.test(navigator.platform)) {
		return true;
	} else {
		return navigator.maxTouchPoints &&
			navigator.maxTouchPoints > 2 &&
			/MacIntel/.test(navigator.platform);
	}
}

//
// Are we on an iPhone?
//
function isIPhone() {
	if (/iPad|iPhone|iPod/.test(navigator.platform)) {
		return true;
	} 
	else{
		return false;
	}
}

//
// Are we on an iPad?
//
function isIPad() {
	return (

		(navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform))
		||
		(navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /iPad/.test(navigator.platform))

	);

}

//
// Are we on Android?
//
function isAndroid(){
	if (/Android/i.test(navigator.userAgent)) {
		return true;
	}
	else{
		return false;
	}
}

//
// Are we on Safari?
//
function isSafari(){

	if (/Safari/i.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor)) {
		return true;
	}
	else{
		return false;
	}
}

//
// Are we on Chrome?
//
function isChrome(){

	if (/chrome|chromium|crios/i.test(navigator.userAgent)) {
		return true;
	}
	else{
		return false;
	}
}
//
// Update the inline player control on each render
//
function inlinePlayback(){

	// Clean up last play operation
	gMIDIbuffer = null;

	// If on iOS and the muting controller installed, dispose it now
	if (gIsIOS){

		if (gTheMuteHandle){
		 	gTheMuteHandle.dispose();
				gTheMuteHandle = null;
			}
	}

	if (gSynthControl){
			
		gSynthControl.destroy();

		gSynthControl = null;

	}

	setTimeout(function(){

		// MAE 23 Jun 2024
		var theABC = getTuneByIndex(gCurrentTune)

		theABC = PreProcessPlayABC(theABC);

		if (!gRawMode){

			theABC = processAllStripping(theABC);

			// Inject %%staffsep 
			var searchRegExp = /^X:.*$/gm

			theABC = theABC.replace(searchRegExp, "X:1\n%%staffsep " + gStaffSpacing);

		}

		// Do common setup of soundfont and custom timing injection
		if (!PlayerSetupCommon(theABC)){
			return;
		}
			
		ScanTuneForCustomTimingInjection(theABC);

		// Swing explorer scan overrides the default
		ScanTuneForSwingExplorer(theABC);

		var instrument = GetRadioValue("notenodertab");

		var abcOptions = GetABCJSParams(instrument);

		abcOptions.oneSvgPerLine = false;
				
		function setInlineTune() {

			gSynthControl.disable(true);

			var theRenderDivID = "notation0";

			if (gRawMode){
				theRenderDivID = "offscreenrenderquickedit";
			}

			var visualObj = ABCJS.renderAbc(theRenderDivID, theABC, abcOptions)[0];

			//Post process whistle or note name tab
			postProcessTab([visualObj], theRenderDivID, instrument, true);

			var midiBuffer = new ABCJS.synth.CreateSynth(theABC);

			gMIDIbuffer = midiBuffer;
		    gMIDIInitStillWaiting = false;
		
			midiBuffer.init({
				visualObj: visualObj 
			}).then(function (response) {

				//debugger;

				//console.log(response);
				
				if (gSynthControl) {

					var fadeLength = computeFade(theABC);

					gSynthControl.setTune(visualObj, false, {fadeLength:fadeLength}).then(function (response) {
						
						console.log("Audio successfully loaded.");
						
					}).catch(function (error) {
						
		        // MAE 10 Jul 2024 - Hide the spinner
      			gMIDIInitStillWaiting = false;
						hideTheSpinner();

						console.log("Problem loading audio for this tune");

					});
				}
			}).catch(function (error) {

				//debugger;

		    // MAE 10 Jul 2024 - Hide the spinner
				gMIDIInitStillWaiting = false;

				hideTheSpinner();

				console.log("Problem loading audio for this tune");

			});
		}

		var cursorControl = new CursorControlOneTune();

		gSynthControl = new ABCJS.synth.SynthController(theABC);

		// Using large player controls?
		var elem = document.getElementById("playback-audio-inline");

		if (gLargePlayerControls){
			elem.classList.add("abcjs-large");
		}
		else{
			elem.classList.remove("abcjs-large");
		}

		gSynthControl.load("#playback-audio-inline", cursorControl, {displayLoop: true, displayRestart: true, displayPlay: true, displayProgress: true, displayWarp: true});
		
		// Hook up tempo dialog
		var elem = document.getElementsByClassName("abcjs-midi-tempo");
		if (elem && (elem.length > 0)){
			elem[0].onclick = SetPlayerTempo;
		}

		//debugger;
		// Try to deal with tab deactivation muting
		if (gIsIOS){

			var context = ABCJS.synth.activeAudioContext();

			// Decide on some parameters
			let allowBackgroundPlayback = false; // default false, recommended false
			let forceIOSBehavior = false; // default false, recommended false

			gTheMuteHandle = null;
			
			// Pass it to unmute if the context exists... ie WebAudio is supported
			if (context)
			{
			  // If you need to be able to disable unmute at a later time, you can use the returned handle's dispose() method
			  // if you don't need to do that (most folks won't) then you can simply ignore the return value
			  gTheMuteHandle = unmute(context, allowBackgroundPlayback, forceIOSBehavior);
			  
			}
		}

		// Recalculate the notation top position
		UpdateNotationTopPosition();

		setInlineTune();

	},100);

}

//
// Format the ABC so all the measure markers align vertically
//
function alignMeasureMarkers(abcNotation) {

	function findOffsets(pattern, text) {

	    let regex = new RegExp(pattern, 'g'); // Create a global regex pattern
	    let result;
	    let offsets = [];
	    
	    while ((result = regex.exec(text)) !== null) {

	        offsets.push({value:result[0],position: result.index});

	    }
	    
	    return offsets;
	}

	//debugger;

    // Split the ABC notation into lines
    let lines = abcNotation.split('\n');
    
    // Find all measure markers and their positions
    let markers = [];
    
    var maxMeasure = [];

    lines.forEach(line => {

       	//debugger;

        let matches = findOffsets(/\|\||:\|\[\d+|\|\[\d+|:\|:|::|:\|\d+|\|\d+|:\||\|:|\|\]|\[\||\|/g, line); 
       
        // No measure marker at the front of the line, push a pseudo-marker
       	if (matches && matches.length > 0){

       		if (matches[0].position > 0){
       			matches.unshift({value:"", position:0});
       		}

       	}

       	if (matches.length > maxMeasure.length){

       		var nToPush = matches.length - maxMeasure.length;

       		//console.log("nToPush: "+nToPush);
       		
       		for (var i=0;i<nToPush;++i){

       			maxMeasure.push(0);

       		}
       	}

        markers.push(matches);

        if (matches.length>1){
        	
        	for (var i=0;i<matches.length-1;++i){

        		var delta = matches[i+1].position - matches[i].position;

        		if (matches[i+1].value.indexOf(":") == 0){
        			delta++;
        		}

        		if (delta > maxMeasure[i]){

        			maxMeasure[i] = delta;

        		}

        	}
        }
        
    });

    //debugger;

    // Adjust lines to align measure markers
    var nLines = lines.length;

    var alignedLines = [];

    for (var i=0;i<nLines;++i){

    	if (lines[i].length == 0){
    		continue;
    	}

    	var thisLine = "";
     	
     	var thisMarker = markers[i];
   	
    	if (markers[i].length > 1){

    		for (var j=0;j<markers[i].length-1;++j){

    			var thisSegment = lines[i].substring(thisMarker[j].position,thisMarker[j+1].position);

    			//console.log("thisSegment: "+thisSegment)
    			
    			if (thisSegment.length < maxMeasure[j]){

    				var spacesToAdd = maxMeasure[j] - thisSegment.length;

    				if (thisMarker[j+1].value.indexOf(":") == 0){
    					spacesToAdd--;
    				}

    				//console.log("spacesToAdd "+spacesToAdd);
    				
    				for (var k=0;k<spacesToAdd;++k){

    					thisSegment += " ";
    				
    				}
    			}
    				
    			thisLine += thisSegment;
 
    		}

		    // Any leftover characters after the last measure marker?
			if (thisMarker[thisMarker.length-1].position < lines[i].length){

				thisLine += lines[i].substring(thisMarker[thisMarker.length-1].position,lines[i].length);

			}

    	}
    	else{

    		thisLine = lines[i];

    	}

    	alignedLines.push(thisLine);
    }
    
    // Join lines back into a single string
    let alignedAbcNotation = alignedLines.join('\n');

    return alignedAbcNotation;
}

//
// Align all the ABC measure markers
//
function AlignMeasures(bDoAll){

	if (!gAllowCopy){
		return;
	}

	sendGoogleAnalytics("action","AlignMeasures");

	clearGetTuneByIndexCache();

	if (bDoAll){

		var nTunes = CountTunes();

		var theNotes = gTheABC.value;

		var output = FindPreTuneHeader(theNotes);

		for (var i=0;i<nTunes;++i){

			var theTune = getTuneByIndex(i);

			var theNotes = JustTheNotes(theTune);

			var theNotesAligned = alignMeasureMarkers(theNotes);

			theTune = theTune.replace(theNotes,theNotesAligned);

			theTune = theTune.trim();

			output += theTune + "\n\n";

		}

		setABCEditorText(output);

		// Redraw
		RenderAsync(true,null);

	}
	else{

		var theSelectedTuneIndex = findSelectedTuneIndex();

		// Try to find the current tune
		var theTune = findSelectedTune();

		if (theTune == ""){
			// This should never happen
			return;
		}

		var theInjectedTune = "";

		var theNotes = JustTheNotes(theTune);

		var theNotesAligned = alignMeasureMarkers(theNotes);

		theInjectedTune = theTune.replace(theNotes,theNotesAligned);

		theInjectedTune = theInjectedTune.trim();

		// Stuff in the injected ABC
		var theABC = gTheABC.value;

		theABC = theABC.replace(theTune,theInjectedTune);

		setABCEditorText(theABC);

		// Force a redraw of the tune
		RenderAsync(false,theSelectedTuneIndex,null);		
	}


	gIsDirty = true;

}

//
// Align the measures from the Quick Editor dedicated button
function QEAlignBars(e){

	if (!gAllowCopy){
		return;
	}

	if (e.shiftKey){
		AlignMeasures(true);
		return;
	}
	else{
		AlignMeasures(false);
		return;
	}
}


//
// Format the ABC so all the measure markers align vertically
//
function injectMIDIgchord(abcNotation,gchordTemplate,bDoStress,theStress,bDoDuration,theDuration) {

	function findOffsets(pattern, text) {

	    let regex = new RegExp(pattern, 'g'); // Create a global regex pattern
	    let result;
	    let offsets = [];
	    
	    while ((result = regex.exec(text)) !== null) {

	        offsets.push({value:result[0],position: result.index});

	    }
	    
	    return offsets;
	}

	//debugger;

    // Split the ABC notation into lines
    let lines = abcNotation.split('\n');
    
    // Find all measure markers and their positions
    let markers = [];
    
    lines.forEach(line => {

       	//debugger;

        let matches = findOffsets(/\|\||:\|\[\d+|\|\[\d+|:\|:|::|:\|\d+|\|\d+|:\||\|:|\|\]|\[\||\|/g, line); 
       
        // No measure marker at the front of the line, push a pseudo-marker
       	if (matches && matches.length > 0){

       		if (matches[0].position > 0){
       			matches.unshift({value:"", position:0});
       		}

       	}

        markers.push(matches);
        
    });

    //debugger;

    // Adjust lines to align measure markers
    var nLines = lines.length;

    var injectedLines = [];

    for (var i=0;i<nLines;++i){

    	if (lines[i].length == 0){
    		continue;
    	}

    	var thisLine = "";
     	
     	var thisMarker = markers[i];

     	//debugger;
   	
    	if (markers[i].length > 1){

    		for (var j=0;j<markers[i].length-1;++j){

    			var thisSegment = lines[i].substring(thisMarker[j].position,thisMarker[j+1].position);

    			//console.log("thisSegment before: "+thisSegment)

    			var toInject = "[I:MIDI=gchord "+gchordTemplate+"]"

   				if (bDoStress){
    				toInject+="[I:MIDI=gchordstress "+theStress+"]";
    			}
    			if (bDoDuration){
    				toInject+="[I:MIDI=gchordduration "+theDuration+"]";
    			}
    			toInject += " ";

    			thisSegment = thisSegment.replace(thisMarker[j].value,thisMarker[j].value+toInject);

     			//console.log("thisSegment after: "+thisSegment)
   			    				
    			thisLine += thisSegment;
 
    		}

		    // Any leftover characters after the last measure marker?
			if (thisMarker[thisMarker.length-1].position < lines[i].length){

				thisLine += lines[i].substring(thisMarker[thisMarker.length-1].position,lines[i].length);

			}

    	}
    	else{

    		thisLine = lines[i];

    	}

    	injectedLines.push(thisLine);
    }
    
    // Join lines back into a single string
    let injectedAbcNotation = injectedLines.join('\n');

    return injectedAbcNotation;

}

//
// Inject %%MIDI gchord templates for the current tune
//

function getMIDIGChordMeter(theTune){

	var theLines = theTune.split("\n");

    var thisLine = "";

	var theMeter = "";

    for (var i = 0; i < theLines.length; ++i) {

        thisLine = theLines[i];

		// Find the meter
		var searchRegExp = /^M:.*[\r\n]*/m

		var thisMeter = thisLine.match(searchRegExp);

		if ((thisMeter) && (thisMeter.length > 0)){

			if (theMeter == ""){

				theMeter = thisMeter[0].replace("M:","");
				theMeter = theMeter.trim();

			}
		}
	}

	return theMeter;

}

function getDefaultMIDIGChordString(theMeter){

	var theGChordTemplate = "";

	// Lets see if we have a supported meter
	for (var i=0;i<midigchordinject_list.length;++i){

		if (theMeter == midigchordinject_list[i].name){

			theGChordTemplate = midigchordinject_list[i].pattern;
						
			break;
		}

	}

	return theGChordTemplate;
}

const midigchordinject_list = [
    { name:"C|",  pattern:"zzzz"}, 
    { name:"C",   pattern:"zzzzzzzz"}, 
   	{ name:"2/2", pattern:"zzzz"},
   	{ name:"3/2", pattern:"zzzzzz"},
    { name:"2/4", pattern:"zzzz"}, 
    { name:"3/4", pattern:"zzzzzz"}, 
    { name:"4/4", pattern:"zzzzzzzz"}, 
    { name:"5/4", pattern:"zzzzzzzzzz"}, 
    { name:"6/4", pattern:"zzzzzzzzzzzz"}, 
    { name:"7/4", pattern:"zzzzzzzzzzzzzz"}, 
    { name:"2/8", pattern:"zz"}, 
    { name:"3/8", pattern:"zzz"}, 
    { name:"5/8", pattern:"zzzzz"},
    { name:"6/8", pattern:"zzzzzz"}, 
    { name:"7/8", pattern:"zzzzzzz"}, 
    { name:"9/8", pattern:"zzzzzzzzz"},
    { name:"10/8", pattern:"zzzzzzzzzz"},
    { name:"11/8", pattern:"zzzzzzzzzzz"},
    { name:"12/8", pattern:"zzzzzzzzzzzz"}
];

var gInjectMIDIGChordPattern = "";

var gDoInjectMIDIGChordStress = false;
var gInjectMIDIGChordStress = 1.0;

var gDoInjectMIDIGChordDuration = false;
var gInjectMIDIGChordDuration = 1.0;

var gLastMIDIGChordMeter = "";

function InjectMIDIGChordTemplates(){

	//console.log("InjectMIDIGChordTemplates");

	if (!gAllowCopy){
		return;
	}

	var theSelectedTuneIndex = findSelectedTuneIndex();

	// Try to find the current tune
	var theTune = findSelectedTune();

	if (theTune == ""){
		return;
	}

	var theMeter = getMIDIGChordMeter(theTune);

	if (theMeter != gLastMIDIGChordMeter){

		var theTestPattern = getDefaultMIDIGChordString(theMeter);

		if (theTestPattern == ""){

			var thePrompt = "%%MIDI gchord not available for meter: "+theMeter;
			
			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			// Nope, exit
			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;
		}
		else{

			gInjectMIDIGChordPattern = theTestPattern;
		
			gLastMIDIGChordMeter = theMeter;

		}

	}

	// Setup initial values
	const theData = {
	  injectPattern:gInjectMIDIGChordPattern,
	  bDoInjectStress:gDoInjectMIDIGChordStress,
	  injectStress:gInjectMIDIGChordStress,
	  bDoInjectDuration:gDoInjectMIDIGChordDuration,
	  injectDuration:gInjectMIDIGChordDuration
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Inject MIDI gchord Templates&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#inject_midigchord" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;margin-bottom:36px;font-size:12pt;line-height:18pt;font-family:helvetica">This will inject an inline %%MIDI gchord backup pattern annotation for each measure of the current tune along with optional inline %%MIDI gchordstress and %%MIDI gchordduration vectors:</p>'},	  
	  {name: "    %%MIDI gchord pattern:", id: "injectPattern", type:"text", cssClass:"inject_gchord_templates_form_text"},
	  {html: '<p style="margin-top:10px;font-size:4pt;font-family:helvetica">&nbsp;</p>'},	  
	  {name: "          Include inline %%MIDI gchordstress vector for each measure", id: "bDoInjectStress", type:"checkbox", cssClass:"inject_gchord_templates_form_text"},
	  {name: "    %%MIDI gchordstress vector:", id: "injectStress", type:"text", cssClass:"inject_gchord_templates_form_text"},
	  {html: '<p style="margin-top:10px;font-size:4pt;font-family:helvetica">&nbsp;</p>'},	  
	  {name: "          Include inline %%MIDI gchordduration vector for each measure", id: "bDoInjectDuration", type:"checkbox", cssClass:"inject_gchord_templates_form_text"},
	  {name: "    %%MIDI gchordduration vector:", id: "injectDuration", type:"text", cssClass:"inject_gchord_templates_form_text"},
	  {html: '<p style="margin-top:24px;font-size:12pt;line-height:18pt;font-family:helvetica">&nbsp;</p>'},	  
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 100, width: 600, scrollWithPage: (AllowDialogsToScroll()), okText: "Inject", autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			var theGChordTemplate = "";

			sendGoogleAnalytics("action","InjectMIDIGChordTemplate");

			gInjectMIDIGChordPattern = args.result.injectPattern;

			theGChordTemplate = gInjectMIDIGChordPattern;

			gDoInjectMIDIGChordStress = args.result.bDoInjectStress; 

			gInjectMIDIGChordStress = args.result.injectStress;

			gDoInjectMIDIGChordDuration = args.result.bDoInjectDuration; 
			
			gInjectMIDIGChordDuration = args.result.injectDuration; 

			var theInjectedTune = "";

			var theNotes = JustTheNotes(theTune);

			var theNotesInjected = injectMIDIgchord(theNotes,theGChordTemplate,gDoInjectMIDIGChordStress,gInjectMIDIGChordStress,gDoInjectMIDIGChordDuration,gInjectMIDIGChordDuration);

			theInjectedTune = theTune.replace(theNotes,theNotesInjected);

			theInjectedTune = theInjectedTune.trim();

			// Stuff in the injected ABC
			var theABC = gTheABC.value;

			theABC = theABC.replace(theTune,theInjectedTune);

			setABCEditorText(theABC);

			// Force a redraw of the tune
			RenderAsync(false,theSelectedTuneIndex,null);		

			gIsDirty = true;

		};
	});
}


// For the QuickEditor
function MaximizeEditor(){
	
	if (!gAllowCopy){
		return;
	}

	if (isMobileBrowser()){
		return;
	}

	if (gIsOneColumn){
		return;
	}
	
	sendGoogleAnalytics("action","MaximizeEditor");

	gTheABC.style.width = ((window.innerWidth-gTheNotation.offsetWidth)-125)+"px";

	setTimeout(function(){

		var currentWidth = gTheABC.offsetWidth;

		// console.log("current width = "+gTheABC.offsetWidth);
		// console.log("containerWidth = "+gInitialTextBoxContainerWidth);

		var theOffset = (gInitialTextBoxContainerWidth - gInitialTextBoxWidth)/2;

		// console.log("theOffset = "+theOffset);

		if (currentWidth > gInitialTextBoxContainerWidth){

			// console.log("Setting the marginLeft for stretch");

			var theDelta = ((currentWidth - gInitialTextBoxWidth)/2)-theOffset;

			if (theDelta <= gInitialTextBoxContainerLeft){

				gTheABC.style.marginLeft = -theDelta+"px";

				if (!gIsOneColumn){

					//debugger;

					var theAppContainer = document.getElementById("app-container");

					var theAppContainerMargin = theAppContainer.style.marginLeft;

					if (theAppContainerMargin){

						theAppContainerMargin = theAppContainer.style.marginLeft.replace("px","");

						theAppContainerMarginFloat = parseFloat(theAppContainerMargin);

						if (!isNaN(theAppContainerMarginFloat)){

							// There is some edge delta factor
							theAppContainerMarginFloat -= 48;

							if (theDelta < theAppContainerMarginFloat){

								// Slide the notation to the right but don't allow wrapping
								gTheNotation.style.marginLeft = theDelta+"px";

							}
						}

					}

				}

			}
		}
	},100);
}

//
// Jump to tune
//

function JumpToSearch(){

	//console.log("JumpToSearch");

	var searchVal = document.getElementById("jumpToSearchValue").value.toLowerCase();

	var searchAll = searchVal == "";

	var theJumpDiv = document.getElementById("jumpto-tune-list");

	var theJumpDivContents = "";

	for (i=0;i<gJumpTitleCount;++i){

		if (searchAll || (gJumpTitles[i].toLowerCase().indexOf(searchVal) != -1)){

			theJumpDivContents += '<div class="jumpto_tune" onclick="JumpToToggleSelection(this,'+i+')">'+gJumpTitles[i]+'</div>';
		}
	}
	
	theJumpDiv.innerHTML = theJumpDivContents;

	// Reset selected tune
	gJumpTune = -1;

}

function JumpToToggleSelection(item,index) {

	//console.log("index "+index);

	gJumpTune = index;

	const childDivs = document.querySelectorAll('#jumpto-tune-list .jumpto_tune');

	Array.from(childDivs).map(div => 
	{

		div.classList.remove('jumpto_selected');

	});

  	item.classList.add('jumpto_selected');

}

var gJumpTune = -1;
var gJumpTitles = [];
var gJumpTitleCount = 0;

function JumpToTune(){

	//console.log("JumpToTune");

	var i;

	gJumpTune = -1;
    gJumpTitles = [];
    gJumpTitleCount = 0;

	totalTunes = CountTunes();

	var theTitles = GetTunebookIndexTitles();
	var nTitles = theTitles.length;

	if (nTitles == 0){

		var thePrompt = "No tunes in the editor.";
		
		// Center the string in the prompt
		thePrompt = makeCenteredPromptString(thePrompt);
		
		DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

		return;
	}

	gJumpTitles = theTitles;
	gJumpTitleCount = nTitles;

	var theData = {};

	// MAE 14 Jul 2024 - Make the div fill the screen
	var theHeight = window.innerHeight - 330;

	var theJumpDiv = '<div id="jumpto-tune-list" style="overflow:auto;height:'+theHeight+'px;margin-top:18px">';

	for (i=0;i<nTitles;++i){

		theJumpDiv += '<div class="jumpto_tune" onclick="JumpToToggleSelection(this,'+i+')">'+theTitles[i]+'</div>';
	}
	
	theJumpDiv += '</div>';

	var form = [

		{html: '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;">Jump to Tune&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#hamburger_jump_to_tune" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
		{html: '<input style="width:100%;font-size:12pt;line-height:18px;padding:6px;margin-left:5px;" id="jumpToSearchValue" title="Enter your search text here" autocomplete="off" autocorrect="off" placeholder="Enter your search text here" oninput="JumpToSearch();"/>'},
		{html: theJumpDiv},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat", top: 25, width: 650, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false, okText:"Jump" } ).then(function(args){

    	if (!args.canceled){

    		if (gJumpTune != -1){

    			gCurrentTune = gJumpTune;

    			var tuneOffset = findTuneOffsetByIndex(gCurrentTune)

    			gTheABC.selectionStart = tuneOffset;
    			gTheABC.selectionEnd = tuneOffset;

    			if (isDesktopBrowser()){
    				MakeTuneVisible(true);
    			}
    			else{
    				window.setTimeout(function(){
    					MakeTuneVisible(true);
    				},250);
    			}

				ScrollABCTextIntoView(gTheABC,tuneOffset,tuneOffset,10);

				if (!isPureDesktopBrowser()){
					gTheABC.blur();
				}

				// If quick editor, force redraw 
				if (gIsQuickEditor){

					if (!gDisableNotationRendering){
						Render(false,gCurrentTune);
					}

				}

    		}
    	
    	}

    });

}

// 
// Search and replace text
//

var gSR_currentIndex = -1;
var gSR_matchIndexes = [];

var gSR_searchInput = null;
var gSR_replaceInput = null;
var gSR_caseSensitive = null;
var gSR_regex = null;

var gSR_lastSearch = "";
var gSR_lastReplace = "";
var gSR_lastCaseSensitive = true;
var gSR_lastRegex = false;

function SR_processMatches(value, matches){

	//console.log(matches);

	// Regex uses $& to refer to the whole match in output
 	value = value.replaceAll("$&","$0");

	// Replace using the matches array
	const result = value.replace(/\$(\d+)/g, (match, groupNumber) => {

		//console.log("match: "+match+" groupNumber: "+groupNumber+" matches[groupNumber]:"+matches[groupNumber]);

	    // groupNumber is a string, convert it to a number to index the array
	    return matches[groupNumber] || match;

	});

	return result;

}

function SR_findMatches() {

	//console.log("SR_findMatches");

	gSR_matchIndexes = [];

    var text = gTheABC.value;

    var searchValue = gSR_searchInput.value;

    if (searchValue === '') return;

    //console.log("searchValue: "+searchValue);

    var isCaseSensitive = gSR_caseSensitive.checked;

    gSR_lastCaseSensitive = isCaseSensitive;

    var isRegex = gSR_regex.checked;

    gSR_lastRegex = isRegex;

    if (isRegex){

    	//console.log("isRegex true");

    	try{
	    	if (!isCaseSensitive){
	    		searchValue = new RegExp(searchValue,"gmi");
	    	}
	    	else{
	    		searchValue = new RegExp(searchValue,"gm");
	    	}
	    }
	    catch(error){
	    	//console.log("Bad regex");
	    	return;
	    }
    }
    else{

	    if (!isCaseSensitive){
	    	//console.log("SR_findMatches - Not case sensitive");
	    	text = text.toLowerCase();
	    	searchValue = searchValue.toLowerCase();
	    }
	}

	//console.log("searchValue: "+searchValue);

	if (!isRegex){

	    let startIndex = 0;
	    while (startIndex !== -1) {
	        startIndex = text.indexOf(searchValue, startIndex);
	        if (startIndex !== -1) {
	        	//console.log("pushing "+startIndex);
	            gSR_matchIndexes.push({offset:startIndex,length:searchValue.length});
	            startIndex += searchValue.length;
	        }
	    }
	}
	else{
		while ((match = searchValue.exec(text)) !== null) {
			
			//debugger;
	       	
	       	// If there is a zero match, exit early
	       	if (match[0].length == 0){
	       		//console.log("regex zero match, early out!")
	       		return;
	       	}

	       	//for (var i=0;i<match.length;++i){
	       	//	console.log("match "+i+": "+match[i]);
	       	//}

	       	//console.log("pushing "+match.index+" length: "+match[0].length);

    		gSR_matchIndexes.push({offset:match.index,length:match[0].length, matches:match}); // Store the index of the match
		}
	}
}

function SR_highlightMatch(index) {

	//console.log("SR_highlightMatch index: "+index);

	var isRegex = gSR_regex.checked;

    const searchValue = gSR_searchInput.value;

    if (gSR_matchIndexes.length === 0 || searchValue === '') return;

    gTheABC.focus();
  
  	if (!isRegex){
  		//console.log("Not regex, setting selection to: "+gSR_matchIndexes[index].offset+" to "+(gSR_matchIndexes[index].offset + searchValue.length));
    	gTheABC.setSelectionRange(gSR_matchIndexes[index].offset, gSR_matchIndexes[index].offset + searchValue.length);
		ScrollABCTextIntoView(gTheABC,gSR_matchIndexes[index].offset,gSR_matchIndexes[index].offset + searchValue.length,2);
    }
 	else{
 		//console.log("Is regex, setting selection to: "+gSR_matchIndexes[index].offset+" to "+(gSR_matchIndexes[index].offset + gSR_matchIndexes[index].length));
 		gTheABC.setSelectionRange(gSR_matchIndexes[index].offset, gSR_matchIndexes[index].offset + gSR_matchIndexes[index].length);
		ScrollABCTextIntoView(gTheABC,gSR_matchIndexes[index].offset,gSR_matchIndexes[index].offset + gSR_matchIndexes[index].length,2);
 	}  


	// Scroll the tune into view
	MakeTuneVisible(true);

}

function SR_search(direction) {

	//console.log("SR_search");

	const searchValue = gSR_searchInput.value;

    if (searchValue == ""){
    	return;
    }

    if (gSR_matchIndexes.length === 0){
        
        var prompt = makeCenteredPromptString("Search value not found");
 
        DayPilot.Modal.alert(prompt, {
            theme: "modal_flat",
            top: 270
        });

        return;
    }

    if (direction === 'next') {
        gSR_currentIndex = (gSR_currentIndex + 1) % gSR_matchIndexes.length;
    } else if (direction === 'previous') {
        gSR_currentIndex = (gSR_currentIndex - 1 + gSR_matchIndexes.length) % gSR_matchIndexes.length;
    }

    SR_highlightMatch(gSR_currentIndex);
}

function SR_search_next() {

	//console.log("SR_search_next");

	SR_search("next");

}

function SR_search_previous() {

	//console.log("SR_search_previous");

	SR_search("previous");

}

function SR_replaceOne() {

	//console.log("SR_replaceOne");

	if (gSR_matchIndexes.length == 0){
		return;
	}

    if (gSR_currentIndex === -1){
        
        var prompt = makeCenteredPromptString("Nothing to replace");
 
        DayPilot.Modal.alert(prompt, {
            theme: "modal_flat",
            top: 270
        });

        return;
    }

    const searchValue = gSR_searchInput.value;

    if (searchValue == ""){
    	return;
    }

    var isRegex = gSR_regex.checked;

    var isCaseSensitive = gSR_caseSensitive.checked;

    // if (!isCaseSensitive){
    // 	console.log("SR_replaceOne is not case sensitive");
    // }

    var replaceValue = gSR_replaceInput.value;

    const startIndex = gSR_matchIndexes[gSR_currentIndex].offset;
    
    if (!isRegex){

    	setABCEditorText(gTheABC.value.slice(0, startIndex) + replaceValue + gTheABC.value.slice(startIndex + searchValue.length));

    }
    else{

    	replaceValue = SR_processMatches(replaceValue,gSR_matchIndexes[gSR_currentIndex].matches);
    	setABCEditorText(gTheABC.value.slice(0, startIndex) + replaceValue + gTheABC.value.slice(startIndex + gSR_matchIndexes[gSR_currentIndex].length));
    }

    SR_findMatches();

    // Mark text as modified
    gIsDirty = true;

    if (gRawMode){

		RenderAsync(true,null, function(){
			
		    if (gSR_matchIndexes.length > 0){
		    	SR_search('previous');
		   		SR_search('next');
		   	}
		   	else{
			    if (gSR_matchIndexes.length === 0){
			        
			        var prompt = makeCenteredPromptString("Search value not found");
			 
			        DayPilot.Modal.alert(prompt, {
			            theme: "modal_flat",
			            top: 270
			        });

			        return;
			    }
   			}			
		});
	}
	else{

    	var thisTune = findTuneByOffset(startIndex);
    	Render(false,thisTune);

	    if (gSR_matchIndexes.length > 0){
	    	SR_search('previous');
	   		SR_search('next');
	   	}
	   	else{
		    if (gSR_matchIndexes.length === 0){
		        
		        var prompt = makeCenteredPromptString("Search value not found");
		 
		        DayPilot.Modal.alert(prompt, {
		            theme: "modal_flat",
		            top: 270
		        });

		        return;
		    }
	   	}
	}
}

function SR_replaceAll(callback) {

	//console.log("SR_replaceAll");

    var searchValue = gSR_searchInput.value;

    if (searchValue == ""){
    	return;
    }

    if (gSR_matchIndexes.length === 0){
        
        var prompt = makeCenteredPromptString("Search value not found");
 
        DayPilot.Modal.alert(prompt, {
            theme: "modal_flat",
            top: 270
        });

        return;
    }

    var isCaseSensitive = gSR_caseSensitive.checked;

    // if (!isCaseSensitive){
    // 	console.log("SR_replaceAll is not case sensitive");
    // }

    var replaceValue = gSR_replaceInput.value;

    var isRegex = gSR_regex.checked;

    var theMatches;
    var regex;

    if (!isRegex){

	    // Escape any RegEx control characters
	    searchValue = searchValue.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

	    const flags = isCaseSensitive ? "g" : "gi";
	    regex = new RegExp(searchValue, flags);
	    
	}
	else{

 	  	try{

 	  		//console.log("replaceValue before: "+replaceValue);
 	  		replaceValue = replaceValue.replace(/\$0/g, '$$\&');	  		
 	  		//console.log("replaceValue after: "+replaceValue);

	    	if (!isCaseSensitive){
	    		regex = new RegExp(searchValue,"gmi");
	    	}
	    	else{
	    		regex = new RegExp(searchValue,"gm");
	    	}


	    }
	    catch(error){
	    	//console.log("Bad regex");
	    	return;
	    }

	}
	
	theMatches = gTheABC.value.match(regex);

    if (theMatches && theMatches[0].length == 0){
   		//console.log("regex zero match, early out!")
   		return;
   	}

	setABCEditorText(gTheABC.value.replace(regex, replaceValue));

    SR_findMatches();

    RenderAsync(true,null,function(){

    	setTimeout(function(){

	    	var thePrompt = "Replaced "+theMatches.length;

	    	if (theMatches.length != 1){
	    		thePrompt+=" instances.";
	    	}
	    	else{
	    		thePrompt+=" instance.";
	    	}
	    	
	    	var prompt = makeCenteredPromptString(thePrompt);
	 
	        DayPilot.Modal.alert(prompt, {
	            theme: "modal_flat",
	            top: 270
	        });

	    },100);

    });

    // Mark text as modified
    gIsDirty = true;

}

//
// Load a Find and Replace state
//
function SR_LoadFindAndReplace(file){

	const reader = new FileReader();

	reader.addEventListener('load', (event) => {

		var theText = event.target.result;

		try{

			//debugger;

			var theParsedSettings = JSON.parse(theText);

			// Sanity check a couple of fields
			if ((theParsedSettings.find == undefined) || (theParsedSettings.replace == undefined) ||  (theParsedSettings.isCaseSensitive == undefined) || (theParsedSettings.isRegex == undefined)){

				var thePrompt = "This is not a valid Find and Replace settings file.";

				// Center the string in the prompt
				thePrompt = makeCenteredPromptString(thePrompt);

				DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

				return;

			}

			// Stuff in the read values
			gSR_searchInput.value = theParsedSettings.find;

			gSR_replaceInput.value = theParsedSettings.replace;

			gSR_caseSensitive.checked = theParsedSettings.isCaseSensitive;

			gSR_regex.checked = theParsedSettings.isRegex;

			// Trigger a new match check
			gSR_lastSearch = gSR_searchInput.value;;
			gSR_lastReplace = gSR_replaceInput.value;

			SR_findMatches();
			
		}
		catch(err){

			var thePrompt = "This is not a valid Find and Replace settings file.";

			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;
		
		}

	});

	reader.readAsText(file);

}

function SR_TriggerLoad(){

	var elem = document.getElementById("load_find_replace_fs");

	elem.click();

}

//
// Save the current Find and Replace state
//
function SR_save(){

	//debugger;

	var theFind = gSR_searchInput.value;
	var theReplace = gSR_replaceInput.value;
    var theCaseSensitive = gSR_caseSensitive.checked;
    var theRegex = gSR_regex.checked;

	var theState = {find:theFind,replace:theReplace,isCaseSensitive:theCaseSensitive,isRegex:theRegex};

	try{

		var theStateStr = JSON.stringify(theState);

		//console.log("theStateStr: "+theStateStr);

		if (theStateStr.length != 0){

			saveTextFile("Please enter a filename for your Find and Replace settings:","find_and_replace.txt",theStateStr);
		}
	}
	catch(err){

	}

}

function FindAndReplace(){

	//console.log("FindAndReplace");

	sendGoogleAnalytics("action","FindAndReplace");

	if (!gAllowCopy){

        var prompt = makeCenteredPromptString("No Text in the ABC Editor to Find/Replace")
 
        DayPilot.Modal.alert(prompt, {
            theme: "modal_flat",
            top: 200
        });

        return;	
   	}

	gSR_currentIndex = -1;
	gSR_matchIndexes = [];

	var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;margin-left:15px;margin-bottom:12px;">Find and Replace&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#moretoolsdropdown" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>';
	
	modal_msg+='<p style="font-size:12pt;line-height:24pt;margin-top:0px;">Find:<br/><textarea style="width:625px;padding:6px;" id="searchText" title="Enter text to find here" autocomplete="off" autocorrect="off" spellcheck="false" autocapitalize="none" placeholder="Text to find..." rows="7"></textarea></p>';
	
	modal_msg+='<p style="font-size:12pt;line-height:12pt;margin-top:0px;">Case sensitive?&nbsp;<input id="searchCaseSensitive" type="checkbox" style="margin-top:-5px;margin-bottom:0px;" onchange="SR_findMatches();" checked/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Match using regular expression?&nbsp;<input id="searchRegex" type="checkbox" style="margin-top:-5px;margin-bottom:0px;" onchange="SR_findMatches();"/></p>';

	modal_msg+='<p style="font-size:12pt;line-height:24pt;margin-top:0px;">Replace with:<br/><textarea style="width:625px;padding:6px;" id="replacementText" title="Enter replacement text here" autocomplete="off" autocorrect="off" spellcheck="false" autocapitalize="none" placeholder="Replace with..." rows="7"></textarea></p>';

	modal_msg+='<p style="font-size:12pt;text-align:center;margin-top:24px;"><input class="btn btn-search-previous search-previous" id="search-previous" onclick="SR_search_previous();" type="button" value="Find Previous" title="Find previous match"/><input class="btn btn-search-next search-next" id="search-next" onclick="SR_search_next();" type="button" value="Find Next" title="Find next match"/><input class="btn btn-search-replace search-replace" id="search-replace" onclick="SR_replaceOne();" type="button" value="Replace" title="Replace one text instance"/><input class="btn btn-search-replace-all search-replace-all" id="search-replace-all" onclick="SR_replaceAll();" type="button" value="Replace All" title="Replace all text instances"/><input type="file" id="load_find_replace_fs" accept=".txt,.TXT" hidden/><input class="btn btn-search-load search-load" id="search-load" onclick="SR_TriggerLoad();" type="button" value="Load" title="Load Find and Replace settings"/><input class="btn btn-search-save search-save" id="search-save" onclick="SR_save();" type="button" value="Save" title="Save Find and Replace settings"/></p>';

    DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 25, width: 700,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){
    });

    //
    // Setup the file import control
	//
	document.getElementById("load_find_replace_fs").onchange = () => {

		let fileElement = document.getElementById("load_find_replace_fs");

		// check if user had selected a file
		if (fileElement.files.length === 0) {

			var thePrompt = "Please select a Find and Replace settings file";

			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;

		}

		let file = fileElement.files[0];

		// Read the file and stuff it into the Find and Replace fields
		SR_LoadFindAndReplace(file);

		// Reset file selectors
		fileElement.value = "";

	}

    gSR_searchInput = document.getElementById("searchText");
    
    gSR_searchInput.focus();

    gSR_replaceInput = document.getElementById("replacementText");
    gSR_caseSensitive = document.getElementById("searchCaseSensitive");
    gSR_regex = document.getElementById("searchRegex");

 	gSR_searchInput.value = gSR_lastSearch;
	gSR_replaceInput.value = gSR_lastReplace;
	gSR_caseSensitive.checked = gSR_lastCaseSensitive;
	gSR_regex.checked = gSR_lastRegex;

	if (gSR_lastSearch != ""){
		SR_findMatches();
	}

	gSR_searchInput.addEventListener("input", function(event) {
		gSR_lastSearch = gSR_searchInput.value;;
		SR_findMatches();
	});

	gSR_replaceInput.addEventListener("input", function(event) {
		gSR_lastReplace = gSR_replaceInput.value;
	});

}


//
// Split long tags and/or text
//

var gLastSplitLongTagsLength = 80;
var gLastSplitTags = true;
var gLastSplitText = true;
var gLastTagsToSplit = "ABCDFGHNOSTWZ";

function processAndReplaceTextGroups(targetString,maxLength) {

    // Split the target string into an array of lines
    let lines = targetString.split('\n');
    let result = [];
    let insideGroup = false;

    // Loop through each line in the target string
    for (let line of lines) {

        // Check if the line starts with %%begintext
        if ((line == '%%begintext') || (line.startsWith('%%begintext '))) {
            
            insideGroup = true;
			
			result.push("%%begintext");

            continue; // Skip adding %%begintext to the result
        }

        // Check if the line starts with %%endtext
        if ((line == '%%endtext') || (line.startsWith('%%endtext '))){

            insideGroup = false;
            
            result.push("%%endtext");

            continue; // Skip adding %%endtext to the result
        }

        // If inside a group of lines, replace each line with one that starts with %%text
        if (insideGroup) {

        	// If the line exceeds the specified max length, split it
			while (line.length > maxLength) {

			    // Find the position to split the line, trying to split on a space or the max length
			    let splitPos = line.lastIndexOf(' ', maxLength);

			    if (splitPos === -1) {
			        splitPos = maxLength;
			    }
			    
			    // Push the split part into the result
			    result.push(line.slice(0, splitPos));
			    
			    // Update the line to be the remaining part after the split
			    line = line.slice(splitPos).trim();
			}

			// Push the remaining part of the line
			result.push(line);

        } else {

            // If not inside a group, just add the line as is
            result.push(line);
        }
    }

    // Join the result array back into a single string with newlines
    return result.join('\n');
}

function splitLJTextLines(targetString, maxLength) {

	const prefix = "%%text ";
    const lines = targetString.split('\n');
    const result = [];

    for (let line of lines) {
        if (line.startsWith(prefix)) {
            const content = line.slice(prefix.length).trim();
            const wrappedLines = [];
            let remaining = content;

            // Need to split?
            if (remaining.length <= maxLength){
            	result.push("%%text "+content)
            }
            else{

	            while (remaining.length > maxLength) {
	                let splitPos = remaining.lastIndexOf(' ', maxLength);
	                if (splitPos === -1) splitPos = maxLength;
	                wrappedLines.push(remaining.slice(0, splitPos));
	                remaining = remaining.slice(splitPos).trim();
	            }

	            if (remaining.length > 0) {
	                wrappedLines.push(remaining);
	            }

	            result.push('%%begintext');
	            result.push(...wrappedLines);
	            result.push('%%endtext');
	        }
        } else {
            result.push(line);
        }
    }

    return result.join('\n');
}

function splitLinesWithPrefix(targetString, prefix, maxLength) {

    // Split the target string into an array of lines
    let lines = targetString.split('\n');
    let result = [];

    // Loop through each line in the target string
    for (let line of lines) {
        // Check if the line starts with the prefix
        if (line.startsWith(prefix)) {
            // If the line exceeds the specified max length, split it
            while (line.length > maxLength) {
                // Find the position to split the line, trying to split on a space or at maxLength
                let splitPos = line.lastIndexOf(' ', maxLength);

                if (splitPos === -1 || splitPos < prefix.length) {
                    splitPos = maxLength;
                }
                
                // Push the split part into the result, ensuring it starts with "%%text "
                result.push(line.slice(0, splitPos));
                
                // Update the line to be the remaining part after the split, starting with "%%text "
                line = prefix + line.slice(splitPos).trim();
            }
            
            // Push the remaining part of the line
            result.push(line);
        } else {
            // If the line does not start with the prefix, just add it as is
            result.push(line);
        }
    }

    // Join the result array back into a single string with newlines
    return result.join('\n');
}

function SplitOneTuneTagsText(targetString, controlString, maxLength, splitTags, splitText) {

	// Nothing to do?
	if ((!splitTags) && (!splitText)){
		return targetString;
	}

	var theResult = targetString;

	if (splitTags){

	    // Split the target string into an array of lines
	    let lines = targetString.split('\n');
	    let result = [];

	    var gotMatch = false;

	    // Loop through each line in the target string
	    for (let line of lines) {
	    	
	    	gotMatch = false;

		    // Loop through each character in the control string
		    for (let char of controlString) {

	           // Check if the line starts with the character followed by a colon
	            if (line.startsWith(`${char}:`)) {

	            	gotMatch = true;

	                // If the line exceeds the specified max length, split it
	                while (line.length > maxLength) {
	                    // Find the position to split the line, trying to split on a space or the max length
	                    let splitPos = line.lastIndexOf(' ', maxLength);
	                    if (splitPos === -1 || splitPos < `${char}:`.length) {
	                        splitPos = maxLength;
	                    }
	                    
	                    // Push the split part into the result
	                    result.push(line.slice(0, splitPos));
	                    
	                    // Update the line to be the remaining part after the split
	                    line = `${char}:` + line.slice(splitPos).trim();
	                }
	                
	                // Push the remaining part of the line
	                result.push(line);
	            }
	        }
	        if (!gotMatch){
	            result.push(line);
	        }
	    }

		// Join the result array back into a single string with newlines
	    theResult = result.join('\n');

	    if (!splitText){

		    return theResult;

		}
	}


	// Now split any text 
	theResult = splitLJTextLines(theResult, maxLength);

	theResult = splitLinesWithPrefix(theResult, "%%center ", maxLength);

	theResult = splitLinesWithPrefix(theResult, "%%right ", maxLength);


	//debugger;

	// And finally handle any %%begintext/%%endtext pairs
	theResult = processAndReplaceTextGroups(theResult, maxLength);

	return theResult;

}

function SplitLongTextAndTags(){

	//console.log("SplitLongTags");

	sendGoogleAnalytics("action","SplitLongTags");

	if (!gAllowCopy){

        var prompt = makeCenteredPromptString("No Text in the ABC Editor to Split")
 
        DayPilot.Modal.alert(prompt, {
            theme: "modal_flat",
            top: 200
        });

        return;	
   	}

	const theData = {
	  max_tag_line_length: gLastSplitLongTagsLength,
	  bSplitTags: gLastSplitTags,
	  bSplitText: gLastSplitText,
	  tags_to_split: gLastTagsToSplit,
	  bSplitAllTunes:true
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Split Long Tags and Text&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#moretoolsdropdown" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;margin-bottom:24px;font-size:12pt;line-height:18pt;font-family:helvetica">This will split long strings in tags and/or text at the specified line length.</p>'},
	  {html: '<p style="font-size:5pt;font-family:helvetica">&nbsp;</p>'},	  
	  {name: "Maximum line length:", id: "max_tag_line_length", type:"number", cssClass:"splitlongtextandtags"},
	  {html: '<p style="font-size:5pt;font-family:helvetica">&nbsp;</p>'},	  
	  {name: "          Split tags", id: "bSplitTags", type:"checkbox", cssClass:"splitlongtextandtags"},
	  {name: "          Tags to split:", id: "tags_to_split", type:"text", cssClass:"splitlongtextandtags_text"},
	  {html: '<p style="font-size:5pt;font-family:helvetica">&nbsp;</p>'},	  
	  {name: "          Split text", id: "bSplitText", type:"checkbox", cssClass:"splitlongtextandtags"},
	  {html: '<p style="font-size:5pt;font-family:helvetica">&nbsp;</p>'},	  
	  {name: "          Split all tunes", id: "bSplitAllTunes", type:"checkbox", cssClass:"splitlongtextandtags"},
	];

	const modal = DayPilot.Modal.form(form, theData, { theme: "modal_flat_wide", top: 100, width: 600, scrollWithPage: (AllowDialogsToScroll()), okText: "Split",autoFocus: false } ).then(function(args){

		// Get the results and store them in the global configuration
		if (!args.canceled){

			var testLength = args.result.max_tag_line_length;

			testLength = parseInt(testLength);

			if (!isNaN(testLength)){

				gLastSplitLongTagsLength=testLength;

			}

			gLastSplitTags=args.result.bSplitTags;
			
			gLastSplitText=args.result.bSplitText;

			gLastTagsToSplit = args.result.tags_to_split;

			var split_all = args.result.bSplitAllTunes;

			if (split_all){

				var nTunes = CountTunes();

				var theNotes = gTheABC.value;

				// Find the tunes
				var theTunes = theNotes.split(/^X:/gm);

				var output = FindPreTuneHeader(theNotes);

				for (var i=1;i<=nTunes;++i){

					theTunes[i] = "X:"+theTunes[i];

					var splitTune = SplitOneTuneTagsText(theTunes[i], gLastTagsToSplit, gLastSplitLongTagsLength, gLastSplitTags, gLastSplitText);
					splitTune = splitTune.trim();
					output += splitTune;

					if (nTunes > 1){
						output += "\n\n";
					}

				}

				// Stuff in the output
				setABCEditorText(output);

				// Set dirty
				gIsDirty = true;

				// Force a redraw
				RenderAsync(true,null,function(){

					// Set the select point
					gTheABC.selectionStart = 0;
				    gTheABC.selectionEnd = 0;

				    // Focus after operation
				    FocusAfterOperation();

				});

			}
			else{

				var theSelectedTuneIndex = findSelectedTuneIndex();

				// Try to find the current tune
				var theSelectedABC = findSelectedTune();

				if (theSelectedABC == ""){
					// This should never happen
					return;
				}

				var theSplitABC = SplitOneTuneTagsText(theSelectedABC, gLastTagsToSplit, gLastSplitLongTagsLength, gLastSplitTags, gLastSplitText);

				if (!theSplitABC){
					return;
				}

				// Try and keep the same tune after the redraw for immediate play
				var theSelectionStart = gTheABC.selectionStart;

				// Stuff in the injected ABC
				var theABC = gTheABC.value;
				theABC = theABC.replace(theSelectedABC,theSplitABC);

				setABCEditorText(theABC);

				// Set dirty
				gIsDirty = true;

				// Force a redraw of the tune
				RenderAsync(false,theSelectedTuneIndex,function(){

					// Set the select point
					gTheABC.selectionStart = theSelectionStart;
				    gTheABC.selectionEnd = theSelectionStart;

				    // Focus after operation
				    FocusAfterOperation();

				});

			}

		}
	});
}

// Normalize diacriticals

function NormalizeDiacriticals(){

	//console.log("NormalizeDiacriticals");

	sendGoogleAnalytics("action","NormalizeDiacriticals");

	if (!gAllowCopy){

        var prompt = makeCenteredPromptString("No Text in the ABC Editor to Normalize")
 
        DayPilot.Modal.alert(prompt, {
            theme: "modal_flat",
            top: 200
        });

        return;	
   	}

	// Setup initial values
	const theData = {
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Normalize Diacriticals&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#hamburger_normalize_diacriticals" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:36px;margin-bottom:12px;font-size:12pt;line-height:18pt;font-family:helvetica">When sorting the tunes by title or generating a sorted Table of Contents or Index in an exported PDF, for optimal sorting and title display, it is best to normalize the diacriticals if escaped versions were used in the ABC.</p>'},	  
	  {html: '<p style="margin-top:24px;margin-bottom:12px;font-size:12pt;line-height:18pt;font-family:helvetica">Click Normalize to replace all escaped /\'A or /\'E style diacriticals with single characters that include the diacritical marks, for example, Á and É.</p>'},
	  {html: '<p>&nbsp;</p>'},
	];

	const modal = DayPilot.Modal.form(form, {}, { theme: "modal_flat_wide", top: 100, width: 600, scrollWithPage: (AllowDialogsToScroll()), okText: "Normalize",autoFocus: false } ).then(function(args){

		// Get the results and store them
		if (!args.canceled){

			var output = gTheABC.value;

			output = replaceEscapedDiacriticals(output);

			// Stuff in the output
			setABCEditorText(output);

			// Set dirty
			gIsDirty = true;

			// Force a redraw
			RenderAsync(true,null,function(){

				// Set the select point
				gTheABC.selectionStart = 0;
			    gTheABC.selectionEnd = 0;

			    // Focus after operation
			    FocusAfterOperation();

			});

		}

	});

}

// Normalize title articles
//
// Title article reverser
//

var abctt_ParseCommon = {};

abctt_ParseCommon.strip = function (str) {
  return str.replace(/^\s+/, '').replace(/\s+$/, '');
};
abctt_ParseCommon.startsWith = function (str, pattern) {
  return str.indexOf(pattern) === 0;
};
abctt_ParseCommon.endsWith = function (str, pattern) {
  var d = str.length - pattern.length;
  return d >= 0 && str.lastIndexOf(pattern) === d;
};
abctt_ParseCommon.last = function (arr) {
  if (arr.length === 0) return null;
  return arr[arr.length - 1];
};

function titleReverser(str) {

    const getTitleNumber = str => {
      const match = /^(\d+)\./.exec(str);
      return match ? match[1] : null;
    };

    const suffixMap = {
      ", The": "The",
      ", the": "The",
      ", A": "A",
      ", a": "A",
      ", Da": "Da",
      ", La": "La",
      ", Le": "Le",
      ", Les": "Les",
      ", Ye": "Ye",
      ", An": "An",
      ", an": "an"
    };

    for (const [suffix, prefix] of Object.entries(suffixMap)) {

      if (abctt_ParseCommon.endsWith(str, suffix)) {

        const titleNumber = getTitleNumber(str);

        if (titleNumber) {
          str = str.replace(titleNumber + ".", "").trim();
        }

        const base = str.slice(0, -suffix.length);

        let result = `${prefix} ${base}`;

        if (titleNumber) result = `${titleNumber}. ${result}`;

        return result;

      }
    }

    return str;

};


function normalizeTitleArticles(inverse) {

	var output;

	var theABC = gTheABC.value;

	if (!inverse) {

		// T: Kesh, The -> T: The Kesh

		output = theABC
		.split('\n')
		.map(line => {
			if (line.startsWith('T:')) {
				const originalTitle = line.slice(2).trim();
				const transformedTitle = titleReverser(originalTitle);
				return 'T:' + transformedTitle;
			}
			return line;
		})
		.join('\n');

	}
	else {

		// T: The Kesh -> T: Kesh, The

		const prefixMap = {
			"The ": ", The",
			"Da ": ", Da",
			"An ": ", An",
			"A ": ", A",
			"Le ": ", Le",
			"La ": ", La",
			"Ye ": ", Ye",
			"Les ": ", Les",
			"an ": ", an"
		};

		const lines = theABC.split("\n");

		const processedLines = lines.map(line => {

			if (line.startsWith("T:")) {
				let title = line.slice(2).trim();
				for (const [prefix, suffix] of Object.entries(prefixMap)) {
					if (title.startsWith(prefix)) {
						title = title.slice(prefix.length) + suffix;
						break;
					}
				}
				return "T:" + title;
			} else {
				return line;
			}
		});

		output = processedLines.join("\n");
	}

	// Stuff in the output
	setABCEditorText(output);

	// Set dirty
	gIsDirty = true;

	// Force a redraw
	RenderAsync(true,null,function(){

		// Set the select point
		gTheABC.selectionStart = 0;
	    gTheABC.selectionEnd = 0;

	    // Focus after operation
	    FocusAfterOperation();

	});

}

function NormalizeTitles(){

	//console.log("NormalizeTitles");

	sendGoogleAnalytics("action","NormalizeTitles");

	if (!gAllowCopy){

        var prompt = makeCenteredPromptString("No Text in the ABC Editor to Normalize")
 
        DayPilot.Modal.alert(prompt, {
            theme: "modal_flat",
            top: 200
        });

        return;	
   	}

	// Setup initial values
	const theData = {
	};

	const form = [
	  {html: '<p style="text-align:center;margin-bottom:20px;font-size:16pt;font-family:helvetica;margin-left:15px;">Normalize Title Postfixes&nbsp;&nbsp;<span style="font-size:24pt;" title="View documentation in new tab"><a href="https://michaeleskin.com/abctools/userguide.html#hamburger_normalize_title_postfixes" target="_blank" style="text-decoration:none;position:absolute;left:20px;top:20px" class="dialogcornerbutton">?</a></span></p>'},
	  {html: '<p style="margin-top:24px;margin-bottom:12px;font-size:12pt;line-height:18pt;font-family:helvetica">Click one of the two actions below to process all title or subtitle T: tag postfix or prefix articles, for example:<br/><br/>"Kesh, The" and "Slockit Light, Da"<br/><br/>to the front of the titles and subtitles resulting in:<br/><br/>"The Kesh" and "Da Slockit Light" or the other way around.</p>'},
	  {html: '<p style="margin-top:24px;margin-bottom:12px;font-size:12pt;line-height:18pt;font-family:helvetica">The title or subtitle postfix articles that can be normalized are:</p>'},
	  {html: '<p style="margin-top:18px;margin-bottom:12px;font-size:12pt;line-height:18pt;font-family:helvetica">, The<br/>, the<br/>, A<br/>, a<br/>, An<br/>, an<br/>, Da<br/>, La<br/>, Le<br/>, Les<br/>, Ye</p>'},
	  {html: '<p style="text-align:center;margin-top:18px;margin-bottom:20px"><input id="title_normalize_forward" style="margin-right:18px;" class="advancedcontrols btn btn-injectcontrols-headers" onclick="normalizeTitleArticles(false);" type="button" value="Kesh, The → The Kesh" title="Move the title postfixes to the start of the titles"><input id="title_normalize_inverse" style="margin-right:18px;" class="advancedcontrols btn btn-injectcontrols-headers" onclick="normalizeTitleArticles(true);" type="button" value="The Kesh → Kesh, The" title="Moves the title prefixes to the end of the titles"></p>'},
	  {html: '<p>&nbsp;</p>'},
	];

	const modal = DayPilot.Modal.form(form, {}, { theme: "modal_flat_wide", top: 50, width: 600, scrollWithPage: (AllowDialogsToScroll()), autoFocus: false } );

}

function splitVoices(abcTune) {
    const lines = abcTune.split('\n');

    let header = [];
    let voices = {};
    let currentVoice = null;
    let isInVoice = false;
    let wLines = [];

    const voicePattern1 = /^V:\s*(\d+)(.*)$/;        // Matches "V: number"
    const voicePattern2 = /^\[V:\s*(\d+)\s*\](.*)$/; // Matches "[V: number]"
    const wPattern = /^W:/;                          // Matches "W:" lines

    lines.forEach(line => {
        // Skip %%score lines
        if (line.startsWith('%%score')) {
            return;
        }

        // Capture and skip W: lines
        if (wPattern.test(line)) {
            wLines.push(line);
            return;
        }

        const matchVoice1 = line.match(voicePattern1);
        const matchVoice2 = line.match(voicePattern2);

        if (matchVoice1) {
            const voiceId = matchVoice1[1];
            const extraText = matchVoice1[2].trim();
            currentVoice = voiceId;

            if (!voices[currentVoice]) {
                voices[currentVoice] = [...header];
                if (extraText !== "") {
                    voices[currentVoice].push(`V:1 ${extraText}`);
                }
            }

            isInVoice = true;
        } else if (matchVoice2) {
            const voiceId = matchVoice2[1];
            const extraText = matchVoice2[2].trim();
            currentVoice = voiceId;

            if (!voices[currentVoice]) {
                voices[currentVoice] = [...header];
                if (extraText !== "") {
                    voices[currentVoice].push(`V:1 ${extraText}`);
                }
            } else {
                if (extraText !== "") {
                    voices[currentVoice].push(extraText);
                }
            }

            isInVoice = true;
        } else if (!isInVoice) {
            header.push(line);
        } else if (currentVoice) {
            voices[currentVoice].push(line);
        }
    });

    // Append W: lines to the end of each voice
    const splitTunes = Object.keys(voices).map(voice => {
        return voices[voice].concat(wLines).join('\n');
    });

    return splitTunes;
}

function SplitVoices(){

	//console.log("Split Voices");

	sendGoogleAnalytics("action","Split Voices");

	if (!gAllowCopy){

        var prompt = makeCenteredPromptString("No Tune in the ABC Editor to Split")
 
        DayPilot.Modal.alert(prompt, {
            theme: "modal_flat",
            top: 200
        });

        return;	
   	}

	var nTunes = CountTunes();

	if (nTunes > 1){

        var prompt = makeCenteredPromptString("Split Voices only works with a single multi-voice tune")
 
        DayPilot.Modal.alert(prompt, {
            theme: "modal_flat",
            top: 200
        });

        return;	

	}

	// Try to find the current tune
	var theMultiVoiceABC = getTuneByIndex(0);

	if (theMultiVoiceABC == ""){
		// This should never happen
		return;
	}

	var theSplitVoices = splitVoices(theMultiVoiceABC);

	if (theSplitVoices.length < 2){

        var prompt = makeCenteredPromptString("Multiple voices not found in tune")
 
        DayPilot.Modal.alert(prompt, {
            theme: "modal_flat",
            top: 200
        });

        return;	

	}

	// Stuff in the split ABC voices
	var theABC = gTheABC.value;
    
    theABC += "\n";

	for (var i=0;i<theSplitVoices.length;++i){
		if (i>0){
			theABC += "\n";
		}
		theABC += theSplitVoices[i];
		theABC += "\n";
	}

	setABCEditorText(theABC);

	// Set dirty
	gIsDirty = true;

	// Redraw
	RenderAsync(true,null,function(){

	    var prompt = makeCenteredPromptString(theSplitVoices.length+" Voices Split")

	    DayPilot.Modal.alert(prompt, {
	        theme: "modal_flat",
	        top: 200
	    });
	});

}

// Open the standard editor in a new tab
function LaunchStandardEditor(){
	var url = "https://michaeleskin.com/abctools/abctools.html";
	window.open(url, '_blank');	
}


// Open the User Guide in a new tab
function LaunchEditorHelp(){
	var url = "https://michaeleskin.com/abctools/userguide.html";
	window.open(url, '_blank');	
}

// Open the quick editor in a new tab
function LaunchQuickEditor(){
	var url = "https://michaeleskin.com/abctools/abctools-quick-editor.html";
	window.open(url, '_blank');	
}

// Open the Quick Editor section of the User Guide in a new tab
function LaunchQuickEditorHelp(){
	var url = "https://michaeleskin.com/abctools/userguide.html#quickeditor";
	window.open(url, '_blank');	
}

//
// Check if an update is available
// 
function DoVersionCheck(){
	
	gUpdateVersion = gVersionNumber;
	
	gUpdateAvailable = false;
	
	try {

		// Get the latest version JSON file	
	    fetch('https://michaeleskin.com/abctools/abc_tools_version.json')
	    .then((response) => response.json())
	    .then((json) => {

	    	// Check if version changed
	    	if (json && json.version && (json.version != gVersionNumber)){

	    		// Yes, show update option
	    		SetupContextMenu(true);

	    		gUpdateAvailable = true;

	    		gUpdateVersion = json.version;

	    	}
	    	else{

	 			SetupContextMenu(false);  

	    	}
	    })
	}
	catch(err){

		SetupContextMenu(false); 

	}

	// For testing
	//gUpdateAvailable = true;


}

//
// Setup context menu
//

function SetupContextMenu(showUpdateItem){

	var items;

	if (isDesktopBrowser()){

		if (gIsQuickEditor){

			if (isPureDesktopBrowser()){

				items = [
				    {},
					{ name: 'Reorder Tunes', fn: function(target) { ChangeTuneOrder(); }},
				    { name: 'Delete Tunes', fn: function(target) { CullTunes(); }},
				    {}
				];

				if (isMac()){
					items.push({ name: 'Align Bars (One Tune) (⌘+\\)', fn: function(target) { AlignMeasures(false); }});
				}
				else{
					items.push({ name: 'Align Bars (One Tune) (Ctrl+\\)', fn: function(target) { AlignMeasures(false); }});				
				}

				items = items.concat(
				    [{ name: 'Align Bars (All Tunes)', fn: function(target) { AlignMeasures(true); }},
				    {},
				    { name: 'Split Long Tags and Text', fn: function(target) { SplitLongTextAndTags(); }},
				    {},
				    { name: 'Normalize Diacriticals', fn: function(target) { NormalizeDiacriticals(); }},
				    { name: 'Normalize Title Postfixes', fn: function(target) { NormalizeTitles(); }},
				    {},
				    { name: 'Reformat Using MusicXML', fn: function(target) { BatchMusicXMLRoundTrip(); }},
				    {},
				    { name: 'Split Voices', fn: function(target) { SplitVoices(); }},
				    {},
				    { name: 'Inject MIDI gchord Templates', fn: function(target) { InjectMIDIGChordTemplates(); }},
				    {},
				    { name: 'Import PDF, Website, or CSV', fn: function(target) { ImportPDF_CSV_Website(); }},
				    {},
				    { name: 'Toggle Top/Bottom Toolbars', fn: function(target) { ToggleTopBar(); }},
				    { name: 'Maximize Editor', fn: function(target) { MaximizeEditor(); }},
				    {},
				    { name: 'Settings', fn: function(target) { ConfigureToolSettings(); }},
				    { name: 'Advanced Settings', fn: function(target) { AdvancedSettings(); }},
				    {},
				    { name: 'Launch Standard Editor', fn: function(target) { LaunchStandardEditor(); }},
				    {},
				    { name: 'About the Quick Editor', fn: function(target) { LaunchQuickEditorHelp(); }},
				]);

				if (showUpdateItem){
					items = items.concat(
						[{},
						{ name: '*A new version is available!', fn: function(target) { UpdateToLatestVersion(); }},
						{ name: '*Click here to update the tool', fn: function(target) { UpdateToLatestVersion(); }},
				    ]);

					// Turn the button red
				    var elem = document.getElementById("morecommands");
				    elem.style.color = "red";
				    elem.style.backgroundColor = "#FFE0E0";
				    elem.title = "An update to the tool is available!"
				}

				var theTuneSetItem = { name: 'Create Tune Set (Ctrl+/)', fn: function(target) { BuildTuneSet(); }};

				if (isMac()){
					theTuneSetItem = { name: 'Create Tune Set (⌘+/)', fn: function(target) { BuildTuneSet(); }}
				}

				items.unshift(theTuneSetItem);

				items.unshift({});

				var theGoToItem = { name: 'Jump to Tune (Ctrl+J)', fn: function(target) { JumpToTune(); }};
				
				if (isMac()){

					theGoToItem = { name: 'Jump to Tune (⌘+J)', fn: function(target) { JumpToTune(); }};
				}
				
				items.unshift(theGoToItem);
				
				items.unshift({});

				// Adapt the search and replace key string based on the platform
				var theFindItem = { name: 'Find and Replace (Ctrl+F)', fn: function(target) { FindAndReplace(); }};

				if (isMac()){

					theFindItem = { name: 'Find and Replace (⌘+F)', fn: function(target) { FindAndReplace(); }};
				}

				items.unshift(theFindItem);
				
			}
			else{
				items = [
					{ name: 'Jump to Tune', fn: function(target) { JumpToTune(); }},
					{},
				    { name: 'Create Tune Set', fn: function(target) { BuildTuneSet(); }},
				    {},
				    { name: 'Reorder Tunes', fn: function(target) { ChangeTuneOrderMobile(); }},
				    { name: 'Delete Tunes', fn: function(target) { CullTunes(); }},
				    {},
					{ name: 'Align Bars (One Tune)', fn: function(target) { AlignMeasures(false); }},
					{ name: 'Align Bars (All Tunes)', fn: function(target) { AlignMeasures(true); }},
				    {},
				    { name: 'Split Long Tags and Text', fn: function(target) { SplitLongTextAndTags(); }},
				    {},
				    { name: 'Normalize Diacriticals', fn: function(target) { NormalizeDiacriticals(); }},
				    { name: 'Normalize Title Postfixes', fn: function(target) { NormalizeTitles(); }},
				    {},
				    { name: 'Reformat Using MusicXML', fn: function(target) { BatchMusicXMLRoundTrip(); }},
				    {},
				    { name: 'Split Voices', fn: function(target) { SplitVoices(); }},
				    {},
				    { name: 'Import PDF, Website, or CSV', fn: function(target) { ImportPDF_CSV_Website(); }},
				    {},
				    { name: 'Toggle Top/Bottom Toolbars', fn: function(target) { ToggleTopBar(); }},
				    { name: 'Maximize Editor', fn: function(target) { MaximizeEditor(); }},
				    {},
				    { name: 'Settings', fn: function(target) { ConfigureToolSettings(); }},
				    { name: 'Advanced Settings', fn: function(target) { AdvancedSettings(); }},
				    {},
  					{ name: 'Launch Standard Editor', fn: function(target) { LaunchStandardEditor(); }},
				    {},
				    { name: 'About the Quick Editor', fn: function(target) { LaunchQuickEditorHelp(); }},
				];

				if (showUpdateItem){
					items = items.concat(
						[{},
						{ name: '*A new version is available!', fn: function(target) { UpdateToLatestVersion(); }},
						{ name: '*Click here to update the tool', fn: function(target) { UpdateToLatestVersion(); }},
				    ]);

					// Turn the button red
				    var elem = document.getElementById("morecommands");
				    elem.style.color = "red";
				    elem.style.backgroundColor = "#FFE0E0";
				    elem.title = "An update to the tool is available!"
				}
			}
		}
		else{

			if (isPureDesktopBrowser()){

				items = [
					{},
				    { name: 'Reorder Tunes', fn: function(target) { ChangeTuneOrder(); }},
				    { name: 'Delete Tunes', fn: function(target) { CullTunes(); }},
				    {},
				];

				if (isMac()){
					items.push({ name: 'Align Bars (One Tune) (⌘+\\)', fn: function(target) { AlignMeasures(false); }});
				}
				else{
					items.push({ name: 'Align Bars (One Tune) (Ctrl+\\)', fn: function(target) { AlignMeasures(false); }});				
				}

				items = items.concat(
					[{ name: 'Align Bars (All Tunes)', fn: function(target) { AlignMeasures(true); }},
				    {},
				    { name: 'Split Long Tags and Text', fn: function(target) { SplitLongTextAndTags(); }},
				    {},
				    { name: 'Normalize Diacriticals', fn: function(target) { NormalizeDiacriticals(); }},
				    { name: 'Normalize Title Postfixes', fn: function(target) { NormalizeTitles(); }},
				    {},
				    { name: 'Reformat Using MusicXML', fn: function(target) { BatchMusicXMLRoundTrip(); }},
				    {},
				    { name: 'Split Voices', fn: function(target) { SplitVoices(); }},
				    {},
				    { name: 'Inject MIDI gchord Templates', fn: function(target) { InjectMIDIGChordTemplates(); }},
				    {},
				    { name: 'Import PDF, Website, or CSV', fn: function(target) { ImportPDF_CSV_Website(); }},
				    {},
				    { name: 'Toggle Top/Bottom Toolbars', fn: function(target) { ToggleTopBar(); }},
				    { name: 'Maximize Editor', fn: function(target) { MaximizeEditor(); }},
				    {},
				    { name: 'Settings', fn: function(target) { ConfigureToolSettings(); }},
				    { name: 'Advanced Settings', fn: function(target) { AdvancedSettings(); }},
				    {},
  					{ name: 'Launch Quick Editor', fn: function(target) { LaunchQuickEditor(); }},
				]);

				// For forcing display for User Guide screen shots
				//showUpdateItem = true;// FOOFOO

				if (showUpdateItem){
					items = items.concat(
						[{},
						{ name: '*A new version is available!', fn: function(target) { UpdateToLatestVersion(); }},
						{ name: '*Click here to update the tool', fn: function(target) { UpdateToLatestVersion(); }},
				    ]);

					// Turn the button red
				    var elem = document.getElementById("morecommands");
				    elem.style.color = "red";
				    elem.style.backgroundColor = "#FFE0E0";
				    elem.title = "An update to the tool is available!"
				}

				var theTuneSetItem = { name: 'Create Tune Set (Ctrl+/)', fn: function(target) { BuildTuneSet(); }};

				if (isMac()){
					theTuneSetItem = { name: 'Create Tune Set (⌘+/)', fn: function(target) { BuildTuneSet(); }}
				}

				items.unshift(theTuneSetItem);

				items.unshift({});

				var theGoToItem = { name: 'Jump to Tune (Ctrl+J)', fn: function(target) { JumpToTune(); }};
				
				if (isMac()){

					theGoToItem = { name: 'Jump to Tune (⌘+J)', fn: function(target) { JumpToTune(); }};
				}
				
				items.unshift(theGoToItem);
				
				items.unshift({});

				// Adapt the search and replace key string based on the platform
				var theFindItem = { name: 'Find and Replace (Ctrl+F)', fn: function(target) { FindAndReplace(); }};

				if (isMac()){

					theFindItem = { name: 'Find and Replace (⌘+F)', fn: function(target) { FindAndReplace(); }};
				}

				items.unshift(theFindItem);
				
			}
			else{

				items = [
					{ name: 'Jump to Tune', fn: function(target) { JumpToTune(); }},
				    {},
				    { name: 'Create Tune Set', fn: function(target) { BuildTuneSet(); }},
					{},
				    { name: 'Reorder Tunes', fn: function(target) { ChangeTuneOrderMobile(); }},
				    { name: 'Delete Tunes', fn: function(target) { CullTunes(); }},
				    {},
					{ name: 'Align Bars (One Tune)', fn: function(target) { AlignMeasures(false); }},
					{ name: 'Align Bars (All Tunes)', fn: function(target) { AlignMeasures(true); }},
				    {},
				    { name: 'Split Long Tags and Text', fn: function(target) { SplitLongTextAndTags(); }},
				    {},
				    { name: 'Normalize Diacriticals', fn: function(target) { NormalizeDiacriticals(); }},
				    { name: 'Normalize Title Postfixes', fn: function(target) { NormalizeTitles(); }},
				    {},
				    { name: 'Reformat Using MusicXML', fn: function(target) { BatchMusicXMLRoundTrip(); }},
				    {},
				    { name: 'Split Voices', fn: function(target) { SplitVoices(); }},
				    {},
				    { name: 'Import PDF, Website, or CSV', fn: function(target) { ImportPDF_CSV_Website(); }},
				    {},
				    { name: 'Toggle Top/Bottom Toolbars', fn: function(target) { ToggleTopBar(); }},
				    { name: 'Maximize Editor', fn: function(target) { MaximizeEditor(); }},
				    {},
				    { name: 'Settings', fn: function(target) { ConfigureToolSettings(); }},
				    { name: 'Advanced Settings', fn: function(target) { AdvancedSettings(); }},
				    {},
				    { name: 'Launch Quick Editor', fn: function(target) { LaunchQuickEditor(); }},
				];

				if (showUpdateItem){
					items = items.concat(
						[{},
						{ name: '*A new version is available!', fn: function(target) { UpdateToLatestVersion(); }},
						{ name: '*Click here to update the tool', fn: function(target) { UpdateToLatestVersion(); }},
				    ]);

					// Turn the button red
				    var elem = document.getElementById("morecommands");
				    elem.style.color = "red";
				    elem.style.backgroundColor = "#FFE0E0";
				    elem.title = "An update to the tool is available!"
				}
			}
		}
	}
	else{
		if (gIsQuickEditor){

			items = [
				{ name: 'Jump to Tune', fn: function(target) { JumpToTune(); }},
			    {},
				{ name: 'Create Tune Set', fn: function(target) { BuildTuneSet(); }},
				{},
			    { name: 'Reorder Tunes', fn: function(target) { ChangeTuneOrderMobile(); }},
			    { name: 'Delete Tunes', fn: function(target) { CullTunes(); }},
			    {},
				{ name: 'Align Bars (One Tune)', fn: function(target) { AlignMeasures(false); }},
				{ name: 'Align Bars (All Tunes)', fn: function(target) { AlignMeasures(true); }},
			    {},
			    { name: 'Split Long Tags and Text', fn: function(target) { SplitLongTextAndTags(); }},
			    {},
				{ name: 'Normalize Diacriticals', fn: function(target) { NormalizeDiacriticals(); }},
			    { name: 'Normalize Title Postfixes', fn: function(target) { NormalizeTitles(); }},
			    {},
			    { name: 'Reformat Using MusicXML', fn: function(target) { BatchMusicXMLRoundTrip(); }},
			    {},
			    { name: 'Split Voices', fn: function(target) { SplitVoices(); }},
			    {},
			    { name: 'Import PDF, Website, or CSV', fn: function(target) { ImportPDF_CSV_Website(); }},
			    {},
			    { name: 'Toggle Top/Bottom Toolbars', fn: function(target) { ToggleTopBar(); }},
				{},
			    { name: 'Settings', fn: function(target) { ConfigureToolSettings(); }},
			    { name: 'Advanced Settings', fn: function(target) { AdvancedSettings(); }},
			    {},
			    { name: 'Launch Standard Editor', fn: function(target) { LaunchStandardEditor(); }},
			    {},
			    { name: 'About the Quick Editor', fn: function(target) { LaunchQuickEditorHelp(); }},				
			];

			if (showUpdateItem){
				items = items.concat(
					[{},
					{ name: '*A new version is available!', fn: function(target) { UpdateToLatestVersion(); }},
					{ name: '*Click here to update the tool', fn: function(target) { UpdateToLatestVersion(); }},
			    ]);

				// Turn the button red
			    var elem = document.getElementById("morecommands");
			    elem.style.color = "red";
			    elem.style.backgroundColor = "#FFE0E0";
			    elem.title = "An update to the tool is available!"
			}
		}
		else{

			items = [
				{ name: 'Jump to Tune', fn: function(target) { JumpToTune(); }},
			    {},
				{ name: 'Create Tune Set', fn: function(target) { BuildTuneSet(); }},
				{},
			    { name: 'Reorder Tunes', fn: function(target) { ChangeTuneOrderMobile(); }},
			    { name: 'Delete Tunes', fn: function(target) { CullTunes(); }},
			    {},
			    { name: 'Align Bars (One Tune)', fn: function(target) { AlignMeasures(false); }},
				{ name: 'Align Bars (All Tunes)', fn: function(target) { AlignMeasures(true); }},
			    {},
			    { name: 'Split Long Tags and Text', fn: function(target) { SplitLongTextAndTags(); }},
			    {},
				{ name: 'Normalize Diacriticals', fn: function(target) { NormalizeDiacriticals(); }},
			    { name: 'Normalize Title Postfixes', fn: function(target) { NormalizeTitles(); }},
			    {},
			    { name: 'Reformat Using MusicXML', fn: function(target) { BatchMusicXMLRoundTrip(); }},
			    {},
			    { name: 'Split Voices', fn: function(target) { SplitVoices(); }},
			    {},
			    { name: 'Import PDF, Website, or CSV', fn: function(target) { ImportPDF_CSV_Website(); }},
			    {},
			    { name: 'Toggle Top/Bottom Toolbars', fn: function(target) { ToggleTopBar(); }},
				{},
			    { name: 'Settings', fn: function(target) { ConfigureToolSettings(); }},
			    { name: 'Advanced Settings', fn: function(target) { AdvancedSettings(); }},
			    {},
			    { name: 'Launch Quick Editor', fn: function(target) { LaunchQuickEditor(); }},
			];

			if (showUpdateItem){
				items = items.concat(
					[{},
					{ name: '*A new version is available!', fn: function(target) { UpdateToLatestVersion(); }},
					{ name: '*Click here to update the tool', fn: function(target) { UpdateToLatestVersion(); }},
			    ]);

				// Turn the button red
			    var elem = document.getElementById("morecommands");
			    elem.style.color = "red";
			    elem.style.backgroundColor = "#FFE0E0";
			    elem.title = "An update to the tool is available!"
			}
		}
	}

	var cm1 = new ContextMenu('.context-menu', items);
}

// 
// Optimize the margins of the top buttons
//
function SetTopButtonMargins(){
  
  if (gIsQuickEditor){

    var elems = ["openabcfile","newabcfile","saveabcfile","copybutton","playbutton","rawmodebutton"];

    var theMargin = 28;

    if (isMobileBrowser()){

      theMargin = 40;

    }

    if (giPadTwoColumn){

      theMargin = 40;

    }

    elems.forEach(function(id) {

      var el = document.getElementById(id);
      
      if (el) {
        el.style.marginRight = theMargin+"px";
      }

    });
    
  }
  else{

    var elems = ["openabcfile","newabcfile","saveabcfile","saveaspdf","saveaswebsite","copybutton","playbutton","rawmodebutton"];

    var theMargin = 8;

    if (isMobileBrowser()){

      theMargin = 20;

    }

    if (gIsIPad){

      theMargin = 14;

    }

    if (giPadTwoColumn){

      theMargin = 22;
    
    }

    elems.forEach(function(id) {

      var el = document.getElementById(id);
      
      if (el) {
        el.style.marginRight = theMargin+"px";
      }

    });

  }

}

function DoStartup() {

	// Init global state
	gShowAdvancedControls = false;
	gShowShareControls = false;
	gStripAnnotations = false;
	gStripTextAnnotations = false;
	gStripChords = false;
	gStripTab = false;
	gStripOrnaments = false;
	gRenderingPDF = false;
	gAllowSave = false;
	gAllowURLSave = false;
	gShowAllControls = false;
	gAllowControlToggle = false
	gAllowFilterAnnotations = false;
	gAllowFilterText = false;
	gAllowFilterChords = false;
	gAllowFilterTab = false;
	gAllowFilterOrnaments = false;
	gIsMaximized = false;
	gCapo = 0;
	gABCFromFile = false;
	gAllowCopy = false;
	gAllowPDF = false;
	gAllowWebExport = false;
	gShowTabNames = true;
	gAllowShowTabNames = false;
	gLastAutoScrolledTune = -1;
	gLastClickedTune = -1;
	gTopBarShowing = true;
	gCurrentTune = 0;
	gTotalTunes = 0;
	gCurrentTab = "noten";
	gForceFullRender = false;
	gIsOneColumn = true;
	gLocalStorageAvailable = false;
	gPDFQuality = 0.75;
	gIncludePageLinks = true;
	gDoForcePDFFilename = false;
	gForcePDFFilename = "";
	gFullScreenScaling = 50;
	gIsDirty = false;
	gForceComhaltasABC = false;
	gForceAndroid = false;
	gDisableAndroid = false;

	// Is browser storage available?
	if (window.localStorage) {

		gLocalStorageAvailable = true;

	}

	// Check if online (always returns true for normal case)
	doOnlineCheck();

	// Startup in blank screen
	
	HideMaximizeButton();
	DoMaximize();

	// Get platform info for later UI adaption

	// Are we on Safari?

	// Fix issues with spinner on Safari
	// For all other browsers
	gSpinnerDelay = 25;

	gIsSafari = isSafari();
	if (gIsSafari){
		//console.log("Setting spinner delay to 250");
		gSpinnerDelay = 250;
	}

	// Are we on Chrome?
	gIsChrome = false;

	if (!gIsSafari){
		if (isChrome()){

			gIsChrome = true;

		}
	}

	// Are we on iOS?
	gIsIOS = false;
	if (isIOS()) {

		gIsIOS = true;

	}
	
	// Are we on an iPad?
	gIsIPad = false;
	if (isIPad()) {

		gIsIPad = true;

	}

	// Are we on an iPhone?
	gIsIPhone = false;
	if (isIPhone()) {

		gIsIPhone = true;

	}

	// Are we on Android?
	gIsAndroid = false;

	if (isAndroid()){

		gIsAndroid = true;

	}

    // Disallow if this the Facebook embedded browser
    CheckFacebook_iOS();

    // Early exit if Facebook
    if (gIsFacebook){
    	return;
    }

  //
	// Uncomment these lines as desired for mobile simulation testing
	//
	//gIsAndroid = true;
	//gIsIOS = true; 
	//gIsIPhone = true;  
	//gIsIPad = true;
	//giPadTwoColumn = true;  

	if (gIsIOS){
		document.getElementById("selectabcfile").removeAttribute("accept");
	}	
	
	// Need this early to configure iPad or Android UI!

	if (gLocalStorageAvailable){

		// Two column display for iPad
		var val = localStorage.iPadTwoColumn;

		if (val){
			giPadTwoColumn = (val == "true");
		}
		else{
			giPadTwoColumn = false;
		}
		// Force large controls for iPad two-column
		if (giPadTwoColumn){
			gLargePlayerControls = true;
		}

		// Force Android?
		val = localStorage.forceAndroid;

		if (val){
			if (val == "true"){
				gForceAndroid = true;
				gIsAndroid = true;
				gIsIOS = false;
				gIsIPad = false;
				giPadTwoColumn = false
			}
			else{
				gForceAndroid = false;
			}
		}

		// Disable Android?
		val = localStorage.disableAndroid;

		if (val){
			if (val == "true"){
				gDisableAndroid = true;
				gIsAndroid = false;
				gIsIOS = false;
				gIsIPad = false;
				giPadTwoColumn = false
			}
			else{
				gDisableAndroid = false;
			}
		}

	}

	//
	// iOS and Android styling adaptation
	//
	// Single column stacked blocks
	//
	if (isMobileBrowser()) {

		// Fix the title font since no Comic Sans on mobile
		var elem = document.getElementById("toolpagetitle");
		elem.style.fontFamily = "Helvetica";

		// Add little extra room at the top
		var elem = document.getElementById("notenlinks");
		elem.style.paddingTop = "20px";

		if (giPadTwoColumn){

			// Reset the viewport to avoid scaling
			var viewport = document.querySelector("meta[name=viewport]");
			viewport.setAttribute("content","width=1800,maximum-scale=1.0,user-scalable=0");

			// Hide the Highlighting button
			elem = document.getElementById("rawmodebutton");
			elem.style.display = "none";

			// Resize the notation placeholder
			elem = document.getElementById("notation-placeholder");
			elem.style.width = "860px";

			// Resize the UI div
			elem = document.getElementById("noscroller");
			elem.style.width = "860px";

			// Resize the notation div
			elem = gTheNotation;
			elem.style.width = "860px";

			// Resize the notation spacer
			elem = document.getElementById("notation-spacer");
			elem.style.width = "860px";

			// Resize the UI overlay
			elem = document.getElementById("uioverlay");
			elem.style.width = "860px";

			// Resize the diagnostics
			elem = document.getElementById("diagnostics");
			elem.style.width = "836px";

			// Change the primary control display
			elem = document.getElementById("transpose-controls");
			elem.style.display = "inline-block";
			
			// Disallow pinch-to-zoom
			document.addEventListener('touchstart', function(event) {
			    // If there are more than one touch points, prevent the default behavior
			    if (event.touches.length > 1) {
			        event.preventDefault();
			    }
			}, { passive: false });

			document.addEventListener('touchmove', function(event) {
			    // If there are more than one touch points, prevent the default behavior
			    if (event.touches.length > 1) {
			        event.preventDefault();
			    }
			}, { passive: false });		

		}
		else{
			
			// Reduce title font size
			elem = document.getElementById("toolpagetitle");
			elem.size = 4;

			if ((gIsIPhone) || (gIsAndroid)){

				elem = gTheABC;

				if (gIsIPhone){
					elem.cols = 60;
				}
				else{
					elem.cols = 58;				
				}

				elem.style.fontSize = "16pt";
				elem.style.lineHeight = "18pt";

				// Reset the viewport to avoid scaling
				var viewport = document.querySelector("meta[name=viewport]");
				viewport.setAttribute("content","width=860,maximum-scale=1.0,user-scalable=0");
				
			}

			// Resize the app-container
			elem = document.getElementById("app-container");
			elem.style.width = "860px";
			elem.style.display = "block";
			elem.style.marginLeft = "0px";

			// Resize the notation placeholder
			elem = document.getElementById("notation-placeholder");
			elem.style.width = "860px";
			elem.style.display = "none";

			// Resize the UI div
			elem = document.getElementById("noscroller");
			elem.style.width = "860px";
			elem.style.display = "none"; // Hidden at startup

			// Resize the notation div
			elem = gTheNotation;
			elem.style.width = "820px";
			elem.style.display = "block";
			elem.style.marginLeft = "20px";
			elem.style.marginRight = "0px";
			elem.style.overflow = "hidden";

			// Resize the notation spacer
			elem = document.getElementById("notation-spacer");
			elem.style.width = "860px";
			elem.style.display = "block";
			elem.style.marginRight = "0px";

			// Resize the UI overlay
			elem = document.getElementById("uioverlay");
			elem.style.width = "860px";
			elem.style.display = "block";

			// Resize the diagnostics
			elem = document.getElementById("diagnostics");
			elem.style.width = "836px";
			elem.style.display = "block";

			// Move the spinner
			elem = document.getElementById("loading-bar-spinner");
			elem.style.top = "25%"

			// Hide the Highlighting button
			elem = document.getElementById("rawmodebutton");
			elem.style.display = "none";
		}
	}

	// On iPhone and Android, move the zoom button over a bit
	if (gIsIPhone || gIsAndroid){

		document.getElementById("zoombutton").style.right = "21px";
		document.getElementById("helpbutton").style.left = "21px";
		document.getElementById("playbuttonicon").style.right = "21px";
		if (!gIsQuickEditor){
			document.getElementById("pdfbuttonicon").style.left = "21px";
		}

	}

	// On iPad, resize the zoom button
	if (gIsIPad){

		var iconSize = "36px";
		var iconOffset = "8px";

		if (giPadTwoColumn){
			iconSize = "54px";
			iconOffset = "16px";
		}

		document.getElementById("zoombutton").style.width = iconSize;
		document.getElementById("zoombutton").style.height = iconSize;
		document.getElementById("zoombutton").style.top = iconOffset;
		document.getElementById("zoombutton").style.right = iconOffset;

		document.getElementById("helpbutton").style.width = iconSize;
		document.getElementById("helpbutton").style.height = iconSize;
		document.getElementById("helpbutton").style.top = iconOffset;
		document.getElementById("helpbutton").style.left = iconOffset;

		document.getElementById("playbuttonicon").style.width = iconSize;
		document.getElementById("playbuttonicon").style.height = iconSize;
		document.getElementById("playbuttonicon").style.bottom = iconOffset;
		document.getElementById("playbuttonicon").style.right = iconOffset;

		if (!gIsQuickEditor){
			document.getElementById("pdfbuttonicon").style.width = iconSize;
			document.getElementById("pdfbuttonicon").style.height = iconSize;
			document.getElementById("pdfbuttonicon").style.bottom = iconOffset;
			document.getElementById("pdfbuttonicon").style.left = iconOffset;
		}
	}

	//
	// Hook up the text area text change callback with debounce
	// 
	// If a paste was detected, force a full render because the tunes may have changed while
	// the tune count has not
	//
	document.getElementById('abc').oninput = 
		debounce( () => {

			// Set dirty
			gIsDirty = true;
		
			if (!gForceFullRender){

		    	OnABCTextChange();

		    }
		    else{

		    	RenderAsync(true,null);

		    }

		    gForceFullRender = false;

		}, DEBOUNCEMS);


	//
	// Clean "smart quotes" on paste
	//
	document.getElementById('abc').onpaste = 

		function(e){

			// Pastes over the contents sometimes don't result in the proper redraw behavior
			// Detect if there is a tune in the paste and then force a full redraw if detected

			var forceRender = false;

			// Get the contents
			var clipboardData = (e.clipboardData || window.clipboardData);

			if (clipboardData){

				var thePasteContents = clipboardData.getData("text");

				// Heuristic - Look for an X: tag in the paste contents to force a complete redraw
				if (thePasteContents && (thePasteContents.indexOf("X:") != -1)){

					//console.log("\n---\nTune paste detected, forcing full redraw")

					forceRender = true;
		    		
				}

			}

			setTimeout(function(){

				CleanSmartQuotes();

				// Set dirty
				gIsDirty = true;

				if (gIsIOS){

					// iOS 17 messed up copy and paste 
					// appears to be double URL encoded
					FixIOS17();

				}
				else
				// Forcing a full redraw after paste?
				if (forceRender){

					setTimeout(function(){

		    			RenderAsync(true,null);

		    		}, 250);
		    	}

			},0);
		};

	//
	// Scroll tune notation into view when clicked
	// Select whole tune if alt key is held when clicking
	//

	document.getElementById('abc').onclick = 

		debounce( (event) => {

			if (isPureDesktopBrowser()){

		        if (event.altKey) {  // Alt key held

		            const textarea = event.target;
		            const text = gTheABC.value;
		            const selectionStart = gTheABC.selectionStart;

		            // Find the start by searching backwards for a line that starts with 'X:'
		            let start = text.lastIndexOf('\nX:', selectionStart);
		            if (start === -1) {
		                start = text.indexOf('X:', 0); // If no previous 'X:' is found, find the first
		            } else {
		                start++;  // Move past the newline character before 'X:'
		            }

		            // Find the end by searching for a blank line or the end of the text
		            var end = text.indexOf('\n\n', selectionStart); // Find double newline (blank line)
		            var end2 = text.indexOf('X:', selectionStart); // Find next tune

		            if ((end===-1) && (end2===-1)) {
		                end = text.length; // If no blank line, go to the end of the text
		            }
		            else{
		            	if (end===-1){
		            		end = end2;
		            	}
		            	else
		            	if (end >= end2){
		            		end = end2;
		            	}
		            }

		            // Select the text from 'X:' line to the blank line or end of text
		            gTheABC.setSelectionRange(start, end);
		        }
	    	}

		    MakeTuneVisible(false);

		    fireSelectionChanged();

		}, AUTOSCROLLDEBOUNCEMS);

	//
	// Setup the file import control
	//
	document.getElementById("selectabcfile").onchange = () => {

		let fileElement = document.getElementById("selectabcfile");

		// check if user had selected a file
		if (fileElement.files.length === 0) {

			var thePrompt = "Please select an ABC, MusicXML, or MIDI file";

			// Center the string in the prompt
			thePrompt = makeCenteredPromptString(thePrompt);

			DayPilot.Modal.alert(thePrompt,{ theme: "modal_flat", top: 200, scrollWithPage: (AllowDialogsToScroll()) });

			return;

		}

    // Prevent reentry
    if (gImportRunning){

      if (fileElement){
        fileElement.value = "";
      }

      return;
      
    }

    setABCEditorText("");

    Render(true,null);
    
    // Mark as clean
    gIsDirty = false;

    const add_files = Array.from(fileElement.files);

    // Use the common multi reader
    DoMultiReadCommon(add_files, fileElement);

	}

	// Check if this is the first time the tool has run	
	gIsFirstRun = isFirstRun();

	// Set the initial tab to notation
	//document.getElementById("b1").checked = true;
	SetRadioValue("notenodertab", "noten");

	// Reset the paging control
	setPDFFormat("one");

	// Reset the page number control
	setPageNumbers("none");

	// Reset the first page page number control
	setFirstPage("yes");

	// Hook up the zoom button
	document.getElementById("zoombutton").onclick = 
		function(e) {

      // Alt-click to Enter presentation mode
      if (e.altKey){
        togglePresentationMode();
      }
      else{
			  ToggleMaximize();
      }
		};
	
	// Hook up the help button
	document.getElementById("helpbutton").onclick = 
		function() {
			ShowHelp();
		};

	if (!gIsQuickEditor){

		document.getElementById("playbuttonicon").onclick = 
			function() {
				PlayABC(null);
			};

		// Hook up the PDF button
		document.getElementById("pdfbuttonicon").onclick = 
			function() {
				PDFExportDialog();
			};
	}
	else{
		document.getElementById("playbuttonicon").onclick = QE_PlayButton_Handler;
	}
	
	gStaffSpacing = STAFFSPACEOFFSET + STAFFSPACEDEFAULT;

	// Clear the text entry area, but don't render
	ClearNoRender();

	// Init the Anglo Concertina button naming matrix
	resetAngloButtonNames();

	// Init the MusicXML import options
	resetMusicXMLImportOptions();

	// Is local storage available
	if (gLocalStorageAvailable) {

		// Load the initial configuration settings from local storage
		GetInitialConfigurationSettings();

	}

	//
    // If enabled install the tab close listener to save the last editor state
    //
    // Only allowed on desktop systems
    //
	if (isPureDesktopBrowser()){

	    if (gSaveLastAutoSnapShot){

	    	AddTabCloseListener();
	    
	    }
	    
	}

	// Save if we need to force a text box recalc after minimize
	gForceInitialTextBoxRecalc = false;

	// Check for and process URL share link
	var isFromShare = processShareLink();

	// Save global is from share
	gIsFromShare = isFromShare;

	gForceInitialTextBoxRecalc = isFromShare;

	// Not from a share, show the UI
	if (!isFromShare){

		DoMinimize();

		// Show the notation placeholder
		document.getElementById("notation-placeholder").style.display = "block";

		// Update the application state from local storage if available
		restoreStateFromLocalStorage();

		// Keep track of raw editor runs
		sendGoogleAnalytics("start","no_share");

	}
	else{

		if (!gIsQuickEditor){

			// Add the play button
			ShowPlayButton();

			// Add the PDF button
			ShowPDFButton();
		}
		else{

			ShowPlayButton();

		}

		// First time using the tool?
		if (gIsFirstRun){

			// Show zoom instructions screen
			showZoomInstructionsScreen();

		}

		// Update only the application PDF state from local storage if available
		restorePDFStateFromLocalStorage();

		// Save the state in the share link to local storage
		UpdateLocalStorage();

		// Keep track of raw editor runs
		sendGoogleAnalytics("start","from_share");

	}

	// Set the initial instrument tab button display state
	// Also does a recalc of notation top position
	ShowHideTabButtons();

  // Optimize layout of top buttons
  SetTopButtonMargins();

	// Force recalculation of the notation top position on ABC text area resize

	new ResizeObserver(TextBoxResizeHandler).observe(gTheABC);

	if (isDesktopBrowser()){

		// Setup text box symmetrical resize 
		if (giPadTwoColumn){
			// iPad two column is always fixed width
			gInitialTextBoxWidth = 832;
			gTheABC.style.marginLeft = 0+"px";
			gTheABC.style.width = gInitialTextBoxWidth+"px";

		}
		else{
			gInitialTextBoxWidth = gTheABC.offsetWidth;
		}

		var elem = document.getElementById("notenlinks");
		gInitialTextBoxContainerWidth = elem.offsetWidth;

		elem = document.getElementById("noscroller");
		gInitialTextBoxContainerLeft = elem.offsetLeft;

		// console.log("ResizeObserver setup:");
		// console.log("Initial width = "+gInitialTextBoxWidth);
		// console.log("Initial container width = "+gInitialTextBoxContainerWidth);
		// console.log("Initial container left = "+gInitialTextBoxContainerLeft);

		if (isPureDesktopBrowser()){
			new ResizeObserver(ResizeTextBox).observe(gTheABC);
		}

		// Hook window resize events
		window.onresize = function(){

			HandleWindowResize();

			if (!gIsMaximized){

				// Reset text box symmetrical resize 
				gTheABC.style.marginLeft = 0+"px";
				gTheABC.style.width = gInitialTextBoxWidth+"px";

				var elem = document.getElementById("notenlinks");
				gInitialTextBoxContainerWidth = elem.offsetWidth;

				elem = document.getElementById("noscroller");
				gInitialTextBoxContainerLeft = elem.offsetLeft;

				gTheNotation.style.marginLeft = "auto";

				// console.log("On window resize:");
				// console.log("Initial container width = "+gInitialTextBoxContainerWidth);
				// console.log("Initial container left = "+gInitialTextBoxContainerLeft);

				ResizeTextBox();

				gGotWindowResizeWhileMaximized = false;

			}
			else{

				gGotWindowResizeWhileMaximized = true;

			}
		
		}

		// Set the ABC Editor font from the value read from local storage
		updateABCEditorFont();

	}

	// Update diagnostics area display
	updateDiagnostics();

	// And call it once for the initial setup
	HandleWindowResize();

	// 
	// Initially show the controls as soon as some ABC is entered
	//
	ShowAllControls();


	if (!isFromShare){
		document.getElementById("notenrechts").style.display = "none";
		gAllowControlToggle = false;
	}

	//
	// Add drag-and-drop handlers on desktop browsers 
	//
	if (isPureDesktopBrowser()){

    	$.event.props.push ("dataTransfer");      // make jQuery copy the dataTransfer attribute

		$('#abc').on ('drop', function(e){
			
			// Remove the drag drop highlighting
			$(this).toggleClass('indrag', false);

			DoDrop(e);

		});
		
		$('#abc').on ('dragover', function (e) {    // this handler makes the element accept drops and generate drop-events
	        e.stopPropagation ();
	        e.preventDefault ();                    // the preventDefault is obligatory for drag/drop!
	        e.dataTransfer.dropEffect = 'copy';     // Explicitly show this is a copy.
	    });

	    $('#abc').on ('dragenter dragleave', function () {
	        $(this).toggleClass ('indrag');
	    });

	    // Disable dragging the text inside the text area
		$('#abc').on ('dragstart', function (e) {    // this handler makes the element accept drops and generate drop-events
	        e.preventDefault ();                    
	    });

	}
	else{
		
		// Use the original placeholder on iOS and Android
		gTheABC.placeholder = "Enter the ABC for your tunes here";

		// Hide the desktop zoom message
		document.getElementById("desktop_use_message").style.display = "none";

		// Disable dragging the text inside the text area
		$('#abc').on ('dragstart', function (e) {    // this handler makes the element accept drops and generate drop-events
	        e.preventDefault ();                    
	    });


	}

	//
	// Add text area mouse handlers on desktop browsers 
	//
	if (isPureDesktopBrowser()){

		gTheABC.onmousedown = function (e) {
			
			if (gRawMode){
				setTimeout(function(){
					gRawIsDragging = true;
					fireSelectionChanged();
				},0);
			}
		};

		gTheABC.onmouseup = function (e) {

			if (gRawMode){
				gRawIsDragging = false;
				fireSelectionChanged();
			}

		};

		gTheABC.onmousemove = function (e) {

			if (gRawMode){
				if (gRawIsDragging){
					fireSelectionChanged();
				}
			}

		};

		// Raw mode is enabled by default
		gAllowRawMode = true;

		if (isMac()){

			var elem = document.getElementById("saveabcfile");
			elem.title = "Saves the current ABC text to a file (⌘+S)"

			document.addEventListener('keydown', function(event) {

				//console.log("event.key = "+event.key);

				// F3 resets the player
				if (event.key === 'F3') {
					event.preventDefault(); 
					const button = document.querySelector('button.abcjs-midi-reset');
					if (button){
						
						button.click();

					}
				}
				else
				// F4 toggles the player state
				if (event.key === 'F4') {
					event.preventDefault(); 
					const button = document.querySelector('button.abcjs-midi-start');
					if (button){

						button.click();

						if (!isSafari()){
							setTimeout(function(){

								var audioContext = ABCJS.synth.activeAudioContext();

								if (audioContext && (audioContext.state == 'suspended')){
									
									button.classList.remove("abcjs-loading");

									var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;">Click OK to Play</p>';
									modal_msg += '<p style="font-size:14pt;line-height:18pt;margin-top:36px;text-align:center;">Your browser requires a click before you can use F4 to play the tune.</p>';
									modal_msg += '<p style="font-size:14pt;line-height:18pt;margin-top:18px;text-align:center;">Please click OK to play the tune.</p>';

									DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 200, width: 700,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

										audioContext.resume();

									});

								}

							},250);
						}
	
					}
					else{

						const button = document.getElementById('playbutton');

						if (button){
							button.click();
						}

					}
				}
				else			    
				// Check if the Command key (on Mac) is pressed with the "F" key
			    if (event.metaKey && event.key === 'f') {

			    	//console.log("Got Command F");

			       	event.preventDefault();  // Prevent the default browser find action

			    	var modalDivs = document.querySelector('.modal_flat_main');

			        if ((!modalDivs) && (!gRenderingPDF)){

			        	// Launch find and replace
			        	FindAndReplace();

			        }

			    }
			    else
			    if (event.metaKey && event.key === 'j') {

			    	//console.log("Got Command J");

			       	event.preventDefault();  // Prevent the default browser find action

			    	var modalDivs = document.querySelector('.modal_flat_main');

			        if ((!modalDivs) && (!gRenderingPDF)){

			        	// Launch jump to tune
			        	JumpToTune();

			        }

			    }
			    else
			    // Check if the Command key (on Mac) is pressed with the "\" key
			    if (event.metaKey && event.key === '\\') {

			    	//console.log("Got Command \");

			       	event.preventDefault();  // Prevent the default browser action

			    	var modalDivs = document.querySelector('.modal_flat_main');

			        if ((!modalDivs) && (!gRenderingPDF)){

			        	// Do measure align
			        	AlignMeasures(false);

			        }

			    }
			    else
			    /// Check if the Command key (on Mac) is pressed with the "/" key
			    if (event.metaKey && event.key === '/') {

			    	//console.log("Got Command /");

			       	event.preventDefault();  // Prevent the default browser action

			    	var modalDivs = document.querySelector('.modal_flat_main');

			        if ((!modalDivs) && (!gRenderingPDF)){

			        	// Do build tune set
			        	BuildTuneSet();

			        }

			    }
			    else
			    /// Check if the Command key (on Mac) is pressed with the "S" key
			    if (event.metaKey && event.key === 's') {

			    	//console.log("Got Command S");

			       	event.preventDefault();  // Prevent the default browser action

			    	var modalDivs = document.querySelector('.modal_flat_main');

			        if ((!modalDivs) && (!gRenderingPDF)){

			        	SaveABC_KB();

			        }

			    }

			},true);
		}
		else{
			
			var elem = document.getElementById("saveabcfile");
			elem.title = "Saves the current ABC text to a file (Ctrl+S)"

			document.addEventListener('keydown', function(event) {

				// F3 resets the player
				if (event.key === 'F3') {
					event.preventDefault(); 
					const button = document.querySelector('button.abcjs-midi-reset');
					if (button){
						button.click();
					}
				}
				else
				// F4 toggles the player state
				if (event.key === 'F4') {
					event.preventDefault(); 
					const button = document.querySelector('button.abcjs-midi-start');
					if (button){
						
						button.click();

						setTimeout(function(){

							var audioContext = ABCJS.synth.activeAudioContext();

							if (audioContext && (audioContext.state == 'suspended')){
								
								button.classList.remove("abcjs-loading");

								var modal_msg  = '<p style="text-align:center;font-size:18pt;font-family:helvetica;">Click OK to Play</p>';
								modal_msg += '<p style="font-size:14pt;line-height:18pt;margin-top:36px;text-align:center;">Your browser requires a click before you can use F4 to play the tune.</p>';
								modal_msg += '<p style="font-size:14pt;line-height:18pt;margin-top:18px;text-align:center;">Please click OK to play the tune.</p>';

								DayPilot.Modal.alert(modal_msg,{ theme: "modal_flat", top: 200, width: 700,  scrollWithPage: (AllowDialogsToScroll()) }).then(function(){

									audioContext.resume();

								});

							}

						},100);
					}
					else{
						
						const button = document.getElementById('playbutton');

						if (button){
							button.click();
						}

					}
				}
				else			    
			    // Check if the Control key (on Windows/Linux) is pressed with the "F" key
			    if (event.ctrlKey && event.key === 'f') {

			    	//console.log("Got Control F");

			       	event.preventDefault();  // Prevent the default browser find action

			    	var modalDivs = document.querySelector('.modal_flat_main');

			        if ((!modalDivs) && (!gRenderingPDF)){

			        	// Launch find and replace
			        	FindAndReplace();

			        }

			    }
			    else
			    // Check if the Control key (on Windows/Linux) is pressed with the "J" key
			    if (event.ctrlKey && event.key === 'j') {

			    	//console.log("Got Control J");

			       	event.preventDefault();  // Prevent the default browser find action

			    	var modalDivs = document.querySelector('.modal_flat_main');

			        if ((!modalDivs) && (!gRenderingPDF)){

			        	// Launch jump to tune
			        	JumpToTune();

			        }

			    }
			    else
			   	// Check if the Control key (on Windows/Linux) is pressed with the "\" key
			    if (event.ctrlKey && event.key === '\\') {

			    	//console.log("Got Control \");

			       	event.preventDefault();  // Prevent the default browser action

			    	var modalDivs = document.querySelector('.modal_flat_main');

			        if ((!modalDivs) && (!gRenderingPDF)){

			        	// Do measure align
			        	AlignMeasures(false);

			        }

			    }
			    else
			    // Check if the Control key (on Windows/Linux) is pressed with the "/" key
			    if (event.ctrlKey && event.key === '/') {

			    	//console.log("Got Control /");

			       	event.preventDefault();  // Prevent the default browser action

			    	var modalDivs = document.querySelector('.modal_flat_main');

			        if ((!modalDivs) && (!gRenderingPDF)){

			        	// Do build tune set
			        	BuildTuneSet();

			        }

			    }
			    else
			    /// Check if the Control key (on Windows/Linux) is pressed with the "S" key
			    if (event.ctrlKey && event.key === 's') {

			    	//console.log("Got Control S");

			       	event.preventDefault();  // Prevent the default browser action

			    	  var modalDivs = document.querySelector('.modal_flat_main');

			        if ((!modalDivs) && (!gRenderingPDF)){

			        	SaveABC_KB();
			        	
			        }

			    }

			},true);
		}
	}

	// Is the tool being run from thesource?
	var isRunningFromDisk = false;

	if (window.location.protocol.indexOf("file:")==0){
		isRunningFromDisk = true;
    	console.log("Tool is running from disk.")
	}

    // Setup the context menu
    if (isRunningFromDisk || (!navigator.onLine)){

    	SetupContextMenu(false);

    }
    else{

    	DoVersionCheck();

    }

	//cm1.on('shown', () => console.log('Context menu shown'));

	// Don't count share URL consumption as a tip jar event
	if (!isFromShare){

		gTipJarCount++;

		if (gLocalStorageAvailable){
			localStorage.TipJarCount = gTipJarCount;
		}

	}

	// Occasional reminder
	if ((gTipJarCount == 25) || (gTipJarCount == 75) || (gTipJarCount == 150) || (gTipJarCount == 300)){

		TipJarReminderDialog();

	}

	// Setup MIDI inputs
	if (gAllowMIDIInput){

		initMIDI();

	}

	// Show the help button
	ShowHelpButton();

	// Setup the Raw mode UI if enabled
	SetupRawModeUI();

    // Init the reverb custom impulses database
    initImpulseDB();

    // Init the tune search database
    initTuneDB();

    // Init the samples database
    initSamplesDB();

    // Listen for online state changes

    //if (!gIsQuickEditor){
		window.addEventListener('online', doOnlineCheck);
		window.addEventListener('offline', doOnlineCheck);
	//}
	
    // Fix up the div sizes on iPad two column if coming in from a share
    if (isFromShare && giPadTwoColumn && (!gOpenInEditor)){
		gIsMaximized = false;
		ToggleMaximize();
	}

   	// And set the focus
    gTheABC.focus();

}

//
// Wait for the document to be ready, then fire a function
//

function WaitForReady(fn) {
  if (document.readyState !== 'loading') {
    fn();
    return;
  }
  document.addEventListener('DOMContentLoaded', fn);
}

//
// Wait for the document to be ready, then startup
//

WaitForReady(DoStartup);


